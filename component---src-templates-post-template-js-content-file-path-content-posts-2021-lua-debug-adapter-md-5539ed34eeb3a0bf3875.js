"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6493],{7977:function(n,e,a){a.r(e),a.d(e,{default:function(){return d}});var t=a(1151),s=a(7294);function l(n){const e=Object.assign({p:"p",code:"code",span:"span",h2:"h2",h3:"h3"},(0,t.ah)(),n.components);return s.createElement(s.Fragment,null,s.createElement(e.p,null,"nvim の nvim-dap で lua をデバッグするべく自分で書いてみた。\n手頃なのが見つからなかったので。"),"\n",s.createElement(e.p,null,"https://github.com/ousttrue/my_nvim/blob/master/luada.lua"),"\n",s.createElement(e.p,null,"https://microsoft.github.io/debug-adapter-protocol/ の自前実装。"),"\n",s.createElement(e.p,null,s.createElement(e.code,null,"request")," のうち ",s.createElement(e.code,null,"initialize"),", ",s.createElement(e.code,null,"launch"),", ",s.createElement(e.code,null,"setBreakpoints"),", ",s.createElement(e.code,null,"configurationDone"),", ",s.createElement(e.code,null,"threads"),", ",s.createElement(e.code,null,"stackTrace"),", ",s.createElement(e.code,null,"scopes"),", ",s.createElement(e.code,null,"variables"),", ",s.createElement(e.code,null,"continue"),", ",s.createElement(e.code,null,"next")," を実装した。\n",s.createElement(e.code,null,"event")," のうち ",s.createElement(e.code,null,"initialized"),", ",s.createElement(e.code,null,"exited"),", ",s.createElement(e.code,null,"stopped(breakpoint, step)")," を実装した。"),"\n",s.createElement(e.p,null,"これで最低限の breakpoint を設定して止める、ステップ実行、変数表示までできた。"),"\n",s.createElement(e.p,null,"ログレベルを設定して"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'dap\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set_log_level</span><span class="token punctuation">(</span><span class="token string">\'trace\'</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"nvim の ",s.createElement(e.code,null,':lua print(vim.fn.stdpath "cache")')," に配置される ",s.createElement(e.code,null,"dap.log")," を観察したらだいたいできた。"),"\n",s.createElement(e.p,null,"nvim-dap の設定は以下。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua"><span class="token keyword">local</span> dap <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dap"</span><span class="token punctuation">)</span>\n\n<span class="token keyword">local</span> luada <span class="token operator">=</span> vim<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">nvim_get_var</span><span class="token punctuation">(</span><span class="token string">"my_nvim_root"</span><span class="token punctuation">)</span> <span class="token operator">..</span> <span class="token string">"/luada.lua"</span>\n\n<span class="token comment">-- luada adapter を登録</span>\ndap<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>luada <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token comment">-- debug用のスクリプトを lua で実行し、標準入出力で DAP 通信(JSON-RPC)を開始する</span>\n\ttype <span class="token operator">=</span> <span class="token string">"executable"</span><span class="token punctuation">,</span>\n\tcommand <span class="token operator">=</span> vim<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">nvim_get_var</span><span class="token punctuation">(</span><span class="token string">"my_nvim_root"</span><span class="token punctuation">)</span> <span class="token operator">..</span> <span class="token string">"/neovim/.deps/usr/bin/luajit.exe"</span><span class="token punctuation">,</span>\n\targs <span class="token operator">=</span> <span class="token punctuation">{</span> luada <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token comment">-- filetype lua のときに luada を使用する。launch の引数</span>\ndap<span class="token punctuation">.</span>configurations<span class="token punctuation">.</span>lua <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token punctuation">{</span>\n\t\tname <span class="token operator">=</span> <span class="token string">"lua debug adapter"</span><span class="token punctuation">,</span>\n\t\ttype <span class="token operator">=</span> <span class="token string">"luada"</span><span class="token punctuation">,</span>\n\t\trequest <span class="token operator">=</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>\n\t\tprogram <span class="token operator">=</span> <span class="token string">"${fileDirname}\\\\${file}"</span><span class="token punctuation">,</span>\n\t\targs <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">+---------+    DAP       +--------------------+\n| nvim dap|-------\x3estdin |luajit.exe luada.lua|\n|         |&lt;-------stdout|                    |\n+---------+              +--------------------+\n                                              +==> loadscript(target_lua_script)</code></pre></div>'}}),"\n",s.createElement(e.p,null,"入出力を DAP で占有してしまうので、それでも大丈夫なスクリプトしかデバッグできない。\n(print 関数は、stderr に出力するように退避したので、",s.createElement(e.code,null,"dap.log")," には出る)"),"\n",s.createElement(e.p,null,"素の standalone の lua interpreter で簡単にできる範囲で実装する方針。"),"\n",s.createElement(e.h2,null,"はまりポイント"),"\n",s.createElement(e.h3,null,"Windows 版 は、",s.createElement(e.code,null,"io.stdout")," で ",s.createElement(e.code,null,"CR")," が ",s.createElement(e.code,null,"CRLF")," に変換されるのを回避できない。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">setmode(_fileno(stdout),_O_BINARY);</code></pre></div>'}}),"\n",s.createElement(e.p,null,"を lua で呼び出す手段が無い。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">Content-Leght: 123\\n\\n</code></pre></div>'}}),"\n",s.createElement(e.p,null,"と出力して変換されるのに任せることにした。"),"\n",s.createElement(e.h3,null,"debug.sethook 内で coroutine.yield できない"),"\n",s.createElement(e.p,null,"https://stackoverflow.com/questions/54858455/lua-debug-hooks-seems-to-prevent-the-coroutine-from-working"),"\n",s.createElement(e.p,null,"breakpoint 等によるスクリプト中断を ",s.createElement(e.code,null,"coroutine.yield")," で実装しようとしたのだけど断念した。\n(yield すると ",s.createElement(e.code,null,"suspend")," にならずに ",s.createElement(e.code,null,"dead")," になる)"),"\n",s.createElement(e.p,null,"https://github.com/tomblind/local-lua-debugger-vscode は、coroutine で実装しているような気がするのだが・・・。"),"\n",s.createElement(e.p,null,"yield する代わりに main.loop をネストさせてそこで通信待機させることにした、"),"\n",s.createElement(e.h3,null,"launch で開始すると早すぎる"),"\n",s.createElement(e.p,null,"これは、 ",s.createElement(e.code,null,"nvim-dap")," の実装の問題のような気がするが、\ncapabilities に以下を設定して、 ",s.createElement(e.code,null,"configurationDone")," リクエストで自開始する。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua">supportsConfigurationDoneRequest <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span></code></pre></div>'}}),"\n",s.createElement(e.h2,null,"ToDo"),"\n",s.createElement(e.p,null,"luada リポジトリを作って vscode 拡張としてリリースする。"))}var c=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?s.createElement(e,n,s.createElement(l,n)):l(n)},p=a(8678),o=a(4160),u=a(8736);const r={code:n=>{let{children:e,className:a}=n;return a?s.createElement(u.Z,{className:a},e):s.createElement("code",null,e)}};function i(n){let{data:e,children:a}=n;const l=e.mdx.frontmatter;return s.createElement(p.Z,null,s.createElement("h1",null,l.title),s.createElement("div",{className:"tags-index"},l.tags&&l.tags.length>0&&l.tags.map((n=>s.createElement(o.rU,{to:"/tags/"+n+"/",itemProp:"url"},s.createElement("button",null,n))))),s.createElement(t.Zo,{components:r},a))}function d(n){return s.createElement(i,n,s.createElement(c,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2021-lua-debug-adapter-md-5539ed34eeb3a0bf3875.js.map
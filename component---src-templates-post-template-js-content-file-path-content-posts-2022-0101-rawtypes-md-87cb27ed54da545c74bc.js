"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6100],{9773:function(e,n,t){t.r(n),t.d(n,{default:function(){return E}});var l=t(1151),a=t(7294);function c(e){const n=Object.assign({h1:"h1",p:"p",code:"code",span:"span",ul:"ul",li:"li",h2:"h2"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h1,null,"rawtypes 作ってみる"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"cython")," から ",a.createElement(n.code,null,"pybind11")," に乗り換えを試みたのだが、\n一歩目で躓いた。"),"\n",a.createElement(n.p,null,"不完全型のポインタをそのまま返す方法がわからん。"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = NULL);</code></pre></div>'}}),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"ImGuiContext")," は前方宣言なのです。"),"\n",a.createElement(n.p,null,"自分でやろうと思った。\n",a.createElement(n.code,null,"ctypes")," と併用することを前提にした省機能のバインダー、名付けて ",a.createElement(n.code,null,"rawtypes")," を作ってみよう。\n",a.createElement(n.code,null,"c++")," の関数呼び出しのちょっとしたコード生成をする。\n基本的に ",a.createElement(n.code,null,"ctypes.c_void_p")," で済ます。\n型の宣言が必要なところは、 ",a.createElement(n.code,null,"ctypes.Structure")," により ",a.createElement(n.code,null,"python")," 側で宣言。\n",a.createElement(n.code,null,"c++")," から返す時には、キャストする。"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">return</span> ctypes<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>p<span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>POINTER<span class="token punctuation">(</span>CTYPES_TYPE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre></div>'}}),"\n",a.createElement(n.p,null,"object の所有権 はまじめに探求しない。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"python で作って、python で開放する(cypte.Struct object)"),"\n",a.createElement(n.li,null,"c++ で作ったのを cast して python に渡すが参照のみ(cast された ctypes.Struct)。無効なものにアクセスしないようにプログラマがー注意する"),"\n",a.createElement(n.li,null,"それ以外は値渡し"),"\n"),"\n",a.createElement(n.p,null,"これで十分。\n主要な狙いは、"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"static library のリンク"),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"c++")," 関数の呼び出し"),"\n",a.createElement(n.li,null,"構造体の値渡しを ",a.createElement(n.code,null,"c++")," でラップする"),"\n"),"\n",a.createElement(n.p,null,"で、 ",a.createElement(n.code,null,"ctypes")," の苦手なところだけをやる。\n",a.createElement(n.code,null,"luajit ffi")," に倣ったスタイルでまいる。"),"\n",a.createElement(n.h2,null,"動いた"),"\n",a.createElement(n.p,null,"https://github.com/ousttrue/pydear"),"\n",a.createElement(n.p,null,"ImGui ひととおりできた。\nもうちっとパッケージング(sdist, wheel)を整理したら形が整う。\n",a.createElement(n.code,null,"github action")," で ",a.createElement(n.code,null,"wheel")," をビルドする技もできた(",a.createElement(n.code,null,"windows-64bit + python-3.10")," のみ実験)。"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"str")," と ",a.createElement(n.code,null,"bytes")," の切りわけも ",a.createElement(n.code,null,"C-API")," で書けたし、慣れれば直接 ",a.createElement(n.code,null,"C-API")," を使った方が便利そう。\n",a.createElement(n.code,null,"Py_INCREF")," ",a.createElement(n.code,null,"Py_DECREF")," による参照管理と、",a.createElement(n.code,null,"PyErr_Clear")," 等のエラーハンドリングなど\nを抑えればよさそう。"),"\n",a.createElement(n.h2,null,"pypi"),"\n",a.createElement(n.p,null,"https://pypi.org/project/pydear/"),"\n",a.createElement(n.p,null,"github actions で wheel をビルドして、 pypi にアップロードするところまでできた。\nあと、 ",a.createElement(n.code,null,"sdist")," も作る。"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"pip install pydear")," して使えるようになった。\n使いながら整備していこう。"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"pyi")," が含まれているので、ある程度のインテリセンスが効くところがよい。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"[ ] rawtypes をライブラリとして分離する"),"\n",a.createElement(n.li,null,"[ ] clang.cindex でコード生成した結果を ",a.createElement(n.code,null,"sdist")," に含める"),"\n"))}var r=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(c,e)):c(e)},u=t(8678),s=t(4160),o=t(8736);const p={code:e=>{let{children:n,className:t}=e;return t?a.createElement(o.Z,{className:t},n):a.createElement("code",null,n)}};function m(e){let{data:n,children:t}=e;const c=n.mdx.frontmatter;return a.createElement(u.Z,null,a.createElement("h1",null,c.title),a.createElement("div",{className:"tags-index"},c.tags&&c.tags.length>0&&c.tags.map((e=>a.createElement(s.rU,{to:"/tags/"+e+"/",itemProp:"url"},a.createElement("button",null,e))))),a.createElement(l.Zo,{components:p},t))}function E(e){return a.createElement(m,e,a.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2022-0101-rawtypes-md-87cb27ed54da545c74bc.js.map
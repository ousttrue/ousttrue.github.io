{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-07-cmake-find-package-md-379317b72876db214805.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,KAAM,SACLC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBN,EAAYG,KAAM,CAC3CI,wBAAyB,CACvBC,OAAQ,g4JAGd,CAKA,MAJA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWX,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCVA,MAAMM,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMY,EAAKC,IAAIC,YAAYC,OAAQf,EAAAA,cAAoBgB,EAAAA,GAAa,CAC7IjB,WAAYA,GACXQ,GACL,CACe,SAASU,EAAiBxB,GACvC,OAAOO,EAAAA,cAAoBU,EAAcjB,EAAOO,EAAAA,cAAoBkB,EAAqBzB,GAC3F,C","sources":["webpack:///./content/posts/2017/07/cmake_find_package.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">cmake の FIND_PACKAGE わかりずらいよ。もやもやするものがある。\\n\\nGLUT の例\\n検証用に小さい例を作ってみた。\\n\\nhttps://stackoverflow.com/questions/9460242/how-to-compile-glut-opengl-project-with-cmake-and-kdevelop-in-linux\\n\\nこれを参考にしたのだけどちょっと手直しした。\\n\\nADD_EXECUTABLE の前に INCLUDE_DIRECTORIES する必要がある\\nOPENGL_INCLUDE_DIRS じゃなくて OPENGL_INCLUDE_DIR\\nGLUT_INCLUDE_DIRS じゃなくて GLUT_INCLUDE_DIR\\n\\nLinux とかだと distribution が cmake ファイルを管理してたりするかもしれん。\\nmain.cpp\\n\\ncpp\\n#include &lt;GL/glut.h>\\n\\nvoid display(void)\\n{\\n}\\n\\nint main(int argc, char *argv[])\\n{\\n    glutInit(&amp;argc, argv);\\n    glutCreateWindow(argv[0]);\\n    glutDisplayFunc(display);\\n    glutMainLoop();\\n    return 0;\\n}\\n\\n\\ncmake\\nCMakeLists.txt\\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8)\\nPROJECT(hello)\\n\\nFIND_PACKAGE(OpenGL REQUIRED)\\nMESSAGE(STATUS ${OPENGL_LIBRARIES})\\nMESSAGE(STATUS ${OPENGL_INCLUDE_DIR})\\n\\nFIND_PACKAGE(GLUT REQUIRED)\\nMESSAGE(STATUS ${GLUT_LIBRARY})\\nMESSAGE(STATUS ${GLUT_INCLUDE_DIR})\\n\\nINCLUDE_DIRECTORIES(\\n    ${OPENGL_INCLUDE_DIR}\\n    ${GLUT_INCLUDE_DIR}\\n    )\\nADD_DEFINITIONS(\\n    -DFREEGLUT_LIB_PRAGMAS=0 # avoid pragma\\n    )\\nADD_EXECUTABLE(hello\\n    main.cpp\\n    )\\nTARGET_LINK_LIBRARIES(hello\\n    ${OPENGL_LIBRARIES}\\n    ${GLUT_LIBRARY}\\n    )\\n\\n\\n実行時のメッセージ\\n\\n\\n-- glu32opengl32\\n--\\n-- D:/vcpkg/installed/x64-windows/lib/freeglut.lib\\n-- D:/vcpkg/installed/x64-windows/include\\n-- Configuring done\\n-- Generating done\\n\\n\\nなぜか vcpkg の freeglut を発見してくれた。\\nvcpkg が cmake の探索パスを追加しているぽい。レジストリとかか？\\nまず、第 1 に\\nFIND_PACKAGE の結果として如何なる変数が増えるのかが分からん。\\n\\nhttps://cmake.org/Wiki/CMake:How_To_Find_Libraries#How_package_finding_works\\n\\n慣例では、下記のようになっている。\\n\\n\\n_FOUND\\n_INCLUDE_DIRS or _INCLUDES\\n_LIBRARIES or _LIBRARIES or _LIBS\\n_DEFINITIONS\\n\\n\\n強制じゃなくて規約なので各種表記ブレの余地が危険を醸し出している。\\n大文字小文字(find_package(glut)に対して${GLUT_FOUND})、複数単数(DIR, DIRS)、短縮(LIBRARIES, LIBS)とか一貫性が。はまりそうだー。\\nとりあえあず、標準のパッケージに関してはコマンドから問い合わせることができる。\\n\\n\\n> cmake --help-module OpenGL\\n\\n\\n\\nFindOpenGL\\n----------\\n\\nFindModule for OpenGL and GLU.\\n\\nIMPORTED Targets\\n^^^^^^^^^^^^^^^^\\n\\nThis module defines the ``IMPORTED`` targets:\\n\\n``OpenGL::GL``\\n Defined if the system has OpenGL.\\n``OpenGL::GLU``\\n Defined if the system has GLU.\\n\\nResult Variables\\n^^^^^^^^^^^^^^^^\\n\\nThis module sets the following variables:\\n\\n``OPENGL_FOUND``\\n True, if the system has OpenGL.\\n``OPENGL_XMESA_FOUND``\\n True, if the system has XMESA.\\n``OPENGL_GLU_FOUND``\\n True, if the system has GLU.\\n``OPENGL_INCLUDE_DIR``\\n Path to the OpenGL include directory.\\n``OPENGL_LIBRARIES``\\n Paths to the OpenGL and GLU libraries.\\n\\nIf you want to use just GL you can use these values:\\n\\n``OPENGL_gl_LIBRARY``\\n Path to the OpenGL library.\\n``OPENGL_glu_LIBRARY``\\n Path to the GLU library.\\n\\nOSX Specific\\n^^^^^^^^^^^^\\n\\nOn OSX default to using the framework version of OpenGL. People will\\nhave to change the cache values of OPENGL_glu_LIBRARY and\\nOPENGL_gl_LIBRARY to use OpenGL with X11 on OSX.\\n\\n> cmake --help-module GLUT\\nFindGLUT\\n--------\\n\\ntry to find glut library and include files.\\n\\nIMPORTED Targets\\n^^^^^^^^^^^^^^^^\\n\\nThis module defines the ``IMPORTED`` targets:\\n\\n``GLUT::GLUT``\\n Defined if the system has GLUT.\\n\\nResult Variables\\n^^^^^^^^^^^^^^^^\\n\\nThis module sets the following variables:\\n\\n::\\n\\n GLUT_INCLUDE_DIR, where to find GL/glut.h, etc.\\n GLUT_LIBRARIES, the libraries to link against\\n GLUT_FOUND, If false, do not try to use GLUT.\\n\\nAlso defined, but not for general use are:\\n\\n::\\n\\n GLUT_glut_LIBRARY = the full path to the glut library.\\n GLUT_Xmu_LIBRARY  = the full path to the Xmu library.\\n GLUT_Xi_LIBRARY   = the full path to the Xi Library.\\n\\nという感じでcmakeに最初から入っているタイプのモジュールはわかる。\\nちなみにFIND_PACKAGEの引数は大文字小文字を区別しないが、結果はただの変数なので区別することに注意。\\n${OPENGL_GL_LIBRARY}とかだめですから。\\n不安があるときはMESSAGEでプリントデバッグするのが手堅い。\\nMESSAGE(STATUS ${OPENGL_gl_LIBRARY})\\n\\nVisualStudioなのでリンクをDebug, Releaseで振り分けたいんだけど\\nlib/freeglut.libとdebug/lib/freeglutd.libとか。\\n上の例は問答無用でRelease版にリンクされる(glutの場合は、別にfreeglutのデバッグはしないのでそれはそれでよかったりもするが・・・)。プラグマでリンクすればいいやんとなるのだが、link_directoriesにはDebug, Releaseの振り分けはない。Release決め打ちの方がましである。\\nTARGET_LINK_LIBRARIESには振り分け機能が実装されている。\\nTARGET_LINK_LIBRARIES(hello\\n    debug path_to_freeglutd.lib\\n    optimized path_to_freeglut.lib\\n    )\\n\\nという風に記述できる。で、これを如何にしてFIND_PACKAGEと連携させるのか。\\n例としてfreeglut.libとfreeglutd.lib。\\nFIND_PACKAGE(OpenGL REQUIRED)\\nMESSAGE(STATUS ${OPENGL_LIBRARIES})\\nFIND_PACKAGE(GLUT)\\nMESSAGE(STATUS ${GLUT_LIBRARY})\\nSTRING(REPLACE lib/freeglut.lib debug/lib/freeglutd.lib GLUT_LIBRARY_DEBUG ${GLUT_LIBRARY})\\nSET(OPENGL_LIBS\\n    general ${OPENGL_LIBRARIES}\\n    optimized ${GLUT_LIBRARY}\\n    debug ${GLUT_LIBRARY_DEBUG}\\n    )\\nTARGET_LINK_LIBRARIES(hello\\n    ${OPENGL_LIBS}\\n    )\\n\\nインストールしたパッケージがFindされないんだけど\\nalembicなどvcpkgでインストールしたパッケージをVCPKG_DIR/installed/x64-windowsから探索して欲しいのだが方法がよくわからない。\\n\\nCMakeを使ってみた (7) find_packageとpkg_check_modulesによるライブラリ探索\\n\\nあとで</code></pre></div>\"\n    }\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/07/cmake_find_package.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-0115-pybullet-md-82ea064b70993fa0504c.js","mappings":"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","sources":["webpack:///./content/posts/2022/0115-pybullet.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    span: \"span\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"ExampleBrowser を読んでいる\"), \"\\n\", React.createElement(_components.p, null, \"fork して改造しながら読んでいる。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/bullet3\"), \"\\n\", React.createElement(_components.p, null, \"やっと構造がわかってきた。\\nコードはディレクトリに別れているのだけど、\\nCMake を整理しながら推進。\"), \"\\n\", React.createElement(_components.p, null, \"ざっくりとこんな感じか。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">rankdir=\\\"BT\\\"\\n\\nExampleBrowser -> SimpleOpenGL3App -> gwen -> \\\"Select DEMO\\\";\\n</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"で、この SimpleOpenGL3App を glfw に、gwen を imgui に置き換えてコードを単純化している。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">bulletphysic</code>\"\n    }\n  }), \" の マルチクライアント システム ぽい \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SharedMemory</code>\"\n    }\n  }), \" を解読したい。\\n各 Demo は、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CommonExampleInterface</code>\"\n    }\n  }), \" できれいに分離されている。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SharedMemory</code>\"\n    }\n  }), \" と各クライアントの通信内容と \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">OpenGL</code>\"\n    }\n  }), \" の繋ぎの部分が知りたい。\"), \"\\n\", React.createElement(_components.p, null, \"この pybullet の下地の部分がシーン同期システムに使えないかと。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Unity</code>\"\n    }\n  }), \" とかだとノードに剛体をくっつけるのだけど、\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">bullet</code>\"\n    }\n  }), \" 的には、剛体に \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Mesh</code>\"\n    }\n  }), \" をつける考えになるような。\"), \"\\n\", React.createElement(_components.h2, null, \"20220118\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">各デモ</code>\"\n    }\n  }), \" と \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Physics</code>\"\n    }\n  }), \" と \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Renderer</code>\"\n    }\n  }), \" を分離できればよいのだが。\\nわりと規模が大きい。\"), \"\\n\", React.createElement(_components.h2, null, \"20220122\"), \"\\n\", React.createElement(_components.p, null, \"だいぶ読んだ。\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">GLInstancingRenderer</code>\"\n    }\n  }), \" がレンダラー本体。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">btIDebugDraw</code>\"\n    }\n  }), \" とは別に普通の Renderer が実装されていてこっちを解読したい。\\nbtIDebugDraw だと wireframe になるのかな。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2022/0115-pybullet.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","span","h2","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
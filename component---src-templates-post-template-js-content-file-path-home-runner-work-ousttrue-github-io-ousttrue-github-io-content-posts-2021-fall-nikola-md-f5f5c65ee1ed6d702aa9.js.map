{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-fall-nikola-md-f5f5c65ee1ed6d702aa9.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mBAAoB,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,0BAA2B,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,quJACvR,CAKA,MAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCTA,SAASY,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOJ,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMK,EAAKE,IAAIC,YAAYC,OAAQT,EAAAA,cAAoBU,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBpB,GACvC,OAAOS,EAAAA,cAAoBG,EAAcZ,EAAOS,EAAAA,cAAoBY,EAAqBrB,GAC3F,C,4HCuBO,MAAMsB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBf,GAC/B,MAAMgB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfd,EACFA,EAAWgB,GAGb,IAAIA,KAAsBhB,IAChC,CAACgB,EAAmBhB,GACzB,CAGA,MAAMiB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACX,EAAU,SAAEO,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAflB,EACHA,EAAW,CAAC,GACZA,GAAciB,EAEJF,EAAiBf,GAG5B,gBACLc,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2021/fall/nikola.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"また生成システムを変えてみる。\"), \"\\n\", React.createElement(_components.p, null, \"https://getnikola.com/\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\n# init\\n\\n\\n> pip install \\\"Nikola[extras]\\\"\\n> nikola init .\\n\\n\\nhttps://github.com/github/gitignore/blob/master/community/Python/Nikola.gitignore\\n.gitignore\\n# nikola\\n.doit.db*\\n*.pyc\\n/cache/\\n/output/\\n\\n\\n`conf.py`\\npy\\n# とりあえず\\nPOSTS = (\\n    (\\\"content/*.rst\\\", \\\"posts\\\", \\\"post.tmpl\\\"),\\n    (\\\"content/*.md\\\", \\\"posts\\\", \\\"post.tmpl\\\"),\\n    (\\\"content/*.txt\\\", \\\"posts\\\", \\\"post.tmpl\\\"),\\n    (\\\"content/*.html\\\", \\\"posts\\\", \\\"post.tmpl\\\"),\\n)\\n\\n\\n\\n> nikola auto --browser\\n\\n\\nなんとなくプレビューできた。\\nええやん。\\n\\n# zola から記事移植\\n\\n`POSTS` のパス調整でもうできているのだけど、 `frontmatter` の非互換がある。\\nそれを調べる。\\n\\nhttps://getnikola.com/handbook.html#metadata-fields\\n\\n* `taxonomies.tags` を `tags` に書き換える\\n\\n小文字強制\\npy\\nMETADATA_VALUE_MAPPING = {\\n    \\\"toml\\\": {\\n        \\\"tags\\\": lambda ls: [x.lower() for x in ls]\\n     }\\n}\\n\\n# github action で gh-pages\\n\\n`.github/workflows/nikola.yml`\\n\\nこんなもんかな。\\n\\nyml\\nname: Nikola\\n\\non:\\n  push:\\n    branches:\\n      - nikola\\n\\njobs:\\n  build:\\n    runs-on: ubuntu-latest\\n    env:\\n      ACTIONS_ALLOW_UNSECURE_COMMANDS: true\\n    steps:\\n      - uses: actions/checkout@v1\\n      - run: pip install \\\"Nikola[extras]\\\"\\n      - name: build\\n        run: nikola build\\n      - name: Deploy\\n        uses: peaceiris/actions-gh-pages@v3\\n        with:\\n          github_token: ${{ secrets.GITHUB_TOKEN }}\\n          publish_dir: ./output\\n\\n\\n\\n## 動作\\n\\nhttps://getnikola.com/internals.html\\n\\n## yapsy\\n\\nhttps://getnikola.com/extending.html\\n\\n`nikola/plugin_categories.py`\\n\\nhttp://yapsy.sourceforge.net/\\n\\n## build\\n\\n[DoIt](https://pydoit.org/) で駆動されるらしい。\\n\\nnikola は DoIt の task を生成する。\\n\\n* https://schettino72.wordpress.com/2008/04/14/doit-a-build-tool-tale/\\n* [タスクランナー Doit を使ってみよう](https://qiita.com/iisaka51/items/052ffbd9ab3b12504228)\\n\\n## Theme\\n\\n* https://getnikola.com/creating-a-theme.html\\n* https://getnikola.com/theming.html\\n* [Nikola を windows でやるぞ 2](https://iuk.hateblo.jp/entry/2016/10/28/040908)\\n\\n\\n* `themes/custom` フォルダを作る\\n* `conf.py` の `THEME = \\\"custom\\\"`\\n\\n最低限\\n\\n| path                   | url | 必須   |                                                             |\\n|------------------------|-----|--------|-------------------------------------------------------------|\\n| bundles                |     | 必須   | 空ファイルでもOk。copy from nikola/data/themes/base/bundles |\\n| assets                 |     | option | copy from nikola/data/themes/base/assets                    |\\n| templates/index.tmpl   | /   | 必須   | top page                                                    |\\n| templates/post.tmpl    |     | 必須   | 各記事                                                      |\\n| templates/page.tmpl    |     | 必須   | 各記事                                                      |\\n| templates/list.tmpl    |     | 必須   | archive.html                                                |\\n| templates/archive.tmpl |     | 必須   | {YEARE}/ archive.html から 年別 リンクをたどったところ      |\\n| templates/tags.tmpl    |     | 必須   | categories/index.html                                       |\\n| templates/tag.tmpl     |     | 必須   | categories/{TAG_NAME}/index.html                            |\\n| templates/gallery.tmpl |     | 必須   |                                                             |\\n| templates/listing.tmpl |     | 必須   |                                                             |\\n| THEME_NAME.theme       |     | option | Theme meta files                                            |\\n| templates/base.tmpl    |     | option | すべての tmpl が継承することで一貫した見た目にする          |\\n\\n### bundles and assets\\n\\n`lib/python3.9/site-packages/nikola/data/themes/base` からコピーするとよさそう。\\n\\n### base.tmpl\\n\\nhtml\\n<html>\\n\\n<body>\\n    <h1 id=\\\"brand\\\">\\n        <a href=\\\"{{ _link('root', None, lang) }}\\\" title=\\\"{{ blog_title|e }}\\\" rel=\\\"home\\\">\\n            <span id=\\\"blog-title\\\">{{ blog_title|e }}</span>\\n        </a>\\n    </h1>\\n    <hr>\\n    <main id=\\\"content\\\">\\n        {% block content %}{% endblock %}\\n    </main>\\n</body>\\n\\n</html>\\n\\n\\n### index.tmpl\\n\\nhtml\\n{% extends 'base.tmpl' %}\\n\\n{% block content %}\\n{% if prevlink %}\\n<a href=\\\"{{ prevlink }}\\\" rel=\\\"prev\\\">prev</a>\\n{% endif %}\\n\\n{% for post in posts %}\\n<h1 class=\\\"p-name entry-title\\\">\\n    <a href=\\\"{{ post.permalink() }}\\\" class=\\\"u-url\\\">{{ post.title()|e }}</a>\\n</h1>\\n{% endfor %}\\n\\n{% if nextlink %}\\n<a href=\\\"{{ nextlink }}\\\" rel=\\\"next\\\">next</a>\\n{% endif %}\\n{% endblock %}\\n\\n\\n### post.tmpl\\n\\nhtml\\n{% extends 'base.tmpl' %}\\n\\n{% block content %}\\n<h1 class=\\\"p-name entry-title\\\" itemprop=\\\"headline name\\\">\\n    <a href=\\\"{{ post.permalink() }}\\\" class=\\\"u-url\\\">{{ post.title()|e}}</a>\\n</h1>\\n{{ post.text() }}\\n{% endblock %}\\n\\n\\n### THEME_NAME.theme\\n\\n\\n[Theme]\\nengine = jinja\\n\\n\\n## vscode\\n\\n`settings.json`\\n\\njson\\n    \\\"files.associations\\\": {\\n        \\\"*.tmpl\\\": \\\"html\\\",\\n    },\\n\\n\\n## ToDo\\n\\n* Theme 調整\\n* TOC\\n* syntax highlight\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/fall/nikola.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
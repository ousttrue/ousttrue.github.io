"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8199],{9773:function(e,t,n){n.r(t),n.d(t,{default:function(){return d}});var a=n(1151),l=n(7294);function c(e){const t=Object.assign({h1:"h1",p:"p",span:"span",ul:"ul",li:"li",h2:"h2",a:"a",input:"input"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.h1,null,"rawtypes 作ってみる"),"\n",l.createElement(t.p,null,l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cython</code>'}})," から ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pybind11</code>'}})," に乗り換えを試みたのだが、\n一歩目で躓いた。"),"\n",l.createElement(t.p,null,"不完全型のポインタをそのまま返す方法がわからん。"),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = NULL);</code></pre></div>'}}),"\n",l.createElement(t.p,null,l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ImGuiContext</code>'}})," は前方宣言なのです。"),"\n",l.createElement(t.p,null,"自分でやろうと思った。\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ctypes</code>'}})," と併用することを前提にした省機能のバインダー、名付けて ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rawtypes</code>'}})," を作ってみよう。\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++</code>'}})," の関数呼び出しのちょっとしたコード生成をする。\n基本的に ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ctypes.c_void_p</code>'}})," で済ます。\n型の宣言が必要なところは、 ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ctypes.Structure</code>'}})," により ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">python</code>'}})," 側で宣言。\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++</code>'}})," から返す時には、キャストする。"),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">return</span> ctypes<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>p<span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>POINTER<span class="token punctuation">(</span>CTYPES_TYPE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre></div>'}}),"\n",l.createElement(t.p,null,"object の所有権 はまじめに探求しない。"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"python で作って、python で開放する(cypte.Struct object)"),"\n",l.createElement(t.li,null,"c++ で作ったのを cast して python に渡すが参照のみ(cast された ctypes.Struct)。無効なものにアクセスしないようにプログラマがー注意する"),"\n",l.createElement(t.li,null,"それ以外は値渡し"),"\n"),"\n",l.createElement(t.p,null,"これで十分。\n主要な狙いは、"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"static library のリンク"),"\n",l.createElement(t.li,null,l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++</code>'}})," 関数の呼び出し"),"\n",l.createElement(t.li,null,"構造体の値渡しを ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++</code>'}})," でラップする"),"\n"),"\n",l.createElement(t.p,null,"で、 ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ctypes</code>'}})," の苦手なところだけをやる。\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">luajit ffi</code>'}})," に倣ったスタイルでまいる。"),"\n",l.createElement(t.h2,null,"動いた"),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://github.com/ousttrue/pydear"},"https://github.com/ousttrue/pydear")),"\n",l.createElement(t.p,null,"ImGui ひととおりできた。\nもうちっとパッケージング(sdist, wheel)を整理したら形が整う。\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">github action</code>'}})," で ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">wheel</code>'}})," をビルドする技もできた(",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">windows-64bit + python-3.10</code>'}})," のみ実験)。"),"\n",l.createElement(t.p,null,l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">str</code>'}})," と ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">bytes</code>'}})," の切りわけも ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">C-API</code>'}})," で書けたし、慣れれば直接 ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">C-API</code>'}})," を使った方が便利そう。\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Py_INCREF</code>'}})," ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Py_DECREF</code>'}})," による参照管理と、",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">PyErr_Clear</code>'}})," 等のエラーハンドリングなど\nを抑えればよさそう。"),"\n",l.createElement(t.h2,null,"pypi"),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://pypi.org/project/pydear/"},"https://pypi.org/project/pydear/")),"\n",l.createElement(t.p,null,"github actions で wheel をビルドして、 pypi にアップロードするところまでできた。\nあと、 ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sdist</code>'}})," も作る。"),"\n",l.createElement(t.p,null,l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pip install pydear</code>'}})," して使えるようになった。\n使いながら整備していこう。"),"\n",l.createElement(t.p,null,l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pyi</code>'}})," が含まれているので、ある程度のインテリセンスが効くところがよい。"),"\n",l.createElement(t.ul,{className:"contains-task-list"},"\n",l.createElement(t.li,{className:"task-list-item"},l.createElement(t.input,{type:"checkbox",disabled:!0})," ","rawtypes をライブラリとして分離する"),"\n",l.createElement(t.li,{className:"task-list-item"},l.createElement(t.input,{type:"checkbox",disabled:!0})," ","clang.cindex でコード生成した結果を ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sdist</code>'}})," に含める"),"\n"))}var s=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.ah)(),e.components);return t?l.createElement(t,e,l.createElement(c,e)):c(e)},r=n(8678),o=n(1883),u=n(8838);const p={code:e=>{let{children:t,className:n}=e;return n?l.createElement(u.Z,{className:n},t):l.createElement("code",null,t)}};function m(e){let{data:t,children:n}=e;const c=t.mdx.frontmatter;return l.createElement(r.Z,null,l.createElement("h1",null,c.title),l.createElement("div",{className:"tags-index"},c.tags&&c.tags.length>0&&c.tags.map((e=>l.createElement(o.rU,{to:"/tags/"+e+"/",itemProp:"url"},l.createElement("button",null,e))))),l.createElement(a.Zo,{components:p},n))}function d(e){return l.createElement(m,e,l.createElement(s,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-0101-rawtypes-md-111c7a7ef71ebe5668e6.js.map
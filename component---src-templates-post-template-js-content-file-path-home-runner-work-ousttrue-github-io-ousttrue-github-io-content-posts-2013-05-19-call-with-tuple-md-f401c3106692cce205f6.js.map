{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-05-19-call-with-tuple-md-f401c3106692cce205f6.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,uDAAwD,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAC5LI,wBAAyB,CACvBC,OAAQ,gKAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,8HAA+H,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAC5NI,wBAAyB,CACvBC,OAAQ,6qBAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,qDAAsD,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CACnJI,wBAAyB,CACvBC,OAAQ,g4BAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,sFAAuF,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CACpLI,wBAAyB,CACvBC,OAAQ,+6BAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CACvFI,wBAAyB,CACvBC,OAAQ,0EAER,uBAAwBF,EAAAA,cAAoBP,EAAYI,KAAM,CAChEI,wBAAyB,CACvBC,OAAQ,sDAER,iFAAkF,KAAMF,EAAAA,cAAoBP,EAAYI,KAAM,CAChII,wBAAyB,CACvBC,OAAQ,kTAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,6EAA8E,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAC3KI,wBAAyB,CACvBC,OAAQ,sRAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,aAAc,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAC3GI,wBAAyB,CACvBC,OAAQ,iOAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,kEAAmE,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAChKI,wBAAyB,CACvBC,OAAQ,gPAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,6DAA8D,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAC3JI,wBAAyB,CACvBC,OAAQ,wRAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,uCAAwC,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CACrII,wBAAyB,CACvBC,OAAQ,+PAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,iJACrD,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCvDA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBa,EAAAA,EAAQ,KAAMb,EAAAA,cAAoB,KAAM,KAAMY,EAAKE,IAAIC,YAAYC,OAAQhB,EAAAA,cAAoBiB,EAAAA,GAAa,CACrIlB,WAAYA,GACXQ,GACL,CACe,SAASW,EAAiB1B,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoBmB,EAAqB3B,GAC3F,C","sources":["webpack:///./content/posts/2013/05/19/call-with-tuple.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"msgpack-rpc-asio の関数登録と実行\\nmsgpack-rpc のリクエストは、によると\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">[type, msgid, method, params]</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"という形式なので method 名を std::string として params を std::tuple として得られる。\\nこれをサーバ側で如何に呼び出すかについて。\\n単純な実装だと以下のようにメソッド名をキーにして分岐することになる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">int and(int, int);\\nclass dispatcher { void dispatch(int msgid, const std::string &amp;method,\\nconst msgpack::object &amp;params) { if(method==“add”){ // 引数展開\\nstd::tuple t; params.convert(&amp;t);\\n// 関数実行\\nint result=add(std::get&lt;0&gt;(t), std::get&lt;1&gt;(t));\\n\\n// 結果のパッキング\\n// response [type, msgid, error, result]\\nmsgpack::sbuffer response;\\nmsgpack::packer&lt;msgpack::sbuffer&gt; pk(&amp;response);\\npk.pack_array(4)\\npk.pack(1);\\npk.pack(msgid);\\npk.pack_nil();\\npk.pack(result);\\n\\n// responseを送り返す\\n\\n\\n} else{ throw “unknown func”; }\\n\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"引数展開、関数呼び出し、結果のパッキングと一連の操作を定型処理として括りだすと下記のように書ける。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">// ２引数展開用 class dispatcher { // 実行 void dispatcher::dispatch(int\\nmsgid, const std::string &amp;method, const msgpack::object &amp;params) {\\nif(method==“add”){ msgpack::sbuffer response=unpack_exec_pack(msgid,\\nadd, params);\\n// responseを送り返す\\n\\n\\n} else{ throw “unknown func”; }\\n\\n}\\n// ヘルパー template msgpack::sbuffer unpack_exec_pack(int msgid,\\nR(*f)(A1, A2), const msgpack::object &amp;params) { // 引数展開 std::tuple\\nt; params.convert(&amp;t);\\n// 関数実行\\nR result=add(std::get&lt;0&gt;(t), std::get&lt;1&gt;(t));\\n\\n// 結果のパッキング\\n// response [type, msgid, error, result]\\nmsgpack::sbuffer response;\\nmsgpack::packer&lt;msgpack::sbuffer&gt; pk(&amp;response);\\npk.pack_array(4)\\npk.pack(1);\\npk.pack(msgid);\\npk.pack_nil();\\npk.pack(result);\\n\\nreturn response;\\n\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"１引数関数から９引数くらいまでと返り値 void 版を作ってやればだいたいの関数を登録することができる。\\nさらに 関数の登録と実行を分けるべく次のように拡張した。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">class\\ndispatcher { std::map m_map;\\n// 実行 void dispatch(int msgid, const std::string &amp;method, const\\nmsgpack::object &amp;params) { std::function f=m_map.find(method);\\nif(f!=m_map.end()){ // 関数実行 msgpack::sbuffer resonse=f(msgid,\\nparams);\\n// responseを送り返す\\n\\n\\n} else{ throw “unknown func”; }\\n\\n}\\n// 登録 template void add_handler(const std::string &amp;method, R(*f)(A1,\\nA2)) {\\nm_map[method]=f-&gt;msgpack::sbuffer{\\n// 引数展開\\nstd::tuple&lt;A1, A2&gt; t;\\nparams.convert(&amp;t);\\n\\n// 実行\\nR result=f(std::get&lt;0&gt;(t), std::get&lt;1&gt;(t));\\n\\n// 結果のパッキング\\n// response [type, msgid, error, result]\\nmsgpack::sbuffer response;\\nmsgpack::packer&lt;msgpack::sbuffer&gt; pk(&amp;response);\\npk.pack_array(4)\\npk.pack(1);\\npk.pack(msgid);\\npk.pack_nil();\\npk.pack(result);\\n\\nreturn response;\\n\\n\\n};\\n\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">msgpack->引数展開->c++関数呼び出し->msgpack</code>\"\n    }\n  }), \" への一連の操作を 同一のシグネチャの \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">std::function</code>\"\n    }\n  }), \" に封じ込めることができる。\\n次にこれを関数ポインタ以外に関数オブジェクトを受け付けるように拡張したい。\\nまず、std::function から実装。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">c++   // std::function用   template&lt;typname R, typename A1, typename A2>   void add_handler(contt std::string &amp;method, std::function&lt;R(A1, A2)> f)   {     // 中身同じ   }</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"呼び出し時に std::function を経由するようにすればあらゆる関数呼び出しを登録できる。\\n例えば、ラムダ関数も以下のように登録できる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">c++ // ラムダ登録 dispatcher d; d.add_handler(\\\"add\\\",      std::function&lt;int(int, int)>(       [](int a, int b)->int{          return a+b;        }));</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"しかし、どうせなら\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">c++ dispatcher d; d.add_handler(\\\"add\\\",      [](int a, int b)->int{        return a+b;      });</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"と書きたい。\\nとなると下記のような登録関数を書かねばならぬが関数のシグネチャがわからないので中身を記述することができない。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">// ラムダの登録\\ntemplate&lt;typname F&gt;\\nvoid add_handler(const std::string &amp;method, F f)   {     // 型がわからぬ   }</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"ここで関数オブジェクトの operator()へのポインタを型推論することで F のシグネチャを得ることができる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">template void add_handler(const std::string &amp;method, F f,\\nR(C::*)(A1, A2)const) { // 中身同じ }\\n// ラムダの登録 // std::functionも受けられる // std::bindは無理だった //</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"operator()がひとつしかない関数オブジェクトを受け付けられる？\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">template\\nvoid add_handler(const std::string &amp;method, F f) {\\n// 上の関数で型推論させる\\nadd_handler(method, f, &amp;F::operator()); }</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"これでめでたくラムダも直接登録できるようになった。\\nただし、operator()のオーバーロードが解決できないらしく std::bind が登録できない。\\nstd::bind に関しては、ラムダで代用できるし std::function でラップできるのでおいておくことにした。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/05/19/call-with-tuple.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-06-python-asyncio-md-85d46ef7cc56624d6ec8.js","mappings":"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","sources":["webpack:///./content/posts/2017/06/python_asyncio.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Python の Version3.4 から始まった asyncio 周りについてのメモ。\\n環境は、Windows10 上の python3.6(64bit)。\"), \"\\n\", React.createElement(_components.p, null, \"Version\\nPython3.4\"), \"\\n\", React.createElement(_components.p, null, \"asyncio\\nyield from\"), \"\\n\", React.createElement(_components.p, null, \"Python3.5\"), \"\\n\", React.createElement(_components.p, null, \"async def\\nawait\"), \"\\n\", React.createElement(_components.p, null, \"EventLoop\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://docs.python.org/3/library/asyncio-eventloop.html\"\n  }, \"https://docs.python.org/3/library/asyncio-eventloop.html\")), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> asyncio\\nloop<span class=\\\"token operator\\\">=</span>asyncio<span class=\\\"token punctuation\\\">.</span>get_event_loop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\"># &lt;_WindowsSelectorEventLoop running=False closed=False debug=False></span>\\n\\nloop<span class=\\\"token punctuation\\\">.</span>run_forever<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'done'</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"ただし永遠(forever)走り続けるのでプロセスを kill しないと止まらず。\\nWindows 向けの loop\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://docs.python.org/3/library/asyncio-eventloops.html#asyncio.ProactorEventLoop\"\n  }, \"https://docs.python.org/3/library/asyncio-eventloops.html#asyncio.ProactorEventLoop\")), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> asyncio\\n<span class=\\\"token keyword\\\">import</span> sys\\n\\n<span class=\\\"token keyword\\\">if</span> sys<span class=\\\"token punctuation\\\">.</span>platform <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'win32'</span><span class=\\\"token punctuation\\\">:</span>\\n    loop <span class=\\\"token operator\\\">=</span> asyncio<span class=\\\"token punctuation\\\">.</span>ProactorEventLoop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\"># &lt;ProactorEventLoop running=False closed=False debug=False></span>\\n    asyncio<span class=\\\"token punctuation\\\">.</span>set_event_loop<span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n    loop <span class=\\\"token operator\\\">=</span> asyncio<span class=\\\"token punctuation\\\">.</span>get_event_loop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"以降、loop を得るコードを省略。\\nEventLoop に関数を投入する\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    loop<span class=\\\"token punctuation\\\">.</span>stop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># 停止</span>\\n\\nloop<span class=\\\"token punctuation\\\">.</span>call_soon<span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token punctuation\\\">)</span>\\nloop<span class=\\\"token punctuation\\\">.</span>run_forever<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'done'</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"asyncio.get_event_loop で loop を取得。loop.call_soon で loop に関数を投入できる。\\n投入された関数は、loop.run_forever で消化される。\\nついでに、loop.stop で run_forever から抜けることができる。\\nEventLoop に generator を投入する\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">gen</span><span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token punctuation\\\">.</span>time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> <span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token punctuation\\\">.</span>time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">yield</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'done'</span><span class=\\\"token punctuation\\\">)</span>\\n    loop<span class=\\\"token punctuation\\\">.</span>stop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\nasyncio<span class=\\\"token punctuation\\\">.</span>ensure_future<span class=\\\"token punctuation\\\">(</span>gen<span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\nasyncio<span class=\\\"token punctuation\\\">.</span>ensure_future<span class=\\\"token punctuation\\\">(</span>gen<span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\nloop<span class=\\\"token punctuation\\\">.</span>run_forever<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\na <span class=\\\"token number\\\">534341.609</span>\\na <span class=\\\"token number\\\">0</span> <span class=\\\"token number\\\">534341.609</span>\\nb <span class=\\\"token number\\\">534341.609</span>\\nb <span class=\\\"token number\\\">0</span> <span class=\\\"token number\\\">534341.609</span>\\na <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">534341.609</span>\\nb <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">534341.609</span>\\na <span class=\\\"token number\\\">2</span> <span class=\\\"token number\\\">534341.609</span>\\nb <span class=\\\"token number\\\">2</span> <span class=\\\"token number\\\">534341.609</span>\\na done\\nb done</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"loop.stop で止まった。\\nすべての task が終わるのを待つ\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">def gen(loop, name, count):\\n    print(name, loop.time())\\n    for i in range(count):\\n        print(name, i, loop.time())\\n        yield\\n    print(name, 'done')\\n\\ntaskA=asyncio.ensure_future(gen(loop, 'a', 3), loop=loop)\\ntaskB=asyncio.ensure_future(gen(loop, 'b', 5), loop=loop)\\nfuture=asyncio.gather(taskA, taskB)\\nfuture.add_done_callback(lambda future: loop.stop())\\ntask=asyncio.ensure_future(future, loop=loop)\\n\\nloop.run_forever()\\n\\na 571911.359\\na 0 571911.359\\nb 571911.359\\nb 0 571911.359\\na 1 571911.359\\nb 1 571911.359\\na 2 571911.359\\nb 2 571911.359\\na done\\nb 3 571911.359\\nb 4 571911.359\\nb done</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"loop.run_until_complete で future が終わるのを待つ\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">gen</span><span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token punctuation\\\">.</span>time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> <span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token punctuation\\\">.</span>time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">yield</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'done'</span><span class=\\\"token punctuation\\\">)</span>\\nfutureA<span class=\\\"token operator\\\">=</span>asyncio<span class=\\\"token punctuation\\\">.</span>ensure_future<span class=\\\"token punctuation\\\">(</span>gen<span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token operator\\\">=</span>loop<span class=\\\"token punctuation\\\">)</span>\\nfutureB<span class=\\\"token operator\\\">=</span>asyncio<span class=\\\"token punctuation\\\">.</span>ensure_future<span class=\\\"token punctuation\\\">(</span>gen<span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token operator\\\">=</span>loop<span class=\\\"token punctuation\\\">)</span>\\nfuture<span class=\\\"token operator\\\">=</span>asyncio<span class=\\\"token punctuation\\\">.</span>gather<span class=\\\"token punctuation\\\">(</span>futureA<span class=\\\"token punctuation\\\">,</span> futureB<span class=\\\"token punctuation\\\">)</span>\\n\\nloop<span class=\\\"token punctuation\\\">.</span>run_until_complete<span class=\\\"token punctuation\\\">(</span>future<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"future の終了を待って loop.stop したいなら run_until_complete するのが明瞭。\\nPEP492 – Coroutines with async and await syntax(python3.5 09-Apr-2015)\"), \"\\n\", React.createElement(_components.p, null, \"generator を流用した coroutine は紛らわしいので、coroutine に独自のシンタックスを導入するで。native coroutine と呼称する。C で実装しているわけではない。\\n関数内で await を使わなくても coroutine として有効\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">read_data</span><span class=\\\"token punctuation\\\">(</span>db<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">pass</span>\\n\\nEventLoopにnative coroutineを投入する\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">gen</span><span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token punctuation\\\">.</span>time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> <span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token punctuation\\\">.</span>time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token comment\\\">#yield</span>\\n        <span class=\\\"token keyword\\\">await</span> asyncio<span class=\\\"token punctuation\\\">.</span>sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'done'</span><span class=\\\"token punctuation\\\">)</span>\\n\\ntaskA<span class=\\\"token operator\\\">=</span>asyncio<span class=\\\"token punctuation\\\">.</span>ensure_future<span class=\\\"token punctuation\\\">(</span>gen<span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token operator\\\">=</span>loop<span class=\\\"token punctuation\\\">)</span>\\ntaskB<span class=\\\"token operator\\\">=</span>asyncio<span class=\\\"token punctuation\\\">.</span>ensure_future<span class=\\\"token punctuation\\\">(</span>gen<span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token operator\\\">=</span>loop<span class=\\\"token punctuation\\\">)</span>\\nfuture<span class=\\\"token operator\\\">=</span>asyncio<span class=\\\"token punctuation\\\">.</span>gather<span class=\\\"token punctuation\\\">(</span>taskA<span class=\\\"token punctuation\\\">,</span> taskB<span class=\\\"token punctuation\\\">)</span>\\n\\nloop<span class=\\\"token punctuation\\\">.</span>run_until_complete<span class=\\\"token punctuation\\\">(</span>future<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"yield を await asyncio.sleep(0)で置き換えた。\\nyield のままだと TypeError になる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Traceback (most recent call last):\\n  File \\\".\\\\exp.py\\\", line 18, in &lt;module>\\n    taskA=asyncio.ensure_future(gen(loop, 'a', 3), loop=loop)\\n  File \\\"D:\\\\Python36\\\\lib\\\\asyncio\\\\tasks.py\\\", line 519, in ensure_future\\n    raise TypeError('A Future, a coroutine or an awaitable is required')\\nTypeError: A Future, a coroutine or an awaitable is required\\n\\nIt is a TypeError if __await__ returns anything but an iterator.</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"実験。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">yield</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">co_y</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">yield</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">co</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">pass</span>\\n\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">class</span> <span class=\\\"token string\\\">'generator'</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">class</span> <span class=\\\"token string\\\">'async_generator'</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">.</span>\\\\exp<span class=\\\"token punctuation\\\">.</span>py<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">22</span><span class=\\\"token punctuation\\\">:</span> RuntimeWarning<span class=\\\"token punctuation\\\">:</span> coroutine <span class=\\\"token string\\\">'co'</span> was never awaited\\n  <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">type</span><span class=\\\"token punctuation\\\">(</span>co<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">class</span> <span class=\\\"token string\\\">'coroutine'</span><span class=\\\"token operator\\\">></span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"async_generator…。async def 内で yield すると違うものになるのね。syntax error にはできんな。\\n自前のメインループに loop を組み込むとすれば\\nloop.once のような関数があると毎フレーム小出しにタスクを消化できるのだが。\\nググってみた。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/29868372/python-asyncio-run-event-loop-once\"\n  }, \"https://stackoverflow.com/questions/29868372/python-asyncio-run-event-loop-once\")), \"\\n\", React.createElement(_components.p, null, \"loop.stop(); loop.run_forever()\"), \"\\n\", React.createElement(_components.p, null, \"なるほど。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">gen</span><span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">,</span> count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token punctuation\\\">.</span>time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> <span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token punctuation\\\">.</span>time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">await</span> asyncio<span class=\\\"token punctuation\\\">.</span>sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'done'</span><span class=\\\"token punctuation\\\">)</span>\\n\\ntaskA<span class=\\\"token operator\\\">=</span>asyncio<span class=\\\"token punctuation\\\">.</span>ensure_future<span class=\\\"token punctuation\\\">(</span>gen<span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token operator\\\">=</span>loop<span class=\\\"token punctuation\\\">)</span>\\ntaskB<span class=\\\"token operator\\\">=</span>asyncio<span class=\\\"token punctuation\\\">.</span>ensure_future<span class=\\\"token punctuation\\\">(</span>gen<span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> loop<span class=\\\"token operator\\\">=</span>loop<span class=\\\"token punctuation\\\">)</span>\\nfuture<span class=\\\"token operator\\\">=</span>asyncio<span class=\\\"token punctuation\\\">.</span>gather<span class=\\\"token punctuation\\\">(</span>taskA<span class=\\\"token punctuation\\\">,</span> taskB<span class=\\\"token punctuation\\\">)</span>\\n\\ncount<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token keyword\\\">not</span> future<span class=\\\"token punctuation\\\">.</span>done<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span>\\n    count<span class=\\\"token operator\\\">+=</span><span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token comment\\\"># loop one step</span>\\n    loop<span class=\\\"token punctuation\\\">.</span>stop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    loop<span class=\\\"token punctuation\\\">.</span>run_forever<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'done'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token number\\\">1</span>\\na <span class=\\\"token number\\\">579281.828</span>\\na <span class=\\\"token number\\\">0</span> <span class=\\\"token number\\\">579281.828</span>\\nb <span class=\\\"token number\\\">579281.828</span>\\nb <span class=\\\"token number\\\">0</span> <span class=\\\"token number\\\">579281.828</span>\\n<span class=\\\"token number\\\">2</span>\\na <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">579281.828</span>\\nb <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">579281.828</span>\\n<span class=\\\"token number\\\">3</span>\\na <span class=\\\"token number\\\">2</span> <span class=\\\"token number\\\">579281.828</span>\\nb <span class=\\\"token number\\\">2</span> <span class=\\\"token number\\\">579281.828</span>\\n<span class=\\\"token number\\\">4</span>\\na done\\nb <span class=\\\"token number\\\">3</span> <span class=\\\"token number\\\">579281.828</span>\\n<span class=\\\"token number\\\">5</span>\\nb <span class=\\\"token number\\\">4</span> <span class=\\\"token number\\\">579281.828</span>\\n<span class=\\\"token number\\\">6</span>\\nb done\\n<span class=\\\"token number\\\">7</span>\\ndone</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"いいかんじになった。これなら付き合っていけそうだ。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/06/python_asyncio.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","span","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
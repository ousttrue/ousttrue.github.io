"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2918],{533:function(e,n,t){t.r(n),t.d(n,{default:function(){return i}});var l=t(1151),a=t(7294);function c(e){const n=Object.assign({p:"p",code:"code",h1:"h1",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",a:"a",span:"span",h3:"h3"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"vimで ",a.createElement(n.code,null,"breakpoint")," を設置してステップ実行できるようなデバッガを調べた。"),"\n",a.createElement(n.h1,null,"vim 上のデバッガ"),"\n",a.createElement(n.h2,null,"lldb.nvim"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/dbgx/lldb.nvim"),"\n"),"\n",a.createElement(n.h2,null,"vim-vebugger"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/idanarye/vim-vebugger"),"\n"),"\n",a.createElement(n.p,null,"なんか動きそうなのだが、 ",a.createElement(n.code,null,"vimproc")," を使っていたので動かせなかった\nkaoriya 版の Vim を使うなどしてみたがよくわからず。"),"\n",a.createElement(n.h2,null,"pyclewn"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/Mistobaan/pyclewn"),"\n"),"\n",a.createElement(n.p,null,"gdb と pdb のvimフロントエンド？"),"\n",a.createElement(n.h2,null,"pubd"),"\n",a.createElement(n.p,null,"pythonのpdb."),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/inducer/pudb"),"\n"),"\n",a.createElement(n.h2,null,"vim-breakpts"),"\n",a.createElement(n.p,null,"vim スクリプト用？"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/albfan/vim-breakpts"),"\n"),"\n",a.createElement(n.h2,null,"vimspector"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/puremourning/vimspector"),"\n"),"\n",a.createElement(n.p,null,"VSCodeの ",a.createElement(n.code,null,"DebugAdapterProtocol")," を使うものらしい。"),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"While Language Server Protocol is well known, the Debug Adapter Protocol is less well known, but achieves a similar goal: language agnostic API abstracting debuggers from clients."),"\n"),"\n",a.createElement(n.p,null,"動かし方よくわからず。"),"\n",a.createElement(n.h1,null,"DebugAdapterProtocol"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"https://code.visualstudio.com/blogs/2018/08/07/debug-adapter-protocol-website"},"DebugAdapterProtocol"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"https://github.com/Microsoft/vscode-debugadapter-node"},"旧サイト・リポジトリ")),"\n"),"\n"),"\n"),"\n",a.createElement(n.p,null,"読む。"),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,'The "deep understanding of a language" is surfaced by the Language Server Protocol (LSP) and the "debugging support" by the Debug Adapter Protocol (DAP).'),"\n"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">editor &lt;=> adapter &lt;=> gdb\n              ||\n              ++=====> pdb</code></pre></div>'}}),"\n",a.createElement(n.p,null,"adapterでラップして同じに見えるようにする。"),"\n",a.createElement(n.p,null,"adapterの起動設定は、 ",a.createElement(n.code,null,".vscode/launch.json")," にというわけか。"),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"The Debug Adapter Protocol is not tied to VS Code and can be used as the foundation for a generic debugger UI in other development tools."),"\n"),"\n",a.createElement(n.p,null,"新サイトで仕様を公開していくで、って書いてあるね。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"新サイト https://microsoft.github.io/debug-adapter-protocol/","\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"新リポジトリ https://github.com/Microsoft/debug-adapter-protocol"),"\n"),"\n"),"\n"),"\n",a.createElement(n.p,null,"読む。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://microsoft.github.io/debug-adapter-protocol/overview"),"\n"),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"single session mode: in this mode, the development tool starts a debug adapter as a standalone process and communicates with it through stdin and stdout."),"\n"),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"multi session mode: in this mode, the development tool does not start the debug adapter but assumes that it is already running and that it listens on a specific port for connections attempts."),"\n"),"\n",a.createElement(n.h2,null,"DAPの仕様"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://microsoft.github.io/debug-adapter-protocol/specification"),"\n"),"\n",a.createElement(n.h2,null,"DAPの実装"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/"),"\n"),"\n",a.createElement(n.p,null,"ネイティブコンパイルするタイプは言語ごとではなく、ネイティブコンパイルの様式ごとに違うものになる。例えば、 ",a.createElement(n.code,null,"vc")," , ",a.createElement(n.code,null,"gcc")," , ",a.createElement(n.code,null,"llvm")," のように。"),"\n",a.createElement(n.p,null,"となるとVMタイプのものは、 ",a.createElement(n.code,null,".Net"),", ",a.createElement(n.code,null,"Mono"),", ",a.createElement(n.code,null,"java")," といった分類になるのだろうか。\n",a.createElement(n.code,null,"C#"),", ",a.createElement(n.code,null,"F#")," が両方デバッグできたりしそうではある。"),"\n",a.createElement(n.p,null,"インタープリター型はそれぞれの言語ごとになる。"),"\n",a.createElement(n.p,null,"あとは、リモートデバッグの事情を調べる。"),"\n",a.createElement(n.h3,null,"native debug"),"\n",a.createElement(n.p,null,"c++やd, rustなんかのnativeコードを出力するものをまとめて面倒見れるという理解であったいるのかな。ビルド形式とデバッグビルドに付加される情報のフォーマットに対応してデバッガを選択する必要があると。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/Microsoft/vscode-cpptools"),"\n"),"\n",a.createElement(n.p,null,"LLVM"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/vadimcn/vscode-lldb"),"\n"),"\n",a.createElement(n.h3,null,".Net"),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"Mono debugging is not supported."),"\n"),"\n",a.createElement(n.p,null,"ILは互換性があるにしても、VMのデバッグインタフェースは互換性が無いということなのかな。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/OmniSharp/omnisharp-vscode"),"\n"),"\n",a.createElement(n.h3,null,"Mono"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/Microsoft/vscode-mono-debug"),"\n"),"\n",a.createElement(n.h3,null,"Unity"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/Unity-Technologies/vscode-unity-debug"),"\n"),"\n",a.createElement(n.p,null,"UnityEditorにアタッチできるらしい。\nUnity版のMonoにアタッチできるということかしら。"),"\n",a.createElement(n.h3,null,"lua / ravi"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/dibyendumajumdar/ravi-vscode-debugger"),"\n"),"\n",a.createElement(n.p,null,"こんなのあるのか・・・"),"\n",a.createElement(n.h3,null,"powershell"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/PowerShell/vscode-powershell"),"\n"),"\n",a.createElement(n.h3,null,"python"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/Microsoft/vscode-python"),"\n"),"\n",a.createElement(n.h1,null,"vimspectorの実装"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/puremourning/vimspector"),"\n"),"\n",a.createElement(n.p,null,"読む。"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,".\\install_gadget.py")),"\n",a.createElement(n.p,null,"を実行することで、 ",a.createElement(n.code,null,"VSCode")," の ",a.createElement(n.code,null,"extension")," を ",a.createElement(n.code,null,"download")," する。\n",a.createElement(n.code,null,"extension")," に、 ",a.createElement(n.code,null,"DAP")," が含まれているのでこれを使う。"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"autoload/vimspector.vim")),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim"><span class="token keyword">function</span><span class="token operator">!</span> vimspector#<span class="token function">Launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort\n  py3 _vimspector_session<span class="token operator">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">endfunction</span></code></pre></div>'}}),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"python3/vimspector/debug_session.py")),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">class</span> <span class="token class-name">DebugSession</span><span class="token punctuation">:</span>\n  <span class="token keyword">def</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">pass</span>\n</code></pre></div>'}}),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"vim.bindeval")," を使っているので、 ",a.createElement(n.code,null,"vim8")," 専用。\n",a.createElement(n.code,null,"nvim")," では回避する必要がある。"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,".vimspector.json")),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token property">"adapters"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",a.createElement(n.p,null,"の ",a.createElement(n.code,null,"configurations")," からデバッグセッションの起動方法を取得して、\nデバッグアダプターを ",a.createElement(n.code,null,"vim")," の ",a.createElement(n.code,null,"job")," か ",a.createElement(n.code,null,"channel")," 経由で起動する。\n",a.createElement(n.code,null,"configurations")," が ",a.createElement(n.code,null,".vscode/launch.json")," に相当するようだ。\n",a.createElement(n.code,null,"adapters")," は、インストールされている ",a.createElement(n.code,null,"DebugAdapter")," のリスト。"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"call vimspector#Launch()")," ",a.createElement(n.code,null,"simple_python - launch")," ",a.createElement(n.code,null,"/Users/ousttrue")," と入力することでjobが、アダプター開始するところまでできた。\nしかし、アダプターがすぐに死んでいる様子。"),"\n",a.createElement(n.p,null,"アダプターを手動起動してみる。"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"node .\\.vscode\\extensions\\ms-python.python-2019.4.11987\\out\\client\\debugger\\debugAdapter\\main.js")),"\n",a.createElement(n.p,null,a.createElement(n.code,null,".vimspector.json")," に書いてあるのとバージョンが違う。\n",a.createElement(n.code,null,"file not found")," か。"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"path")," をなおしたら動いた😃"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">-          "$HOME/.vscode/extensions/ms-python.python-2018.4.0/out/client/debugger/Main.js"\n+          "$HOME/.vscode/extensions/ms-python.python-2019.4.11987/out/client/debugger/debugAdapter/Main.js"</code></pre></div>'}}),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"neovim")," の ",a.createElement(n.code,null,"rplugin")," での構成を考えてみようか。"),"\n",a.createElement(n.h1,null,"python3 で Adapter を起動してみる"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"AdapterAdapter")," というか ",a.createElement(n.code,null,"AdapterBridge")," という感じになりそうだけど、\n",a.createElement(n.code,null,"vim")," で込み入った実装をするのは手に余るので、可能な限り ",a.createElement(n.code,null,"python")," で事を進めよう。\npythonでprotocl実験。"),"\n",a.createElement(n.p,null,"https://github.com/ousttrue/daplauncher"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"http://pydev.blogspot.com/2018/05/howto-launch-and-debug-in-vscode-using.html"),"\n",a.createElement(n.li,null,"https://vscode-docs.readthedocs.io/en/stable/extensions/example-debuggers/"),"\n",a.createElement(n.li,null,"https://vscode-docs.readthedocs.io/en/stable/extensionAPI/api-debugging/"),"\n"),"\n",a.createElement(n.p,null,"launchRequestの後で固まると思ったら、サイトに記述されていないパラメーターがあった。\n",a.createElement(n.code,null,"console")," どこに書いてあるのか・・・"),"\n",a.createElement(n.p,null,"https://github.com/Microsoft/vscode-debugadapter-node/blob/master/debugProtocol.json"),"\n",a.createElement(n.p,null,"https://github.com/Microsoft/vscode-python/issues/3762"),"\n",a.createElement(n.p,null,"わかった。"),"\n",a.createElement(n.p,null,"https://github.com/Microsoft/vscode-go/issues/219"),"\n",a.createElement(n.p,null,"vscodeの ",a.createElement(n.code,null,".vscode/launch.json")," の起動設定を ",a.createElement(n.code,null,"launch")," の引数に合体するのだ。"),"\n",a.createElement(n.p,null,"https://code.visualstudio.com/Docs/editor/debugging#_launchjson-attributes"),"\n",a.createElement(n.p,null,"書いとけよー。"))}var o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(c,e)):c(e)},u=t(8678),s=t(4160),r=t(8736);const m={code:e=>{let{children:n,className:t}=e;return t?a.createElement(r.Z,{className:t},n):a.createElement("code",null,n)}};function p(e){let{data:n,children:t}=e;const c=n.mdx.frontmatter;return a.createElement(u.Z,null,a.createElement("h1",null,c.title),a.createElement("div",{className:"tags-index"},c.tags&&c.tags.length>0&&c.tags.map((e=>a.createElement(s.rU,{to:"/tags/"+e+"/",itemProp:"url"},a.createElement("button",null,e))))),a.createElement(l.Zo,{components:m},t))}function i(e){return a.createElement(p,e,a.createElement(o,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2019-vim-debugger-md-7c0c54ab13aa870619fc.js.map
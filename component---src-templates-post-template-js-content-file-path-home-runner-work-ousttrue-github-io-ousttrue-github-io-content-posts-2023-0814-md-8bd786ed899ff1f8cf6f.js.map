{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2023-0814-md-8bd786ed899ff1f8cf6f.js","mappings":"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","sources":["webpack:///./content/posts/2023/0814.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Windows の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">conpty</code>\"\n    }\n  }), \" を使うことで、クロスプラットフォームな \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">tui</code>\"\n    }\n  }), \" 環境は整ってきた様子。\\n要するに \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">curses</code>\"\n    }\n  }), \" への依存を除去して、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">POSIX API</code>\"\n    }\n  }), \" への依存を \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Win32 API</code>\"\n    }\n  }), \" と付け変えできるようにすれば、\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Posix</code>\"\n    }\n  }), \" と \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Windows</code>\"\n    }\n  }), \" 共用のコードにできる。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">go</code>\"\n    }\n  }), \" や \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">rust</code>\"\n    }\n  }), \" 界隈の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">tui</code>\"\n    }\n  }), \" アプリ neovim、wezterm なんかで既に達成されている。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">c++</code>\"\n    }\n  }), \" でも今風の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TUI</code>\"\n    }\n  }), \" を作りたいと思っていたのだが、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">libvterm</code>\"\n    }\n  }), \" と \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">FTXUI</code>\"\n    }\n  }), \" を併用することでできそうだ。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">libvterm</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">FTXUI</code>\"\n    }\n  }), \" 共に \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Windows</code>\"\n    }\n  }), \" \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Unix</code>\"\n    }\n  }), \" 両方で動くコンパクトなライブラリだ。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">libvterm</code>\"\n    }\n  }), \" で vt100 escape sequence を ScreenGrid に翻訳して、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">FTXUI</code>\"\n    }\n  }), \" の Screen に描画する。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">FTXUI</code>\"\n    }\n  }), \" は \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ScreenGrid</code>\"\n    }\n  }), \" の描画に加えて、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Posix</code>\"\n    }\n  }), \" と \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Windows</code>\"\n    }\n  }), \" の 入力、resize, mouse をさばくこともできる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">          resize\\nrawinput  stdin\\n----+   +---+--->+---+--->+-------+\\nTERM|-->|APP|    |pty|    |process|\\n    |   |   |    +---+&lt;---+-------+\\n    |   |   |       ^|stdout\\n    |   |   |       ||VT100 escape sequence\\n    |   |   |       |v\\n    |   |   |    +--------+\\n    |&lt;--|   |&lt;---|libvterm|\\n----+   +---+--->+--------+\\nvt100        resize\\ndraw</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上の図では、TERM が curses/terminfo で、process が posix であることが多い。\\nresize 周りは、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ioctrl.h</code>\"\n    }\n  }), \" 。\\nvt100 parser と TERM への出力が分離されていない難解な塊だったりする。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">process</code>\"\n    }\n  }), \" まわりは \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">conpty</code>\"\n    }\n  }), \" を使って手作りできる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">struct Pty\\n{\\n  HPC Console; // conpty\\n  HANDLE ReadPipe; // child process stdout reader\\n  HANDLE WritePipe; // child process stdin writer\\n};</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/microsoft/terminal/tree/main/samples/ConPTY/EchoCon\"\n  }, \"https://github.com/microsoft/terminal/tree/main/samples/ConPTY/EchoCon\")), \"\\n\", React.createElement(_components.p, null, \"ReadPipe を thread で ReadFile し、\\n別の thread で、hThread を WaitForSingleObject して終了を監視するのがよさそうだ。\"), \"\\n\", React.createElement(_components.p, null, \"あとは、 sixel とか試してみたのだが conpty は sixel を通してくれないみたい。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">chafa</code>\"\n    }\n  }), \" が \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Windows</code>\"\n    }\n  }), \" でも動いたので、こっちで遊んでみる予定。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">uim-fep</code>\"\n    }\n  }), \" から \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">posix</code>\"\n    }\n  }), \" をはがして、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Windows</code>\"\n    }\n  }), \" でも動くようにできないか画策中...\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2023/0814.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","a","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
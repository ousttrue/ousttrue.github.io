"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2409],{2878:function(n,e,t){t.r(e),t.d(e,{default:function(){return u}});var l=t(1151),r=t(7294);function i(n){const e=Object.assign({p:"p",pre:"pre",code:"code"},(0,l.ah)(),n.components);return r.createElement(r.Fragment,null,r.createElement(e.p,null,"gulp で静的サイト生成その２"),"\n",r.createElement(e.pre,null,r.createElement(e.code,null,"引き続き、サイト生成作業を続行中。見た目は置いておいて(bootstrap入れたけど)機能を優先して作ろう。\n「次へ」と「前へ」のリンクを作れば内部リンクは揃う。\ngulpは自由度が高いのでなんとでもなるな。\n強まったmakeのようで非常にポテンシャルを感じる。\n中期的なも目標としてはローカルもしくはLAN内のnode.jsがホストとなるGUIをさくっと作れるようになるというものがあるのだが、\n関連項目が多すぎてひたすら拡がっていくのが危険だ。\n特に、インターネットで調べながらだと収束せずにひたすら拡散する傾向がある。\nanglar, backboneは避けようと思ったのだがmithrilは気になっているし、electronも気になっている。\nあと、typescriptもはやめに使いこなしたい。\nだいぶgulpがわかってきた\n「前へ」と「次へ」は全部のファイルをリストに投入してソートして隣通しのパスを得る必要がある。\n一度リストに投入してから前へと次へを処理した後で、再度リストの中身を一個ずつ後ろに渡せばいいじゃない。\nということでやってみたらあっさりできた。\n野良プラグインの作り方が分かるとgulp面白いな。\nmake-toc.js\nvar through = require('through2');\nvar gutil = require('gulp-util');\nvar path = require('path');\n\nmodule.exports = function (outputFileName, options) {\n\n    options = options || {};\n    var dest = options.dest;\n    var filelist = [];\n\n    function transform(file, encoding, callback) {\n\n        // ファイルを集める\n        filelist.push(file);\n\n        // callback()は必ず実行\n        callback();\n    }\n\n    function flush(callback) {\n\n        if (filelist.length > 0) {\n\n            // sortすることで日付順に並ぶ\n            filelist.sort(function compareNumbers(a, b) {\n                if (a.path < b.path) {\n                    return 1;\n                } else {\n                    return -1;\n                }\n            });\n            var file = filelist[0];\n\n            // 目次\n            var output_map = {\n                cwd: file.cwd,\n                base: file.base,\n                path: file.base + outputFileName,\n            };\n           // console.log(output_map);\n            var output = new gutil.File(output_map);\n\n            var html = '<ul>\\n';\n            //console.log(filelist.length);\n            for (var i = 0; i < filelist.length; ++i) {\n                var f = filelist[i];\n                var rel = dest + \"/\" + f.path.substr(f.base.length).replace(/\\\\/g, '/');\n                //console.log(rel);\n                html += '<li><a href=\"' + rel + '\">' + f.frontMatter.title + '</a></li>\\n';\n\n                // 各アイテムのfrontMatterにnextとprevを付ける\n                // 降順に並んでいる\n                if (i === 0) {\n                    // 先頭\n                    f.frontMatter.next = \"\";\n                    f.frontMatter.prev = path.relative(path.dirname(f.path), filelist[i + 1].path).replace(/\\\\/g, '/');\n                }\n                else if (i === filelist.length-1) {\n                    // 終端\n                    f.frontMatter.next = path.relative(path.dirname(f.path), filelist[i - 1].path).replace(/\\\\/g, '/');\n                    f.frontMatter.prev = \"\";\n                }\n                else {\n                    f.frontMatter.next = path.relative(path.dirname(f.path), filelist[i - 1].path).replace(/\\\\/g, '/');\n                    f.frontMatter.prev = path.relative(path.dirname(f.path), filelist[i + 1].path).replace(/\\\\/g, '/');\n                }\n            }\n            html += '</ul>\\n';\n            output.contents = new Buffer(html);\n\n            // filelistをoutputにくっつける\n            output.filelist = filelist;\n\n            this.push(output);\n        }\n\n        // callback()は必ず実行\n        callback();\n    }\n\n    return through.obj(transform, flush);\n};\n\n\nresplit.js\nvar through = require('through2');\nvar gutil = require('gulp-util');\nvar path = require('path');\n\nmodule.exports = function () {\n\n    function transform(file, encoding, callback) {\n\n        // ファイルがnullの場合\n        if (file.isNull()) {\n            // 次のプラグインに処理を渡すためにthis.push(file)しておく\n            this.push(file);\n            // callback()は必ず実行\n            return callback();\n        }\n\n        // ファイルがstreamの場合（このサンプルプラグインはstreamに対応しない）\n        if (file.isStream()) {\n            // emit('error')を使って、プラグイン呼び出し側に'error'イベントを発生させる\n            this.emit('error', new gutil.PluginError('gulp-diff', 'Streaming not supported'));\n            // callback()は必ず実行\n            return callback();\n        }\n\n        // do something\n        for(var key in file.filelist){\n            var output=file.filelist[key];\n            this.push(output);\n        }\n\n        // callback()は必ず実行\n        callback();\n    }\n\n    return through.obj(transform);\n};\n\n\ngulfile.js\ngulp.task('posts', function () {\n    gulp.src(config.posts)\n    // frontMatter処理してhtml化する\n        .pipe($.frontMatter({ remove: true }))\n        .pipe(myFrontmatter())\n        .pipe($.markdown())\n    // まとめてsortしてメタ情報を付与して目次を出力する\n        .pipe(makeToc('index.html', { dest: 'posts' }))\n        .pipe(gulp.dest('build'))\n    // 再び分解する\n        .pipe(resplit())\n    // 以降通常\n        .pipe($.debug({ title: 'files:' }))\n    // テンプレートを適用して\n        .pipe(ejsApplyer({ filename: 'templates/page.ejs' }, { root_path: '../../../../' }))\n    // 出力\n        .pipe(gulp.dest('build/posts'))\n    ;\n});\n")))}var a=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,l.ah)(),n.components);return e?r.createElement(e,n,r.createElement(i,n)):i(n)};t(8678);function o(n){let{data:e,children:t}=n;return r.createElement(r.Fragment,null,r.createElement("h1",null,e.mdx.frontmatter.title),r.createElement(l.Zo,null,t))}function u(n){return r.createElement(o,n,r.createElement(a,n))}},8678:function(n,e,t){t(7294)},1151:function(n,e,t){t.d(e,{Zo:function(){return o},ah:function(){return i}});var l=t(7294);const r=l.createContext({});function i(n){const e=l.useContext(r);return l.useMemo((()=>"function"==typeof n?n(e):{...e,...n}),[e,n])}const a={};function o({components:n,children:e,disableParentContext:t}){let o;return o=t?"function"==typeof n?n({}):n||a:i(n),l.createElement(r.Provider,{value:o},e)}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-11-14-gulp-static-site-md-ac8e93b3dc73c4609d8b.js.map
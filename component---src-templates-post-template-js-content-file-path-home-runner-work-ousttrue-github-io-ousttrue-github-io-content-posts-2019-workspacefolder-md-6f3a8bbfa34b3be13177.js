"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9942],{2515:function(e,n,l){l.r(n),l.d(n,{default:function(){return m}});var t=l(1151),c=l(7294);function u(e){const n=Object.assign({p:"p",ul:"ul",li:"li",code:"code",pre:"pre",h2:"h2",a:"a"},(0,t.ah)(),e.components);return c.createElement(c.Fragment,null,c.createElement(n.p,null,"https://github.com/ousttrue/WorkspaceFolder"),"\n",c.createElement(n.p,null,"要件は、"),"\n",c.createElement(n.ul,null,"\n",c.createElement(n.li,null,"WindowsとLinuxで共用にできる"),"\n",c.createElement(n.li,null,"実行時に、親フォルダを遡って設定(プロジェクトルートに ",c.createElement(n.code,null,"Duck.toml")," を配置する約束`)を探しに行く能力がある"),"\n",c.createElement(n.li,null,"Task間の依存関係が記述できる"),"\n",c.createElement(n.li,null,"コマンド呼び出し時のパスを調整できる"),"\n"),"\n",c.createElement(n.p,null,"こんなもん。"),"\n",c.createElement(n.pre,null,c.createElement(n.code,{className:"language-vim"},"augroup MyAutoCmd\n    autocmd BufWritePost *.md :!duck build\naugroup END\n")),"\n",c.createElement(n.p,null,"としておいて保存時に呼ぶようにしてみた。"),"\n",c.createElement(n.pre,null,c.createElement(n.code,{className:"language-toml"},"# Duck.toml\n[generate]\ncwd = 'build'\ncommand = ['cmake', '..', '-G', 'Unix Makefiles']\n\n[build]\ndepends = ['generate']\ncwd = 'build'\ncommand = ['make']\n")),"\n",c.createElement(n.p,null,c.createElement(n.code,null,"duck build")),"\n",c.createElement(n.p,null,"のように呼ぶ。"),"\n",c.createElement(n.h2,null,"vimのカレントフォルダ問題"),"\n",c.createElement(n.p,null,"親フォルダを遡って設定を探しに行くというのが重要です。例えば ",c.createElement(n.code,null,"vim")," でサブフォルダのファイルを編集しているときに、親フォルダの ",c.createElement(n.code,null,"Makefile")," でビルドしたい場合がある。このときに、",c.createElement(n.code,null,"vim")," のカレントフォルダを考慮するのが無理なのです。\nそういうわけで ",c.createElement(n.code,null,"vim")," では単純に ",c.createElement(n.code,null,"autocd")," して、カレントフォルダを意識しないことにしました。\n代わりにツール側で親フォルダに遡れるようにして、そのツールがプロジェクトのルートから指定のコマンドを呼び出すのです。"),"\n",c.createElement(n.ul,null,"\n",c.createElement(n.li,null,"make を呼ぶ"),"\n",c.createElement(n.li,null,"cmake を呼ぶ"),"\n",c.createElement(n.li,null,"dub を呼ぶ"),"\n",c.createElement(n.li,null,"setup.py を呼ぶ"),"\n",c.createElement(n.li,null,"MSBuild を呼ぶ"),"\n"),"\n",c.createElement(n.p,null,"などのように、言語毎に専門のツールを呼ぶ補助的なツールです。"),"\n",c.createElement(n.p,null,"特定の ",c.createElement(n.code,null,"LSP")," (D言語向けの ",c.createElement(n.code,null,"dls")," ) がカレントフォルダをプロジェクトルートに移動してから起動しないといけないなどの癖があるようなので、その辺を吸収させるのも狙っている。"),"\n",c.createElement(n.h2,null,"WindowsでCMakeをどうやって見つけるのか"),"\n",c.createElement(n.p,null,c.createElement(n.code,null,"unix")," 的なシステムでは、",c.createElement(n.code,null,"/usr/bin/cmake")," であろうことが期待できるのだけど、\n",c.createElement(n.code,null,"Windows")," ではそうはいかない。でも最近の ",c.createElement(n.code,null,"VisualStudio")," がインストールされていれば、その中に ",c.createElement(n.code,null,"cmake")," が入っている。だから ",c.createElement(n.code,null,"Program Files")," から決め打ちで探してくるという方法があるのだけど、もう一歩進めて ",c.createElement(n.code,null,"VisualStudio")," のインストールパスを ",c.createElement(n.code,null,"registry")," から取ってくるという手法がある。しかし、たくさんのバージョンとエディションで少しずつ違うのでやってられない。で、これに対応するツールとして ",c.createElement(n.code,null,"vswhere")," というツールがある。たぶん、",c.createElement(n.a,{href:"https://github.com/Microsoft/vcpkg"},"vcpkg"),"のために作られたのだと思うのだけど、これでインストールされている ",c.createElement(n.code,null,"VisualStudio")," の情報を得ることができる。まだ、 ",c.createElement(n.code,null,"vswhere")," をどうやって得るのか問題があるのだが、小さいので自分のプロジェクトに入れておくとか、ダウンロードするとか、 ",c.createElement(n.code,null,"VisualStudio")," に入っているので決め打ちでパスを探すといったことになろうと思う。"),"\n",c.createElement(n.p,null,"要するに ",c.createElement(n.code,null,"vc")," が入っている環境では、9割くらいの確率で ",c.createElement(n.code,null,"cmake")," を発見できます。\n",c.createElement(n.code,null,"duck")," にもこの機能を入れようとしている。"),"\n",c.createElement(n.p,null,"https://github.com/ChaosinaCan/pyvswhere"))}var a=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?c.createElement(n,e,c.createElement(u,e)):u(e)};l(8678);function r(e){let{data:n,children:l}=e;return c.createElement(c.Fragment,null,c.createElement("h1",null,n.mdx.frontmatter.title),c.createElement(t.Zo,null,l))}function m(e){return c.createElement(r,e,c.createElement(a,e))}},8678:function(e,n,l){l(7294)},1151:function(e,n,l){l.d(n,{Zo:function(){return r},ah:function(){return u}});var t=l(7294);const c=t.createContext({});function u(e){const n=t.useContext(c);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const a={};function r({components:e,children:n,disableParentContext:l}){let r;return r=l?"function"==typeof e?e({}):e||a:u(e),t.createElement(c.Provider,{value:r},n)}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2019-workspacefolder-md-6f3a8bbfa34b3be13177.js.map
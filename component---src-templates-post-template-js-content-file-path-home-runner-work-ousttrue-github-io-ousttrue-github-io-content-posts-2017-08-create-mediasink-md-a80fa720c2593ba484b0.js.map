{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-08-create-mediasink-md-a80fa720c2593ba484b0.js","mappings":"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","sources":["webpack:///./content/posts/2017/08/create_mediasink.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"DX11VideoRenderer を解読して、VideoRenderer 要件を探る。\"), \"\\n\", React.createElement(_components.p, null, \"Microsoft のサンプルがあり参考になる。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/Microsoft/Windows-classic-samples/tree/master/Samples/DX11VideoRenderer\"\n  }, \"https://github.com/Microsoft/Windows-classic-samples/tree/master/Samples/DX11VideoRenderer\")), \"\\n\", React.createElement(_components.p, null, \"これは結構がっつり作ってあるので、削って最低限必要な要素を探る。\\nIMFMediaSink を作る\\n手抜きして IMFActivate 抜きで。\\n\", React.createElement(_components.a, {\n    href: \"https://github.com/Microsoft/Windows-classic-samples/blob/master/Samples/DX11VideoRenderer/c++/DX11VideoRenderer.h\"\n  }, \"https://github.com/Microsoft/Windows-classic-samples/blob/master/Samples/DX11VideoRenderer/c++/DX11VideoRenderer.h\"), \"\\nを参考に最低限を実装してみる。\\nguidgen.exe で guid を決めた。\\nCustomVideoRenderer.h\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">pragma</span> <span class=\\\"token expression\\\">once</span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;windows.h></span></span>\\n\\n<span class=\\\"token comment\\\">// {8C5C51AD-F400-4B2A-BD36-4990D07420B4}</span>\\n<span class=\\\"token function\\\">DEFINE_GUID</span><span class=\\\"token punctuation\\\">(</span>CLSID_CustomVideoRenderer<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0x8c5c51ad</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0xf400</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0x4b2a</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0xbd</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0x36</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0x49</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0x90</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0xd0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0x74</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0x20</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0xb4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nSTDAPI <span class=\\\"token function\\\">CreateCustomVideoRenderer</span><span class=\\\"token punctuation\\\">(</span>REFIID riid<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span>ppvObject<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nDX11VideoRendererから必要な部分をコピペしてくるだけである。\\nCustomVideoRenderer<span class=\\\"token punctuation\\\">.</span>c<span class=\\\"token operator\\\">++</span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">\\\"CustomVideoRenderer.h\\\"</span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;mfidl.h></span></span>\\n\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CustomVideoRenderer</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token base-clause\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">IMFMediaSink</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    ULONG m_nRefCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span><span class=\\\"token operator\\\">:</span>\\n    <span class=\\\"token comment\\\">// IUnknown</span>\\n    <span class=\\\"token function\\\">STDMETHODIMP_</span><span class=\\\"token punctuation\\\">(</span>ULONG<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">AddRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">InterlockedIncrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>m_nRefCount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    STDMETHODIMP <span class=\\\"token function\\\">QueryInterface</span><span class=\\\"token punctuation\\\">(</span>REFIID iid<span class=\\\"token punctuation\\\">,</span> __RPC__deref_out _Result_nullonfailure_ <span class=\\\"token keyword\\\">void</span><span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppv<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>ppv<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> E_POINTER<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>iid <span class=\\\"token operator\\\">==</span> IID_IUnknown<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token operator\\\">*</span>ppv <span class=\\\"token operator\\\">=</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">static_cast</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span>IUnknown<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">static_cast</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span>IMFMediaSink<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>iid <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">__uuidof</span><span class=\\\"token punctuation\\\">(</span>IMFMediaSink<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token operator\\\">*</span>ppv <span class=\\\"token operator\\\">=</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">static_cast</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span>IMFMediaSink<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">else</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token operator\\\">*</span>ppv <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">NULL</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> E_NOINTERFACE<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token function\\\">AddRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> S_OK<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">STDMETHODIMP_</span><span class=\\\"token punctuation\\\">(</span>ULONG<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">Release</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        ULONG uCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">InterlockedDecrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>m_nRefCount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>uCount <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">delete</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token comment\\\">// For thread safety, return a temporary variable.</span>\\n        <span class=\\\"token keyword\\\">return</span> uCount<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// IMFMediaSink methods</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">AddStreamSink</span><span class=\\\"token punctuation\\\">(</span>DWORD dwStreamSinkIdentifier<span class=\\\"token punctuation\\\">,</span> __RPC__in_opt IMFMediaType<span class=\\\"token operator\\\">*</span> pMediaType<span class=\\\"token punctuation\\\">,</span> __RPC__deref_out_opt IMFStreamSink<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppStreamSink<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">GetCharacteristics</span><span class=\\\"token punctuation\\\">(</span>__RPC__out DWORD<span class=\\\"token operator\\\">*</span> pdwCharacteristics<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">GetPresentationClock</span><span class=\\\"token punctuation\\\">(</span>__RPC__deref_out_opt IMFPresentationClock<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppPresentationClock<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">GetStreamSinkById</span><span class=\\\"token punctuation\\\">(</span>DWORD dwIdentifier<span class=\\\"token punctuation\\\">,</span> __RPC__deref_out_opt IMFStreamSink<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppStreamSink<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">GetStreamSinkByIndex</span><span class=\\\"token punctuation\\\">(</span>DWORD dwIndex<span class=\\\"token punctuation\\\">,</span> __RPC__deref_out_opt IMFStreamSink<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppStreamSink<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">GetStreamSinkCount</span><span class=\\\"token punctuation\\\">(</span>__RPC__out DWORD<span class=\\\"token operator\\\">*</span> pcStreamSinkCount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">RemoveStreamSink</span><span class=\\\"token punctuation\\\">(</span>DWORD dwStreamSinkIdentifier<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">SetPresentationClock</span><span class=\\\"token punctuation\\\">(</span>__RPC__in_opt IMFPresentationClock<span class=\\\"token operator\\\">*</span> pPresentationClock<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">Shutdown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\nSTDAPI <span class=\\\"token function\\\">CreateCustomVideoRenderer</span><span class=\\\"token punctuation\\\">(</span>REFIID riid<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span>ppvObject<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>ppvObject<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> E_FAIL<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">auto</span> sink<span class=\\\"token operator\\\">=</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token function\\\">CustomVideoRenderer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token operator\\\">*</span>ppvObject<span class=\\\"token operator\\\">=</span>sink<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> S_OK<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n使う\\nIMFStreamSinkからIMFTopologyNodeを作る。\\n\\nCreating Output Nodes\\n\\n    Microsoft<span class=\\\"token double-colon punctuation\\\">::</span>WRL<span class=\\\"token double-colon punctuation\\\">::</span>ComPtr<span class=\\\"token operator\\\">&lt;</span>IMFTopologyNode<span class=\\\"token operator\\\">></span> pOutputNode<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">FAILED</span><span class=\\\"token punctuation\\\">(</span>hr <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">MFCreateTopologyNode</span><span class=\\\"token punctuation\\\">(</span>MF_TOPOLOGY_OUTPUT_NODE<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">&amp;</span>pOutputNode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> hr<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    Microsoft<span class=\\\"token double-colon punctuation\\\">::</span>WRL<span class=\\\"token double-colon punctuation\\\">::</span>ComPtr<span class=\\\"token operator\\\">&lt;</span>IMFMediaSink<span class=\\\"token operator\\\">></span> pSink<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 自前のIMFMediaSinkを作る</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">FAILED</span><span class=\\\"token punctuation\\\">(</span>hr<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">CreateCustomVideoRenderer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">IID_PPV_ARGS</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>pSink<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> hr<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    Microsoft<span class=\\\"token double-colon punctuation\\\">::</span>WRL<span class=\\\"token double-colon punctuation\\\">::</span>ComPtr<span class=\\\"token operator\\\">&lt;</span>IMFStreamSink<span class=\\\"token operator\\\">></span> pSSink<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">FAILED</span><span class=\\\"token punctuation\\\">(</span>hr<span class=\\\"token operator\\\">=</span>pSink<span class=\\\"token operator\\\">-></span><span class=\\\"token function\\\">GetStreamSinkByIndex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">&amp;</span>pSSink<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// まだ作っていないのでここでエラーになる</span>\\n        <span class=\\\"token keyword\\\">return</span> hr<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">FAILED</span><span class=\\\"token punctuation\\\">(</span>hr <span class=\\\"token operator\\\">=</span> pOutputNode<span class=\\\"token operator\\\">-></span><span class=\\\"token function\\\">SetObject</span><span class=\\\"token punctuation\\\">(</span>pSSink<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> hr<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"IMFStreamSink がひとつは必要\\n作る。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CustomVideoStreamSink</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token base-clause\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">IMFStreamSink</span></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    ULONG m_nRefCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> DWORD                 STREAM_ID<span class=\\\"token punctuation\\\">;</span>\\n    CCritSec<span class=\\\"token operator\\\">&amp;</span>                   m_critSec<span class=\\\"token punctuation\\\">;</span>                      <span class=\\\"token comment\\\">// critical section for thread safety</span>\\n    Microsoft<span class=\\\"token double-colon punctuation\\\">::</span>WRL<span class=\\\"token double-colon punctuation\\\">::</span>ComPtr<span class=\\\"token operator\\\">&lt;</span>IMFMediaSink<span class=\\\"token operator\\\">></span>               m_pSink<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span><span class=\\\"token operator\\\">:</span>\\n    <span class=\\\"token function\\\">CustomVideoStreamSink</span><span class=\\\"token punctuation\\\">(</span>DWORD dwStreamId<span class=\\\"token punctuation\\\">,</span> CCritSec<span class=\\\"token operator\\\">&amp;</span> critSec\\n            <span class=\\\"token punctuation\\\">,</span> IMFMediaSink <span class=\\\"token operator\\\">*</span>parent<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token operator\\\">:</span> <span class=\\\"token function\\\">STREAM_ID</span><span class=\\\"token punctuation\\\">(</span>dwStreamId<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">m_critSec</span><span class=\\\"token punctuation\\\">(</span>critSec<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">m_pSink</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// IUnknown</span>\\n    <span class=\\\"token function\\\">STDMETHODIMP_</span><span class=\\\"token punctuation\\\">(</span>ULONG<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">AddRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">QueryInterface</span><span class=\\\"token punctuation\\\">(</span>REFIID iid<span class=\\\"token punctuation\\\">,</span> __RPC__deref_out _Result_nullonfailure_ <span class=\\\"token keyword\\\">void</span><span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppv<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">STDMETHODIMP_</span><span class=\\\"token punctuation\\\">(</span>ULONG<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">Release</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// IMFStreamSink</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">Flush</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">GetIdentifier</span><span class=\\\"token punctuation\\\">(</span>__RPC__out DWORD<span class=\\\"token operator\\\">*</span> pdwIdentifier<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">GetMediaSink</span><span class=\\\"token punctuation\\\">(</span>__RPC__deref_out_opt IMFMediaSink<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppMediaSink<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">GetMediaTypeHandler</span><span class=\\\"token punctuation\\\">(</span>__RPC__deref_out_opt IMFMediaTypeHandler<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppHandler<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">PlaceMarker</span><span class=\\\"token punctuation\\\">(</span>MFSTREAMSINK_MARKER_TYPE eMarkerType<span class=\\\"token punctuation\\\">,</span> __RPC__in <span class=\\\"token keyword\\\">const</span> PROPVARIANT<span class=\\\"token operator\\\">*</span> pvarMarkerValue<span class=\\\"token punctuation\\\">,</span> __RPC__in <span class=\\\"token keyword\\\">const</span> PROPVARIANT<span class=\\\"token operator\\\">*</span> pvarContextValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">ProcessSample</span><span class=\\\"token punctuation\\\">(</span>__RPC__in_opt IMFSample<span class=\\\"token operator\\\">*</span> pSample<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// IMFMediaEventGenerator (from IMFStreamSink)</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">BeginGetEvent</span><span class=\\\"token punctuation\\\">(</span>IMFAsyncCallback<span class=\\\"token operator\\\">*</span> pCallback<span class=\\\"token punctuation\\\">,</span>IUnknown<span class=\\\"token operator\\\">*</span> punkState<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">EndGetEvent</span><span class=\\\"token punctuation\\\">(</span>IMFAsyncResult<span class=\\\"token operator\\\">*</span> pResult<span class=\\\"token punctuation\\\">,</span> _Out_ IMFMediaEvent<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppEvent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">GetEvent</span><span class=\\\"token punctuation\\\">(</span>DWORD dwFlags<span class=\\\"token punctuation\\\">,</span> __RPC__deref_out_opt IMFMediaEvent<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppEvent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n    STDMETHODIMP <span class=\\\"token function\\\">QueueEvent</span><span class=\\\"token punctuation\\\">(</span>MediaEventType met<span class=\\\"token punctuation\\\">,</span> __RPC__in REFGUID guidExtendedType<span class=\\\"token punctuation\\\">,</span> HRESULT hrStatus<span class=\\\"token punctuation\\\">,</span> __RPC__in_opt <span class=\\\"token keyword\\\">const</span> PROPVARIANT<span class=\\\"token operator\\\">*</span> pvValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"メソッドの中身は\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">return E_FAIL;</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, \"でお茶を濁した。\"), \"\\n\", React.createElement(_components.p, null, \"IMFMediaSink::AddStreamSink 実装\\nIMFMediaSink::GetStreamSinkById 実装\\nIMFMediaSink::GetStreamSinkByIndex 実装\\nIMFMediaSink::GetStreamSinkCount 実装\\nIMFMediaSink::RemoveStreamSink 実装\\n実行してみる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token comment\\\">// Handler for Media Session events.</span>\\n<span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">OnPlayerEvent</span><span class=\\\"token punctuation\\\">(</span>HWND hwnd<span class=\\\"token punctuation\\\">,</span> WPARAM pUnkPtr<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    HRESULT hr <span class=\\\"token operator\\\">=</span> g_pPlayer<span class=\\\"token operator\\\">-></span><span class=\\\"token function\\\">HandleEvent</span><span class=\\\"token punctuation\\\">(</span>pUnkPtr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">FAILED</span><span class=\\\"token punctuation\\\">(</span>hr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// ここに来る</span>\\n        <span class=\\\"token function\\\">NotifyError</span><span class=\\\"token punctuation\\\">(</span>hwnd<span class=\\\"token punctuation\\\">,</span> L<span class=\\\"token string\\\">\\\"An error occurred.\\\"</span><span class=\\\"token punctuation\\\">,</span> hr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">UpdateUI</span><span class=\\\"token punctuation\\\">(</span>hwnd<span class=\\\"token punctuation\\\">,</span> g_pPlayer<span class=\\\"token operator\\\">-></span><span class=\\\"token function\\\">GetState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// Get the event status. If the operation that triggered the event</span>\\n    <span class=\\\"token comment\\\">// did not succeed, the status is a failure code.</span>\\n    HRESULT hrStatus <span class=\\\"token operator\\\">=</span> S_OK<span class=\\\"token punctuation\\\">;</span>\\n    hr <span class=\\\"token operator\\\">=</span> pEvent<span class=\\\"token operator\\\">-></span><span class=\\\"token function\\\">GetStatus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>hrStatus<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Check if the async operation succeeded.</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">SUCCEEDED</span><span class=\\\"token punctuation\\\">(</span>hr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">FAILED</span><span class=\\\"token punctuation\\\">(</span>hrStatus<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// ここに来る</span>\\n        hr<span class=\\\"token operator\\\">=</span>hrStatus<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"デバッガで調べたら IMFStreamSink::GetMediaSink の直後にエラーになることがわかった。\\nIMFStreamSink::GetMediaSink 実装\\nたんたんとエラーを直していく。\\nIMFStreamSink::GetMediaTypeHandler 実装\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\">HRESULT DX11VideoRenderer<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token class-name\\\">CStreamSink</span><span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token function\\\">GetMediaTypeHandler</span><span class=\\\"token punctuation\\\">(</span>__RPC__deref_out_opt IMFMediaTypeHandler<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppHandler<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    CAutoLock <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>m_critSec<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>ppHandler <span class=\\\"token operator\\\">==</span> <span class=\\\"token constant\\\">NULL</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> E_POINTER<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    HRESULT hr <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">CheckShutdown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// This stream object acts as its own type handler, so we QI ourselves.</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">SUCCEEDED</span><span class=\\\"token punctuation\\\">(</span>hr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        hr <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token operator\\\">-></span><span class=\\\"token function\\\">QueryInterface</span><span class=\\\"token punctuation\\\">(</span>IID_IMFMediaTypeHandler<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span>ppHandler<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> hr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"IMFMediaTypeHandler が必要。\\nStreamSink に IMFMediaTypeHandler を実装\\nこのインタフェースは StreamSink が処理できる MediaType を示すので必要。\\nサポートするフォーマットを決める。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token comment\\\">// IMFMediaTypeHandler</span>\\nSTDMETHODIMP <span class=\\\"token function\\\">GetCurrentMediaType</span><span class=\\\"token punctuation\\\">(</span>_Outptr_ IMFMediaType<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppMediaType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nSTDMETHODIMP <span class=\\\"token function\\\">GetMajorType</span><span class=\\\"token punctuation\\\">(</span>__RPC__out GUID<span class=\\\"token operator\\\">*</span> pguidMajorType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nSTDMETHODIMP <span class=\\\"token function\\\">GetMediaTypeByIndex</span><span class=\\\"token punctuation\\\">(</span>DWORD dwIndex<span class=\\\"token punctuation\\\">,</span> _Outptr_ IMFMediaType<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nSTDMETHODIMP <span class=\\\"token function\\\">GetMediaTypeCount</span><span class=\\\"token punctuation\\\">(</span>__RPC__out DWORD<span class=\\\"token operator\\\">*</span> pdwTypeCount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nSTDMETHODIMP <span class=\\\"token function\\\">IsMediaTypeSupported</span><span class=\\\"token punctuation\\\">(</span>IMFMediaType<span class=\\\"token operator\\\">*</span> pMediaType<span class=\\\"token punctuation\\\">,</span> _Outptr_opt_result_maybenull_ IMFMediaType<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span> ppMediaType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nSTDMETHODIMP <span class=\\\"token function\\\">SetCurrentMediaType</span><span class=\\\"token punctuation\\\">(</span>IMFMediaType<span class=\\\"token operator\\\">*</span> pMediaType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nPresentationClockが必要\\n\\nPresentation Clock\\n\\nIMFMediaSink<span class=\\\"token double-colon punctuation\\\">::</span>GetPresentationClock実装\\nIMFMediaSink<span class=\\\"token double-colon punctuation\\\">::</span>SetPresentationClock実装\\nMediaSinkにIMFClockStateSinkを実装\\n<span class=\\\"token comment\\\">// IMFClockStateSink methods</span>\\nSTDMETHODIMP <span class=\\\"token function\\\">OnClockPause</span><span class=\\\"token punctuation\\\">(</span>MFTIME hnsSystemTime<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nSTDMETHODIMP <span class=\\\"token function\\\">OnClockRestart</span><span class=\\\"token punctuation\\\">(</span>MFTIME hnsSystemTime<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nSTDMETHODIMP <span class=\\\"token function\\\">OnClockSetRate</span><span class=\\\"token punctuation\\\">(</span>MFTIME hnsSystemTime<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">float</span> flRate<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nSTDMETHODIMP <span class=\\\"token function\\\">OnClockStart</span><span class=\\\"token punctuation\\\">(</span>MFTIME hnsSystemTime<span class=\\\"token punctuation\\\">,</span> LONGLONG llClockStartOffset<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nSTDMETHODIMP <span class=\\\"token function\\\">OnClockStop</span><span class=\\\"token punctuation\\\">(</span>MFTIME hnsSystemTime<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Data Flow\\nここまでの実装で IMFSession::Start の呼び出しに応じて IMFClockStateSink::OnClockStart が呼ばれるようになった。\\nData Flow\"), \"\\n\", React.createElement(_components.p, null, \"Media sinks use a pull model\"), \"\\n\", React.createElement(_components.p, null, \"MesiaSink 側からサンプルを取りに行かないといけない。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">[1] The client sets the media types and the presentation clock. The media sink registers itself with the presentation clock to receive notifications about clock state changes.\\n[2][3][4] はPreroll。ミニマムを目指す今回は省略。\\n[5] The client calls IMFPresentationClock::Start to start the presentation clock.\\n[6] The presentation clock notifies the media sink that the clock is starting, by calling IMFClockStateSink::OnClockStart.\\n[7] To get more data, each stream sink sends MEStreamSinkRequestSample events. In response to each of these events, the client gets the next sample and calls ProcessSample. This step is repeated until the presentation ends.</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"State Changes\\nIMFClockStateSink の実装について。\"), \"\\n\", React.createElement(_components.p, null, \"In addition, stream sinks must send the following events when they have completed the state transitions:\"), \"\\n\", React.createElement(_components.p, null, \"OnClockStart, OnClockRestart: MEStreamSinkStarted event\\nOnClockPause: MEStreamSinkPaused event\\nOnClockStop: MEStreamSinkStopped event\"), \"\\n\", React.createElement(_components.p, null, \"なるほど。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\">STDMETHODIMP <span class=\\\"token function\\\">OnClockStart</span><span class=\\\"token punctuation\\\">(</span>MFTIME hnsSystemTime<span class=\\\"token punctuation\\\">,</span> LONGLONG llClockStartOffset<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    CAutoLock <span class=\\\"token function\\\">lock</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>m_csMediaSink<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    HRESULT hr <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">CheckShutdown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">SUCCEEDED</span><span class=\\\"token punctuation\\\">(</span>hr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//</span>\\n        <span class=\\\"token comment\\\">// これが必要。このあとMEStreamSinkRequestSampleを受け付ける</span>\\n        <span class=\\\"token comment\\\">//</span>\\n        hr <span class=\\\"token operator\\\">=</span> m_pStream<span class=\\\"token operator\\\">-></span><span class=\\\"token function\\\">QueueEvent</span><span class=\\\"token punctuation\\\">(</span>MEStreamSinkStarted<span class=\\\"token punctuation\\\">,</span> GUID_NULL<span class=\\\"token punctuation\\\">,</span> hr<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">NULL</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">SUCCEEDED</span><span class=\\\"token punctuation\\\">(</span>hr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        hr <span class=\\\"token operator\\\">=</span> m_pStream<span class=\\\"token operator\\\">-></span><span class=\\\"token function\\\">QueueEvent</span><span class=\\\"token punctuation\\\">(</span>MEStreamSinkRequestSample<span class=\\\"token punctuation\\\">,</span> GUID_NULL<span class=\\\"token punctuation\\\">,</span> hr<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">NULL</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> hr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"ついに IMFStreamSink::ProcessSample がコールされた。\\n試しに下記のような実装にしてみたがこれでは Clock 無視で最速でフレームを消化してしまうのでだめ。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token keyword\\\">int</span> m_count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\nSTDMETHODIMP <span class=\\\"token function\\\">ProcessSample</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span>RPC<span class=\\\"token operator\\\">*</span><span class=\\\"token operator\\\">*</span>in_opt IMFSample\\\\<span class=\\\"token operator\\\">*</span> pSample<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token operator\\\">++</span>m_count<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">auto</span> hr <span class=\\\"token operator\\\">=</span> S_OK<span class=\\\"token punctuation\\\">;</span>\\n    hr <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">QueueEvent</span><span class=\\\"token punctuation\\\">(</span>MEStreamSinkRequestSample<span class=\\\"token punctuation\\\">,</span> GUID_NULL<span class=\\\"token punctuation\\\">,</span> hr<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">NULL</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> hr<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"MEStreamSinkRequestSample をスケジューリングする\"), \"\\n\", React.createElement(_components.p, null, \"Scheduled Work Items\"), \"\\n\", React.createElement(_components.p, null, \"これを使ってみる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\">BOOL <span class=\\\"token function\\\">NeedMoreSamples</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> DWORD cSamplesInFlight <span class=\\\"token operator\\\">=</span> <span class=\\\"token comment\\\">/*m_SamplesToProcess.GetCount() +*/</span> m_cOutstandingSampleRequests<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> cSamplesInFlight <span class=\\\"token operator\\\">&lt;</span> SAMPLE_QUEUE_HIWATER_THRESHOLD<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nHRESULT <span class=\\\"token function\\\">RequestSamples</span><span class=\\\"token punctuation\\\">(</span>IMFAsyncResult<span class=\\\"token operator\\\">*</span> pAsyncResult<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    HRESULT hr <span class=\\\"token operator\\\">=</span> S_OK<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">NeedMoreSamples</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        hr <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">CheckShutdown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">FAILED</span><span class=\\\"token punctuation\\\">(</span>hr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        m_cOutstandingSampleRequests<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        hr <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">QueueEvent</span><span class=\\\"token punctuation\\\">(</span>MEStreamSinkRequestSample<span class=\\\"token punctuation\\\">,</span> GUID_NULL<span class=\\\"token punctuation\\\">,</span> S_OK<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">NULL</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 再突入</span>\\n    hr<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">QueueRequest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> hr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 正しいRateにする必要がある</span>\\n<span class=\\\"token keyword\\\">const</span> INT64 interval <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">30</span><span class=\\\"token punctuation\\\">;</span>\\n\\nHRESULT <span class=\\\"token function\\\">QueueRequest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    HRESULT hr <span class=\\\"token operator\\\">=</span> S_OK<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">SUCCEEDED</span><span class=\\\"token punctuation\\\">(</span>hr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Enqueue</span>\\n        MFWORKITEM_KEY cancelKey<span class=\\\"token punctuation\\\">;</span>\\n        hr <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">MFScheduleWorkItem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>m_WorkQueueCB<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">nullptr</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span>interval<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">&amp;</span>cancelKey<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> hr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> m_count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\nSTDMETHODIMP <span class=\\\"token function\\\">ProcessSample</span><span class=\\\"token punctuation\\\">(</span>__RPC__in_opt IMFSample<span class=\\\"token operator\\\">*</span> pSample<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">override</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">++</span>m_count<span class=\\\"token punctuation\\\">;</span>\\n\\n    m_cOutstandingSampleRequests<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// do something</span>\\n\\n    <span class=\\\"token keyword\\\">return</span>  S_OK<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"DX11VideoRenderer::CScheduler を使えばよいと思う。\\nだいたい仕組みがわかった。\\nDX11VideoRenderer から引き算して最小限の構成にする(ProcessSample が何もしない)場合、\\n以下の部品を残す必要がありそう。\"), \"\\n\", React.createElement(_components.p, null, \"Scheduler\\nStreamSink: IMFStreamSink, IMFMediaTypeHandler\\nMesiaSink: IMFMediaSink, IMFClockStateSink\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/08/create_mediasink.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","span","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
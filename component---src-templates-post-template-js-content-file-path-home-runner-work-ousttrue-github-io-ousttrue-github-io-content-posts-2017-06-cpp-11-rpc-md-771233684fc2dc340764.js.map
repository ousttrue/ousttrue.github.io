{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-06-cpp-11-rpc-md-771233684fc2dc340764.js","mappings":"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","sources":["webpack:///./content/posts/2017/06/cpp11_rpc.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"最近のC++(-std=c++14)でMessagePack-RPCを再実装してみる。\"), \"\\n\", React.createElement(_components.h1, null, \"基本設計\"), \"\\n\", React.createElement(_components.p, null, \"MessagePack-RPCの仕様をおさらいすると以下の通り。\"), \"\\n\", React.createElement(_components.p, null, \"request\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"[type, msgid, method, params]\\n (0)   (int)  (str)   (array)\\n\")), \"\\n\", React.createElement(_components.p, null, \"response\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"[type, msgid, error, result]\\n (1)   (int)  (any)  (any)\\n\")), \"\\n\", React.createElement(_components.p, null, \"msgpackのバイト列を受け取って、msgpackのバイト列を返す関数として一般化する。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"typedef std::vector<std::uint8_t> bytes;\\n// msgpackのバイト列を引数にとり、msgpackのバイト列を返す\\ntypedef std::function<bytes(const &bytes)> procedurecall;\\n\")), \"\\n\", React.createElement(_components.p, null, \"任意の関数呼び出しからprocedurecallを作り出せるようにして、MessagePack-RPCシステムの部品として使えるようにする。\\n簡単な例\\n例として\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"static int add(int a, int b){ return a+b; }\\n\")), \"\\n\", React.createElement(_components.p, null, \"をprocedurecallに変換してみる。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"procedurecall make_procedurecall(int(*f)(int, int))\\n{\\n    // request -> response ではなくparams -> result\\n    return [f](const bytes& src)->bytes\\n    {\\n        // unpack args\\n        auto parser = msgpackpp::parser(src);\\n        std::tuple<int, int> args;\\n        parser >> args;\\n\\n        // call\\n        auto r = f(std::get<0>(args), std::get<1>(args));\\n\\n        // pack result\\n        msgpackpp::packer packer;\\n        packer << r;\\n        return packer.get_payload();\\n    };\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"int add(int, int)\"), \" を \", React.createElement(_components.code, null, \"procedurecall\"), \" に変換するというのは、引数のアンパック、関数呼び出し、結果のパックという一連の定型コードの呼び出しになる。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"procedurecall\"), \" の使い方は以下の通り。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"// register\\nauto proc = msgpackpp::rpc::make_procedurecall(&add);\\n\\n// call\\nauto packer = msgpackpp::packer();\\npacker << std::make_tuple(1, 2);\\nauto result = proc(packer.get_payload());\\n\\n// result\\nREQUIRE(3 == msgpackpp::parser(result).get_number<int>());\\n\")), \"\\n\", React.createElement(_components.p, null, \"とりあえず動いたが、関数を増やすたびにこれだけのコードを記述するのはやってられませぬ。\\n以下のような理想形を目指して作りこんでゆく。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"REQUIRE(3 == msgpack_procedurecall([](int a, int b){ return a+b; }, 1, 2));\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"lambda\"), \" が動けば他も動くようにできるので、\", React.createElement(_components.code, null, \"lambda\"), \" を第一に実装する。\"), \"\\n\", React.createElement(_components.h1, null, \"実装\"), \"\\n\", React.createElement(_components.p, null, \"ステップ毎に説明しようと思っていたが分かりにくいので、コードにコメントを追加することにした。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"make_procedurecall\\ntemplate<typename F, typename R, typename C, typename ...AS, std::size_t... IS>\\nprocedurecall _make_procedurecall(const F &f\\n    , R(C::*)(AS...)const // template引数R, C, ASを受け付けるためのダミー\\n    , std::index_sequence<IS...> // template引数ISを受け付けるためのダミー\\n)\\n{\\n    // request -> response ではなくparams -> result\\n    return [f](const bytes& src)->bytes\\n    {\\n        // unpack args\\n        auto parser = msgpackpp::parser(src);\\n        std::tuple<AS...> args;\\n        parser >> args;\\n\\n        // call\\n        auto r = f(std::get<IS>(args)...); // 可変長テンプレート引数を展開できる。ISと...が離れていることに注意\\n\\n        // pack result\\n        msgpackpp::packer packer;\\n        packer << r;\\n        return packer.get_payload();\\n    };\\n}\\n\\ntemplate<typename F, typename R, typename C, typename ...AS>\\nprocedurecall _make_procedurecall(F f\\n    , R(C::*)(AS...)const // template引数R, C, ASを受け付けるためのダミー\\n)\\n{\\n    return _make_procedurecall(f\\n        , &decltype(f)::operator() // lambdaの返り値と引数の型を次のテンプレートに渡す\\n        , std::index_sequence_for<AS...>{} // std::get呼び出しのためにindex_sequenceを作る。\\n    );\\n}\\n\\n//\\n// あらゆる型のlambdaを受け付けるようにした\\n//\\ntemplate<typename F>\\nprocedurecall make_procedurecall(F f)\\n{\\n    return _make_procedurecall(f\\n        , &decltype(f)::operator() // lambdaの返り値と引数の型を次のテンプレートに渡す\\n    );\\n}\\n\\nmsgpack_call\\ntemplate<typename F, typename R, typename C, typename ...AS>\\ndecltype(auto) _msgpack_call(F f\\n    , R(C::*)(AS...)const // template引数R, C, ASを受けるためのダミー\\n    , AS... args)\\n{\\n    auto proc = msgpackpp::rpc::make_procedurecall(f);\\n\\n    // call\\n    msgpackpp::packer packer;\\n    packer << std::make_tuple(args...); // 可変長テンプレート引数を展開できる\\n    auto result = proc(packer.get_payload());\\n\\n    // unpack result\\n    R value;\\n    msgpackpp::parser(result) >> value;\\n    return value;\\n}\\n\\ntemplate<typename F, typename ...AS>\\ndecltype(auto) msgpack_call(F f, AS... args) // 返り値の型はreturnから型推論\\n{\\n    return _msgpack_call(f\\n    , &decltype(f)::operator() // lambdaの返り値と引数の型をテンプレート引数に渡す\\n    , args...\\n    );\\n}\\n\")), \"\\n\", React.createElement(_components.h1, null, \"使う。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"REQUIRE(3==msgpack_call([](int a, int b) { return a + b; }, 1, 2));\\nREQUIRE(-1==msgpack_call([](int a, int b) { return a - b; }, 1, 2));\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"valiadic template\"), \" おそるべし。\\n従来であれば、1引数、２引数・・・と引数の個数ごとに手作業でバージョンを増やさねばならなかったものが、わりとさくっと書けるな。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/06/cpp11_rpc.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h1","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
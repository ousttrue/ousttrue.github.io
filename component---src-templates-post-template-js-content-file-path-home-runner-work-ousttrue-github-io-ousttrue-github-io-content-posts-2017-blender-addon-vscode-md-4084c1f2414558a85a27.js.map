{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-blender-addon-vscode-md-4084c1f2414558a85a27.js","mappings":"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","sources":["webpack:///./content/posts/2017/blender_addon_vscode.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"VSCodeのリモートデバッグを利用してBlenderのPythonにデバッガをアタッチする。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://pypi.python.org/pypi/ptvsd\"\n  }, \"PTVSD\")), \"\\n\", React.createElement(_components.p, null, \"VisualStudioのPTVS向けのリモートデバッグモジュール。VSCodeも対応しているらしい。\\nリモート側でptvsdをimportして待ち受けて、VisualStudio側からtcp経由でアタッチする。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import ptvsd\\nptvsd.enable_attach(secret = 'secret', ('0.0.0.0', 3000))\\n\\nif os != 'Windows':\\n    ptvsd.wait_for_attach() # スクリプトが終わらないようにブロックする\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"+--------------+\\n|remoteのpython|\\n|         ptvsd|tcp:3000 <-- VisualStudio attach\\n+--------------+\\n\")), \"\\n\", React.createElement(_components.p, null, \"dos窓\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"> netstat -an | find \\\"3000\\\"\\n  TCP         0.0.0.0:3000           0.0.0.0:0              LISTENING\\n\")), \"\\n\", React.createElement(_components.p, null, \"確かに待っている。\\nTCP経由なのでptvsd側が、LinuxやRasPi、Blenderの組み込みPythonなどなんであってもアタッチできる。\\n素のPythonでやってみる\"), \"\\n\", React.createElement(_components.p, null, \"Windows10(64bit)\\nPython-3.6\\nPTVSD-3.0.0\"), \"\\n\", React.createElement(_components.p, null, \"PTVSDのバージョンが3.0.0でないと\\nデバッグアダプタープロセスが予期せず終了しました。\"), \"\\n\", React.createElement(_components.p, null, \"等のエラーが出てうまくいかぬ。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/DonJayamanne/pythonVSCode/issues/1039\"), \"\\n\", React.createElement(_components.p, null, \"ptvsdのインストール\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"> py -3.6 -m pip install ptvsd==3.0.0\\n\")), \"\\n\", React.createElement(_components.p, null, \"testプロジェクト\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"> mkdir ptvsd_test\\n\")), \"\\n\", React.createElement(_components.p, null, \"VSCodeでptvsd_testフォルダを開く。\\ntestスクリプト\\nptvsd_test/main.py\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import time\\n\\n# PTVSDを準備する\\nimport ptvsd\\nlisten = ('0.0.0.0', 3000)\\nptvsd.enable_attach('my_secret', listen)\\n\\nprint('wait_for_attach...', listen)\\nptvsd.wait_for_attach() # リモートデバッガの接続を待つ\\n\\ntime.sleep(1) # 接続後少し待つ\\nprint('connected')\\n\\n# デバッグするコード\\ni = 0\\nwhile True:\\n    print(i)\\n    i += 1\\n    time.sleep(1)\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \">py -3.6 main.py\\nwait_for_attach... ('0.0.0.0', 3000)\\n\")), \"\\n\", React.createElement(_components.p, null, \"VSCodeから接続\\nptvsd_test/main.pyを開いてデバッグ開始。構成の追加でpythonを選択する。\"), \"\\n\", React.createElement(_components.p, null, \"ptvsd_test/.vscode/launch.json\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\"\n  }, \"{\\n    // IntelliSense を使用して利用可能な属性を学べます。\\n    // 既存の属性の説明をホバーして表示します。\\n    // 詳細情報は次を確認してください: https://go.microsoft.com/fwlink/?linkid=830387\\n    \\\"version\\\": \\\"0.2.0\\\",\\n    \\\"configurations\\\": [\\n        {\\n            \\\"name\\\": \\\"Python\\\",\\n            \\\"type\\\": \\\"python\\\",\\n            \\\"request\\\": \\\"launch\\\",\\n            \\\"stopOnEntry\\\": true,\\n            \\\"pythonPath\\\": \\\"${config:python.pythonPath}\\\",\\n            \\\"program\\\": \\\"${file}\\\",\\n            \\\"cwd\\\": \\\"${workspaceRoot}\\\",\\n            \\\"env\\\": {},\\n            \\\"envFile\\\": \\\"${workspaceRoot}/.env\\\",\\n            \\\"debugOptions\\\": [\\n                \\\"WaitOnAbnormalExit\\\",\\n                \\\"WaitOnNormalExit\\\",\\n                \\\"RedirectOutput\\\"\\n            ]\\n        },\\n        { // これ\\n            \\\"name\\\": \\\"Python: Attach\\\",\\n            \\\"type\\\": \\\"python\\\",\\n            \\\"request\\\": \\\"attach\\\",\\n            \\\"localRoot\\\": \\\"${workspaceRoot}\\\",\\n            \\\"remoteRoot\\\": \\\"${workspaceRoot}\\\",\\n            \\\"port\\\": 3000,\\n            \\\"secret\\\": \\\"my_secret\\\",\\n            \\\"host\\\": \\\"localhost\\\"\\n        },\\n\\n        // 以降省略\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"デバッグの選択メニューでPython:Attachを選択。改めて開始。\\nうまく接続できればデバッグコンソールにprintした内容が表示される。\\nbreakポイントもステップ実行も可能。素晴らしい。\\nBlenderのAddOnでやってみる\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/Barbarbarbarian/Blender-VScode-Debugger\"), \"\\n\", React.createElement(_components.p, null, \"これ。\\nBlenderのPythonにptvsdをインストールする\\nBlenderを起動して以下のスクリプトを実行する。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import sys\\nfor x in sys.path:\\n    print(x)\\n\")), \"\\n\", React.createElement(_components.p, null, \"適当なパスを選んでそこにptvsd-3.0.0をコピーする。\\nptvsd-3.0.0.zipをダウンロード。\\n解凍してptvsdフォルダをBlenderのsys.pathに含まれていたC:/Program Files/Blender Foundation/Blenderにコピーした。\\nBlender-VScode-Debuggerをインストールする\"), \"\\n\", React.createElement(_components.p, null, \"File - UserPreferences - Add-ons と潜ってinstall Add-on from FileボタンからBlender_VScode_Debugger.pyを選択する。\\nAdd-onsからDevelopment: Debugger for Visual Codeを選択してチェックボックスをOnにする\\n三角を押してPreferencesを展開、Path of PTVSD module:にptvsdをインストールしたパスを設定する(うちではC:/Program Files/Blender Foundation/Blender)\\nSave - User Settings\"), \"\\n\", React.createElement(_components.p, null, \"実行してみる\\n3DViewでspaceを押してConnect to Visual Studio Code Debuggerを選択。\\ndos窓\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"> netstat -an | find \\\"3000\\\"\\n  TCP         0.0.0.0:3000           0.0.0.0:0              LISTENING\\n\")), \"\\n\", React.createElement(_components.p, null, \"待っている。\\n試しにAddOnを作ってみる\\n例えばWindows版のBlenderのAddOnパスは\\nC:/Users/\", React.createElement(_components.strong, null, \"USER_NAME\"), \"/AppData/Roaming/Blender Foundation/Blender/2.79/scripts/addons\\nです。\\nHello AddOnを作る。\\nhello.pyとhello/\", React.createElement(_components.strong, null, \"init\"), \".pyという選択肢があるが、後者で作る。\\ngitやVSCodeを使うのだからフォルダが独立している方がよろしい。\\nhelloフォルダを作って、VSCodeでフォルダを開いた。\\nhello/\", React.createElement(_components.strong, null, \"init\"), \".pyを作成。\"), \"\\n\", React.createElement(_components.p, null, \"https://docs.blender.org/manual/en/dev/advanced/scripting/addon_tutorial.html\"), \"\\n\", React.createElement(_components.p, null, \"を参考に。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"bl_info = {\\n    \\\"name\\\": \\\"Move X Axis\\\",\\n    \\\"category\\\": \\\"Object\\\",\\n}\\n\\nimport bpy\\n\\n\\nclass ObjectMoveX(bpy.types.Operator):\\n    \\\"\\\"\\\"My Object Moving Script\\\"\\\"\\\"      # Use this as a tool-tip for menu items and buttons.\\n    bl_idname = \\\"object.move_x\\\"        # Unique identifier for buttons and menu items to reference.\\n    bl_label = \\\"Move X by One\\\"         # Display name in the interface.\\n    bl_options = {'REGISTER', 'UNDO'}  # Enable undo for the operator.\\n\\n    def execute(self, context):        # execute() is called when running the operator.\\n\\n        # The original script\\n        scene = context.scene\\n        for obj in scene.objects:\\n            obj.location.x += 1.0\\n\\n        return {'FINISHED'}            # Lets Blender know the operator finished successfully.\\n\\ndef register():\\n    bpy.utils.register_class(ObjectMoveX)\\n\\n\\ndef unregister():\\n    bpy.utils.unregister_class(ObjectMoveX)\\n\\n\\n# This allows you to run the script directly from Blenders Text editor\\n# to test the add-on without having to install it.\\nif __name__ == \\\"__main__\\\":\\n    register()\\n\")), \"\\n\", React.createElement(_components.p, null, \"Blenderを再起動して、AddOnのチェックボックスを有効にする。\\n3DViewでスペースを押してMove X by oneを実行してみる。\\n動けば準備完了。\\nAddOnをステップ実行してみる\"), \"\\n\", React.createElement(_components.p, null, \"3DViewでConnect to Visual Studio Code Debugger\\nVSCodeで構成を追加してRemoteDebuggerでアタッチ\"), \"\\n\", React.createElement(_components.p, null, \"hello/.vscode/launch.json\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\"\n  }, \"        {\\n            \\\"name\\\": \\\"Python: Attach\\\",\\n            \\\"type\\\": \\\"python\\\",\\n            \\\"request\\\": \\\"attach\\\",\\n            \\\"localRoot\\\": \\\"${workspaceRoot}\\\",\\n            \\\"remoteRoot\\\": \\\"${workspaceRoot}\\\",\\n            \\\"port\\\": 3000,\\n            \\\"secret\\\": \\\"my_secret\\\",\\n            \\\"host\\\": \\\"localhost\\\"\\n        },\\n\")), \"\\n\", React.createElement(_components.p, null, \"VSCodeでexecute関数のscene=context.sceneにbreak pointをセットする\\n3DViewでMove X by one\"), \"\\n\", React.createElement(_components.p, null, \"うまくいった。\"), \"\\n\", React.createElement(_components.h2, null, \"Memo\"), \"\\n\", React.createElement(_components.p, null, \"Blenderプロセスが生きていればいいのでptvsd.wait_for_attach()する必要はない\\nPythonのターンになるまで接続が処理されないので、VSCodeからアタッチした後AddOnを実行するまでVSCodeは待ち状態になる\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/blender_addon_vscode.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","pre","code","strong","h2","_provideComponents","components","React","href","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
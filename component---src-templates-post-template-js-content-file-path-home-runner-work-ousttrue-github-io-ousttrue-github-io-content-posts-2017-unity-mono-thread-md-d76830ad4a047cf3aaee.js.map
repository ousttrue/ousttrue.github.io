{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-unity-mono-thread-md-d76830ad4a047cf3aaee.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,KAAM,OACNC,EAAG,MACFC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,KAAM,CACrFK,wBAAyB,CACvBC,OAAQ,2pFAER,KAAMF,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,kBACrD,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCXA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMY,EAAKC,IAAIC,YAAYC,OAAQf,EAAAA,cAAoBgB,EAAAA,GAAa,CAC7IjB,WAAYA,GACXQ,GACL,CACe,SAASU,EAAiBzB,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoBkB,EAAqB1B,GAC3F,C","sources":["webpack:///./content/posts/2017/unity_mono_thread.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    span: \"span\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">タイトルが長いが、RenderingスレッドでC#関数を呼び出すと次回play時に固まるの続きです。\\n\\n前回の記事についてメールで指摘をいただきました。\\n意訳\\n\\nmono_thread_detachすればいいよ\\n\\nなるほど、やってみよう。\\nmono_thread_detachとは\\n\\nhttp://docs.go-mono.com/index.aspx?link=xhtml%3Adeploy%2Fmono-api-threads.html\\n\\nそいう関数があることはわかった。名前しか分からん。\\n\\nhttp://www.mono-project.com/docs/advanced/embedding/\\nhttps://github.com/mono/mono/blob/master/docs/threading\\n\\nMonoをスクリプトエンジンとしてホスティングする場合に使うAPIらしい。\\nMonoエンジンでC#のコードを実行する場合実行スレッドでは事前にスレッドの初期化をする必要があり、他所で作られた既存のスレッドを初期化するのがmono_thread_attachらしい。 mono_thread_attachされたスレッドはMonoの終了時に回収対象として登録されるが、これを解除するのがmono_thread_detachのようだ。\\nやってみる\\ndocumentが見つからなかったので、使われているコードを参考にしてみる。\\n\\nhttps://github.com/jart/freeswitch/blob/master/src/mod/languages/mod_managed/mod_managed.cpp\\n\\nusing System;\\nusing System.Runtime.InteropServices;\\nusing UnityEngine;\\n\\n\\npublic class CallbackOnRenderThread : MonoBehaviour\\n{\\n    [DllImport(\\\"mono\\\")]\\n    static extern IntPtr mono_thread_current();\\n\\n    [DllImport(\\\"mono\\\")]\\n    static extern IntPtr mono_thread_detach(IntPtr p);\\n\\n    public int m_count;\\n    public IntPtr m_renderThread;\\n\\n    void OnRender(int eventID)\\n    {\\n        m_count++;\\n        m_renderThread = mono_thread_current();\\n    }\\n\\n    private void OnApplicationQuit()\\n    {\\n        Debug.Log(m_count);\\n\\n        if (m_renderThread != IntPtr.Zero)\\n        {\\n            Debug.LogFormat(\\\"detach thread: {0}\\\", m_renderThread);\\n            mono_thread_detach(m_renderThread);\\n            m_renderThread = IntPtr.Zero;\\n        }\\n    }\\n\\n    delegate void OnRenderFunc(int eventID);\\n    OnRenderFunc m_callback;\\n\\n    void Update()\\n    {\\n        m_callback = new OnRenderFunc(OnRender);\\n        var p = Marshal.GetFunctionPointerForDelegate(m_callback);\\n        GL.IssuePluginEvent(p, 0);\\n    }\\n}\\n\\nCollecting from unknown threadと怒られる・・・\\nならば、\\npublic class CallbackOnRenderThread : MonoBehaviour\\n{\\n    [DllImport(\\\"mono\\\")]\\n    static extern IntPtr mono_thread_current();\\n\\n    [DllImport(\\\"mono\\\")]\\n    static extern IntPtr mono_thread_detach(IntPtr p);\\n\\n    public int m_count;\\n    //public IntPtr m_renderThread;\\n\\n    void OnRender(int eventID)\\n    {\\n        try\\n        {\\n            m_count++;\\n        }\\n        finally\\n        {\\n            mono_thread_detach(mono_thread_current());\\n        }\\n    }\\n\\n    delegate void OnRenderFunc(int eventID);\\n    OnRenderFunc m_callback;\\n\\n    void Update()\\n    {\\n        m_callback = new OnRenderFunc(OnRender);\\n        var p = Marshal.GetFunctionPointerForDelegate(m_callback);\\n        GL.IssuePluginEvent(p, 0);\\n    }\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"できちゃった。\\nやったぜ。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/unity_mono_thread.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","span","p","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
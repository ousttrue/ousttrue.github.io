{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-05-16-lambda-md-7cc6778868ceef6efff8.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,OACNC,EAAG,MACFC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,8EAA+E,KAAMK,EAAAA,cAAoBR,EAAYI,KAAM,CACnNK,wBAAyB,CACvBC,OAAQ,8VAER,KAAMF,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mCAAoC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,oEAAqE,KAAMK,EAAAA,cAAoBR,EAAYI,KAAM,CACrPK,wBAAyB,CACvBC,OAAQ,4RAER,KAAMF,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gEAAiE,KAAMK,EAAAA,cAAoBR,EAAYI,KAAM,CAC9JK,wBAAyB,CACvBC,OAAQ,oUAER,KAAMF,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,cAAeK,EAAAA,cAAoBR,EAAYK,EAAG,CACnGM,KAAM,wDACL,wDAAyD,6DAA8DH,EAAAA,cAAoBR,EAAYK,EAAG,CAC3JM,KAAM,uFACL,uFAAwF,2CAA4C,KAAMH,EAAAA,cAAoBR,EAAYI,KAAM,CACjLK,wBAAyB,CACvBC,OAAQ,muBAER,KAAMF,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4FACrD,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOM,EAAYL,EAAAA,cAAoBK,EAAWd,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BC3BA,MAAMQ,EAAa,CACjBO,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYT,EAAAA,cAAoBU,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYR,EAAAA,cAAoB,OAAQ,KAAMQ,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,MAAME,EAAcD,EAAKE,IAAID,YAC7B,OAAOd,EAAAA,cAAoBgB,EAAAA,EAAQ,KAAMhB,EAAAA,cAAoB,KAAM,KAAMc,EAAYG,OAAQjB,EAAAA,cAAoB,MAAO,CACtHS,UAAW,cACVK,EAAYI,MAAQJ,EAAYI,KAAKC,OAAS,GAAKL,EAAYI,KAAKE,KAAIC,GAClErB,EAAAA,cAAoBsB,EAAAA,GAAM,CAC/BC,GAAI,SAASF,EAAG,IAChBG,SAAU,OACTxB,EAAAA,cAAoB,SAAU,KAAMqB,OACpCrB,EAAAA,cAAoByB,EAAAA,GAAa,CACpC1B,WAAYA,GACXS,GACL,CACe,SAASkB,EAAiBnC,GACvC,OAAOS,EAAAA,cAAoBW,EAAcpB,EAAOS,EAAAA,cAAoB2B,EAAqBpC,GAC3F,C","sources":["webpack:///./content/posts/2013/05/16/lambda.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"lambdaの引数の型を得たい\\nmsgpack-rpcの関数登録の都合上、 lambda関数から引数の型を得たい。\\n下記のような書き方をしたい。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">template \\nvoid register_func(const std::stiring &amp;func_name, R(*handler)(A1, A2)) {\\n// 関数登録 \\n}\\n\\nint main() { \\n    // errorになる \\n    register_func(“add”, [](int a, int b)-&gt;int{ return a+b; });\\n    return 0;\\n} </code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上記の書き方では普通の関数ポインタを受けることはできるのだが、\"), \"\\n\", React.createElement(_components.p, null, \"std::functionとlambdaは受けられない。\\nstd::functionを受けるには下記のようにすることでできた。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">c++ template&lt;typename R, typename A1, typename A2&gt; void register_func(const std::string &amp;func_name, std::function&lt;R(A1, A2) handler) {     // }</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"残り、lambdaを受けられる記述方法を知りたいのだがどうしたらよいものか。\\n下記のような手はうまくいかなかった・・・\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">c++ template&lt;typename F, typename R, typename A1, typename A2&gt; void add_handler(F handler, const std::string &amp;method) {     std::function&lt;R(A1, A2)&gt; f(handler);     //add_handler }</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"こちらのサイトから\\n\", React.createElement(_components.a, {\n    href: \"http://d.hatena.ne.jp/osyo-manga/20121205/1354674180\"\n  }, \"http://d.hatena.ne.jp/osyo-manga/20121205/1354674180\"), \"\\ndecltypeを使ったらなんかできそうな感じがしたので粘っていたのだが、\\n目的そのものの記事を発見した。\\n\", React.createElement(_components.a, {\n    href: \"http://stackoverflow.com/questions/6512019/can-we-get-the-type-of-a-lambda-argument\"\n  }, \"http://stackoverflow.com/questions/6512019/can-we-get-the-type-of-a-lambda-argument\"), \"\\n微妙にそのままではコンパイルが通らなかったので少し工夫したらうまくいった。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">// ret template Ret helper0(Ret (F::*)(Rest…));\\ntemplate Ret helper0(Ret (F::*)(Rest…) const);\\n// 1 template A1 helper1(Ret (F::*)(A1, Rest…));\\ntemplate A1 helper1(Ret (F::*)(A1, Rest…) const);\\n// 2 template A2 helper2(Ret (F::*)(A1, A2, Rest…));\\ntemplate A2 helper2(Ret (F::*)(A1, A2, Rest…) const);\\ntemplate void add_handler(F handler, const std::string &amp;method) {\\ntypedef decltype(handler) functor; typedef\\ndecltype(helper0(&amp;functor::operator())) R; typedef\\ndecltype(helper1(&amp;functor::operator())) A1; typedef\\ndecltype(helper2(&amp;functor::operator())) A2;\\n// register function...\\n} </code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"F handlerで関数ポインタ、lambda、std::function等全部受けられるようになったらしくoverloadが不要になった。\\ndecltypeなんかすごいな。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/05/16/lambda.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","a","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
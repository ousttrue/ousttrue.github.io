{"version":3,"file":"component---content-posts-2015-12-07-threejs-04-md-f54864cf10e70a889af5.js","mappings":"wHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,IAAK,MACLC,KAAM,OACNC,EAAG,MACFC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,IAAK,KAAMK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,s2EAA66E,KAAMI,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,sEACtmF,CAKA,UAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECmBO,MAAMY,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2015/12/07/threejs_04.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.pre, null, React.createElement(_components.code, null, \"source\\n外部のJSONに記述されたモデルを読み込む機能がある。\\nExternal models in Three.js\\nを見てやってみた。\\nOnLoad(geometry: THREE.Geometry, materials: THREE.Material[]) {\\n    // create a mesh with models geometry and material\\n    var material = new THREE.MeshPhongMaterial(materials[0]);\\n    var mesh = new THREE.Mesh(\\n        geometry,\\n        material\\n    );\\n\\n    mesh.rotation.y = -Math.PI / 5;\\n\\n    this.scene.add(mesh);\\n    this.Render();\\n}\\n\\nOnProgress(event: any) {\\n    console.log('OnProgress: ', event);\\n}\\n\\nOnError(event: any) {\\n    console.log('OnError: ', event);\\n}\\n\\nAddModelFromJson(path: string) {\\n    var loader = new THREE.JSONLoader(); // init the loader util\\n\\n    // init loading\\n    loader.load(path, this.OnLoad.bind(this)\\n        , this.OnProgress.bind(this)\\n        , this.OnError.bind(this));\\n}\\n\\nJSONLoaderクラスを初期化してloadをコール、loadは非同期に完了してOnLoadコールバックでMeshを組み立ててシーンに追加するという流れ。\\nOnLoadにMeshが返ってくればいいと思うのだが・・・\\nモデルはサンプルファイルを探したのだが見つからなかったので、\\nThree.js の JSONLoader のメモ\\nを見てBlenderのThree.js exporterでお猿さんを作ってみました。\\n一応、茶色いマテリアルをつけたのだけどうまくいかず。\\nフォーマットはどうなっているのか？\\ncubeもエクスポートしてみた。\\ncube.json\\n{\\n    \\\"faces\\\": [35,2,0,1,3,0,0,1,2,3,35,3,7,6,2,0,3,4,5,0,35,7,5,4,6,0,4,6,7,5,35,0,4,5,1,0,1,7,6,2,35,0,2,6,4,0,1,0,5,7,35,5,7,3,1,0,6,4,3,2],\\n    \\\"name\\\": \\\"CubeGeometry.1\\\",\\n    \\\"metadata\\\": {\\n        \\\"generator\\\": \\\"io_three\\\",\\n        \\\"vertices\\\": 8,\\n        \\\"type\\\": \\\"Geometry\\\",\\n        \\\"uvs\\\": 0,\\n        \\\"version\\\": 3,\\n        \\\"faces\\\": 6,\\n        \\\"materials\\\": 1,\\n        \\\"normals\\\": 8\\n    },\\n    \\\"vertices\\\": [-1,-1,1,-1,1,1,-1,-1,-1,-1,1,-1,1,-1,1,1,1,1,1,-1,-1,1,1,-1],\\n    \\\"materials\\\": [{\\n        \\\"depthWrite\\\": true,\\n        \\\"colorDiffuse\\\": [0,0.64,0.040691],\\n        \\\"depthTest\\\": true,\\n        \\\"specularCoef\\\": 50,\\n        \\\"blending\\\": \\\"NormalBlending\\\",\\n        \\\"shading\\\": \\\"phong\\\",\\n        \\\"colorEmissive\\\": [0,0,0],\\n        \\\"opacity\\\": 1,\\n        \\\"transparent\\\": false,\\n        \\\"DbgIndex\\\": 0,\\n        \\\"visible\\\": true,\\n        \\\"wireframe\\\": false,\\n        \\\"colorSpecular\\\": [0.5,0.5,0.5],\\n        \\\"colorAmbient\\\": [0,0.64,0.040691],\\n        \\\"DbgName\\\": \\\"Material\\\",\\n        \\\"DbgColor\\\": 15658734\\n    }],\\n    \\\"uvs\\\": [],\\n    \\\"normals\\\": [-0.577349,-0.577349,-0.577349,-0.577349,-0.577349,0.577349,-0.577349,0.577349,0.577349,-0.577349,0.577349,-0.577349,0.577349,0.577349,-0.577349,0.577349,-0.577349,-0.577349,0.577349,0.577349,0.577349,0.577349,-0.577349,0.577349]\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"JSON Model format 3 (Soon to be deprecated)\\nこれっぽいですな。\\nなるほど。なるほど。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","pre","code","p","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
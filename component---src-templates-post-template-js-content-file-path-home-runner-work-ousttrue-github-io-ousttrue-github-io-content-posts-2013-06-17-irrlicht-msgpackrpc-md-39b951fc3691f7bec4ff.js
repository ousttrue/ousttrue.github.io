"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7628],{4509:function(n,e,t){t.r(e),t.d(e,{default:function(){return m}});var i=t(1151),r=t(7294);function u(n){const e=Object.assign({span:"span"},(0,i.ah)(),n.components);return r.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">IrrlichtにMsgPackRPCを仕込む\nOculusの通販ステータスが早くもProcessingに変わって届くのが楽しみな今日この頃。\nレンダリングエンジンにはIrrlichtを選択したのであるが、\nそのままだとシーンを構築するとか諸々の作業がC++直叩きになる。\nこれだとさすがに大変なのでMsgPackRPCでラップして外部のツールから\n操作しようと構想しておったのだが始めてみると早速問題に突き当たった。\nオブジェクトを生成してそのメソッドをコールするのにどうすればいいのか。\nこういう場合だ。\nIMesh *mesh=CreateMesh("miku.pmd");\nmesh->SetPosition(0, 0, 5);\n\nMsgPackRPC経由だと以下のような感じか。\n# pythonとかそういうの\nclient=msgpac.rpc.client()\nmesh=client.call("CreateMesh", "miku.pmd")\nclient.call("Mesh_SetPosition", mesh, 0, 0, 5)\n\n1つめのCreateMeshはグローバル関数かシングルトン的オブジェクトのメソッド呼び出しになるので特に問題は無い。\n2つめはSetPositionのthisとしてmeshを送ってやる必要がある。\nここでmsgpack的にはIMesh*をシリアライズ/デシリアライズすることが必要になる。\n案１ ポインタを整数値としてキャストすればいいじゃない\ntemplate &lt;typename Stream>\ninline packer&lt;Stream>&amp; operator&lt;&lt; (packer&lt;Stream>&amp; o, IMesh *v)\n{\n    // ポインタをintにキャスト\n    o.pack((int)v);\n    return o;\n}\n\ninline IMesh *v operator>> (object o, IMesh* v)\n{\n    unsigned int p;\n    o.convert(&amp;p):\n\n    // intをポインタにキャスト\n    v=(IMesh*)p;\n\n    return v;\n}\n\nさすがにワイルドすぎる。というかポインタが既に開放されている場合になすすべが無いので没\n案２ 適当にユニークなIDを振る\ntemplate &lt;typename Stream>\ninline packer&lt;Stream>&amp; operator&lt;&lt; (packer&lt;Stream>&amp; o, IMesh *v)\n{\n    // ポインタのuid値\n    o.pack(v->uid());\n    return o;\n}\n\ninline IMesh *v operator>> (object o, IMesh* v)\n{\n    unsigned int uid;\n    o.convert(&amp;uid):\n\n    // uid値からポインタを得る\n    v=IMesh::get_from_uid(uid);\n\n    return v;\n}\n\nIrrlichtだと本体側に改造が要るけどこれでいってみるか。\ntemplate&lt;typename T>\nclass IDGenerator\n{\n    unsigned int m_uid;\n\npublic:\n    IDGenerator():m_uid(generate_uid())\n    {\n        m_uid_map.insert(std::make_pair(m_uid, this));\n    }\n\n    unsigned int uid()const\n    {\n        return m_uid;\n    }\n\n////////////////////\n// static\n////////////////////\nprivate:\n    static unsigned int m_next_uid=1;\n    static std::hash_map&lt;unsigned int, T*> m_uid_map;\npublic:\n    static unsigned int generate_uid(){\n        return m_next_uid++;\n    }\n\n    statc T* get_from_uid(unsigned int uid){\n        auto found=m_uid_map.find(uid);\n        if(found==m_uid_map.end()){\n            return 0;\n        }\n        return found->second;\n    }\n};\n\n// 継承階層のIReferenceCountedの下あたりにこんな感じで介入する予定\nclass IMesh : public virtual IReferenceCounted, public IDGenerator&lt;IMesh>\n{\n};\n\nうまくいくかやってみるとしよう。\n書いてみた\n自由に書いてみたらこうなった。templateクラスのスタティックメンバ変数の書き方を学んだ。\nhttp://d.hatena.ne.jp/higepon/20100803/1280834422\ntemplate&lt;typename T>\nclass IDGenerator\n{\n    struct Deleter{\n        unsigned int m_uid;\n\n        Deleter(unsigned int uid): m_uid(uid){}\n        ~Deleter(){ remove_from_map(m_uid); }\n    };\n    Deleter m_deleter;\n    unsigned int m_uid;\n\npublic:\n    IDGenerator():m_uid(generate_uid()), m_deleter(m_uid)\n    {\n        s_uid_map[m_uid]=this;\n    }\n\n    unsigned int uid()const\n    {\n        return m_uid;\n    }\n\n    ////////////////////\n    // static\n    ////////////////////\nprivate:\n    static core::map&lt;unsigned int, IDGenerator*> s_uid_map;\npublic:\n    static unsigned int generate_uid(){\n        static unsigned int next_uid=1;\n        return next_uid++;\n    }\n\n    static T* get_from_uid(unsigned int uid){\n        return s_uid_map.find(uid);\n    }\n\n    static void remove_from_map(unsigned int uid){\n        s_uid_map.remove(uid);\n    }\n};\ntemplate &lt;typename T> core::map&lt;unsigned int, IDGenerator&lt;T>*> IDGenerator&lt;T>::s_uid_map;\n\nしかし、この設計だとstaticメンバがdll境界を越えて２つ存在してうまくいかない罠があった。没\n案3 適当にユニークなIDを振る(非テンプレート)\nirr::IReferenceCountedを改造する。\n小賢しいtemplateをやめてべたにグローバル変数を隠蔽する方式を導入した。\nclass IReferenceCounted\n{\npublic:\n\n    //! Constructor.\n    IReferenceCounted()\n        : DebugName(0), ReferenceCounter(1), UID(get_uid())\n    {\n        register_uid(UID, this);\n    }\n\n    u32 uid(){ return UID; }\n\n    //! Destructor.\n    virtual ~IReferenceCounted()\n    {\n        unregister_uid(UID);\n    }\n\n\n// 省略\n\n};\n\n\n#include "IDGenerator.h"\n#include "IReferenceCounted.h"\n#include "irrMap.h"\n\nnamespace irr {\n\n    extern "C" IRRLICHT_API u32 get_uid()\n    {\n        static u32 uid=1;\n        return uid++;\n    }\n\n    static core::map&lt;u32, IReferenceCounted*> g_map;\n\n    extern "C" IRRLICHT_API void register_uid(u32 uid, IReferenceCounted *p)\n    {\n        g_map.set(uid, p);\n    }\n\n    extern "C" IRRLICHT_API void unregister_uid(u32 uid)\n    {\n        auto found=g_map.remove(uid);\n    }\n\n    extern "C" IRRLICHT_API IReferenceCounted* get_from_uid(u32 uid)\n    {\n        auto found=g_map.find(uid);\n        if(!found){\n            return 0;\n        }\n        return found->getValue();\n    }\n}\n\n動作確認できた。\nここまでの作業でMsgPackRPCを使ったIrrlichtエクスポートについて見通しを得ることができた。\nPythonやLuaから使えるようにするのと同じような作業でリモートから関数をコールできるようになるのでいい感じだ。\n呼び出し側にPythonのMsgPackRPCを使えば違う言語からでも呼び出せるので一石二鳥というもの。\nということで引き続き作業を進める。\nMsgPackRPCのリモート呼び出しを利用したシーンエディタを作りながら表示できるものを増やしていく。</code></pre></div>'}})}var a=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?r.createElement(e,n,r.createElement(u,n)):u(n)},s=t(8678),d=t(1883),c=t(8838);const l={code:n=>{let{children:e,className:t}=n;return t?r.createElement(c.Z,{className:t},e):r.createElement("code",null,e)}};function o(n){let{data:e,children:t}=n;const u=e.mdx.frontmatter;return r.createElement(s.Z,null,r.createElement("h1",null,u.title),r.createElement("div",{className:"tags-index"},u.tags&&u.tags.length>0&&u.tags.map((n=>r.createElement(d.rU,{to:"/tags/"+n+"/",itemProp:"url"},r.createElement("button",null,n))))),r.createElement(i.Zo,{components:l},t))}function m(n){return r.createElement(o,n,r.createElement(a,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-06-17-irrlicht-msgpackrpc-md-39b951fc3691f7bec4ff.js.map
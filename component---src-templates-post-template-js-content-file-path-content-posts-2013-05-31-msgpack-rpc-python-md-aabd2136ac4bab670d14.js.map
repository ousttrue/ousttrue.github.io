{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2013-05-31-msgpack-rpc-python-md-aabd2136ac4bab670d14.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,KAAM,SACLC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBN,EAAYG,KAAM,CAC3CI,wBAAyB,CACvBC,OAAQ,6iHAGd,CAKA,MAJA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWX,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BCTA,MAAMM,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,MAAME,EAAcD,EAAKE,IAAID,YAC7B,OAAOb,EAAAA,cAAoBe,EAAAA,EAAQ,KAAMf,EAAAA,cAAoB,KAAM,KAAMa,EAAYG,OAAQhB,EAAAA,cAAoB,MAAO,CACtHQ,UAAW,cACVK,EAAYI,MAAQJ,EAAYI,KAAKC,OAAS,GAAKL,EAAYI,KAAKE,KAAIC,GAClEpB,EAAAA,cAAoBqB,EAAAA,GAAM,CAC/BC,GAAI,SAASF,EAAG,IAChBG,SAAU,OACTvB,EAAAA,cAAoB,SAAU,KAAMoB,OACpCpB,EAAAA,cAAoBwB,EAAAA,GAAa,CACpCzB,WAAYA,GACXQ,GACL,CACe,SAASkB,EAAiBhC,GACvC,OAAOO,EAAAA,cAAoBU,EAAcjB,EAAOO,EAAAA,cAAoB0B,EAAqBjC,GAC3F,C","sources":["webpack:///./content/posts/2013/05/31/msgpack-rpc-python.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">おれおれmsgpack-rpc-pythonを作る\\nMsgPackRPCのpythonバインディング(クライアント側)が必要になったのでmsgpack-rpc-pythonを使ってみたのだが、\\nGUI(pyqt)に載せて接続制御とエラーハンドリングを細やかに制御したいので俺俺で類似品を作ることにした。\\ntonado-msgpackと名付けて取り合えず作業開始。\\nhttps://github.com/ousttrue/tornado-msgpack\\nmsgpack-rpc-pythonのおかげでtornadoの存在を知ったのだがtornado.ioloopが見れば見るほどboost::asioっぽい。\\nということで、c++で作成中のmsgpack-rpc-asioのpython版のような感じのAPIにしてみた。\\n以下の点を考慮している。\\n\\ntornado.ioloopを隠さない\\ntornado.ioloopをスレッドに乗せて回しっぱなしにする\\ntornado.ioloopひとつで複数の接続を扱う\\ndispatcherを乗せ換え易くする。\\n接続ステータスの変化をコールバックで受け取る\\n非同期リクエストのコールバックを早期にセットする\\nTCP以外は考慮しない\\n\\nプロジェクト作成\\ntonado_msgpack/\\n    setup.py\\n    sample/\\n        sample.py\\n    tonado_msgpack\\n\\nsetup.py\\nfrom distutils.core import setup\\n\\nsetup(\\n    name='tonado_msgpack',\\n    version='0.1',\\n    py_modules=['tonado_msgpack'],\\n    )\\n\\n作業開始\\n$ python setup.py develop --user\\n\\nsample/sample.py\\n#!/usr/bin/env python\\n\\nimport tornado_msgpack\\nimport tornado\\n\\nif __name__==\\\"__main__\\\":\\n    port=18080\\n\\n    # dispatcher\\n    dispatcher=tornado_msgpack.Dispatcher()\\n    def add(a, b):\\n        return a+b\\n    dispatcher.add_handler(\\\"add\\\", add)\\n\\n    # server\\n    server_loop=tornado.ioloop.IOLoop()\\n    def on_receive(msg, session):\\n        result=dispatcher.dispatch(msg)\\n        session.send_async(result)\\n    server=tornado_msgpack.Server(server_loop)\\n    server.listen(\\\"localhost\\\", port)\\n    server_thread=threading.Thread(target=lambda : server_loop.start() )\\n\\n    # clinet\\n    client_loop=tornado.ioloop.IOLoop()\\n    client=tornado_msgpack.Client(client_loop)\\n    def on_status_changed(status):\\n        print(status)\\n    clinet.attach_status_callback(on_status_changed)\\n    client.connect(\\\"localhost\\\", port)\\n    clinet_thread=threading.Thread(target=lambda : client_loop.start() )\\n\\n    # request\\n    def on_receive(result):\\n        print(result)\\n\\n    future=clinet.call_async_with_callback(on_receive, \\\"add\\\", 1)\\n    future.join()\\n\\n    future=clinet.call_async_with_callback(on_receive, \\\"add\\\", 1, 2)\\n    future.join()\\n\\n    future=clinet.call_async_with_callback(on_receive, \\\"add\\\", 1, 2, 3)\\n    future.join()\\n\\n    print(\\\"stop client...\\\")\\n    client_loop.stop()\\n    clinet_thread.join()\\n\\n    print(\\\"stop server...\\\")\\n    server_loop.stop()\\n    server_thread.join()\\n\\n    print(\\\"done\\\")\\n\\nとりあえずこんな感じを予定。\\n./sample/sample.pyでシンタックスエラーが出なくなるところまで確認。\\ntornado_msgpackを順次実装していく。\\nTornado Reference - http://www.tornadoweb.org/en/stable/\\nだいたい動くようになった。\\n$ ./sample/sample\\nconnected\\n&lt;_MainThread(MainThread, started 140102020679424)>:send 9 bytes\\n&lt;Thread(Thread-1, started 140101931136768)>:on_read\\n&lt;Thread(Thread-1, started 140101931136768)>:send 48 bytes\\n&lt;Thread(Thread-2, started 140101918488320)>:on_read\\non_receive:[1, 1, True, 'add() takes exactly 2 arguments (1 given)']\\n&lt;_MainThread(MainThread, started 140102020679424)>:send 10 bytes\\n&lt;Thread(Thread-1, started 140101931136768)>:on_read\\n&lt;Thread(Thread-1, started 140101931136768)>:send 5 bytes\\n&lt;Thread(Thread-2, started 140101918488320)>:on_read\\non_receive:[1, 2, False, 3]\\n&lt;_MainThread(MainThread, started 140102020679424)>:send 11 bytes\\n&lt;Thread(Thread-1, started 140101931136768)>:on_read\\n&lt;Thread(Thread-1, started 140101931136768)>:send 59 bytes\\n&lt;Thread(Thread-2, started 140101918488320)>:on_read\\non_receive:[1, 3, True, 'add() takes exactly 2 positional arguments (3 given)']\\nstop client...\\nstop server...\\ndone\\n\\nサーバースレッドのioloopと、クライアントスレッドのioloopが相互にやり取りしている感じでちゃんと動いている。</code></pre></div>\"\n    }\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/05/31/msgpack-rpc-python.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-0101-rawtypes-md-6d6f444d16d79ecb9e1f.js","mappings":"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","sources":["webpack:///./content/posts/2022/0101-rawtypes.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"rawtypes 作ってみる\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cython</code>\"\n    }\n  }), \" から \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pybind11</code>\"\n    }\n  }), \" に乗り換えを試みたのだが、\\n一歩目で躓いた。\"), \"\\n\", React.createElement(_components.p, null, \"不完全型のポインタをそのまま返す方法がわからん。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = NULL);</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ImGuiContext</code>\"\n    }\n  }), \" は前方宣言なのです。\"), \"\\n\", React.createElement(_components.p, null, \"自分でやろうと思った。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ctypes</code>\"\n    }\n  }), \" と併用することを前提にした省機能のバインダー、名付けて \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">rawtypes</code>\"\n    }\n  }), \" を作ってみよう。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">c++</code>\"\n    }\n  }), \" の関数呼び出しのちょっとしたコード生成をする。\\n基本的に \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ctypes.c_void_p</code>\"\n    }\n  }), \" で済ます。\\n型の宣言が必要なところは、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ctypes.Structure</code>\"\n    }\n  }), \" により \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">python</code>\"\n    }\n  }), \" 側で宣言。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">c++</code>\"\n    }\n  }), \" から返す時には、キャストする。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">return</span> ctypes<span class=\\\"token punctuation\\\">.</span>cast<span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">,</span> ctypes<span class=\\\"token punctuation\\\">.</span>POINTER<span class=\\\"token punctuation\\\">(</span>CTYPES_TYPE<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"object の所有権 はまじめに探求しない。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"python で作って、python で開放する(cypte.Struct object)\"), \"\\n\", React.createElement(_components.li, null, \"c++ で作ったのを cast して python に渡すが参照のみ(cast された ctypes.Struct)。無効なものにアクセスしないようにプログラマがー注意する\"), \"\\n\", React.createElement(_components.li, null, \"それ以外は値渡し\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"これで十分。\\n主要な狙いは、\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"static library のリンク\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">c++</code>\"\n    }\n  }), \" 関数の呼び出し\"), \"\\n\", React.createElement(_components.li, null, \"構造体の値渡しを \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">c++</code>\"\n    }\n  }), \" でラップする\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"で、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ctypes</code>\"\n    }\n  }), \" の苦手なところだけをやる。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">luajit ffi</code>\"\n    }\n  }), \" に倣ったスタイルでまいる。\"), \"\\n\", React.createElement(_components.h2, null, \"動いた\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/pydear\"), \"\\n\", React.createElement(_components.p, null, \"ImGui ひととおりできた。\\nもうちっとパッケージング(sdist, wheel)を整理したら形が整う。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">github action</code>\"\n    }\n  }), \" で \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">wheel</code>\"\n    }\n  }), \" をビルドする技もできた(\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">windows-64bit + python-3.10</code>\"\n    }\n  }), \" のみ実験)。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">str</code>\"\n    }\n  }), \" と \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">bytes</code>\"\n    }\n  }), \" の切りわけも \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">C-API</code>\"\n    }\n  }), \" で書けたし、慣れれば直接 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">C-API</code>\"\n    }\n  }), \" を使った方が便利そう。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Py_INCREF</code>\"\n    }\n  }), \" \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Py_DECREF</code>\"\n    }\n  }), \" による参照管理と、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PyErr_Clear</code>\"\n    }\n  }), \" 等のエラーハンドリングなど\\nを抑えればよさそう。\"), \"\\n\", React.createElement(_components.h2, null, \"pypi\"), \"\\n\", React.createElement(_components.p, null, \"https://pypi.org/project/pydear/\"), \"\\n\", React.createElement(_components.p, null, \"github actions で wheel をビルドして、 pypi にアップロードするところまでできた。\\nあと、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">sdist</code>\"\n    }\n  }), \" も作る。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pip install pydear</code>\"\n    }\n  }), \" して使えるようになった。\\n使いながら整備していこう。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pyi</code>\"\n    }\n  }), \" が含まれているので、ある程度のインテリセンスが効くところがよい。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"[ ] rawtypes をライブラリとして分離する\"), \"\\n\", React.createElement(_components.li, null, \"[ ] clang.cindex でコード生成した結果を \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">sdist</code>\"\n    }\n  }), \" に含める\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2022/0101-rawtypes.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","span","ul","li","h2","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
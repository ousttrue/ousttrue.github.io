{"version":3,"file":"component---content-posts-2017-python-logger-md-e9ecf882acb9b781e528.js","mappings":"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","sources":["webpack:///./content/posts/2017/python_logger.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Pythonのロガーの設定をどうすればいいのか。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://qiita.com/amedama/items/b856b2f30c2f38665701\"\n  }, \"ログ出力のための print と import logging はやめてほしい\")), \"\\n\", React.createElement(_components.p, null, \"を元に模索してみた。\\n今使っている設定\\nすべてのファイルの先頭にはこれだけ書いておく。\\nいわばログ入力の設定。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"from logging import getLogger\\nlogger = getLogger(__name__)\\n\")), \"\\n\", React.createElement(_components.p, null, \"これとは別に、ログ出力の設定を一か所だけ記述する。\\nメインの始まるところがいいんでないか。\\n他のライブラリをimportするより前に書きたいということもあるだろうからその辺はお好みで。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"if __name__=='__main__':\\n    # defaultのlogレベルではdebug出ないよ\\n    logger.debug('before')\\n\\n    from logging import basicConfig, DEBUG\\n    basicConfig(\\n        level=DEBUG,\\n        datefmt='%H:%M:%S',\\n        format='%(asctime)s[%(levelname)s][%(name)s.%(funcName)s] %(message)s'\\n    )\\n\\n    # 以降出る\\n    logger.debug('after')\\n\")), \"\\n\", React.createElement(_components.p, null, \"以上で、デフォルトのログ設定を使ってログが画面に出力される。\\nデフォルトのログ設定とは\\n上記のプログラムでは以下のようにログが流れる。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"logger.debug('message')\\n  |\\n  v            propagate(親にメッセージが伝搬する)\\nlogger(__name__) -> logger('')\\n  handlers[           handlers[\\n  ]                     Streamhandler -> コンソール画面\\n                      ]\\n\")), \"\\n\", React.createElement(_components.p, null, \"pythonのロガーは木構造\\n\", React.createElement(_components.code, null, \"getLogger(__name__)\"), \" で得たロガーは \", React.createElement(_components.code, null, \"__name__\"), \" という名前になり、\", React.createElement(_components.code, null, \"''\"), \" という名のロガーが親になる。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"print(getLogger(''))\\n<RootLogger root (WARNING)>\\n\")), \"\\n\", React.createElement(_components.p, null, \"というように \", React.createElement(_components.code, null, \"''\"), \" ロガーはルートロガーである。\\nどういう基準で親子が決まるかというと名前ベースで \", React.createElement(_components.code, null, \"''\"), \" がすべての親、その子 \", React.createElement(_components.code, null, \"'hoge'\"), \" 、さらにその子 \", React.createElement(_components.code, null, \"'hoge.fuga'\"), \" というように \", React.createElement(_components.code, null, \".\"), \" をセパレータとしたパス名で決めているぽい。 \", React.createElement(_components.code, null, \"getLogger(__name__)\"), \" という風にロガーを得れば、とりあえず \", React.createElement(_components.code, null, \"getLogger('')\"), \" の子孫になる。\"), \"\\n\", React.createElement(_components.p, null, \"https://docs.python.org/2/library/logging.html#logger-objects\"), \"\\n\", React.createElement(_components.p, null, \"さらにログは木構造を親に向かって遡りながら、通り道にあったhandlerに出力される。\\nなのですべての親になるルートロガーにひとつだけhandlerをセットしておけばよい。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"print(logger.handlers)\\n[]\\n\")), \"\\n\", React.createElement(_components.h1, null, \"ルートロガーにはデフォルトでStreamHandlerがセットされている\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"print(getLogger('').handlers)\\n[<StreamHandler <stderr> (NOTSET)>]\\n\")), \"\\n\", React.createElement(_components.p, null, \"親に向かって流すかどうかを設定するには以下のようにする。\"), \"\\n\", React.createElement(_components.h1, null, \"親に流さない\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"logger.propagate=False\\n\")), \"\\n\", React.createElement(_components.p, null, \"前知識としてこれくらいあればカスタマイズできる。\\n出力のカスタマイズ\\n基本的に、ルートロガーに好みのフォーマットやハンドラを設定することになると思う。\\nデフォルトのStreamHandlerを削除する\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"getLogger('').handlers.clear()\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Formatを変えよう\"), \"\\n\", React.createElement(_components.p, null, \"サーバー風の時刻付きのフォーマットとか。\"), \"\\n\", React.createElement(_components.h2, null, \"デフォルトのハンドラを得る\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"handler=getLogger('').handlers[0]\\n\")), \"\\n\", React.createElement(_components.h2, null, \"もしくは自前で作る\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"from logging import StreamHandler\\nhandler=StreamHandler()\\ngetLogger('').addHandler(handler)\\n\\nfrom logging import Formatter\\nformatter=Formatter('%(name)s => %(asctime)s [%(levelname)s] %(message)s')\\nhandler.setFormatter(formatter)\\n\")), \"\\n\", React.createElement(_components.p, null, \"使える変数は、LogRecord attributesらしい。\"), \"\\n\", React.createElement(_components.p, null, \"https://docs.python.org/2/library/logging.html#logrecord-attributes\"), \"\\n\", React.createElement(_components.p, null, \"日付のカスタマイズは？\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"basicConfig(\\n       datefmt='%H:%M:%S',\\n       format='%(asctime)s[%(levelname)s] %(name)s.%(funcName)s => %(message)s')\\n       )\\n\")), \"\\n\", React.createElement(_components.h2, null, \"色付きにしよう\"), \"\\n\", React.createElement(_components.p, null, \"おされなコンソール\"), \"\\n\", React.createElement(_components.p, null, \"Pythonで色つきログを - rainbow_logging_handler をPyPIにリリースしました\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"from rainbow_logging_handler import RainbowLoggingHandler\\nhandler = RainbowLoggingHandler(sys.stderr)\\ngetLogger('').addHandler(handler)\\n\")), \"\\n\", React.createElement(_components.p, null, \"QtのWidgetに出力する\\nStackOverflowとかで見つけた気がするがとりあえず。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/buha/gpibcs/blob/master/qplaintexteditlogger.py\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"class QPlainTextEditLogger(logging.Handler):\\n    '''\\n    Logger\\n    '''\\n    def __init__(self):\\n        super().__init__()\\n        self.widget=None\\n\\n    def set_widget(self, widget):\\n        self.widget = widget\\n        self.widget.setReadOnly(True)\\n\\n    def emit(self, record):\\n\\n        msg = self.format(record)\\n        if not self.widget:\\n            print(msg)\\n            return\\n\\n        if not msg.endswith(\\\"\\\\n\\\"):\\n            msg+=\\\"\\\\n\\\"\\n        self.widget.textCursor().movePosition(QtGui.QTextCursor.Start)\\n        self.widget.textCursor().insertText(msg)\\n        #self.widget.insertPlainText(msg)\\n\\n    def write(self, m):\\n        pass\\n\\nhandler=QPlainTextEditLogger()\\ngetLogger('').addHandler(handler)\\n\")), \"\\n\", React.createElement(_components.p, null, \"ログレベル別に色を付けてみる\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"    def emit(self, record):\\n        msg = self.format(record)\\n        if not self.widget:\\n            print(msg)\\n            return\\n\\n        if record.levelno == DEBUG:\\n            msg = f'<font color=\\\"gray\\\">{msg}</font><br>'\\n        elif record.levelno == WARNING:\\n            msg = f'<font color=\\\"orange\\\">{msg}</font><br>'\\n        elif record.levelno == ERROR:\\n            msg = f'<font color=\\\"red\\\">{msg}</font><br>'\\n        else:\\n            msg = f'{msg}<br>'\\n\\n        self.widget.textCursor().movePosition(QtGui.QTextCursor.Start)\\n        self.widget.textCursor().insertHtml(msg)\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","pre","code","h1","h2","_provideComponents","components","React","href","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
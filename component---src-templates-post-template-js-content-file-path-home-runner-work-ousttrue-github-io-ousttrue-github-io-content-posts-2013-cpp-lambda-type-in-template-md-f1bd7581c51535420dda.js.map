{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-cpp-lambda-type-in-template-md-f1bd7581c51535420dda.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,OACNC,EAAG,MACFC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,mBAAoB,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,4DAA6D,KAAMM,EAAAA,cAAoBT,EAAYI,IAAK,KAAMK,EAAAA,cAAoBT,EAAYK,KAAM,CAC/SK,UAAW,gBACV,+XAAgY,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,gEAAiE,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,sCAAuC,KAAMM,EAAAA,cAAoBT,EAAYI,IAAK,KAAMK,EAAAA,cAAoBT,EAAYK,KAAM,CAC9pBK,UAAW,gBACV,qJAAsJ,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,+DAAgE,KAAMM,EAAAA,cAAoBT,EAAYI,IAAK,KAAMK,EAAAA,cAAoBT,EAAYK,KAAM,CAC7VK,UAAW,gBACV,8LAA+L,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAMM,EAAAA,cAAoBT,EAAYM,EAAG,CAClRK,KAAM,wDACL,qCAAsC,oDAAqD,KAAMF,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,uGAAwG,KAAMM,EAAAA,cAAoBT,EAAYI,IAAK,KAAMK,EAAAA,cAAoBT,EAAYK,KAAM,CAC1UK,UAAW,gBACV,2hBAA4hB,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,iEAAkE,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,QAASM,EAAAA,cAAoBT,EAAYM,EAAG,CACzuBK,KAAM,yDACL,uCAAwC,6BAC7C,CAKA,MAJA,SAAoBZ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWd,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCtBA,SAASe,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAON,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMO,EAAKE,IAAIC,YAAYC,OAAQX,EAAAA,cAAoBY,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBvB,GACvC,OAAOU,EAAAA,cAAoBK,EAAcf,EAAOU,EAAAA,cAAoBc,EAAqBxB,GAC3F,C,4HCuBO,MAAMyB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBjB,GAC/B,MAAMkB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfhB,EACFA,EAAWkB,GAGb,IAAIA,KAAsBlB,IAChC,CAACkB,EAAmBlB,GACzB,CAGA,MAAMmB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACb,EAAU,SAAES,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfpB,EACHA,EAAW,CAAC,GACZA,GAAcmB,EAEJF,EAAiBjB,GAG5B,gBACLgB,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2013/cpp_lambda_type_in_template.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"(記事復旧のついでに少し修正)\"), \"\\n\", React.createElement(_components.p, null, \"msgpack-rpcの関数登録の都合上、 lambda関数から引数の型を得たい。 下記のような書き方をしたい。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"template<typename R, typename A1, typename A2>\\nvoid register_func (const std::string &func_name, R(*handler)(A1, A2))\\n{\\n    // 関数登録\\n}\\n\\nstatic int Add(int a, int b)\\n{\\n    return a+b;\\n}\\n\\nint main()\\n{\\n    // 関数ポインタは受けれる\\n    register_func(“add”, &Add);\\n\\n    // lambdaを受けることはできない\\n    register_func(“add”, [](int a,  int b)->int{ return a+b; });\\n    return 0;\\n}\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"上記の書き方では普通の関数ポインタを受けることはできるのだが、 std::functionやlambdaは受けられない。\"), \"\\n\", React.createElement(_components.p, null, \"std::functionを受けるには下記のようにすることでできた。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"template<typename R, typename A1, typename A2>\\nvoid register_func(const std::string &func_name, std::function<R(A1, A2) handler) {\\n    //\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"残り、lambdaを受けられる記述方法を知りたいのだがどうしたらよいものか。 下記のような手はうまくいかなかった・・・\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"template<typename F, typename R, typename A1, typename A2>\\nvoid add_handler(const std::string &method, F handler)\\n{\\n    std::function<R(A1, A2)> f(handler);\\n    //add_handler\\n}\\n\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"http://d.hatena.ne.jp/osyo-manga/20121205/1354674180\"\n  }, \"lambda expression を 関数ポインタ型へと変換する\"), \" こちらのサイトから decltypeを使ったらなんかできそうな感じがしたので粘っていたのだが、\"), \"\\n\", React.createElement(_components.p, null, \"目的そのものの記事を発見した。 http://stackoverflow.com/questions/6512019/can-we-get-the-type-of-a-lambda-argument\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"// 2019/08 元記事のコードがよくわからなかったので書き直し。\\n\\n// decltypeから得たメンバ関数へのポインタを触媒にして型を得る\\ntemplate<typename F, typename R, typename C, typename A1, typename A2>\\nvoid _register_func(const std::string &func_name, R(C::*m)(A1 a1, A2 a2)const) // constに注意\\n{\\n    // R: 返り値の型\\n    // A1, A2: 引数の型\\n    // C: lambdaオブジェクトの型を受ける\\n}\\n\\n// まずあらゆる引数を受け付けられるtemplateでlambdaオブジェクトを受ける(functor)\\ntemplate<typename F>\\nvoid register_func(const std::string &func_name, F f)\\n{\\n    _register_func(const std::string &func_name, f, decltype(f)::operator());\\n)\\n\")), \"\\n\", React.createElement(_components.p, null, \"F で関数ポインタ、lambda、std::function等を受けられるようになった。 decltypeなんかすごいな。\"), \"\\n\", React.createElement(_components.p, null, \"関連して、\", React.createElement(_components.a, {\n    href: \"https://qiita.com/ousttrue/items/6b207e1d431cf20e04d9\"\n  }, \"C++でメンバー関数を、thisを第１引数にとる関数ポインタに変換する\"), \"。\\nメンバ関数へのポインタは意外と使い道がある。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/cpp_lambda_type_in_template.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","a","_provideComponents","components","React","className","href","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
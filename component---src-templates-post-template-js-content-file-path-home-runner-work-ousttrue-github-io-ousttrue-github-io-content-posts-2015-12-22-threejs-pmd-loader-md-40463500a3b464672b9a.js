"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[825],{2071:function(n,s,a){a.r(s),a.d(s,{default:function(){return i}});var t=a(1151),p=a(7294);function o(n){const s=Object.assign({p:"p",ul:"ul",li:"li",a:"a",span:"span"},(0,t.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(s.p,null,"こちらのモデルを使わせていただいております。"),"\n",p.createElement(s.p,null,"threejs_pmd_loader.ts source\nPmdLoader.ts source\n変換せずに直接 Pmd を読み込むべくカスタムローダーを作ってみよう。\nまず、SJIS 操作が必要なのでこちらを使わせて頂いた。"),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,p.createElement(s.a,{href:"https://github.com/polygonplanet/encoding.js"},"https://github.com/polygonplanet/encoding.js"),"\nあとは JSONLoader を参考にして ArrayBuffer から地道に情報を切り出していく。\nArrayBuffer から情報を切り出すのはこつがわかれば簡単で以下のようなヘルパークラスを作れば\nさくさくできる。\nBinaryReader"),"\n"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">BinaryReader</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">m_buffer</span><span class="token operator">:</span> ArrayBuffer<span class="token punctuation">;</span>\n  m_postiion <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">buffer</span><span class="token operator">:</span> ArrayBuffer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>m_buffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">read</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">length</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> slice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>m_postiion<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_postiion <span class="token operator">+</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>m_postiion <span class="token operator">+=</span> length<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> slice<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">readString</span><span class="token punctuation">(</span>length<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> slice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slice<span class="token punctuation">.</span>byteLength<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>slice<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> Encoding<span class="token punctuation">.</span><span class="token function">codeToString</span><span class="token punctuation">(</span>\n      Encoding<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>slice<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">"UNICODE"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">"SJIS"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> read <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">readVector2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>Vector2 <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Vector2</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">readVector3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>Vector3 <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Vector3</span><span class="token punctuation">(</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">readRGB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>Color <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Color</span><span class="token punctuation">(</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// int</span>\n  <span class="token function">readInt16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> read <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Int16Array</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">readInt32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> read <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// uint</span>\n  <span class="token function">readUint8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> read <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> read <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Uint16Array</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">readUint16Array</span><span class="token punctuation">(</span>count<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> Uint16Array <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> read <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Uint16Array</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"先頭の Vertices, Indices, Materials を読み込むところまで実装した。\n意外とあっさり Texture 読み込みまでできちゃった。Three.js 便利ですなぁ。\n骨を入れる前にシェーダーをやろう。\nトゥーンシェーダーでないと見栄えが悪い。"))}var e=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?p.createElement(s,n,p.createElement(o,n)):o(n)},c=a(8678),u=a(1883),l=a(8838);const k={code:n=>{let{children:s,className:a}=n;return a?p.createElement(l.Z,{className:a},s):p.createElement("code",null,s)}};function r(n){let{data:s,children:a}=n;const o=s.mdx.frontmatter;return p.createElement(c.Z,null,p.createElement("h1",null,o.title),p.createElement("div",{className:"tags-index"},o.tags&&o.tags.length>0&&o.tags.map((n=>p.createElement(u.rU,{to:"/tags/"+n+"/",itemProp:"url"},p.createElement("button",null,n))))),p.createElement(t.Zo,{components:k},a))}function i(n){return p.createElement(r,n,p.createElement(e,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-12-22-threejs-pmd-loader-md-40463500a3b464672b9a.js.map
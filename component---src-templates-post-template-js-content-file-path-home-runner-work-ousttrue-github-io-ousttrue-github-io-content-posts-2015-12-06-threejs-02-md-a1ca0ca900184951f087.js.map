{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-12-06-threejs-02-md-a1ca0ca900184951f087.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,KAAM,SACLC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBN,EAAYG,KAAM,CAC3CI,wBAAyB,CACvBC,OAAQ,kpKAGd,CAKA,MAJA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWX,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCVA,MAAMM,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMY,EAAKC,IAAIC,YAAYC,OAAQf,EAAAA,cAAoBgB,EAAAA,GAAa,CAC7IjB,WAAYA,GACXQ,GACL,CACe,SAASU,EAAiBxB,GACvC,OAAOO,EAAAA,cAAoBU,EAAcjB,EAAOO,EAAAA,cAAoBkB,EAAqBzB,GAC3F,C","sources":["webpack:///./content/posts/2015/12/06/threejs_02.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">\\nsource\\n今回は、TrackballControlsを導入します。\\nTrackballControlsはThree.jsのライブラリ内に含まれるのではなくexamples扱いなので、\\n直接コードを入手。\\n使い方は、TrackballControlsのソースを見ると\\n以下のようにするらしい。\\ncontrols = new THREE.TrackballControls( camera );\\n\\ncontrols.rotateSpeed = 1.0;\\ncontrols.zoomSpeed = 1.2;\\ncontrols.panSpeed = 0.8;\\n\\ncontrols.noZoom = false;\\ncontrols.noPan = false;\\n\\ncontrols.staticMoving = true;\\ncontrols.dynamicDampingFactor = 0.3;\\n\\ncontrols.keys = [ 65, 83, 68 ];\\n\\ncontrols.addEventListener( 'change', render );\\n\\nもうひとつ更新用に以下のコードも必要。\\nfunction animate() {\\n    requestAnimationFrame( animate );\\n    controls.update();\\n}\\n\\nやってみよう。\\nベースのレンダリングシーン\\nシーンに適当にキューブを描画するコード。\\n前回の記事をほぼ流用だけどいくつか変更点がある。\\n\\nnamespaceでかこって名前衝突から防衛\\nCreateCameraを独立\\nキューブがアニメーションする部分をオミット\\n\\nthreejs_02.ts\\n/// &lt;reference path='../../../../typings/tsd.d.ts' />\\n\\n\\nnamespace Renderer02 {\\n\\n    class Renderer {\\n        $container: JQuery;\\n        renderer: THREE.Renderer;\\n\\n        scene: THREE.Scene;\\n        camera: THREE.Camera;\\n        mesh: THREE.Mesh;\\n\\n        CreateRenderer($container: JQuery) {\\n            this.$container = $container;\\n\\n            this.renderer = new THREE.WebGLRenderer();\\n            this.renderer.setSize($container.width(), $container.height());\\n            $container.append(this.renderer.domElement);\\n        }\\n\\n        CreateCamera() {\\n            this.camera = new THREE.PerspectiveCamera(75\\n                , this.$container.width() / this.$container.height()\\n                , 0.1, 1000);\\n            this.camera.position.z = 5;\\n        }\\n\\n        CreateScene() {\\n            this.scene = new THREE.Scene();\\n\\n            var geometry = new THREE.BoxGeometry(1, 1, 1);\\n            var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\\n            this.mesh = new THREE.Mesh(geometry, material);\\n            this.scene.add(this.mesh);\\n        }\\n\\n        Render() {\\n            // render\\n            this.renderer.render(this.scene, this.camera);\\n        }\\n    }\\n\\n    var renderer = new Renderer();\\n    export function initialize($container: JQuery) {\\n\\n        renderer.CreateRenderer($container);\\n        renderer.CreateCamera();\\n        renderer.CreateScene();\\n\\n        renderer.Render();\\n    }\\n}\\n\\n$(() => {\\n    var $container = $('div#renderer');\\n    Renderer02.initialize($container);\\n});\\n\\n\\nTypeScript定義を追加する\\nまず、TrackballControlsの型定義を追加する。\\ndeclare module THREE {\\n    export class TrackballControls\\n    {\\n        constructor(camera: THREE.Camera);\\n        rotateSpeed: number;\\n        zoomSpeed: number;\\n        panSpeed: number;\\n        noZoom: boolean;\\n        noPan: boolean;\\n        staticMoving: boolean;\\n        dynamicDampingFactor: number;\\n        keys: number[];\\n        addEventListener(event: string, callback: Function):void;\\n        update():void;\\n    }\\n}\\n\\nTrackballControlsを初期化\\n// Rendererのメソッドを修正\\n    CreateCamera() {\\n        this.camera = new THREE.PerspectiveCamera(75\\n            , this.$container.width() / this.$container.height()\\n            , 0.1, 1000);\\n        this.camera.position.z = 5;\\n\\n        // 以下を追加\\n        this.controls = new THREE.TrackballControls(this.camera);\\n\\n        this.controls.rotateSpeed = 1.0;\\n        this.controls.zoomSpeed = 1.2;\\n        this.controls.panSpeed = 0.8;\\n\\n        this.controls.noZoom = false;\\n        this.controls.noPan = false;\\n\\n        this.controls.staticMoving = true;\\n        this.controls.dynamicDampingFactor = 0.3;\\n\\n        this.controls.keys = [65, 83, 68];\\n\\n        // trackballに変化があった時だけ描画を呼ぶ\\n        this.controls.addEventListener('change', this.Render.bind(this));\\n    }\\n\\n// Rendererのメソッドを追加\\n    Animate() {\\n        requestAnimationFrame(this.Animate.bind(this));\\n        this.controls.update();\\n    }\\n\\n// Animate呼び出しを追加\\n    export function initialize($container: JQuery) {\\n\\n        renderer.CreateRenderer($container);\\n        renderer.CreateCamera();\\n        renderer.CreateScene();\\n\\n        renderer.Render();\\n        renderer.Animate(); // 追加\\n    }\\n\\n動いたがWindow全体のマウスイベントが取られていてこれじゃない。\\ncanvasの親になったdivをマウスイベントの対象にしたい。\\ndiv#rendererを操作対象にする\\nTrackballControls.jsを見てたら\\nTHREE.TrackballControls = function ( object, domElement ) {\\n}\\n\\nという記述を発見。第２引数にhtmlエレメントを渡せるらしい。\\n定義を修正。\\n// 定義\\n    constructor(camera: THREE.Camera, element?: Element);\\n\\n// 呼び出し\\n   this.controls = new THREE.TrackballControls(this.camera, this.$container[0]);\\n\\n想定した動きになった。\\nマウスカーソルを変えてみる\\ncssの話だけれど。\\n&lt;div id=\\\"renderer\\\" style=\\\"width:300px;height:200px;cursor:pointer;\\\">&lt;/div>\\n\\n    $container\\n        .mousedown(function(event) {\\n            switch (event.button) {\\n                case 0:\\n                    $(this).css({ cursor: 'pointer' });\\n                    break;\\n\\n                case 1:\\n                    $(this).css({ cursor: 'n-resize' });\\n                    break;\\n\\n                case 2:\\n                    $(this).css({ cursor: 'move' });\\n                    break;\\n            }\\n        })\\n        .mouseup(function(event){\\n            $(this).css({cursor: 'pointer'});\\n        })\\n    ;\\n</code></pre></div>\"\n    }\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2015/12/06/threejs_02.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
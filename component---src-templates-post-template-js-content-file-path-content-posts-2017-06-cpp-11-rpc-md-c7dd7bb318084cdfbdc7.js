"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9485],{5268:function(n,s,a){a.r(s),a.d(s,{default:function(){return i}});var p=a(1151),t=a(7294);function o(n){const s=Object.assign({p:"p",code:"code",h1:"h1",span:"span"},(0,p.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(s.p,null,"最近の ",t.createElement(s.code,null,"C++(-std=c++14)")," で ",t.createElement(s.code,null,"MessagePack-RPC")," を再実装してみる。"),"\n",t.createElement(s.h1,null,"基本設計"),"\n",t.createElement(s.p,null,"MessagePack-RPCの仕様をおさらいすると以下の通り。"),"\n",t.createElement(s.p,null,"request"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">[type, msgid, method, params]\n (0)   (int)  (str)   (array)</code></pre></div>'}}),"\n",t.createElement(s.p,null,"response"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">[type, msgid, error, result]\n (1)   (int)  (any)  (any)</code></pre></div>'}}),"\n",t.createElement(s.p,null,"msgpackのバイト列を受け取って、msgpackのバイト列を返す関数として一般化する。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span><span class="token keyword">uint8_t</span><span class="token operator">></span> bytes<span class="token punctuation">;</span>\n<span class="token comment">// msgpackのバイト列を引数にとり、msgpackのバイト列を返す</span>\n<span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>bytes<span class="token punctuation">)</span><span class="token operator">></span> procedurecall<span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"任意の関数呼び出しからprocedurecallを作り出せるようにして、MessagePack-RPCシステムの部品として使えるようにする。\n簡単な例\n例として"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"をprocedurecallに変換してみる。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp">procedurecall <span class="token function">make_procedurecall</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// request -> response ではなくparams -> result</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> bytes<span class="token operator">&amp;</span> src<span class="token punctuation">)</span><span class="token operator">-></span>bytes\n    <span class="token punctuation">{</span>\n        <span class="token comment">// unpack args</span>\n        <span class="token keyword">auto</span> parser <span class="token operator">=</span> msgpackpp<span class="token double-colon punctuation">::</span><span class="token function">parser</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> args<span class="token punctuation">;</span>\n        parser <span class="token operator">>></span> args<span class="token punctuation">;</span>\n\n        <span class="token comment">// call</span>\n        <span class="token keyword">auto</span> r <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// pack result</span>\n        msgpackpp<span class="token double-colon punctuation">::</span>packer packer<span class="token punctuation">;</span>\n        packer <span class="token operator">&lt;&lt;</span> r<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> packer<span class="token punctuation">.</span><span class="token function">get_payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,t.createElement(s.code,null,"int add(int, int)")," を ",t.createElement(s.code,null,"procedurecall")," に変換するというのは、引数のアンパック、関数呼び出し、結果のパックという一連の定型コードの呼び出しになる。"),"\n",t.createElement(s.p,null,t.createElement(s.code,null,"procedurecall")," の使い方は以下の通り。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token comment">// register</span>\n<span class="token keyword">auto</span> proc <span class="token operator">=</span> msgpackpp<span class="token double-colon punctuation">::</span>rpc<span class="token double-colon punctuation">::</span><span class="token function">make_procedurecall</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// call</span>\n<span class="token keyword">auto</span> packer <span class="token operator">=</span> msgpackpp<span class="token double-colon punctuation">::</span><span class="token function">packer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\npacker <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">auto</span> result <span class="token operator">=</span> <span class="token function">proc</span><span class="token punctuation">(</span>packer<span class="token punctuation">.</span><span class="token function">get_payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// result</span>\n<span class="token function">REQUIRE</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> msgpackpp<span class="token double-colon punctuation">::</span><span class="token function">parser</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get_number</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"とりあえず動いたが、関数を増やすたびにこれだけのコードを記述するのはやってられませぬ。\n以下のような理想形を目指して作りこんでゆく。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token function">REQUIRE</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token function">msgpack_procedurecall</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,t.createElement(s.code,null,"lambda")," が動けば他も動くようにできるので、",t.createElement(s.code,null,"lambda")," を第一に実装する。"),"\n",t.createElement(s.h1,null,"実装"),"\n",t.createElement(s.p,null,"ステップ毎に説明しようと思っていたが分かりにくいので、コードにコメントを追加することにした。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>AS<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> IS<span class="token operator">></span>\nprocedurecall <span class="token function">_make_procedurecall</span><span class="token punctuation">(</span><span class="token keyword">const</span> F <span class="token operator">&amp;</span>f\n    <span class="token punctuation">,</span> <span class="token function">R</span><span class="token punctuation">(</span>C<span class="token double-colon punctuation">::</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>AS<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token comment">// template引数R, C, ASを受け付けるためのダミー</span>\n    <span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>index_sequence<span class="token operator">&lt;</span>IS<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span> <span class="token comment">// template引数ISを受け付けるためのダミー</span>\n<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// request -> response ではなくparams -> result</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> bytes<span class="token operator">&amp;</span> src<span class="token punctuation">)</span><span class="token operator">-></span>bytes\n    <span class="token punctuation">{</span>\n        <span class="token comment">// unpack args</span>\n        <span class="token keyword">auto</span> parser <span class="token operator">=</span> msgpackpp<span class="token double-colon punctuation">::</span><span class="token function">parser</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span>AS<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span> args<span class="token punctuation">;</span>\n        parser <span class="token operator">>></span> args<span class="token punctuation">;</span>\n\n        <span class="token comment">// call</span>\n        <span class="token keyword">auto</span> r <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>IS<span class="token operator">></span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可変長テンプレート引数を展開できる。ISと...が離れていることに注意</span>\n\n        <span class="token comment">// pack result</span>\n        msgpackpp<span class="token double-colon punctuation">::</span>packer packer<span class="token punctuation">;</span>\n        packer <span class="token operator">&lt;&lt;</span> r<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> packer<span class="token punctuation">.</span><span class="token function">get_payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>AS<span class="token operator">></span>\nprocedurecall <span class="token function">_make_procedurecall</span><span class="token punctuation">(</span>F f\n    <span class="token punctuation">,</span> <span class="token function">R</span><span class="token punctuation">(</span>C<span class="token double-colon punctuation">::</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>AS<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token comment">// template引数R, C, ASを受け付けるためのダミー</span>\n<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">_make_procedurecall</span><span class="token punctuation">(</span>f\n        <span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// lambdaの返り値と引数の型を次のテンプレートに渡す</span>\n        <span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>index_sequence_for<span class="token operator">&lt;</span>AS<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// std::get呼び出しのためにindex_sequenceを作る。</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//</span>\n<span class="token comment">// あらゆる型のlambdaを受け付けるようにした</span>\n<span class="token comment">//</span>\n<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">F</span><span class="token operator">></span>\nprocedurecall <span class="token function">make_procedurecall</span><span class="token punctuation">(</span>F f<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">_make_procedurecall</span><span class="token punctuation">(</span>f\n        <span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// lambdaの返り値と引数の型を次のテンプレートに渡す</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmsgpack_call\n<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>AS<span class="token operator">></span>\n<span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> <span class="token function">_msgpack_call</span><span class="token punctuation">(</span>F f\n    <span class="token punctuation">,</span> <span class="token function">R</span><span class="token punctuation">(</span>C<span class="token double-colon punctuation">::</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>AS<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token comment">// template引数R, C, ASを受けるためのダミー</span>\n    <span class="token punctuation">,</span> AS<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">auto</span> proc <span class="token operator">=</span> msgpackpp<span class="token double-colon punctuation">::</span>rpc<span class="token double-colon punctuation">::</span><span class="token function">make_procedurecall</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// call</span>\n    msgpackpp<span class="token double-colon punctuation">::</span>packer packer<span class="token punctuation">;</span>\n    packer <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可変長テンプレート引数を展開できる</span>\n    <span class="token keyword">auto</span> result <span class="token operator">=</span> <span class="token function">proc</span><span class="token punctuation">(</span>packer<span class="token punctuation">.</span><span class="token function">get_payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// unpack result</span>\n    R value<span class="token punctuation">;</span>\n    msgpackpp<span class="token double-colon punctuation">::</span><span class="token function">parser</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">>></span> value<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>AS<span class="token operator">></span>\n<span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> <span class="token function">msgpack_call</span><span class="token punctuation">(</span>F f<span class="token punctuation">,</span> AS<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token comment">// 返り値の型はreturnから型推論</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">_msgpack_call</span><span class="token punctuation">(</span>f\n    <span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// lambdaの返り値と引数の型をテンプレート引数に渡す</span>\n    <span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.h1,null,"使う。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token function">REQUIRE</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">==</span><span class="token function">msgpack_call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">REQUIRE</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span><span class="token function">msgpack_call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,t.createElement(s.code,null,"valiadic template")," おそるべし。\n従来であれば、1引数、２引数・・・と引数の個数ごとに手作業でバージョンを増やさねばならなかったものが、わりとさくっと書けるな。"))}var e=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,p.ah)(),n.components);return s?t.createElement(s,n,t.createElement(o,n)):o(n)},c=a(8678),l=a(4160),u=a(8736);const k={code:n=>{let{children:s,className:a}=n;return a?t.createElement(u.Z,{className:a},s):t.createElement("code",null,s)}};function r(n){let{data:s,children:a}=n;const o=s.mdx.frontmatter;return t.createElement(c.Z,null,t.createElement("h1",null,o.title),t.createElement("div",{className:"tags-index"},o.tags&&o.tags.length>0&&o.tags.map((n=>t.createElement(l.rU,{to:"/tags/"+n+"/",itemProp:"url"},t.createElement("button",null,n))))),t.createElement(p.Zo,{components:k},a))}function i(n){return t.createElement(r,n,t.createElement(e,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2017-06-cpp-11-rpc-md-c7dd7bb318084cdfbdc7.js.map
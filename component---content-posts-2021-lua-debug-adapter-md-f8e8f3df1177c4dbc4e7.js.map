{"version":3,"file":"component---content-posts-2021-lua-debug-adapter-md-f8e8f3df1177c4dbc4e7.js","mappings":"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","sources":["webpack:///./content/posts/2021/lua_debug_adapter.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"nvim の nvim-dap で lua をデバッグするべく自分で書いてみた。\\n手頃なのが見つからなかったので。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/my_nvim/blob/master/luada.lua\"), \"\\n\", React.createElement(_components.p, null, \"https://microsoft.github.io/debug-adapter-protocol/ の自前実装。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"request\"), \" のうち \", React.createElement(_components.code, null, \"initialize\"), \", \", React.createElement(_components.code, null, \"launch\"), \", \", React.createElement(_components.code, null, \"setBreakpoints\"), \", \", React.createElement(_components.code, null, \"configurationDone\"), \", \", React.createElement(_components.code, null, \"threads\"), \", \", React.createElement(_components.code, null, \"stackTrace\"), \", \", React.createElement(_components.code, null, \"scopes\"), \", \", React.createElement(_components.code, null, \"variables\"), \", \", React.createElement(_components.code, null, \"continue\"), \", \", React.createElement(_components.code, null, \"next\"), \" を実装した。\\n\", React.createElement(_components.code, null, \"event\"), \" のうち \", React.createElement(_components.code, null, \"initialized\"), \", \", React.createElement(_components.code, null, \"exited\"), \", \", React.createElement(_components.code, null, \"stopped(breakpoint, step)\"), \" を実装した。\"), \"\\n\", React.createElement(_components.p, null, \"これで最低限の breakpoint を設定して止める、ステップ実行、変数表示までできた。\"), \"\\n\", React.createElement(_components.p, null, \"ログレベルを設定して\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-lua\"\n  }, \"require('dap').set_log_level('trace')\\n\")), \"\\n\", React.createElement(_components.p, null, \"nvim の \", React.createElement(_components.code, null, \":lua print(vim.fn.stdpath \\\"cache\\\")\"), \" に配置される \", React.createElement(_components.code, null, \"dap.log\"), \" を観察したらだいたいできた。\"), \"\\n\", React.createElement(_components.p, null, \"nvim-dap の設定は以下。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-lua\"\n  }, \"local dap = require(\\\"dap\\\")\\n\\nlocal luada = vim.api.nvim_get_var(\\\"my_nvim_root\\\") .. \\\"/luada.lua\\\"\\n\\n-- luada adapter を登録\\ndap.adapters.luada = {\\n\\t-- debug用のスクリプトを lua で実行し、標準入出力で DAP 通信(JSON-RPC)を開始する\\n\\ttype = \\\"executable\\\",\\n\\tcommand = vim.api.nvim_get_var(\\\"my_nvim_root\\\") .. \\\"/neovim/.deps/usr/bin/luajit.exe\\\",\\n\\targs = { luada },\\n}\\n-- filetype lua のときに luada を使用する。launch の引数\\ndap.configurations.lua = {\\n\\t{\\n\\t\\tname = \\\"lua debug adapter\\\",\\n\\t\\ttype = \\\"luada\\\",\\n\\t\\trequest = \\\"launch\\\",\\n\\t\\tprogram = \\\"${fileDirname}\\\\\\\\${file}\\\",\\n\\t\\targs = { \\\"a\\\", \\\"b\\\", \\\"c\\\" },\\n\\t},\\n}\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"+---------+    DAP       +--------------------+\\n| nvim dap|------->stdin |luajit.exe luada.lua|\\n|         |<-------stdout|                    |\\n+---------+              +--------------------+\\n                                              +==> loadscript(target_lua_script)\\n\")), \"\\n\", React.createElement(_components.p, null, \"入出力を DAP で占有してしまうので、それでも大丈夫なスクリプトしかデバッグできない。\\n(print 関数は、stderr に出力するように退避したので、\", React.createElement(_components.code, null, \"dap.log\"), \" には出る)\"), \"\\n\", React.createElement(_components.p, null, \"素の standalone の lua interpreter で簡単にできる範囲で実装する方針。\"), \"\\n\", React.createElement(_components.h2, null, \"はまりポイント\"), \"\\n\", React.createElement(_components.h3, null, \"Windows 版 は、\", React.createElement(_components.code, null, \"io.stdout\"), \" で \", React.createElement(_components.code, null, \"CR\"), \" が \", React.createElement(_components.code, null, \"CRLF\"), \" に変換されるのを回避できない。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"setmode(_fileno(stdout),_O_BINARY);\\n\")), \"\\n\", React.createElement(_components.p, null, \"を lua で呼び出す手段が無い。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Content-Leght: 123\\\\n\\\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"と出力して変換されるのに任せることにした。\"), \"\\n\", React.createElement(_components.h3, null, \"debug.sethook 内で coroutine.yield できない\"), \"\\n\", React.createElement(_components.p, null, \"https://stackoverflow.com/questions/54858455/lua-debug-hooks-seems-to-prevent-the-coroutine-from-working\"), \"\\n\", React.createElement(_components.p, null, \"breakpoint 等によるスクリプト中断を \", React.createElement(_components.code, null, \"coroutine.yield\"), \" で実装しようとしたのだけど断念した。\\n(yield すると \", React.createElement(_components.code, null, \"suspend\"), \" にならずに \", React.createElement(_components.code, null, \"dead\"), \" になる)\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/tomblind/local-lua-debugger-vscode は、coroutine で実装しているような気がするのだが・・・。\"), \"\\n\", React.createElement(_components.p, null, \"yield する代わりに main.loop をネストさせてそこで通信待機させることにした、\"), \"\\n\", React.createElement(_components.h3, null, \"launch で開始すると早すぎる\"), \"\\n\", React.createElement(_components.p, null, \"これは、 \", React.createElement(_components.code, null, \"nvim-dap\"), \" の実装の問題のような気がするが、\\ncapabilities に以下を設定して、 \", React.createElement(_components.code, null, \"configurationDone\"), \" リクエストで自開始する。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-lua\"\n  }, \"supportsConfigurationDoneRequest = true,\\n\")), \"\\n\", React.createElement(_components.h2, null, \"ToDo\"), \"\\n\", React.createElement(_components.p, null, \"luada リポジトリを作って vscode 拡張としてリリースする。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","pre","h2","h3","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
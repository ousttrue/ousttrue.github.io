"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9655],{2128:function(n,e,t){t.r(e);var l=t(1151),a=t(7294);function r(n){const e=Object.assign({p:"p",h2:"h2",pre:"pre",code:"code"},(0,l.ah)(),n.components);return a.createElement(a.Fragment,null,a.createElement(e.p,null,"古のATLのWindows8以降？版のWRLを使ってみる。"),"\n",a.createElement(e.h2,null,"IXMLHTTPRequest2を使うサンプルコードをベースにWRL化してみる。"),"\n",a.createElement(e.p,null,"ComPtr\n何はともあれComPtrを取り入れる。\nBefore"),"\n",a.createElement(e.pre,null,a.createElement(e.code,{className:"language-cpp"},'#include <Msxml6.h>\n#pragma comment(lib, "msxml6.lib")\n\n#define SAFERELEASE(p){ if(p){p->Release(); p=nullptr;}}\n\nint main(int, char **)\n{\n    CoInitializeEx(NULL, COINITBASE_MULTITHREADED);\n\n    IXMLHTTPRequest2 *pXHR=nullptr;\n    auto hr = CoCreateInstance(CLSID_FreeThreadedXMLHTTP60,\n            NULL,\n            CLSCTX_INPROC_SERVER,\n            IID_PPV_ARGS(&pXHR));\n    if (FAILED(hr)) {\n        goto EXIT;\n    }\n\nEXIT:\n    SAFERELEASE(pXHR);\n    CoUninitialize();\n\n    if (FAILED(hr)) {\n        return 1;\n    }\n    return 0;\n}\n')),"\n",a.createElement(e.h2,null,"SAFERELEASEとgoto"),"\n",a.createElement(e.p,null,"ComPtrを取り入れてSAFERELEASEとgotoを除去しよう。\nAfter\nRAIIを取り入れて積極的にEarly Outできる(後始末が自動になったので)。"),"\n",a.createElement(e.pre,null,a.createElement(e.code,{className:"language-cpp"},'#include <Msxml6.h>\n#pragma comment(lib, "msxml6.lib")\n#include <wrl/client.h>\n\n\nclass ComInitializer\n{\npublic:\n    ComInitializer()\n    {\n        CoInitializeEx(NULL, COINITBASE_MULTITHREADED);\n    }\n    ~ComInitializer()\n    {\n        CoUninitialize();\n    }\n};\n\nint main(int, char **)\n{\n    ComInitializer co;\n\n    Microsoft::WRL::ComPtr<IXMLHTTPRequest2> pXHR;\n    auto hr = CoCreateInstance(CLSID_FreeThreadedXMLHTTP60,\n            NULL,\n            CLSCTX_INPROC_SERVER,\n            IID_PPV_ARGS(&pXHR));\n    if (FAILED(hr)) {\n        return 1;\n    }\n\n    return 0;\n}\n')),"\n",a.createElement(e.h2,null,"IUnknown実装とComPtr初期化"),"\n",a.createElement(e.p,null,"Callbackの定義等で自らComオブジェクトを定義する場合がある。\nIXMLHTTPRequest2Callbackを実装する例。\nBefore"),"\n",a.createElement(e.pre,null,a.createElement(e.code,{className:"language-cpp"},"class CCallback :public IXMLHTTPRequest2Callback\n{\n    ULONG m_cRef=1;\n\npublic:\n    CCallback()\n    {\n    }\n\n    ~CCallback()\n    {\n    }\n\n    // IUnknown\n    STDMETHODIMP_(ULONG) AddRef()override\n    {\n        InterlockedIncrement(&m_cRef);\n        return m_cRef;\n    }\n\n    STDMETHODIMP_(ULONG) Release()override\n    {\n        ULONG ulRefCount = InterlockedDecrement(&m_cRef);\n        if (0 == m_cRef)\n        {\n            delete this;\n        }\n        return ulRefCount;\n    }\n\n    STDMETHODIMP QueryInterface (REFIID riid, void **ppvObj)override\n    {\n        // Always set out parameter to NULL, validating it first.\n        if (!ppvObj) return E_INVALIDARG;\n\n        *ppvObj = NULL;\n        if (riid == IID_IUnknown \n                || riid == IID_IXMLHTTPRequest2Callback \n           )\n        {\n            // Increment the reference count and return the pointer.\n            *ppvObj = (LPVOID)this;\n            AddRef();\n            return NOERROR;\n        }\n\n        return E_NOINTERFACE;\n    }\n\n    // IXMLHTTPRequest2Callback\n    STDMETHODIMP OnRedirect(\n        __RPC__in_opt IXMLHTTPRequest2 *pXHR,\n        __RPC__in_string const WCHAR *pwszRedirectUrl)override\n    {\n        return E_NOTIMPL;\n    }\n\n    STDMETHODIMP\n        OnHeadersAvailable(\n            __RPC__in_opt IXMLHTTPRequest2 *pXHR,\n            DWORD dwStatus,\n            __RPC__in_string const WCHAR *pwszStatus\n        )override\n    {\n        return E_NOTIMPL;\n    }\n\n    STDMETHODIMP\n        OnDataAvailable(\n            __RPC__in_opt IXMLHTTPRequest2 *pXHR,\n            __RPC__in_opt ISequentialStream *pResponseStream\n        )override\n    {\n        return E_NOTIMPL;\n    }\n\n    STDMETHODIMP\n        OnResponseReceived(\n            __RPC__in_opt IXMLHTTPRequest2 *pXHR,\n            __RPC__in_opt ISequentialStream *pResponseStream\n        )override\n    {\n        return E_NOTIMPL;\n    }\n\n    STDMETHODIMP\n        OnError(\n            __RPC__in_opt IXMLHTTPRequest2 *pXHR,\n            HRESULT hrError\n        )override\n    {\n        return E_NOTIMPL;\n    }\n};\n")),"\n",a.createElement(e.p,null,"IUnknownの実装(AddRef, Release, QueryInterface)が定型コードである"),"\n",a.createElement(e.p,null,"newしたときにリファレンスカウントが1であること、AddRef, Releaseを正しく実装する\nQueryInterfaceを正しく実装する(あとでインタフェースを増減させたときに更新を忘れたりする)"),"\n",a.createElement(e.p,null,"ComPtrの初期化が不穏"),"\n",a.createElement(e.pre,null,a.createElement(e.code,{className:"language-cpp"},"Microsoft::WRL::ComPtr<CCallback> pCallback;\n// RefCount=1のインスタンスを内部ポインタ(&演算子)に渡す\n*((CCallback**)&pCallback)=new CCallback(); \n")),"\n",a.createElement(e.p,null,"または、"),"\n",a.createElement(e.pre,null,a.createElement(e.code,{className:"language-cpp"},"Microsoft::WRL::ComPtr<CCallback> pCallback(new CCallback); // 1+1はRefCount=2\npCallback.Get()->Release(); // 1に減らす\n")),"\n",a.createElement(e.p,null,"のようなあからさまに不穏なコードを書かなければならない。\n間違いの元である。\nAfter"),"\n",a.createElement(e.pre,null,a.createElement(e.code,{className:"language-cpp"},"#include <wrl/implements.h>\nclass CCallback :\n    public Microsoft::WRL::RuntimeClass<\n    Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::ClassicCom>, IXMLHTTPRequest2Callback>\n{\npublic: \n    CCallback()\n    {\n    }\n\n    ~CCallback()\n    {\n    }\n\n    // IXMLHTTPRequest2Callback\n    // 省略\n};\n")),"\n",a.createElement(e.p,null,"とすることでIUnknownの実装をWRL::RuntimeClassに任せることができる。\nまた、newによる初期化を禁止されるので、newではなくWRL::Makeを使う。"),"\n",a.createElement(e.pre,null,a.createElement(e.code,null,"error C2248: 'Microsoft::WRL::Details::DontUseNewUseMake::operator new': private メンバー (クラス 'Microsoft::WRL::Details::DontUseNewUseMake' で宣言されている) にアクセスできません。\n")),"\n",a.createElement(e.pre,null,a.createElement(e.code,{className:"language-cpp"},"Microsoft::WRL::ComPtr<CCallback> pCallback=Microsoft::WRL::Make<CCallback>();\n")),"\n",a.createElement(e.h2,null,"MakeAndInitialize 初期化メソッド"),"\n",a.createElement(e.p,null,"Makeよりこっちの方がCom風。\nRuntimeClassInitializeという名前のメンバ関数で初期化する。失敗した場合はS_OK以外を返す。"),"\n",a.createElement(e.pre,null,a.createElement(e.code,{className:"language-cpp"},"class CCallback :\n    public Microsoft::WRL::RuntimeClass<\n    Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::ClassicCom>, IXMLHTTPRequest2Callback>\n{\npublic: \n\n    STDMETHODIMP RuntimeClassInitialize()\n    {\n        return S_OK;\n    }\n\n};\n\nMicrosoft::WRL::ComPtr<CCallback> pCallback;\nhr=Microsoft::WRL::MakeAndInitialize<CCallback>(&pCallback);\nif (FAILED(hr)) {\n    return 2;\n}\n")),"\n",a.createElement(e.p,null,"MakeAndInitialize 初期化メソッド(引数)\n9つまでいける。"),"\n",a.createElement(e.pre,null,a.createElement(e.code,{className:"language-cpp"},"    STDMETHODIMP RuntimeClassInitialize(DWORD value)\n    {\n        return S_OK;\n    }\n\n    DWORD value = 255;\n    Microsoft::WRL::ComPtr<CCallback> pCallback;\n    hr=Microsoft::WRL::MakeAndInitialize<CCallback>(&pCallback, value);\n    if (FAILED(hr)) {\n        return 2;\n    }\n")))}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,l.ah)(),n.components);return e?a.createElement(e,n,a.createElement(r,n)):r(n)}},1151:function(n,e,t){t.d(e,{ah:function(){return r}});var l=t(7294);const a=l.createContext({});function r(n){const e=l.useContext(a);return l.useMemo((()=>"function"==typeof n?n(e):{...e,...n}),[e,n])}}}]);
//# sourceMappingURL=component---content-posts-2017-com-wrl-md-ea6b9f386d05821f4eb8.js.map
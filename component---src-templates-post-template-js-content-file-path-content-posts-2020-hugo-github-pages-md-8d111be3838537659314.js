"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5126],{1329:function(e,n,a){a.r(n),a.d(n,{default:function(){return m}});var t=a(1151),s=a(7294);function l(e){const n=Object.assign({p:"p",h2:"h2",code:"code",span:"span"},(0,t.ah)(),e.components);return s.createElement(s.Fragment,null,s.createElement(n.p,null,"https://docs.github.com/ja/github/working-with-github-pages/about-github-pages"),"\n",s.createElement(n.h2,null,"プロジェクトサイト (gh-pages)"),"\n",s.createElement(n.p,null,"各プロジェクトに作れる。"),"\n",s.createElement(n.p,null,"URLは、",s.createElement(n.code,null,"http(s)://<user>.github.io/<repository>")),"\n",s.createElement(n.p,null,"各リポジトリの、 ",s.createElement(n.code,null,"gh-pages")," ブランチでサイトをホストする。\nhugo で運用するなら、\n",s.createElement(n.code,null,"master")," ブランチに hugo project を commit する。\nhugo のビルド結果を ",s.createElement(n.code,null,"gh-pages")," に commit する。\n手間を省くために ",s.createElement(n.code,null,"master")," への push をトリガーに ",s.createElement(n.code,null,"travis-CI")," 等で自動でビルドして、結果を gh-pages に push する。"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yml"><pre class="language-yml"><code class="language-yml"><span class="token comment"># .travis.yml</span>\n<span class="token key atrule">deploy</span><span class="token punctuation">:</span>\n  <span class="token key atrule">provider</span><span class="token punctuation">:</span> pages\n  <span class="token key atrule">skip_cleanup</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n  <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $GITHUB_TOKEN  <span class="token comment"># Set in the settings page of your repository, as a secure variable</span>\n  <span class="token key atrule">keep_history</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n  <span class="token key atrule">target_branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages <span class="token comment"># default</span>\n  <span class="token key atrule">local-dir</span><span class="token punctuation">:</span> public\n  <span class="token key atrule">on</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master <span class="token comment"># master branch が push されたのをトリガーに public フォルダを gh-pages ブランチに pushする</span></code></pre></div>'}}),"\n",s.createElement(n.h2,null,"ユーザーサイト"),"\n",s.createElement(n.p,null,"ユーザー毎にひとつだけ作ることのできるリポジトリ。"),"\n",s.createElement(n.p,null,"URLは、",s.createElement(n.code,null,"http(s)://<user>.github.io")," 。"),"\n",s.createElement(n.p,null,"これ、",s.createElement(n.code,null,"gh-pages")," と URL が重複するときがありそうな。"),"\n",s.createElement(n.p,null,"repository ",s.createElement(n.code,null,"${user_name}.github.io")," の場合 ",s.createElement(n.code,null,"master")," が ",s.createElement(n.code,null,"gh-pages")," の役割を果たす。\nこの名前にすると、サイトをホストする用の特殊なリポジトリになる様子。"),"\n",s.createElement(n.p,null,"hugo で運用するなら ",s.createElement(n.code,null,"gh-pages")," ブランチ運用と逆になる。"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yml"><pre class="language-yml"><code class="language-yml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>\n  <span class="token key atrule">provider</span><span class="token punctuation">:</span> pages\n  <span class="token key atrule">skip_cleanup</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n  <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $GITHUB_TOKEN  <span class="token comment"># Set in the settings page of your repository, as a secure variable</span>\n  <span class="token key atrule">keep_history</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n  <span class="token key atrule">target_branch</span><span class="token punctuation">:</span> master\n  <span class="token key atrule">local_dir</span><span class="token punctuation">:</span> public\n  <span class="token key atrule">on</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branch</span><span class="token punctuation">:</span> hugo <span class="token comment"># hugo branch が push されたのをトリガーに public フォルダを master ブランチにpushする</span></code></pre></div>'}}),"\n",s.createElement(n.p,null,"default branch を hugo の方に変えてから、git clone すると作業しやすい。"))}var p=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?s.createElement(n,e,s.createElement(l,e)):l(e)},c=a(8678),o=a(4160),u=a(8736);const r={code:e=>{let{children:n,className:a}=e;return a?s.createElement(u.Z,{className:a},n):s.createElement("code",null,n)}};function i(e){let{data:n,children:a}=e;const l=n.mdx.frontmatter;return s.createElement(c.Z,null,s.createElement("h1",null,l.title),s.createElement("div",{className:"tags-index"},l.tags&&l.tags.length>0&&l.tags.map((e=>s.createElement(o.rU,{to:"/tags/"+e+"/",itemProp:"url"},s.createElement("button",null,e))))),s.createElement(t.Zo,{components:r},a))}function m(e){return s.createElement(i,e,s.createElement(p,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2020-hugo-github-pages-md-8d111be3838537659314.js.map
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[204],{5755:function(e,n,t){t.r(n);var l=t(1151),c=t(7294);function a(e){const n=Object.assign({p:"p",a:"a",code:"code",h2:"h2",pre:"pre"},(0,l.ah)(),e.components);return c.createElement(c.Fragment,null,c.createElement(n.p,null,"rust の FFI に取り組んでいた。\n結局、 sdl binding と imgui binding を自作した。"),"\n",c.createElement(n.p,null,"両方とも、既存の crate があるのに何故わざわざ自作するのかと言えば、\nラップされて使い方が変わったところを学ぶのが面倒くさかったからじゃ。\n",c.createElement(n.a,{href:"https://crates.io/crates/sdl2"},"SDL")," は　",c.createElement(n.code,null,"HWND")," を取得する方法がわかりにくくて ",c.createElement(n.code,null,"SDL_Event")," を ",c.createElement(n.code,null,"imgui")," に渡す方法はわからなかった。\n",c.createElement(n.a,{href:"https://crates.io/crates/imgui"},"imgui")," は最新版の ",c.createElement(n.code,null,"docking")," ブランチが使いたかった。"),"\n",c.createElement(n.p,null,c.createElement(n.a,{href:"https://crates.io/crates/clang-sys"},"clang-sys")," を使って rust の FFI コードを生成し、\n",c.createElement(n.a,{href:"https://crates.io/crates/cc"},"cc")," を使って ",c.createElement(n.code,null,"build.rs")," でライブラリをビルドした。\nこれで、 ",c.createElement(n.code,null,"c")," ",c.createElement(n.code,null,"c++")," のライブラリをソースビルドしてスタティックリンクし、 ",c.createElement(n.code,null,"FFI")," で関数を呼び出し放題。"),"\n",c.createElement(n.p,null,c.createElement(n.code,null,"imgui")," の FFI 生成の方が簡単で、 ",c.createElement(n.code,null,"SDL")," の方は C のマクロに苦しんだ(雑に対応)。\nとはいえ、わりと素直に記述できるので快適であった。"),"\n",c.createElement(n.p,null,"おかげで、 rust の FFI 周りに対する習熟度がだいぶ上がった。"),"\n",c.createElement(n.h2,null,"できないこと"),"\n",c.createElement(n.p,null,"POD の struct を return する関数を呼び出すとクラッシュした。"),"\n",c.createElement(n.pre,null,c.createElement(n.code,{className:"language-c++"},"ImVec2 ImGui::GetContentRegionAvail();\n")),"\n",c.createElement(n.p,null,"D言語だけど"),"\n",c.createElement(n.p,null,"https://forum.dlang.org/thread/dkamxcamwttszxwwxttv@forum.dlang.org"),"\n",c.createElement(n.p,null,"の件らしく、C++ 側でラップした。"),"\n",c.createElement(n.pre,null,c.createElement(n.code,{className:"language-c++"},"void pGetContentRegionAvail(ImVec2 *pOut) {\n  if (pOut) {\n    *pOut = GetContentRegionAvail();\n  }\n}\n")),"\n",c.createElement(n.h2,null,"自由に static link できる"),"\n",c.createElement(n.p,null,"build.rs を駆使して自由にリンクできるので、スタティックリンクとダイナミックリンクを制御できるので便利。\n特に Windows の場合、システムに共通のライブラリがインストールされていることが期待できないので、\nDLLを作ってコピーした入りパスを通すよりは、スタティックリンクする方が気楽。\n今回は ",c.createElement(n.code,null,"cc")," でコンパイルしたけど、",c.createElement(n.code,null,"c++/c")," は CMake でビルドする方が管理しやすいかもしれない。"))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?c.createElement(n,e,c.createElement(a,e)):a(e)}},1151:function(e,n,t){t.d(n,{ah:function(){return a}});var l=t(7294);const c=l.createContext({});function a(e){const n=l.useContext(c);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---content-posts-2021-rust-ffi-md-193c746adf2a9a656ada.js.map
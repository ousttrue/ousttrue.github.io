{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-gentoo-install-md-15dc4be89ae496b4551d.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBP,EAAYG,IAAK,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,KAAM,44OAChG,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCRA,SAASW,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOJ,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMK,EAAKE,IAAIC,YAAYC,OAAQT,EAAAA,cAAoBU,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBnB,GACvC,OAAOQ,EAAAA,cAAoBG,EAAcX,EAAOQ,EAAAA,cAAoBY,EAAqBpB,GAC3F,C,4HCuBO,MAAMqB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBf,GAC/B,MAAMgB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfd,EACFA,EAAWgB,GAGb,IAAIA,KAAsBhB,IAChC,CAACgB,EAAmBhB,GACzB,CAGA,MAAMiB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACX,EAAU,SAAEO,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAflB,EACHA,EAAW,CAAC,GACZA,GAAciB,EAEJF,EAAiBf,GAG5B,gBACLc,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2017/gentoo_install.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Linux 成分が不足してきたので久しぶりにデスクトップを構築してみる。\\n\\nISO 入手から UEFI boot の USB メモリ作成\\n\\nSystemRescueCd がよい\\nRufas で起動する USB メモリを作成する\\n\\nパーティション構成とターゲットシステムの種類を GPT UEFI コンピュータ用のパーティション構成を選択するべし\\n\\n起動\\nUSB メモリを差し込んで PC を起動し、del キーで UEFI 画面に入る。\\nUEFI の起動メニューから USB メモリを選択して SystemRescueCd を起動する。\\n\\n\\n> efibootmgr # UEFIモードで起動したか確認\\n> passwd # sshログイン用のパスワードを決める\\n> startx\\n> ifconfig # ip確認\\n\\n\\n# Handbook(Preparing the disks)\\n\\nhttps://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Disks\\n\\n# parted /dev/sda\\n\\n\\n(parted) print\\nModel: ATA ST3500418AS (scsi)\\nDisk /dev/sda: 476940MiB\\nSector size (logical/physical): 512B/512B\\nPartition Table: gpt\\nDisk Flags:\\n\\nNumber Start End Size File system Name Flags\\n1 1.00MiB 129MiB 128MiB efi boot, esp\\n2 129MiB 641MiB 512MiB linux-swap(v1) primary\\n3 641MiB 102401MiB 101760MiB gentoo\\n\\n\\n# mkswap /dev/sda2\\n\\n# swapon /dev/sda2\\n\\n# mkfs.ext4/dev/sda3\\n\\n# mount /dev/sda3 /mnt/gentoo\\n\\n# mkfs.vfat /dev/sda1\\n\\n# mkdir /mnt/gentoo/boot\\n\\n# mount /dev/sda1 /mnt/gentoo/boot\\n\\nInstalling the Gentoo installation files\\nclock 設定。\\n\\n# ntpd -q -g\\n\\nStage3 の download と解凍\\n\\n# cd /mnt/gentoo\\n\\n# wget http://ftp.jaist.ac.jp/pub/Linux/Gentoo/releases/amd64/autobuilds/20170831/stage3-amd64-20170831.tar.bz2\\n\\n# tar xvjpf stage3-\\\\*.tar.bz2 --xattrs --numeric-owner\\n\\nportage 設定\\n\\n# nano -w /mnt/gentoo/etc/portage/make.conf\\n\\n\\nCFLAGS=\\\"-march=native -O2 -pipe\\\"\\n\\n\\n# Use the same settings for both variables\\n\\n\\nCXXFLAGS=\\\"${CFLAGS}\\\"\\n\\nMAKEOPTS=\\\"-j5\\\" # 4 コアなので\\n\\n\\nInstalling the Gentoo base system\\n\\nhttps://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Base\\n\\nmirror 設定\\n日本のサーバーを選択\\n\\n# mirrorselect -i -o >> /mnt/gentoo/etc/portage/make.conf\\n\\nrepository 設定\\nここよくわからぬ\\n\\n# mkdir /mnt/gentoo/etc/portage/repos.conf\\n\\n# cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf\\n\\nchroot 準備\\n\\n# cp -L /etc/resolv.conf /mnt/gentoo/etc/\\n\\n# mount -t proc /proc /mnt/gentoo/proc\\n\\n# mount --rbind /sys /mnt/gentoo/sys\\n\\n# mount --make-rslave /mnt/gentoo/sys\\n\\n# mount --rbind /dev /mnt/gentoo/dev\\n\\n# mount --make-rslave /mnt/gentoo/dev\\n\\nchroot\\n\\n# chroot /mnt/gentoo /bin/bash\\n\\n# source /etc/profile\\n\\n# export PS1=\\\"(chroot) $PS1\\\"\\n\\n\\n(chroot) livecd / #\\n\\n\\n構築\\n\\n# emerge-webrsync\\n\\n# eselect news read\\n\\n# emerge --ask --update --deep --newuse @world\\n\\nprofile 選択は後で起動するようになってからやればいいのでここではやらない。\\ntimezone。\\n\\n# echo \\\"Asia/Tokyo\\\" > /etc/timezone\\n\\n# emerge --config sys-libs/timezone-data\\n\\nnano でなくて vim を使いたいので入れとく。\\n\\n# emerge -av vim\\n\\nlocale。日本語を有効にして、システムは en_us.UTF-8 に。\\n\\n# vim /etc/locale.gen\\n\\nen_US.UTF-8 UTF-8\\nja_JP.EUC-JP EUC-JP\\nja_JP.UTF-8 UTF-8\\n\\n# locale-gen\\n\\n# eselect locale list\\n\\n\\nAvailable targets for the LANG variable:\\n[1] C\\n[2] en_US.utf8 \\\\*\\n[3] ja_JP\\n[4] ja_JP.eucjp\\n[5] ja_JP.ujis\\n[6] ja_JP.utf8\\n[7] japanese\\n[8] japanese.euc\\n[9] POSIX\\n[ ] (free form)\\n\\n\\nConfiguring the Linux kernel\\n\\nhttps://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel\\n\\nsource\\n\\n# emerge --ask sys-kernel/gentoo-sources\\n\\ngenkernel\\nboot パーティションは分けなかった。\\n\\n\\n# emerge --ask sys-kernel/genkernel\\n\\n# genkernel all # 長時間かかる\\n\\n# emerge --ask sys-kernel/linux-firmware\\n\\nConfiguring the system\\n\\nhttps://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/System\\n\\n/etc/fstab\\n/dev/sda3 / ext4 noatime 0 1\\n\\n# EFI。EFI 起動するときに使ったデバイスでないといかん\\n\\n#/dev/sda1 /boot vfat noatime 0 1\\n/dev/sdb2 /boot vfat noatime 0 1\\n\\n/dev/cdrom /mnt/cdrom auto noauto,ro 0 0\\n/dev/sda2 none swap sw 0 0\\n\\nnetwork\\n\\n# vim /etc/conf.d/hostname\\n\\n# vim /etc/conf.d/net\\n\\nconfig_eth0=\\\"192.168.0.2 netmask 255.255.255.0 brd 192.168.0.255\\\"\\nroutes_eth0=\\\"default via 192.168.0.1\\\"\\n\\n# emerge --ask --noreplace net-misc/netifrc\\n\\n# cd /etc/init.d\\n\\n# ln -s net.lo net.eth0\\n\\n# rc-update add net.eth0 default\\n\\nroot password\\n\\n# root passwd\\n\\nInstalling system tools\\n\\nhttps://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Tools\\n\\nlogger\\n\\n# emerge --ask app-admin/sysklogd\\n\\n# rc-update add sysklogd default\\n\\ncron\\n\\n# emerge --ask sys-process/cronie\\n\\n# rc-update add cronie default\\n\\nsshd\\n\\n# rc-update add sshd default\\n\\nConfiguring the bootloader\\n\\nhttps://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Bootloader\\n\\nefibootmgr ではまる\\n\\nhttps://wiki.gentoo.org/wiki/EFI_stub_kernel\\nhttps://wiki.gentoo.org/wiki/Efibootmgr\\n\\n# emerge --ask sys-boot/efibootmgr\\n\\n# mkdir -p /boot/efi/boot\\n\\n# cp /boot/kernel-genkernel-x86_64-4.12.5-gentoo /boot/efi/boot/bootx64.efi\\n\\n# efibootmgr -c -d /dev/sda -p 1 -L \\\"Gentoo\\\" -l \\\"\\\\efi\\\\boot\\\\bootx64.efi\\\" initrd='\\\\initramfs-genkernel-x86_64-4.12.5-gentoo'\\n\\nEFI variables are not supported on this system.\\n\\nぐぬぬ。\\n\\n# mount | grep efivars\\n\\n# mount -t efivarfs efivarfs /sys/firmware/efi/efivars\\n\\nmount: mount point /sys/firmware/efi/efivars does not exist\\n\\nEFI モードになっていないぽい？\\nUEFI 軌道の usb メモリの作成ができていない？\\nminimal.iso じゃなくて livedvd.iso で起動して続きからやってみる。\\n\\nSystemRescueCd\\n\\nefi がリードオンリー\\n\\n# efibootmgr -c -d /dev/sdb -p 2 -L \\\"Gentoo\\\" -l \\\"\\\\efi\\\\gentoo\\\\kernel-genkernel-x86_64-4.12.5-gentoo\\\" initrd='\\\\efi\\\\gentoo\\\\initramfs-genkernel-x86_64-4.12.5-gentoo'\\n\\nCould not prepare Boot variable: Read-only file system\\n\\n# mount -o remount /sys/firmware/efi/efivars -o rw,nosuid,nodev,noexec,noatime\\n\\nhttps://wiki.archlinuxjp.org/index.php/EFISTUB\\n\\n# efibootmgr -c -d /dev/sdb -p 2 -L \\\"Gentoo\\\" -l \\\"/EFI/gentoo/kernel-genkernel-x86_64-4.12.5-gentoo\\\" -u \\\"root=/dev/sda3 rw initrd=/EFI/gentoo/initramfs-genkernel-x86_64-4.12.5-gentoo\\\"\\n\\nBootCurrent: 000C\\nTimeout: 0 seconds\\nBootOrder: 0001,0000,000C,000D,0008,0009\\nBoot0000* Windows Boot Manager\\nBoot0008* CD/DVD Drive\\nBoot0009* Hard Drive\\nBoot000C* UEFI: Sony Storage Media PMAP\\nBoot000D* ubuntu\\nBoot0001* Gentoo\\n\\nしかし、起動するとカーネルパニック。うまくいかぬ。\\nGRUB2 のシェルから起動\\n\\nhttps://jp.linux.com/news/linuxcom-exclusive/418274-lco20140625\\n\\nSystemRescueCd の起動時の grub メニューで c を押して grub のシェルに入る。\\ngrub> ls (hd2,gpt2)/\\nefi\\ngrub> set root=(hd2,gpt2)\\ngrub> linux /efi/gentoo/kernel-genkernel-x86_64-4.12.5-gentoo root=/dev/sda3\\ngrub> initrd /efi/gentoo/initramfs-genkernel-x86_64-4.12.5-gentoo\\n\\n起動できた。カーネルパニックになるのはブートパラメーターの与え方が間違っているぽい。\\nefibootmgr\\nうまくいった手順。\\n-u でカーネルパラメーターを指定する？\\n\\n# mount -o remount /sys/firmware/efi/efivars -o rw,nosuid,nodev,noexec,noatime\\n\\n# efibootmgr -c -d /dev/sdb -p 2 -L \\\"Gentoo\\\" -l \\\"/EFI/gentoo/kernel-genkernel-x86_64-4.12.5-gentoo1\\\" -u \\\"root=/dev/sda3 rw initrd=/EFI/gentoo/initramfs-genkernel-x86_64-4.12.5-gentoo\\\"\\n\\nなんとか起動。\\nFinalizing\\n\\nhttps://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Finalizing\\n\\neth0 の修正\\nnet.eth0 で起動するように enp3s0 を修正する。\\n/etc/udev/rules.d/50-ether.rules\\nSUBSYSTEM==\\\"net\\\", ATTR{address}==\\\"XX:XX:XX:XX:XX:XX\\\", NAME=\\\"eth0\\\"\\n\\n# udevadm test /sys/class/net/enp3s0\\n\\nchanging net interface name from 'enp3s0' to 'eth0'\\n\\n# /etc/init.d/net.eth0 start\\n\\n# ping www.google.com\\n\\n...\\n\\nuser 追加\\n\\n# useradd -m -G users,wheel,audio -s /bin/bash larry\\n\\n# passwd larry\\n\\nssh で外部から新しく作ったユーザーでアクセスできることを確認。\\nshell 設定\\n/etc/inputrc\\nset bell-style none\\n\\n\\\"\\\\C-n\\\":history-search-forward\\n\\\"\\\\C-p\\\":history-search-backward\\n\\n完成\\nリモートから ssh ログインできるところまでできた。\\nefibootmgr 周りがなんかドキュメントが間違っている気がするが誰も使っていないのであろうか。\\nその他\\n追加インストールメモ。\\neix\\nUSE=sqlite\\n\\n# emerge -av eix\\n\\n/etc/cron.daily\\n\\neix-sync\\n\\ncpuflag\\n\\n# emerge -av app-portage/cpuid2cpuflags\\n\\n$ cpuinfo2cpuflags-x86\\nCPU_FLAGS_X86=\\\"aes avx fma3 fma4 mmx mmxext pclmul popcnt sse sse2 sse3 sse4_1 sse4_2 sse4a ssse3 xop\\\"\\n\\nntp\\n\\n# emerge -av ntp\\n\\n# rc-update add ntpd default\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/gentoo_install.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","pre","code","_provideComponents","components","React","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6705],{2918:function(e,n,t){t.r(n),t.d(n,{default:function(){return p}});var a=t(1151),r=t(7294);function l(e){const n=Object.assign({p:"p",pre:"pre",code:"code"},(0,a.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.p,null,"lambdaの引数の型を得たい\nmsgpack-rpcの関数登録の都合上、 lambda関数から引数の型を得たい。\n下記のような書き方をしたい。"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-c++"},"template \nvoid register_func(const std::stiring &func_name, R(*handler)(A1, A2)) {\n// 関数登録 \n}\n\nint main() { \n    // errorになる \n    register_func(“add”, [](int a, int b)->int{ return a+b; });\n    return 0;\n} \n")),"\n",r.createElement(n.p,null,"上記の書き方では普通の関数ポインタを受けることはできるのだが、"),"\n",r.createElement(n.p,null,"std::functionとlambdaは受けられない。\nstd::functionを受けるには下記のようにすることでできた。"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-c++"},"c++ template<typename R, typename A1, typename A2> void register_func(const std::string &func_name, std::function<R(A1, A2) handler) {     // }\n")),"\n",r.createElement(n.p,null,"残り、lambdaを受けられる記述方法を知りたいのだがどうしたらよいものか。\n下記のような手はうまくいかなかった・・・"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-c++"},"c++ template<typename F, typename R, typename A1, typename A2> void add_handler(F handler, const std::string &method) {     std::function<R(A1, A2)> f(handler);     //add_handler }\n")),"\n",r.createElement(n.p,null,"こちらのサイトから\nhttp://d.hatena.ne.jp/osyo-manga/20121205/1354674180\ndecltypeを使ったらなんかできそうな感じがしたので粘っていたのだが、\n目的そのものの記事を発見した。\nhttp://stackoverflow.com/questions/6512019/can-we-get-the-type-of-a-lambda-argument\n微妙にそのままではコンパイルが通らなかったので少し工夫したらうまくいった。"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-c++"},"// ret template Ret helper0(Ret (F::*)(Rest…));\ntemplate Ret helper0(Ret (F::*)(Rest…) const);\n// 1 template A1 helper1(Ret (F::*)(A1, Rest…));\ntemplate A1 helper1(Ret (F::*)(A1, Rest…) const);\n// 2 template A2 helper2(Ret (F::*)(A1, A2, Rest…));\ntemplate A2 helper2(Ret (F::*)(A1, A2, Rest…) const);\ntemplate void add_handler(F handler, const std::string &method) {\ntypedef decltype(handler) functor; typedef\ndecltype(helper0(&functor::operator())) R; typedef\ndecltype(helper1(&functor::operator())) A1; typedef\ndecltype(helper2(&functor::operator())) A2;\n// register function...\n} \n")),"\n",r.createElement(n.p,null,"F handlerで関数ポインタ、lambda、std::function等全部受けられるようになったらしくoverloadが不要になった。\ndecltypeなんかすごいな。"))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?r.createElement(n,e,r.createElement(l,e)):l(e)};t(8678);function o(e){let{data:n,children:t}=e;return r.createElement(r.Fragment,null,r.createElement("h1",null,n.mdx.frontmatter.title),r.createElement(a.Zo,null,t))}function p(e){return r.createElement(o,e,r.createElement(c,e))}},8678:function(e,n,t){t(7294)},1151:function(e,n,t){t.d(n,{Zo:function(){return o},ah:function(){return l}});var a=t(7294);const r=a.createContext({});function l(e){const n=a.useContext(r);return a.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const c={};function o({components:e,children:n,disableParentContext:t}){let o;return o=t?"function"==typeof e?e({}):e||c:l(e),a.createElement(r.Provider,{value:o},n)}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-05-16-lambda-md-1343f14554fb57caecfe.js.map
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-fall-sphinx-myst-md-b436775d0f8f9202ad9b.js","mappings":"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","sources":["webpack:///./content/posts/2021/fall/sphinx_myst.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h1: \"h1\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Gizmo を作る過程で GeometryShader からやりなおしていたら、記憶が飛んでいたので\\n忘れてもいいように記録しておくことにした。\"), \"\\n\", React.createElement(_components.p, null, \"旧 \", React.createElement(_components.code, null, \"MinTriangle\"), \" リポジトリを作り直し。\"), \"\\n\", React.createElement(_components.p, null, \"http://ousttrue.github.io/d3d11_samples/\"), \"\\n\", React.createElement(_components.h1, null, \"MyST なかなかよい\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"reStructuredText\"), \" わりと苦手なので \", React.createElement(_components.code, null, \"sphinx\"), \" でも Markdown を使いたい派なのだが、\\n\", React.createElement(_components.a, {\n    href: \"https://myst-parser.readthedocs.io/en/latest/index.html\"\n  }, \"MyST\"), \" なる Sphinx 向け markdown 拡張ができていた。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://qiita.com/Tachy_Pochy/items/53866eea43d0ad93ea1d\"\n  }, \"Sphinx で使える Markdown 方言 'MyST'\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"sphinx directive の指定の仕方がシンプルで下のような感じ。markdown のシンタックスハイライトやフォーマッターに乗れるのでよい。\"), \"\\n\", React.createElement(\"pre\", null, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-{image}\"\n  }, \":width: 320px\\n:height: 320px\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-{toctree}\"\n  }, \"basic/create_window\\nbasic/create_device\\nbasic/create_swapchain\\nbasic/render_target\\nbasic/compile_shader\\nbasic/basic_pipeline\\n\"))), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"sphinx-autobuild\"), \" と github-actions による \", React.createElement(_components.code, null, \"gh-pages\"), \" デプロイを仕込んだらかなりよくなった。\"), \"\\n\", React.createElement(_components.h1, null, \"memo\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://github.com/wpilibsuite/sphinxext-remoteliteralinclude\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"git の revision と path 指定して include できないかしら。\\nサンプルコードにちょこちょこっと解説を書きたいのだが、サンプルコードが進化する場合に \", React.createElement(_components.code, null, \"literalinclude\"), \" だと場所がずれるのだ。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/fall/sphinx_myst.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","h1","a","ul","li","pre","_provideComponents","components","React","href","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
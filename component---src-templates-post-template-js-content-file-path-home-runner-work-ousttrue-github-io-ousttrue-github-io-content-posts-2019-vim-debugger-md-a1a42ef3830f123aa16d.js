"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6950],{533:function(e,t,n){n.r(t),n.d(t,{default:function(){return d}});var l=n(1151),a=n(7294);function s(e){const t=Object.assign({p:"p",span:"span",h1:"h1",h2:"h2",ul:"ul",li:"li",a:"a",blockquote:"blockquote",h3:"h3"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.p,null,"vimで ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">breakpoint</code>'}})," を設置してステップ実行できるようなデバッガを調べた。"),"\n",a.createElement(t.h1,null,"vim 上のデバッガ"),"\n",a.createElement(t.h2,null,"lldb.nvim"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/dbgx/lldb.nvim"},"https://github.com/dbgx/lldb.nvim")),"\n"),"\n",a.createElement(t.h2,null,"vim-vebugger"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/idanarye/vim-vebugger"},"https://github.com/idanarye/vim-vebugger")),"\n"),"\n",a.createElement(t.p,null,"なんか動きそうなのだが、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vimproc</code>'}})," を使っていたので動かせなかった\nkaoriya 版の Vim を使うなどしてみたがよくわからず。"),"\n",a.createElement(t.h2,null,"pyclewn"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/Mistobaan/pyclewn"},"https://github.com/Mistobaan/pyclewn")),"\n"),"\n",a.createElement(t.p,null,"gdb と pdb のvimフロントエンド？"),"\n",a.createElement(t.h2,null,"pubd"),"\n",a.createElement(t.p,null,"pythonのpdb."),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/inducer/pudb"},"https://github.com/inducer/pudb")),"\n"),"\n",a.createElement(t.h2,null,"vim-breakpts"),"\n",a.createElement(t.p,null,"vim スクリプト用？"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/albfan/vim-breakpts"},"https://github.com/albfan/vim-breakpts")),"\n"),"\n",a.createElement(t.h2,null,"vimspector"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/puremourning/vimspector"},"https://github.com/puremourning/vimspector")),"\n"),"\n",a.createElement(t.p,null,"VSCodeの ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DebugAdapterProtocol</code>'}})," を使うものらしい。"),"\n",a.createElement(t.blockquote,null,"\n",a.createElement(t.p,null,"While Language Server Protocol is well known, the Debug Adapter Protocol is less well known, but achieves a similar goal: language agnostic API abstracting debuggers from clients."),"\n"),"\n",a.createElement(t.p,null,"動かし方よくわからず。"),"\n",a.createElement(t.h1,null,"DebugAdapterProtocol"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://code.visualstudio.com/blogs/2018/08/07/debug-adapter-protocol-website"},"DebugAdapterProtocol"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/Microsoft/vscode-debugadapter-node"},"旧サイト・リポジトリ")),"\n"),"\n"),"\n"),"\n",a.createElement(t.p,null,"読む。"),"\n",a.createElement(t.blockquote,null,"\n",a.createElement(t.p,null,'The "deep understanding of a language" is surfaced by the Language Server Protocol (LSP) and the "debugging support" by the Debug Adapter Protocol (DAP).'),"\n"),"\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">editor &lt;=> adapter &lt;=> gdb\n              ||\n              ++=====> pdb</code></pre></div>'}}),"\n",a.createElement(t.p,null,"adapterでラップして同じに見えるようにする。"),"\n",a.createElement(t.p,null,"adapterの起動設定は、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.vscode/launch.json</code>'}})," にというわけか。"),"\n",a.createElement(t.blockquote,null,"\n",a.createElement(t.p,null,"The Debug Adapter Protocol is not tied to VS Code and can be used as the foundation for a generic debugger UI in other development tools."),"\n"),"\n",a.createElement(t.p,null,"新サイトで仕様を公開していくで、って書いてあるね。"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"新サイト ",a.createElement(t.a,{href:"https://microsoft.github.io/debug-adapter-protocol/"},"https://microsoft.github.io/debug-adapter-protocol/"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"新リポジトリ ",a.createElement(t.a,{href:"https://github.com/Microsoft/debug-adapter-protocol"},"https://github.com/Microsoft/debug-adapter-protocol")),"\n"),"\n"),"\n"),"\n",a.createElement(t.p,null,"読む。"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://microsoft.github.io/debug-adapter-protocol/overview"},"https://microsoft.github.io/debug-adapter-protocol/overview")),"\n"),"\n",a.createElement(t.blockquote,null,"\n",a.createElement(t.p,null,"single session mode: in this mode, the development tool starts a debug adapter as a standalone process and communicates with it through stdin and stdout."),"\n"),"\n",a.createElement(t.blockquote,null,"\n",a.createElement(t.p,null,"multi session mode: in this mode, the development tool does not start the debug adapter but assumes that it is already running and that it listens on a specific port for connections attempts."),"\n"),"\n",a.createElement(t.h2,null,"DAPの仕様"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://microsoft.github.io/debug-adapter-protocol/specification"},"https://microsoft.github.io/debug-adapter-protocol/specification")),"\n"),"\n",a.createElement(t.h2,null,"DAPの実装"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/"},"https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/")),"\n"),"\n",a.createElement(t.p,null,"ネイティブコンパイルするタイプは言語ごとではなく、ネイティブコンパイルの様式ごとに違うものになる。例えば、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vc</code>'}})," , ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gcc</code>'}})," , ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">llvm</code>'}})," のように。"),"\n",a.createElement(t.p,null,"となるとVMタイプのものは、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.Net</code>'}}),", ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Mono</code>'}}),", ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">java</code>'}})," といった分類になるのだろうか。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">C#</code>'}}),", ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">F#</code>'}})," が両方デバッグできたりしそうではある。"),"\n",a.createElement(t.p,null,"インタープリター型はそれぞれの言語ごとになる。"),"\n",a.createElement(t.p,null,"あとは、リモートデバッグの事情を調べる。"),"\n",a.createElement(t.h3,null,"native debug"),"\n",a.createElement(t.p,null,"c++やd, rustなんかのnativeコードを出力するものをまとめて面倒見れるという理解であったいるのかな。ビルド形式とデバッグビルドに付加される情報のフォーマットに対応してデバッガを選択する必要があると。"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/Microsoft/vscode-cpptools"},"https://github.com/Microsoft/vscode-cpptools")),"\n"),"\n",a.createElement(t.p,null,"LLVM"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/vadimcn/vscode-lldb"},"https://github.com/vadimcn/vscode-lldb")),"\n"),"\n",a.createElement(t.h3,null,".Net"),"\n",a.createElement(t.blockquote,null,"\n",a.createElement(t.p,null,"Mono debugging is not supported."),"\n"),"\n",a.createElement(t.p,null,"ILは互換性があるにしても、VMのデバッグインタフェースは互換性が無いということなのかな。"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/OmniSharp/omnisharp-vscode"},"https://github.com/OmniSharp/omnisharp-vscode")),"\n"),"\n",a.createElement(t.h3,null,"Mono"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/Microsoft/vscode-mono-debug"},"https://github.com/Microsoft/vscode-mono-debug")),"\n"),"\n",a.createElement(t.h3,null,"Unity"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/Unity-Technologies/vscode-unity-debug"},"https://github.com/Unity-Technologies/vscode-unity-debug")),"\n"),"\n",a.createElement(t.p,null,"UnityEditorにアタッチできるらしい。\nUnity版のMonoにアタッチできるということかしら。"),"\n",a.createElement(t.h3,null,"lua / ravi"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/dibyendumajumdar/ravi-vscode-debugger"},"https://github.com/dibyendumajumdar/ravi-vscode-debugger")),"\n"),"\n",a.createElement(t.p,null,"こんなのあるのか・・・"),"\n",a.createElement(t.h3,null,"powershell"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/PowerShell/vscode-powershell"},"https://github.com/PowerShell/vscode-powershell")),"\n"),"\n",a.createElement(t.h3,null,"python"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/Microsoft/vscode-python"},"https://github.com/Microsoft/vscode-python")),"\n"),"\n",a.createElement(t.h1,null,"vimspectorの実装"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/puremourning/vimspector"},"https://github.com/puremourning/vimspector")),"\n"),"\n",a.createElement(t.p,null,"読む。"),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.\\install_gadget.py</code>'}})),"\n",a.createElement(t.p,null,"を実行することで、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">VSCode</code>'}})," の ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">extension</code>'}})," を ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">download</code>'}})," する。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">extension</code>'}})," に、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DAP</code>'}})," が含まれているのでこれを使う。"),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">autoload/vimspector.vim</code>'}})),"\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim"><span class="token keyword">function</span><span class="token operator">!</span> vimspector#<span class="token function">Launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort\n  py3 _vimspector_session<span class="token operator">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">endfunction</span></code></pre></div>'}}),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">python3/vimspector/debug_session.py</code>'}})),"\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">class</span> <span class="token class-name">DebugSession</span><span class="token punctuation">:</span>\n  <span class="token keyword">def</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">pass</span>\n</code></pre></div>'}}),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim.bindeval</code>'}})," を使っているので、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim8</code>'}})," 専用。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nvim</code>'}})," では回避する必要がある。"),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.vimspector.json</code>'}})),"\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token property">"adapters"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",a.createElement(t.p,null,"の ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">configurations</code>'}})," からデバッグセッションの起動方法を取得して、\nデバッグアダプターを ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim</code>'}})," の ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">job</code>'}})," か ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">channel</code>'}})," 経由で起動する。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">configurations</code>'}})," が ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.vscode/launch.json</code>'}})," に相当するようだ。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">adapters</code>'}})," は、インストールされている ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DebugAdapter</code>'}})," のリスト。"),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">call vimspector#Launch()</code>'}})," ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">simple_python - launch</code>'}})," ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/Users/ousttrue</code>'}})," と入力することでjobが、アダプター開始するところまでできた。\nしかし、アダプターがすぐに死んでいる様子。"),"\n",a.createElement(t.p,null,"アダプターを手動起動してみる。"),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">node .\\.vscode\\extensions\\ms-python.python-2019.4.11987\\out\\client\\debugger\\debugAdapter\\main.js</code>'}})),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.vimspector.json</code>'}})," に書いてあるのとバージョンが違う。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">file not found</code>'}})," か。"),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">path</code>'}})," をなおしたら動いた😃"),"\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">-          "$HOME/.vscode/extensions/ms-python.python-2018.4.0/out/client/debugger/Main.js"\n+          "$HOME/.vscode/extensions/ms-python.python-2019.4.11987/out/client/debugger/debugAdapter/Main.js"</code></pre></div>'}}),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">neovim</code>'}})," の ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rplugin</code>'}})," での構成を考えてみようか。"),"\n",a.createElement(t.h1,null,"python3 で Adapter を起動してみる"),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">AdapterAdapter</code>'}})," というか ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">AdapterBridge</code>'}})," という感じになりそうだけど、\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim</code>'}})," で込み入った実装をするのは手に余るので、可能な限り ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">python</code>'}})," で事を進めよう。\npythonでprotocl実験。"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://github.com/ousttrue/daplauncher"},"https://github.com/ousttrue/daplauncher")),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"http://pydev.blogspot.com/2018/05/howto-launch-and-debug-in-vscode-using.html"},"http://pydev.blogspot.com/2018/05/howto-launch-and-debug-in-vscode-using.html")),"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://vscode-docs.readthedocs.io/en/stable/extensions/example-debuggers/"},"https://vscode-docs.readthedocs.io/en/stable/extensions/example-debuggers/")),"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://vscode-docs.readthedocs.io/en/stable/extensionAPI/api-debugging/"},"https://vscode-docs.readthedocs.io/en/stable/extensionAPI/api-debugging/")),"\n"),"\n",a.createElement(t.p,null,"launchRequestの後で固まると思ったら、サイトに記述されていないパラメーターがあった。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">console</code>'}})," どこに書いてあるのか・・・"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://github.com/Microsoft/vscode-debugadapter-node/blob/master/debugProtocol.json"},"https://github.com/Microsoft/vscode-debugadapter-node/blob/master/debugProtocol.json")),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://github.com/Microsoft/vscode-python/issues/3762"},"https://github.com/Microsoft/vscode-python/issues/3762")),"\n",a.createElement(t.p,null,"わかった。"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://github.com/Microsoft/vscode-go/issues/219"},"https://github.com/Microsoft/vscode-go/issues/219")),"\n",a.createElement(t.p,null,"vscodeの ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.vscode/launch.json</code>'}})," の起動設定を ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">launch</code>'}})," の引数に合体するのだ。"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://code.visualstudio.com/Docs/editor/debugging#_launchjson-attributes"},"https://code.visualstudio.com/Docs/editor/debugging#_launchjson-attributes")),"\n",a.createElement(t.p,null,"書いとけよー。"))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.ah)(),e.components);return t?a.createElement(t,e,a.createElement(s,e)):s(e)},o=n(8678),r=n(1883),u=n(8838);const m={code:e=>{let{children:t,className:n}=e;return n?a.createElement(u.Z,{className:n},t):a.createElement("code",null,t)}};function p(e){let{data:t,children:n}=e;const s=t.mdx.frontmatter;return a.createElement(o.Z,null,a.createElement("h1",null,s.title),a.createElement("div",{className:"tags-index"},s.tags&&s.tags.length>0&&s.tags.map((e=>a.createElement(r.rU,{to:"/tags/"+e+"/",itemProp:"url"},a.createElement("button",null,e))))),a.createElement(l.Zo,{components:m},n))}function d(e){return a.createElement(p,e,a.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2019-vim-debugger-md-a1a42ef3830f123aa16d.js.map
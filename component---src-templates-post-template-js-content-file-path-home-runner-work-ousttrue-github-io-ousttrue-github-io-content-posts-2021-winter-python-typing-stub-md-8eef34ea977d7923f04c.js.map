{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-winter-python-typing-stub-md-8eef34ea977d7923f04c.js","mappings":"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","sources":["webpack:///./content/posts/2021/winter/python_typing_stub.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    p: \"p\",\n    span: \"span\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"python typing\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://docs.python.org/3/library/typing.html\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"生成する\"), \"\\n\", React.createElement(_components.p, null, \"既存のライブラリ、特に拡張ライブラリに型ヒントを付与したいことがある。\\nこれらは、元が \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">c/c++</code>\"\n    }\n  }), \" なのでその型情報から \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pyi</code>\"\n    }\n  }), \" を生成してやる。\\n型情報は、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">clang.cindex</code>\"\n    }\n  }), \" を使って \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">c/c++</code>\"\n    }\n  }), \" のヘッダーから得るとよい。\"), \"\\n\", React.createElement(_components.h2, null, \"vscode + pylance(pyright)\"), \"\\n\", React.createElement(_components.p, null, \"プロジェクトローカルでいい場合は、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">${workspaceFolder}/typings</code>\"\n    }\n  }), \" に配置すると処理してくれる。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">clang.cindex</code>\"\n    }\n  }), \" に \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">enum</code>\"\n    }\n  }), \" の情報を追加してみた。\"), \"\\n\", React.createElement(_components.h2, null, \"ctypes\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"clang.cindex\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"もとのモジュールと構造が同じ \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pyi</code>\"\n    }\n  }), \" を用意してやる。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ctypes</code>\"\n    }\n  }), \" の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Structure</code>\"\n    }\n  }), \" や関数ポインタに直接型ヒントを付与うまい方法は無さそう？\"), \"\\n\", React.createElement(_components.h2, null, \"拡張モジュール\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"bpy\"), \"\\n\", React.createElement(_components.li, null, \"imgui のバインディング\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"拡張モジュールに型ヒントを埋め込む方法がまだ無いっぽい。\\n埋め込む方法ができれば、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cython</code>\"\n    }\n  }), \" や \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pybind</code>\"\n    }\n  }), \" で作った拡張モジュールには自動で型ヒントが付きそうな気がするのだが。\"), \"\\n\", React.createElement(_components.h2, null, \"imgui で作ってみた。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/cydeer\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://blog.ymyzk.com/2018/09/creating-packages-using-pep-561/\"\n  }, \"PEP 561 に準拠した型ヒントを含むパッケージの作り方\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"を参考に作ってみた。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/winter/python_typing_stub.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","ul","li","h2","p","span","a","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
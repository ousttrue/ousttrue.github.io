{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-nvim-dap-codelldb-md-bf635af49838517d20ba.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,IACHC,KAAM,OACNC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,IAAK,QACJC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBZ,EAAYG,EAAG,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,CAC3HS,KAAM,4CACL,YAAa,kEAAmED,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,UAAW,wBAAyB,KAAMO,EAAAA,cAAoBZ,EAAYG,EAAG,KAAM,4DAA6D,KAAMS,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,KAAMM,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,0EAA2E,KAAMK,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,yEAA0E,KAAMK,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,2EAA4E,MAAO,KAAMK,EAAAA,cAAoBZ,EAAYG,EAAG,KAAM,OAAQS,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,yBAA0B,kDAAmD,KAAMO,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,gBAAiB,KAAMI,EAAAA,cAAoBZ,EAAYG,EAAG,KAAM,eAAgBS,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,gBAAiB,qCAAsC,KAAMO,EAAAA,cAAoBZ,EAAYS,IAAK,KAAMG,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,iJAAkJ,KAAMO,EAAAA,cAAoBZ,EAAYG,EAAG,KAAM,0BAA2B,KAAMS,EAAAA,cAAoBZ,EAAYG,EAAG,KAAMS,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,uBAAwB,KAAMO,EAAAA,cAAoBZ,EAAYS,IAAK,KAAMG,EAAAA,cAAoBZ,EAAYK,KAAM,CAC3kDS,UAAW,iBACV,iSAAoS,KAAMF,EAAAA,cAAoBZ,EAAYG,EAAG,KAAM,OAAQS,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,sDAAuD,KAAMO,EAAAA,cAAoBZ,EAAYS,IAAK,KAAMG,EAAAA,cAAoBZ,EAAYK,KAAM,CACthBS,UAAW,iBACV,u0BAAs2B,KAAMF,EAAAA,cAAoBZ,EAAYG,EAAG,KAAM,SAAUS,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,cAAe,OAAQO,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,kBAAmB,yCAA0C,KAAMO,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,KAAMM,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,MAAO,KAAMK,EAAAA,cAAoBZ,EAAYO,GAAI,KAAMK,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,2BAA4B,qBAAsB,KAAMO,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,4BAA6B,MAAO,KAAMK,EAAAA,cAAoBZ,EAAYG,EAAG,KAAM,8HAA+H,KAAMS,EAAAA,cAAoBZ,EAAYG,EAAG,KAAM,KAAMS,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,sBAAuB,aAAc,KAAMO,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,oBAAqB,KAAMI,EAAAA,cAAoBZ,EAAYG,EAAG,KAAM,gBAAiBS,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,cAAe,KAAMO,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,UAAW,aAAcO,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,qBAAsB,WAAY,KAAMO,EAAAA,cAAoBZ,EAAYS,IAAK,KAAMG,EAAAA,cAAoBZ,EAAYK,KAAM,CACznES,UAAW,gBACV,+6FAAg7F,KAAMF,EAAAA,cAAoBZ,EAAYG,EAAG,KAAM,gBACp+F,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOgB,QAASC,GAAaf,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWjB,EAAOa,EAAAA,cAAoBd,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCrBA,SAASkB,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAON,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMO,EAAKE,IAAIC,YAAYC,OAAQX,EAAAA,cAAoBY,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiB1B,GACvC,OAAOa,EAAAA,cAAoBK,EAAclB,EAAOa,EAAAA,cAAoBc,EAAqB3B,GAC3F,C,4HCuBO,MAAM4B,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBjB,GAC/B,MAAMkB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfhB,EACFA,EAAWkB,GAGb,IAAIA,KAAsBlB,IAChC,CAACkB,EAAmBlB,GACzB,CAGA,MAAMmB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACb,EAAU,SAAES,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfpB,EACHA,EAAW,CAAC,GACZA,GAAcmB,EAEJF,EAAiBjB,GAG5B,gBACLgB,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2021/nvim_dap_codelldb.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/mfussenegger/nvim-dap\"\n  }, \"nvim-dap\"), \" で rust をデバッグするべく悪戦苦闘中。\\nnvim-dap というのは、来たる nvim-0.5 で動くようになる、 \", React.createElement(_components.code, null, \"vscode\"), \" のデバッグアダプターを動作させる機能。\"), \"\\n\", React.createElement(_components.p, null, \"rust(Windows) は native debugger をアタッチすればいいので、いくつか選択肢があって\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools\"), \"\\n\", React.createElement(_components.li, null, \"https://marketplace.visualstudio.com/items?itemName=lanza.lldb-vscode\"), \"\\n\", React.createElement(_components.li, null, \"https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"最後の、\", React.createElement(_components.code, null, \"vscode-lldb(codelldb)\"), \" https://github.com/vadimcn/vscode-lldb が使いたい。\"), \"\\n\", React.createElement(_components.h2, null, \"codelldb の起動\"), \"\\n\", React.createElement(_components.p, null, \"nvim-dap から \", React.createElement(_components.code, null, \"codelldb.exe\"), \" プロセスは起動している様子。通信がうまくいってないように見える。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"> .\\\\.cache\\\\dein\\\\repos\\\\github.com\\\\puremourning\\\\vimspector\\\\gadgets\\\\windows\\\\CodeLLDB\\\\adapter\\\\codelldb.exe\\nListening on port 55201\\n\")), \"\\n\", React.createElement(_components.p, null, \"標準入出力を使うモードになっていないのでは？\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"adapter/src/lib.rs\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"async fn run_debug_server(\\n    addr: net::SocketAddr,\\n    adapter_settings: debug_protocol::AdapterSettings,\\n    multi_session: bool,\\n) {\\n    let listener = TcpListener::bind(&addr).await.unwrap();\\n\\n    println!(\\\"Listening on port {}\\\", listener.local_addr().unwrap().port());\\n\")), \"\\n\", React.createElement(_components.p, null, \"遡る。 \", React.createElement(_components.code, null, \"main -> debug_server -> entry -> run_debug_server\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn main() -> Result<(), Error> {\\n    env_logger::Builder::from_default_env().init();\\n\\n    let matches = App::new(\\\"codelldb\\\")\\n        .arg(Arg::with_name(\\\"port\\\").long(\\\"port\\\").takes_value(true))\\n        .arg(Arg::with_name(\\\"multi-session\\\").long(\\\"multi-session\\\"))\\n        .arg(Arg::with_name(\\\"preload\\\").long(\\\"preload\\\").multiple(true).takes_value(true))\\n        .arg(Arg::with_name(\\\"liblldb\\\").long(\\\"liblldb\\\").takes_value(true))\\n        .arg(Arg::with_name(\\\"params\\\").long(\\\"params\\\").takes_value(true))\\n        .subcommand(SubCommand::with_name(\\\"terminal-agent\\\").arg(Arg::with_name(\\\"port\\\").long(\\\"port\\\").takes_value(true)))\\n        .get_matches();\\n\\n    if let Some(matches) = matches.subcommand_matches(\\\"terminal-agent\\\") {\\n        terminal_agent::terminal_agent(&matches)\\n    } else {\\n        debug_server(&matches)\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"どうやら、 \", React.createElement(_components.code, null, \"executable\"), \" かつ \", React.createElement(_components.code, null, \"stdio ではなく tcp\"), \" 通信というタイプで nvim-dap では未対応ということでよさそう。？\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"起動\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"Listening on port XXXXX\"), \" メッセージから port を得る\"), \"\\n\", React.createElement(_components.li, null, \"そのポートに対して TCP 接続という手順が必要\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"https://code.visualstudio.com/api/extension-guides/debugger-extension#alternative-approach-to-develop-a-debugger-extension\"), \"\\n\", React.createElement(_components.p, null, \"の \", React.createElement(_components.code, null, \"DebugAdapterServer\"), \" タイプにあたる。\"), \"\\n\", React.createElement(_components.h2, null, \"nvim-dap の改造を試みる\"), \"\\n\", React.createElement(_components.p, null, \"adapter.type \", React.createElement(_components.code, null, \"executable\"), \", \", React.createElement(_components.code, null, \"server\"), \" に加えて、第3の \", React.createElement(_components.code, null, \"executable_server\"), \" を作れるか。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-lua\"\n  }, \"local function run_adapter(adapter, configuration, opts)\\n  local name = configuration.name or '[no name]'\\n  local options = adapter.options or {}\\n  opts = vim.tbl_extend('keep', opts, {\\n    cwd = options.cwd,\\n    env = options.env\\n  })\\n  if adapter.type == 'executable' then\\n    lazy.progress.report('Running: ' .. name)\\n    M.launch(adapter, configuration, opts)\\n  elseif adapter.type == 'server' then\\n    lazy.progress.report('Running: ' .. name)\\n    M.attach(adapter.host, adapter.port, configuration, opts)\\n  elseif adapter.type == 'executable_server' then -- 👈これを追加した\\n    lazy.progress.report('Running: ' .. name)\\n    -- local session = M.launch(adapter, configuration, opts)\\n    local stdin, stdout, stderr = executable_server(adapter, opts)\\n    -- `Error executing luv callback: vimL function must not be called in a lua loop callback`\\n    vim.loop.read_start(stdout, vim.schedule_wrap(function(err, data)\\n      -- codelldb の出力から port を得る\\n      -- Lisening on port xxxxx\\n      local port = string.match(data , \\\"Listening on port (%d+)\\\" )\\n      M.attach(nil, port, configuration, opts)\\n    end))\\n  else\\n    print(string.format('Invalid adapter type %s, expected `executable` or `server`', adapter.type))\\n  end\\nend\\n\\nfunction executable_server(adapter, opts)\\n  local uv = vim.loop\\n  local stdin = uv.new_pipe(false)\\n  local stdout = uv.new_pipe(false)\\n  local stderr = uv.new_pipe(false)\\n  local handle\\n  local function onexit()\\n    stdin:close()\\n    stdout:close()\\n    stderr:close()\\n    handle:close()\\n  end\\n  local options = adapter.options or {}\\n  local pid_or_err\\n  handle, pid_or_err = uv.spawn(adapter.command, {\\n    args = adapter.args;\\n    stdio = {stdin, stdout, stderr};\\n    cwd = options.cwd;\\n    env = options.env;\\n    detached = true;\\n  }, onexit)\\n  assert(handle, 'Error running ' .. adapter.command .. ': ' .. pid_or_err)\\n\\n  return stdin, stdout, stderr\\nend\\n\\nfunction M.attach(host, port, config, opts)\\n  if session then\\n    session:close()\\n  end\\n  if not config.request then\\n    print('config needs the `request` property which must be one of `attach` or `launch`')\\n    return\\n  end\\n  -- initialize が早すぎるので config を connect 引数に\\n  session = require('dap.session'):connect(host, port, opts, config)\\n  return session\\nend\\n\\nfunction Session:connect(host, port, opts, config)\\n  local session = session_defaults(opts or {})\\n  setmetatable(session, self)\\n  self.__index = self\\n\\n  local client = uv.new_tcp()\\n  session.client = {\\n    write = function(line) \\n        client:write(line) \\n    end;\\n    close = function()\\n      client:shutdown()\\n      client:close()\\n    end;\\n  }\\n  client:connect(host or '127.0.0.1', tonumber(port), function(err)\\n    if (err) then print(err) end\\n    client:read_start(rpc.create_read_loop(function(body)\\n      session:handle_body(body)\\n    end))\\n\\n    -- connect が成立してから initialize を送る\\n    session:initialize(config)\\n\\n  end)\\n  return session\\nend\\n\")), \"\\n\", React.createElement(_components.p, null, \"動いた。 PR 作ろう。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/nvim_dap_codelldb.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","code","ul","li","h2","pre","_provideComponents","components","React","href","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
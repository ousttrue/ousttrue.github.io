"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7316],{9784:function(n,e,i){i.r(e),i.d(e,{default:function(){return d}});var f=i(1151),o=i(7294);function t(n){const e=Object.assign({p:"p",pre:"pre",code:"code"},(0,f.ah)(),n.components);return o.createElement(o.Fragment,null,o.createElement(e.p,null,"Windows 上で node-ffi で dll から関数を呼びだしていたのだが、\ndll にコールバックを登録した呼び出しを繰り返していると死ぬという現象に遭遇。\n調べ始めた。\nnode-v5.3.0-x64.msi(Windows10)"),"\n",o.createElement(e.pre,null,o.createElement(e.code,null,'node-ffiはstdcallに対応してない\n2014/01/25\n\nhttp://stackoverflow.com/questions/21357502/calling-delphi-stdcall-function-with-panischar-from-node-js\n\nnode-ffiはstdcall対応してないで。\nそうなのかー。\ngithub見るとIssueがあるけど解決されなかったぽい。\n2012/01/13\n* https://github.com/node-ffi/node-ffi/issues/34\n残念。\nついで。node-ffiはffiにパッケージ名を改めたらしい。\n\nhttps://github.com/node-ffi/node-ffi/wiki/API-changes-from-v0.x-to-v1.x\n\nnode-ffiを改造できないか模索する\nnode-ffiはlibffiのラッパーとわかる。\nFFI_DEFAULT_ABI\nというのがcdeclになる様子でnode-ffiはそれしか対応していないのが問題。\nで、調べていくと\nnode_modules/ffi/deps/libffi/src/x86/ffitarget.h\ntypedef enum ffi_abi {\n  FFI_FIRST_ABI = 0,\n\n  /* ---- Intel x86 Win32 ---------- */\n#ifdef X86_WIN32\n  FFI_SYSV,\n  FFI_STDCALL,\n  FFI_THISCALL,\n  FFI_FASTCALL,\n  FFI_MS_CDECL,\n  FFI_LAST_ABI,\n#ifdef _MSC_VER\n  FFI_DEFAULT_ABI = FFI_MS_CDECL\n#else\n  FFI_DEFAULT_ABI = FFI_SYSV\n#endif\n\n#elif defined(X86_WIN64)\n  FFI_WIN64,\n  FFI_LAST_ABI,\n  FFI_DEFAULT_ABI = FFI_WIN64\n\n#else\n  /* ---- Intel x86 and AMD x86-64 - */\n  FFI_SYSV,\n  FFI_UNIX64,   /* Unix variants all use the same ABI for x86-64  */\n  FFI_LAST_ABI,\n#if defined(__i386__) || defined(__i386)\n  FFI_DEFAULT_ABI = FFI_SYSV\n#else\n  FFI_DEFAULT_ABI = FFI_UNIX64\n#endif\n#endif\n} ffi_abi;\n\nSTDCALL発見・・・。しかし、この書き方だと64bitビルドで消滅するのではないか？\nFFI_WIN64って何？\nX86_WIN64って何だろう。何故、STD_CALLが無いのか。もしかして、IA64のことなのか。\nどうやら、そのよう定義済みプリプロセッサー・シンボルの使用。\nうちはamd64なのでnot IA64。\nnode-ffiのどこでX86_WIN64が定義されているのか\nnode_modules/ffi/deps/libffi/config/win/x64\n/* Specify which architecture libffi is configured for. */\n#ifndef X86_WIN64\n#define X86_WIN64\n#endif\n\nとりあえず書き換えて、\n#ifndef X86_WIN32\n#define X86_WI32\n#endif\n\n> cd node_modules/ffi\n> npm install\n> node-gyp rebuild\n\nlibffi.lib(ffi.obj) : error LNK2001: 外部シンボル "ffi_closure_raw_THISCALL" は未解決です。 [D:\\dev\\_web\\neuron.\njs\\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nlibffi.lib(ffi.obj) : error LNK2001: 外部シンボル "ffi_closure_SYSV" は未解決です。 [D:\\dev\\_web\\neuron.js\\node_\nmodules\\ffi\\build\\ffi_bindings.vcxproj]\nlibffi.lib(ffi.obj) : error LNK2001: 外部シンボル "ffi_closure_STDCALL" は未解決です。 [D:\\dev\\_web\\neuron.js\\no\nde_modules\\ffi\\build\\ffi_bindings.vcxproj]\nlibffi.lib(ffi.obj) : error LNK2001: 外部シンボル "ffi_closure_THISCALL" は未解決です。 [D:\\dev\\_web\\neuron.js\\n\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nlibffi.lib(ffi.obj) : error LNK2001: 外部シンボル "ffi_closure_raw_SYSV" は未解決です。 [D:\\dev\\_web\\neuron.js\\n\node_modules\\ffi\\build\\ffi_bindings.vcxproj]\nlibffi.lib(ffi.obj) : error LNK2001: 外部シンボル "ffi_call_win32" は未解決です。 [D:\\dev\\_web\\neuron.js\\node_mo\ndules\\ffi\\build\\ffi_bindings.vcxproj]\n\n頓挫・・・。\n上記関数の実体がwin32.asmの中にあるが64bitでコンパイルすると失敗する・・・。\nlibffiを64bitビルドしてstdcallするところから出直さねばならない。\n32bit版のnode.jsに妥協\nFFI_STDCALLで関数登録\n// stdcallのabi番号。Windowsの32bit版Node.js専用\nconst FFI_STDCALL=2;\n// callbackをFFI_STDCALLに設定\nconst CallbackType = FFI.Function(ref.types.void\n    , [ref.refType(ref.types.void)], FFI_STDCALL);\n\n// 関数定義をFFI_STDCALLに設定\nconst DllLib = FFI.Library("hoge.dll", {\n    RegisterCallback: [ref.types.void, [ref.refType(ref.types.void), CallbackType, {abi: FFI_STDCALL}],\n}\n\n上記の記述でWindowsの32bit版Node.jsではFFI登録にSTDCALLを設定できたっぽい。\nでも、プログラムが死ぬ。\nどうやらJavascript層より下で死んでいるようでエラーを吐かずに突然死する。ううむ。\nこりゃ、Cのデバッガをアタッチせねばなるまい。\n0x016E0008 で例外がスローされました (node.exe 内): 0xC0000005: 場所 0x00000588 の読み取り中にアクセス違反が発生しました\n\nこの例外のハンドラーがある場合は、プログラムを安全に続行できます。\n\nuncaughtException\nこんなの発見した。\n東京Node学園#8 Let It Crash!?\nさっそくやってみる\nprocess.on(\'uncaughtException\', function (err) {\n  console.log(\'Caught exception: \' + err);\n});\n\nひっかからないな・・・\n自前ビルドしてどう死んでいるか確かめるか。\n')))}var l=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,f.ah)(),n.components);return e?o.createElement(e,n,o.createElement(t,n)):t(n)};i(8678);function r(n){let{data:e,children:i}=n;return o.createElement(o.Fragment,null,o.createElement("h1",null,e.mdx.frontmatter.title),o.createElement(f.Zo,null,i))}function d(n){return o.createElement(r,n,o.createElement(l,n))}},8678:function(n,e,i){i(7294)},1151:function(n,e,i){i.d(e,{Zo:function(){return r},ah:function(){return t}});var f=i(7294);const o=f.createContext({});function t(n){const e=f.useContext(o);return f.useMemo((()=>"function"==typeof n?n(e):{...e,...n}),[e,n])}const l={};function r({components:n,children:e,disableParentContext:i}){let r;return r=i?"function"==typeof n?n({}):n||l:t(n),f.createElement(o.Provider,{value:r},e)}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-12-19-node-ffi-md-293f55460958f8299f23.js.map
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2023-1008-md-ad82c62a1b07a7938b30.js","mappings":"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","sources":["webpack:///./content/posts/2023/1008.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"script 用途には python を愛用していたのだけど、\\npython-3.10 で入った match 文が気に入りすぎて、\\nlinux とか mac のデフォルトの python が 3.9 であったりすることが悲しかったので、 lua 使いになった。\\n(dotfiles の script を match から if に書きなおしたw)\"), \"\\n\", React.createElement(_components.p, null, \"というわけでもなく、nvim に常用して lua の使用頻度が上がったので、\\nついでに主力のスクリプト言語が変わった。\\n\", React.createElement(_components.code, null, \"nvim\"), \" 以外に、 \", React.createElement(_components.code, null, \"wezterm\"), \", \", React.createElement(_components.code, null, \"nyagos\"), \" という lua で設定するツールを採用した。\"), \"\\n\", React.createElement(_components.p, null, \"nvim は luajit(lua-5.1互換) で、wezterm は lua-5.4 で、 nyagos は gopherlua(lua-5.1互換) ということから, lua-5.1 向けの lua を使う。\\nlua は、5.1 で完成形ということでこれで良いのだ。\"), \"\\n\", React.createElement(_components.p, null, \"OpenGL は \", React.createElement(_components.code, null, \"love2D\"), \"(luajit), OpenXR は \", React.createElement(_components.code, null, \"lovr\"), \"(luajit) である。\\nWebRTC は \", React.createElement(_components.code, null, \"janus\"), \"(lua-5.3)。\"), \"\\n\", React.createElement(_components.p, null, \"luajit が人気なわけだが jit で速いだけでなく、\\nffi の使い勝手が最高に良いというのもある。\\nluabinding の無い c のライブラリがあったとしても、\\nc の ヘッダーのコピーをベースにしてわりと簡単に ffi で使ってしまうことができるし、\\nlua に無い型付きの数値配列とかはこれで作れるので便利。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token keyword\\\">local</span> array <span class=\\\"token operator\\\">=</span> ffi<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">new</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'float[5000]'</span><span class=\\\"token punctuation\\\">)</span>\\narray<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1.5</span> <span class=\\\"token comment\\\">-- 0 origin なのだ w</span>\\n\\n<span class=\\\"token comment\\\">--- pointer は配列を使うことが多い</span>\\n<span class=\\\"token keyword\\\">local</span> p_open <span class=\\\"token operator\\\">=</span> ffi<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">new</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bool[1]'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">if</span> imgui<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Begin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">,</span> p_open<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">then</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"要するに、\", React.createElement(_components.code, null, \"OpenGL\"), \" とか \", React.createElement(_components.code, null, \"cimgui\"), \" を使える。\\n(python の ctypes とだいたい同じ能力)\"), \"\\n\", React.createElement(_components.p, null, \"nvim の影響なのか lua の開発環境は近年良くなってきていて、\\nLuaLanguageServer と stylua の組みあわせが気に入っている。\\nLuaLanguageServer により型情報を追加してある程度Editorの支援を良くすることができる。\"), \"\\n\", React.createElement(_components.p, null, \"https://luals.github.io/wiki/annotations/\"), \"\\n\", React.createElement(_components.p, null, \"によるとついに \", React.createElement(_components.code, null, \"EmmyLua annotations \"), \" と袂を分って独自路線のようである。\"), \"\\n\", React.createElement(_components.p, null, \"人間の方が LanguageServer に積極的に型情報を提供する。\\nLuaLanguageServer に合わせてこんなスタイルになった。\\nLanguageServer でオブジェクトの field と method がちゃんと出るために継承の記述を使う。\\n先頭から \", React.createElement(_components.code, null, \"new\"), \" 関数まで定型コード。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token comment\\\">---@class Point: PointInstance</span>\\n<span class=\\\"token keyword\\\">local</span> Point <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nPoint<span class=\\\"token punctuation\\\">.</span>__index <span class=\\\"token operator\\\">=</span> Point\\n\\n<span class=\\\"token comment\\\">---@param x integer</span>\\n<span class=\\\"token comment\\\">---@param y integer</span>\\n<span class=\\\"token comment\\\">---@return Point</span>\\n<span class=\\\"token keyword\\\">function</span> Point<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">new</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">---@class PointInstance</span>\\n  <span class=\\\"token keyword\\\">local</span> instance<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\n    x <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">,</span>\\n    y <span class=\\\"token operator\\\">=</span> y<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">---@type Point</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">setmetatable</span><span class=\\\"token punctuation\\\">(</span>instance<span class=\\\"token punctuation\\\">,</span> Point<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token comment\\\">---@param rhs Point</span>\\n<span class=\\\"token comment\\\">---@return Point</span>\\n<span class=\\\"token keyword\\\">function</span> Point<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">__add</span><span class=\\\"token punctuation\\\">(</span>rhs<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> Point<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">new</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>x<span class=\\\"token operator\\\">+</span>rhs<span class=\\\"token punctuation\\\">.</span>x<span class=\\\"token punctuation\\\">,</span> self<span class=\\\"token punctuation\\\">.</span>y<span class=\\\"token operator\\\">+</span>rhs<span class=\\\"token punctuation\\\">.</span>y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token comment\\\">---@return number</span>\\n<span class=\\\"token keyword\\\">function</span> Point<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">norm</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sqrt</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>x<span class=\\\"token operator\\\">*</span>self<span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">+</span> self<span class=\\\"token punctuation\\\">.</span>y<span class=\\\"token operator\\\">*</span>self<span class=\\\"token punctuation\\\">.</span>y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token keyword\\\">return</span> Point</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"：\"), \" による self シンタックスシュガーを避けていたのだけど、\\nLanguageServer のおかげで間違えて \", React.createElement(_components.code, null, \".\"), \" を使う間違いは気付きやすくなった。\\nそれと呼びだしだけでなく定義するときにも使えることがわかったので、\\n使ってもいいかという気になった。\\n\", React.createElement(_components.code, null, \".\"), \" が static method で、\", React.createElement(_components.code, null, \":\"), \" が instance method と使い分ける慣習。\"), \"\\n\", React.createElement(_components.p, null, \"あと、LuaLanguageServer に Project 毎のライブラリの情報を伝えることができる。\\nproject root に \", React.createElement(_components.code, null, \".luarc.json\"), \" を配置する。\\nわりと設定できるので、ちゃんとやると良くなる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"runtime.version\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"LuaJIT\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"runtime.special\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"love.filesystem.load\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"loadfile\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"runtime.path\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"libs/?.lua\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"libs/?/init.lua\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"workspace.library\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token string\\\">\\\"${3rd}/busted/library\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"${3rd}/luassert/library\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"${3rd}/love2d/library\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"${3rd}/lfs/library\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"meta/gltf/library\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"meta/cimgui/library\\\"</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"format.enable\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"diagnostics.disable\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"empty-block\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"unused-local\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"unused-vararg\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"特に c モジュールは型情報を追加しないと、どんなメンバーがあるかわからなくて、\\n直接 c を使っているよりもコードが書きにくいということになりがちなので、 型情報は重要である。\\n(luaのモジュールは LuaLanguageServer が解析できるのだが LUA_PATH は教える必要がある)\"), \"\\n\", React.createElement(_components.p, null, \"LuaLanguageServer が組込みで型情報をもっているがそれ以外はここにあるぽい。\\nhttps://github.com/orgs/LuaCATS/repositories\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"require\"), \" したものや組み込み変数の型はコメントで指定することができる。\\nいや、指定しないと判らないのではないか。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token comment\\\">--- luarocks の場合</span>\\n<span class=\\\"token comment\\\">---@class uv</span>\\n<span class=\\\"token keyword\\\">local</span> uv <span class=\\\"token operator\\\">=</span> require <span class=\\\"token string\\\">\\\"luv\\\"</span>\\n\\n<span class=\\\"token comment\\\">--- nvim の場合</span>\\n<span class=\\\"token comment\\\">---@class uv</span>\\n<span class=\\\"token keyword\\\">local</span> uv <span class=\\\"token operator\\\">=</span> vim<span class=\\\"token punctuation\\\">.</span>loop</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"それでも警告がいっぱいでてうまくいかないときは諦めて、\", React.createElement(_components.code, null, \"any\"), \" の型を付ける。\"), \"\\n\", React.createElement(_components.p, null, \"避けていた \", React.createElement(_components.code, null, \"luarocks\"), \" も慣れた。\\n特に Windows 環境では導入ではまりやすいのだけど慣れた。\\npython の venv のような使いかたもできる。\\n\", React.createElement(_components.code, null, \"vc\"), \" or \", React.createElement(_components.code, null, \"mingw\"), \", \", React.createElement(_components.code, null, \"system\"), \" or \", React.createElement(_components.code, null, \"user\"), \" or \", React.createElement(_components.code, null, \"project\"), \", \", React.createElement(_components.code, null, \"standlone\"), \" or \", React.createElement(_components.code, null, \"embedded\"), \",\\n\", React.createElement(_components.code, null, \"lua\"), \" or \", React.createElement(_components.code, null, \"luajit\"), \" という選択肢の多さが \", React.createElement(_components.code, null, \"luarocks\"), \" の難しさにつながる。\\nどの \", React.createElement(_components.code, null, \"lua\"), \" 向けのモジュールなのかを明確にして制御していく。\\n\", React.createElement(_components.code, null, \"Windows\"), \" では project local で \", React.createElement(_components.code, null, \"hererocks\"), \" するのも手かもしれない。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2023/1008.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9942],{2515:function(e,n,a){a.r(n),a.d(n,{default:function(){return p}});var t=a(1151),s=a(7294);function l(e){const n=Object.assign({p:"p",ul:"ul",li:"li",span:"span",h2:"h2",a:"a"},(0,t.ah)(),e.components);return s.createElement(s.Fragment,null,s.createElement(n.p,null,"https://github.com/ousttrue/WorkspaceFolder"),"\n",s.createElement(n.p,null,"要件は、"),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,"WindowsとLinuxで共用にできる"),"\n",s.createElement(n.li,null,"実行時に、親フォルダを遡って設定(プロジェクトルートに ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Duck.toml</code>'}})," を配置する約束`)を探しに行く能力がある"),"\n",s.createElement(n.li,null,"Task間の依存関係が記述できる"),"\n",s.createElement(n.li,null,"コマンド呼び出し時のパスを調整できる"),"\n"),"\n",s.createElement(n.p,null,"こんなもん。"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim">augroup MyAutoCmd\n    <span class="token builtin">autocmd</span> BufWritePost <span class="token operator">*</span><span class="token operator">.</span>md <span class="token punctuation">:</span><span class="token operator">!</span>duck build\naugroup END</code></pre></div>'}}),"\n",s.createElement(n.p,null,"としておいて保存時に呼ぶようにしてみた。"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="toml"><pre class="language-toml"><code class="language-toml"><span class="token comment"># Duck.toml</span>\n<span class="token punctuation">[</span><span class="token table class-name">generate</span><span class="token punctuation">]</span>\n<span class="token key property">cwd</span> <span class="token punctuation">=</span> <span class="token string">\'build\'</span>\n<span class="token key property">command</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">\'cmake\'</span><span class="token punctuation">,</span> <span class="token string">\'..\'</span><span class="token punctuation">,</span> <span class="token string">\'-G\'</span><span class="token punctuation">,</span> <span class="token string">\'Unix Makefiles\'</span><span class="token punctuation">]</span>\n\n<span class="token punctuation">[</span><span class="token table class-name">build</span><span class="token punctuation">]</span>\n<span class="token key property">depends</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">\'generate\'</span><span class="token punctuation">]</span>\n<span class="token key property">cwd</span> <span class="token punctuation">=</span> <span class="token string">\'build\'</span>\n<span class="token key property">command</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">\'make\'</span><span class="token punctuation">]</span></code></pre></div>'}}),"\n",s.createElement(n.p,null,s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">duck build</code>'}})),"\n",s.createElement(n.p,null,"のように呼ぶ。"),"\n",s.createElement(n.h2,null,"vimのカレントフォルダ問題"),"\n",s.createElement(n.p,null,"親フォルダを遡って設定を探しに行くというのが重要です。例えば ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim</code>'}})," でサブフォルダのファイルを編集しているときに、親フォルダの ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Makefile</code>'}})," でビルドしたい場合がある。このときに、",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim</code>'}})," のカレントフォルダを考慮するのが無理なのです。\nそういうわけで ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim</code>'}})," では単純に ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">autocd</code>'}})," して、カレントフォルダを意識しないことにしました。\n代わりにツール側で親フォルダに遡れるようにして、そのツールがプロジェクトのルートから指定のコマンドを呼び出すのです。"),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,"make を呼ぶ"),"\n",s.createElement(n.li,null,"cmake を呼ぶ"),"\n",s.createElement(n.li,null,"dub を呼ぶ"),"\n",s.createElement(n.li,null,"setup.py を呼ぶ"),"\n",s.createElement(n.li,null,"MSBuild を呼ぶ"),"\n"),"\n",s.createElement(n.p,null,"などのように、言語毎に専門のツールを呼ぶ補助的なツールです。"),"\n",s.createElement(n.p,null,"特定の ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">LSP</code>'}})," (D言語向けの ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">dls</code>'}})," ) がカレントフォルダをプロジェクトルートに移動してから起動しないといけないなどの癖があるようなので、その辺を吸収させるのも狙っている。"),"\n",s.createElement(n.h2,null,"WindowsでCMakeをどうやって見つけるのか"),"\n",s.createElement(n.p,null,s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">unix</code>'}})," 的なシステムでは、",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/usr/bin/cmake</code>'}})," であろうことが期待できるのだけど、\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Windows</code>'}})," ではそうはいかない。でも最近の ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">VisualStudio</code>'}})," がインストールされていれば、その中に ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cmake</code>'}})," が入っている。だから ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Program Files</code>'}})," から決め打ちで探してくるという方法があるのだけど、もう一歩進めて ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">VisualStudio</code>'}})," のインストールパスを ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">registry</code>'}})," から取ってくるという手法がある。しかし、たくさんのバージョンとエディションで少しずつ違うのでやってられない。で、これに対応するツールとして ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vswhere</code>'}})," というツールがある。たぶん、",s.createElement(n.a,{href:"https://github.com/Microsoft/vcpkg"},"vcpkg"),"のために作られたのだと思うのだけど、これでインストールされている ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">VisualStudio</code>'}})," の情報を得ることができる。まだ、 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vswhere</code>'}})," をどうやって得るのか問題があるのだが、小さいので自分のプロジェクトに入れておくとか、ダウンロードするとか、 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">VisualStudio</code>'}})," に入っているので決め打ちでパスを探すといったことになろうと思う。"),"\n",s.createElement(n.p,null,"要するに ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vc</code>'}})," が入っている環境では、9割くらいの確率で ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cmake</code>'}})," を発見できます。\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">duck</code>'}})," にもこの機能を入れようとしている。"),"\n",s.createElement(n.p,null,"https://github.com/ChaosinaCan/pyvswhere"))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?s.createElement(n,e,s.createElement(l,e)):l(e)},o=(a(8678),a(8838));const r={code:e=>{let{children:n,className:a}=e;return a?s.createElement(o.Z,{className:a},n):s.createElement("code",null,n)}};function u(e){let{data:n,children:a}=e;return s.createElement(s.Fragment,null,s.createElement("h1",null,n.mdx.frontmatter.title),s.createElement(t.Zo,{components:r},a))}function p(e){return s.createElement(u,e,s.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2019-workspacefolder-md-42f547f5b3ed2f03e05c.js.map
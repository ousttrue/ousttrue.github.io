{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2017-08-pyalembic-md-60430f65748e52d21b72.js","mappings":"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","sources":["webpack:///./content/posts/2017/08/pyalembic.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Windows 上で PyAlembic を使いたいのだができるのか。\\n素直に Linux でやるべきでは・・・\\nWindows10(64bit) + Python-3.6(64bit)\"), \"\\n\", React.createElement(_components.p, null, \"作業場。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/openexr\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Anaconda3(Windows10 64bit)でモジュール探す\\n> conda install -c conda-forge alembic</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"しかし、これは違う Alembic だった。\\nPython の alembic は、database migrations tool と名前が被っております。\\nなるほど・・・。\\nPython2.7 なら\"), \"\\n\", React.createElement(_components.p, null, \"http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyalembic\"), \"\\n\", React.createElement(_components.p, null, \"あとから発見。わいは、Python3.6 にしたいので。\\n自前でビルドを試みる\\nalembic-1.7.1/python/PyAlembic がそれですな。\\n問題が２つある。\"), \"\\n\", React.createElement(_components.p, null, \"Python2(Python3 にしたい)\\nBoost.Python(PyBind11 にしてリンク問題とおさらばしたい)\"), \"\\n\", React.createElement(_components.p, null, \"さすがに PyBind11 差し替えはやるにしても後にするべきなので、 Python3 化だけやる。\\nBoost.Python のビルド\\nBoost.Python で使う Python を明示するには、user-config.jam に記述する。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">BOOST_DIR/user-conifg.jam\\nusing python\\n    : 3.6                   # Version\\n    : D:\\\\\\\\Anaconda3\\\\\\\\python.exe      # Python Path\\n    : D:\\\\\\\\Anaconda3\\\\\\\\include         # include path\\n    : D:\\\\\\\\Anaconda3\\\\\\\\libs            # lib path(s)\\n    : &lt;define>BOOST_ALL_NO_LIB=1\\n    ;</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"ビルド\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">boost> b2.exe -j3 --stagedir=stage\\\\x86_64 link=shared runtime-link=shared threading=multi toolset=msvc-14.0 address-model=64 --with-python</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"link=shared にして dll を生成することが必要。\\nこれは、iex.pyd と imath.pyd 間で Boost.Python の static 変数を共有するために必須である(pyex の型登録周りか)。\\nIlmBase を修正\\nilmbase-2.2.0/IexMath/IexMathFloatExc.h\\nの以下の部分を修正する。多分、記述ミスなのだけど誰も Windows ビルドしないので気付かれていないのであろう。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">//#if defined(IEX_EXPORTS)↲\\n#if defined(IEXMATH_EXPORTS)↲</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"これで ilmbase をビルドしておく。vcpkg を使った。\\nalembic を修正\\nalembic-1.7.1/lib/Alembic/AbcCoreLayer/CMakeLists.txt を修正してヘッダを追加する(PyAlembic が使う)\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cmake\\\"><pre class=\\\"language-cmake\\\"><code class=\\\"language-cmake\\\"><span class=\\\"token function\\\">INSTALL</span><span class=\\\"token punctuation\\\">(</span>FILES Read.h Util.h\\n    Foundation.h <span class=\\\"token comment\\\"># 追加</span>\\n    DESTINATION include/Alembic/AbcCoreLayer<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"これも、vcpkg を使った。\\nPyIlmBase のビルド\\nOpenEXR のサイトにある pyilmbase-2.2.0tar.gz を使おうとしたのだけど、github の方が新しいようなのでこちらを使う。\\nPython3 向けの修正\\nPython2 と Pytnon3 間での非互換によるコンパイルエラーを直していく。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">PySliceObject_XXX -> PyObject_XXX\\nPyInt_XXX -> PyLong_XXX\\nPyString_AsString -> PyUnicode_AsUTF8\\n_PyThreadState_Current -> _PyThreadState_UncheckedGet()</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"参考\"), \"\\n\", React.createElement(_components.p, null, \"Python3 Advent Calendar - Python で 2/3 両方で動くコードを書く(C/API)\\nFix build for Python 3.5\\nhttp://py3c.readthedocs.io/en/latest/guide.html\"), \"\\n\", React.createElement(_components.p, null, \"CMake 設定\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cmake\\\"><pre class=\\\"language-cmake\\\"><code class=\\\"language-cmake\\\"><span class=\\\"token variable\\\">CMAKE_INSTALL_PREFIX</span>\\n<span class=\\\"token variable\\\">BOOST_ROOT</span>\\nILMBASE_PACKAGE_PREFIX\\n<span class=\\\"token function\\\">FIND_PACKAGE</span><span class=\\\"token punctuation\\\">(</span>numpy<span class=\\\"token punctuation\\\">)</span>をコメントアウト\\nDebugでもPython36.libにリンクするように、<span class=\\\"token comment\\\">#include &lt;Python.h>を除去(boost/python.hpp経由でインクルードさせればそうなる)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"ビルドが通るようになった。\\nPyAlembic のビルド\\n当初、Alembic のプロジェクトで Python フラグを有効にして一緒にビルドしようとしていたが、PyIlmBase 傘下に PyAlembic をコピーする方式に変えた。\\nalembic-1.7.1/python/PyAlembic を ilmbase-2.2.0/PyIlmBase にコピーして、CMakeLists.txt を調整する。\\nCMake 設定\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cmake\\\"><pre class=\\\"language-cmake\\\"><code class=\\\"language-cmake\\\"><span class=\\\"token variable\\\">Alembic_ROOT</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"参考\"), \"\\n\", React.createElement(_components.p, null, \"uimac 実装メモ - PyImath\"), \"\\n\", React.createElement(_components.p, null, \"PyAlembic のビルドが通ったので実行してみよう\\nPyAlembic/Tests/testPolyMesh.py を動かしてみようと思う。\\nこういう感じに準備する。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">testPolyMesh.py\\niex.pyd\\nPyIex.dll\\nimath.pyd\\nPyImath.dll\\nalembic.lib\\nalembic.pyd\\nboost_python-vc140-mt-1_61.dll # debug buildもこれ\\n\\n> C:/python36/python.exe testPolyMesh.py</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"import alembic でクラッシュする。デバッガで追ってみると、モジュールの初期化でエラーが発生している。一個ずつ直す。\\n初期化の修正\\nPython3 化による変更？\\nAbcView\\n今回の作業目標。\"), \"\\n\", React.createElement(_components.p, null, \"http://alembic.github.io/abcview/\"), \"\\n\", React.createElement(_components.p, null, \"これを動作させたい。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">AbcView has the following requirements:\\n\\nPython 2.6+ => Python 3.6 で動くように改造する(print 文とか)\\nPyAlembic。できた\\nPyAbcOpenGL。できた\\nPyOpenGL。pip\\nargparse。pip\\nPyQt4。http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyalembic\\nnumpy-mkl。http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyalembic\\n\\nPyQt4 をインストール\\n\\nhttps://stackoverflow.com/questions/22640640/how-to-install-pyqt4-on-windows-using-pip\\nhttp://www.lfd.uci.edu/~gohlke/pythonlibs/#pyqt4\\n\\nこんな感じで公式の Python3.6(64bit)に対してインストール。\\nD:\\\\Python36\\\\Scripts\\\\pip.exe install .\\\\PyQt4-4.11.4-cp36-cp36m-win_amd64.whl\\n\\nhttps://www.tutorialspoint.com/pyqt/pyqt_hello_world.htm</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> sys\\n<span class=\\\"token keyword\\\">from</span> PyQt4 <span class=\\\"token keyword\\\">import</span> QtGui\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">window</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    app <span class=\\\"token operator\\\">=</span> QtGui<span class=\\\"token punctuation\\\">.</span>QApplication<span class=\\\"token punctuation\\\">(</span>sys<span class=\\\"token punctuation\\\">.</span>argv<span class=\\\"token punctuation\\\">)</span>\\n    w <span class=\\\"token operator\\\">=</span> QtGui<span class=\\\"token punctuation\\\">.</span>QWidget<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    b <span class=\\\"token operator\\\">=</span> QtGui<span class=\\\"token punctuation\\\">.</span>QLabel<span class=\\\"token punctuation\\\">(</span>w<span class=\\\"token punctuation\\\">)</span>\\n    b<span class=\\\"token punctuation\\\">.</span>setText<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello World!\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    w<span class=\\\"token punctuation\\\">.</span>setGeometry<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">)</span>\\n    b<span class=\\\"token punctuation\\\">.</span>move<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">)</span>\\n    w<span class=\\\"token punctuation\\\">.</span>setWindowTitle<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"PyQt\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    w<span class=\\\"token punctuation\\\">.</span>show<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    sys<span class=\\\"token punctuation\\\">.</span>exit<span class=\\\"token punctuation\\\">(</span>app<span class=\\\"token punctuation\\\">.</span>exec_<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">if</span> __name__ <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'__main__'</span><span class=\\\"token punctuation\\\">:</span>\\n    window<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"動いた。\\nalembicgl.pyd, alembic.pyd, imath.pyd, iex.pyd と依存 dll 群を wheel 化する\\n同じ dll を参照する pyd を同じフォルダに配置したいので、\\n共通の親モジュールとして ilm を定義してその中にすべての pyd と dll を収めることにした。\\nそのうえでこれを間接的にエクスポートするモジュール’iex’, ‘imath’, ‘alembic’, ‘alembicgl’\\nを作る計画。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">ilm\\n    + __init__.py\\n    + iex.pyd\\n    + imath.pyd\\n    + alembic.pyd\\n    + alembicgl.pyd\\n    + PyEx.dll\\n    + PyImath.dll\\n    + boost_python.dll\\n    + Alembic.dll # VCPKG BUILD\\n    + ilmbase.dll # VCPKG BUILD\\n    + iex.dll # VCPKG BUILD\\n    + imath.dll # VCPKG BUILD\\n    + half.dll # VCPKG BUILD\\n    + hdf5.dll # VCPKG BUILD\\n    + zip.dll # VCPKG BUILD\\n    + szip.dll # VCPKG BUILD\\niex\\n    + __init__.py # ilm.iexを公開\\nimath\\n    + __init__.py # ilm.imathを公開\\nalembic\\n    + __init__.py # ilm.alembicを公開\\nalembicgl\\n    + __init__.py # ilm.alembicglを公開\\nsetup.py</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"iex/init.py\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">from ilm.iex import \\\\*</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"こういうのを iex, imath, alembic, alembicgl それぞれに作った。\\nsetup.py\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\">#!/usr/bin/env python</span>\\n\\n<span class=\\\"token keyword\\\">from</span> setuptools <span class=\\\"token keyword\\\">import</span> setup<span class=\\\"token punctuation\\\">,</span> Distribution\\n\\n\\nsetup<span class=\\\"token punctuation\\\">(</span>\\n        name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'alembic'</span><span class=\\\"token punctuation\\\">,</span>\\n        version<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'0.1'</span><span class=\\\"token punctuation\\\">,</span>\\n        description<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'Alembic Library'</span><span class=\\\"token punctuation\\\">,</span>\\n        packages<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'ilm'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'iex'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'imath'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'alembic'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'alembicgl'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n        package_data<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token string\\\">'ilm'</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'*.pyd'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'*.dll'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">py_package> D:\\\\Python36\\\\python.exe setup.py bidst_wheel\\npy_package> D:\\\\Python36\\\\Scripts\\\\pip.exe install .\\\\dist\\\\alembic-0.1-cp36-cp36m-win_amd64.whl</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"AbcView を実行してみる\\nこういう感じに配置して、abcview_main.py を実行してみる。\\nabcview_main.py `# bin/abcview から改名(名前がフォルダと被らないように変更)\\nabcview\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">**init**.py</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"python2 仕様の部分をまとめて修正。\"), \"\\n\", React.createElement(_components.p, null, \"https://docs.python.jp/3/library/2to3.html\"), \"\\n\", React.createElement(_components.p, null, \"AbcView> D:\\\\Python36\\\\python.exe D:\\\\Python36\\\\Tools\\\\scripts\\\\2to3.py -w .\"), \"\\n\", React.createElement(_components.p, null, \"print 文、except 文などの定型的な文法問題はこれで一網打尽。ディレクトリを指定することでまとめて処理できる。\\nfile.toAscii() => file\\nこれも Python2 との非互換か。\\nQtCore.QString(str(value)) => str(value)\\nQString は、Python の String でよさげ。\\n動いた\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/openexr/releases/tag/v0.1\"), \"\\n\", React.createElement(_components.p, null, \"タイムラインを操作したら蛸が動いた。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/08/pyalembic.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-lua-debug-adapter-md-a8d10416729e76e82dd1.js","mappings":"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","sources":["webpack:///./content/posts/2021/lua_debug_adapter.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"nvim の nvim-dap で lua をデバッグするべく自分で書いてみた。\\n手頃なのが見つからなかったので。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/my_nvim/blob/master/luada.lua\"), \"\\n\", React.createElement(_components.p, null, \"https://microsoft.github.io/debug-adapter-protocol/ の自前実装。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">request</code>\"\n    }\n  }), \" のうち \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">initialize</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">launch</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setBreakpoints</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">configurationDone</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">threads</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stackTrace</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">scopes</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">variables</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">continue</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">next</code>\"\n    }\n  }), \" を実装した。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">event</code>\"\n    }\n  }), \" のうち \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">initialized</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">exited</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stopped(breakpoint, step)</code>\"\n    }\n  }), \" を実装した。\"), \"\\n\", React.createElement(_components.p, null, \"これで最低限の breakpoint を設定して止める、ステップ実行、変数表示までできた。\"), \"\\n\", React.createElement(_components.p, null, \"ログレベルを設定して\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'dap'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">set_log_level</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'trace'</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"nvim の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">:lua print(vim.fn.stdpath \\\"cache\\\")</code>\"\n    }\n  }), \" に配置される \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">dap.log</code>\"\n    }\n  }), \" を観察したらだいたいできた。\"), \"\\n\", React.createElement(_components.p, null, \"nvim-dap の設定は以下。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token keyword\\\">local</span> dap <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"dap\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">local</span> luada <span class=\\\"token operator\\\">=</span> vim<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nvim_get_var</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"my_nvim_root\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">..</span> <span class=\\\"token string\\\">\\\"/luada.lua\\\"</span>\\n\\n<span class=\\\"token comment\\\">-- luada adapter を登録</span>\\ndap<span class=\\\"token punctuation\\\">.</span>adapters<span class=\\\"token punctuation\\\">.</span>luada <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\">-- debug用のスクリプトを lua で実行し、標準入出力で DAP 通信(JSON-RPC)を開始する</span>\\n\\ttype <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"executable\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\tcommand <span class=\\\"token operator\\\">=</span> vim<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nvim_get_var</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"my_nvim_root\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">..</span> <span class=\\\"token string\\\">\\\"/neovim/.deps/usr/bin/luajit.exe\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\targs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> luada <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">-- filetype lua のときに luada を使用する。launch の引数</span>\\ndap<span class=\\\"token punctuation\\\">.</span>configurations<span class=\\\"token punctuation\\\">.</span>lua <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\tname <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"lua debug adapter\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\ttype <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"luada\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\trequest <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"launch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\tprogram <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"${fileDirname}\\\\\\\\${file}\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\targs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">\\\"a\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"b\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"c\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">+---------+    DAP       +--------------------+\\n| nvim dap|------->stdin |luajit.exe luada.lua|\\n|         |&lt;-------stdout|                    |\\n+---------+              +--------------------+\\n                                              +==> loadscript(target_lua_script)</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"入出力を DAP で占有してしまうので、それでも大丈夫なスクリプトしかデバッグできない。\\n(print 関数は、stderr に出力するように退避したので、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">dap.log</code>\"\n    }\n  }), \" には出る)\"), \"\\n\", React.createElement(_components.p, null, \"素の standalone の lua interpreter で簡単にできる範囲で実装する方針。\"), \"\\n\", React.createElement(_components.h2, null, \"はまりポイント\"), \"\\n\", React.createElement(_components.h3, null, \"Windows 版 は、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">io.stdout</code>\"\n    }\n  }), \" で \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CR</code>\"\n    }\n  }), \" が \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CRLF</code>\"\n    }\n  }), \" に変換されるのを回避できない。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">setmode(_fileno(stdout),_O_BINARY);</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"を lua で呼び出す手段が無い。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Content-Leght: 123\\\\n\\\\n</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"と出力して変換されるのに任せることにした。\"), \"\\n\", React.createElement(_components.h3, null, \"debug.sethook 内で coroutine.yield できない\"), \"\\n\", React.createElement(_components.p, null, \"https://stackoverflow.com/questions/54858455/lua-debug-hooks-seems-to-prevent-the-coroutine-from-working\"), \"\\n\", React.createElement(_components.p, null, \"breakpoint 等によるスクリプト中断を \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">coroutine.yield</code>\"\n    }\n  }), \" で実装しようとしたのだけど断念した。\\n(yield すると \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">suspend</code>\"\n    }\n  }), \" にならずに \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">dead</code>\"\n    }\n  }), \" になる)\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/tomblind/local-lua-debugger-vscode は、coroutine で実装しているような気がするのだが・・・。\"), \"\\n\", React.createElement(_components.p, null, \"yield する代わりに main.loop をネストさせてそこで通信待機させることにした、\"), \"\\n\", React.createElement(_components.h3, null, \"launch で開始すると早すぎる\"), \"\\n\", React.createElement(_components.p, null, \"これは、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nvim-dap</code>\"\n    }\n  }), \" の実装の問題のような気がするが、\\ncapabilities に以下を設定して、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">configurationDone</code>\"\n    }\n  }), \" リクエストで自開始する。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\">supportsConfigurationDoneRequest <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">,</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"ToDo\"), \"\\n\", React.createElement(_components.p, null, \"luada リポジトリを作って vscode 拡張としてリリースする。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/lua_debug_adapter.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","h2","h3","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
{"version":3,"file":"component---content-posts-2017-04-pymeshio-md-db7083759c04359b80d4.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,wEAAyE,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,qoBAAsoB,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,0CAA2C,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,2KAA4K,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,wFAAyF,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,0DACt0C,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECqBO,MAAMU,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2017/04/pymeshio.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"はじめてのBlenderアドオン開発を読んでいる。pymeshioを更新してBlenderの作法にちゃんと適合させようというわけである。\"), \"\\n\", React.createElement(_components.p, null, \"最近、BlenderのAddOn管理ツールBlender-Add-on-Managerというのを見つけて、どういう動作をしているのか気になった。自作のpymeshioは出てくるのか見てみると出てこなかった。bl_infoの中のコメントの書き方が悪かったらしい。出てくるように直してインストールしてみた。今度はBlenderが発見してくれない。これは、Blenderの検索パスのくせのせいで.がパスに含まれていると出てこないということだった。そもそも、%USERPROFILE%/AppData/Roaming/Blender Foundation/Blender/2.78/scripts/addonsというようなパスにインストールする仕組みになっていることを知らなかったという。\\nで、ツール経由でインストールしてみたのはいいのだがpymeshioは動かないな。\\nBlender非依存のpythonライブラリ部分をコピーしなおす必要がある。\\nむしろ、そっちの方が本体でBlenderはおまけだったという経緯があるのであるが、前からpymeshioのblenderプラグインのメンテナンス性の悪さはこのフォルダ構成が一因であった。この際addonsに直接cloneして動くような構成にする方がいいなぁ。新しいAddOnを再構築するか。\\npymeshioはblenderから切り離して開発を継続する。pymeshioと新しいAddOnの共通部分の同期は手動コピペにするｗ\\n計画\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/MmdUtility\"), \"\\n\", React.createElement(_components.p, null, \"[x] 0.1\\nBlender-Add-on-Managerからインストールして動作するように構成する\\n[x] 0.2\\nbl.pyを除去する。確かbl.pyはblender2.4と2.6のギャップを埋めて、2.6初期のAPIの不安さを隠蔽するために作った。もはや無用の長物なので取り除く\\n[x] 0.3\\n物理の扱いを変える。\"), \"\\n\", React.createElement(_components.p, null, \"http://mrsoramame.jpn.org/archives/138\\nhttps://github.com/12funkeys/rigid_bodys_gen\"), \"\\n\", React.createElement(_components.p, null, \"pymeshioを作ったときはBlenderの物理がよくわかっていなかった。\\n[ ] 1.0\\nVMD対応\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
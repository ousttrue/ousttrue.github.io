"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6530],{3411:function(e,n,t){t.r(n);var c=t(1151),r=t(7294);function a(e){const n=Object.assign({p:"p",pre:"pre",code:"code"},(0,c.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.p,null,"FPS カメラに Oculus 回転を仕込んだ\nIrrlicht の CSceneNodeAnimatorCameraFPS に Oculus を合体した。\nIrrlicht のカメラが思ったよりいろいろやっていたのと\nビュー行列を直接扱っていないのに手間取ったがとりあえず当初の目的を達成。\nどうにも都合が悪かったので本体をちょっと拡張した。"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-cpp"},"class CSCameraSceneNode\n{\n    core::marix4 LeftAffector;\n};\n")),"\n",r.createElement(n.p,null,"レンダリング直前にビュー行列に乗算する行列をセットできるのだが\nこれが右からの乗算なので、\n左からの乗算を追加してこれに Oculus の回転を表す行列をセットできるようにした。\nこれを踏まえて CSceneNodeAnimatorCameraFPS をコピーして CSceneNodeAnimatorCameraOculusOnFPS を作った。\nこいつは FPS カメラのマウスの上下移動を無視するのと libOVR からの回転値取得と左行列を追加する機能をもつ。\nコードはこれなのだけど\nhttps://github.com/ousttrue/onibi/blob/master/irrlicht/examples/HMDIrrlicht/CSceneNodeAnimatorCameraOculusOnFPS.cpp\n日記に全部書くには長いし、サンプルが改造版の Irrlicht に依存するので紹介し辛い感じだなぁ。\nオフスクリーンレンダリングとシェーダーをサポートした今風の glut みたいなフレームワークがあるとよいのだけど。\n今度は mmd 表示周りに着手して表示途中までできた。\nしかし Irrlicht 界のスケーリングの基準がよくわからず。cm のような気もするがなんかもっと適当な値のような気もする。\n画像右側の身切れているのは Irrlicht サイズの Dwarf である。\nmmd 界はミクさんの身長 20 を基準とする統一単位なのだが何かしら基準を決めねばならぬ。\n物理の挙動の都合上スケーリングしたくないなーという事情がありどうしたものか。"),"\n",r.createElement(n.p,null,"スカイボックスも Oculus で見ると見違えるものがあるなー。\nテクスチャとライティングを解決する。 あと pmx。"))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?r.createElement(n,e,r.createElement(a,e)):a(e)}},1151:function(e,n,t){t.d(n,{ah:function(){return a}});var c=t(7294);const r=c.createContext({});function a(e){const n=c.useContext(r);return c.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---content-posts-2013-06-26-oculus-fps-md-dc4d6b4620b3a2396fbc.js.map
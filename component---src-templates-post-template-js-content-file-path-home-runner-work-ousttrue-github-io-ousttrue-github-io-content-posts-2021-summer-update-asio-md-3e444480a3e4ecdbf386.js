"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5698],{6613:function(n,a,s){s.r(a),s.d(a,{default:function(){return k}});var t=s(1151),p=s(7294);function o(n){const a=Object.assign({p:"p",span:"span",ul:"ul",li:"li",h1:"h1",h2:"h2",blockquote:"blockquote",a:"a"},(0,t.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(a.p,null,"非同期ライブラリ ASIO"),"\n",p.createElement(a.p,null,"http://think-async.com/Asio/index.html"),"\n",p.createElement(a.p,null,"の知識を ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++20</code>'}})," 時代にアップデート。"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"https://github.com/chriskohlhoff/talking-async"),"\n"),"\n",p.createElement(a.p,null,"に動画と動画のサンプルコードが有る。"),"\n",p.createElement(a.h1,null,"compiler を最新にする"),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ASIO_HAS_CO_AWAIT</code>'}})," が必要でこれが有効になるには新しいコンパイラが必要。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">// asio/detail/config.hpp`\n\n// Support the co_await keyword on compilers known to allow it.\n#if !defined(ASIO_HAS_CO_AWAIT)\n# if !defined(ASIO_DISABLE_CO_AWAIT)\n#  if defined(ASIO_MSVC)\n#   if (_MSC_VER &gt;= 1928) &amp;&amp; (_MSVC_LANG &gt;= 201705) &amp;&amp; !defined(__clang__)\n#    define ASIO_HAS_CO_AWAIT 1\n#   elif (_MSC_FULL_VER &gt;= 190023506)\n#    if defined(_RESUMABLE_FUNCTIONS_SUPPORTED)\n#     define ASIO_HAS_CO_AWAIT 1\n#    endif // defined(_RESUMABLE_FUNCTIONS_SUPPORTED)\n#   endif // (_MSC_FULL_VER &gt;= 190023506)\n#  elif defined(__clang__)\n#   if (__cplusplus &gt;= 201703) &amp;&amp; (__cpp_coroutines &gt;= 201703)\n#    if __has_include(&lt;experimental/coroutine&gt;)\n#     define ASIO_HAS_CO_AWAIT 1\n#    endif // __has_include(&lt;experimental/coroutine&gt;)\n#   endif // (__cplusplus &gt;= 201703) &amp;&amp; (__cpp_coroutines &gt;= 201703)\n#  elif defined(__GNUC__)\n#   if (__cplusplus &gt;= 201709) &amp;&amp; (__cpp_impl_coroutine &gt;= 201902)\n#    if __has_include(&lt;coroutine&gt;)\n#     define ASIO_HAS_CO_AWAIT 1\n#    endif // __has_include(&lt;coroutine&gt;)\n#   endif // (__cplusplus &gt;= 201709) &amp;&amp; (__cpp_impl_coroutine &gt;= 201902)\n#  endif // defined(__GNUC__)\n# endif // !defined(ASIO_DISABLE_CO_AWAIT)\n#endif // !defined(ASIO_HAS_CO_AWAIT)</code></pre></div>'}}),"\n",p.createElement(a.h2,null,"VC2019(20210818最新版いける)"),"\n",p.createElement(a.p,null,"https://devblogs.microsoft.com/cppblog/c-coroutines-in-visual-studio-2019-version-16-8/"),"\n",p.createElement(a.blockquote,null,"\n",p.createElement(a.p,null,"C++20 coroutines in Visual Studio 2019 version 16.8."),"\n"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">16.7.3</code>'}})," だめ"),"\n",p.createElement(a.li,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">16.11.1</code>'}})," 動いた。"),"\n"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text"># CMakeListx.txt\nset(TARGET_NAME pingpong)\nadd_executable(${TARGET_NAME} main.cpp)\ntarget_link_libraries(${TARGET_NAME} PRIVATE asio)\nset_property(TARGET ${TARGET_NAME} PROPERTY CXX_STANDARD 20) # 必要\ntarget_compile_options(${TARGET_NAME} PUBLIC $&lt;$&lt;C_COMPILER_ID:MSVC>:/await>) # 必要\ntarget_compile_definitions(asio INTERFACE ASIO_DISABLE_STD_COROUTINE) # 必要</code></pre></div>'}}),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>ASIO_HAS_STD_COROUTINE<span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;coroutine></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> <span class="token comment">// defined(ASIO_HAS_STD_COROUTINE)</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;experimental/coroutine></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// defined(ASIO_HAS_STD_COROUTINE)</span></span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"LLVM-12(うまくいかず。追加のコマンドライン引数か)"),"\n",p.createElement(a.p,null,"https://clang.llvm.org/cxx_status.html"),"\n",p.createElement(a.p,null,"LLVM-12 だと、"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text"> \'C:\\Program Files\\LLVM\\bin\\clang.exe\' -v\nclang version 12.0.1\nTarget: x86_64-pc-windows-msvc\nThread model: posix\nInstalledDir: C:\\Program Files\\LLVM\\bin</code></pre></div>'}}),"\n",p.createElement(a.p,null,"わからん。"),"\n",p.createElement(a.h1,null,"コード"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asio/awaitable.hpp></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asio/co_spawn.hpp></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asio/detached.hpp></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asio/experimental/as_tuple.hpp></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asio/io_context.hpp></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asio/ip/tcp.hpp></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asio/read.hpp></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asio/streambuf.hpp></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asio/system_timer.hpp></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asio/use_awaitable.hpp></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asio/use_future.hpp></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asio/write.hpp></span></span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"co_spawn で awaitable を起動する"),"\n",p.createElement(a.p,null,"coroutine は 戻り値の型が ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asio::awaitable&lt;T></code>'}})," である必要がある。この関数の中で ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">co_await</code>'}}),", ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">co_yield</code>'}}),", ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">co_return</code>'}})," が使える。\ncoroutine は lambda でもよいので、下記のようにできる。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp">  <span class="token keyword">auto</span> co <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> asio<span class="token double-colon punctuation">::</span>awaitable<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">co_return</span> <span class="token string">"result"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">auto</span> result <span class="token operator">=</span>\n      asio<span class="token double-colon punctuation">::</span><span class="token function">co_spawn</span><span class="token punctuation">(</span>client_context<span class="token punctuation">.</span><span class="token function">get_executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> co<span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span>use_future<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// coroutine 登録</span>\n  client_context<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ループを回す</span>\n  <span class="token keyword">auto</span> pong <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// future から結果を得る</span>\n  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"pong: "</span> <span class="token operator">&lt;&lt;</span> pong <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"asio::use_future を使うことで返り値 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">std::future</code>'}})," になるので ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">co_return</code>'}})," の値を得ることも可能。\n結果に興味がないときは、",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asio::detached</code>'}})," でよい。\nCompletion Handler というコールバックなので、 promise に set_value する関数を自前で書いたりしてもよい様子。\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asio::use_awaitable</code>'}})," で ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">co_await</code>'}})," するのも可能。"),"\n",p.createElement(a.p,null,"返り値が ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">std::tuple&lt;asio::error_code, RESULT></code>'}})," になるハンドラ。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">auto</span> use_nothrow_awaitable <span class="token operator">=</span>\n    asio<span class="token double-colon punctuation">::</span>experimental<span class="token double-colon punctuation">::</span><span class="token function">as_tuple</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>use_awaitable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"client side"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"timer"),"\n",p.createElement(a.li,null,"connect"),"\n",p.createElement(a.li,null,"send(ping)"),"\n",p.createElement(a.li,null,"receive(pong)"),"\n"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp">  <span class="token keyword">auto</span> co <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>context <span class="token operator">=</span> client_context<span class="token punctuation">,</span> ep<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> asio<span class="token double-colon punctuation">::</span>awaitable<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[client]wait 1000ms..."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    asio<span class="token double-colon punctuation">::</span>system_timer <span class="token function">timer</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    timer<span class="token punctuation">.</span><span class="token function">expires_from_now</span><span class="token punctuation">(</span><span class="token number">1000</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">co_await</span> timer<span class="token punctuation">.</span><span class="token function">async_wait</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>use_awaitable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[client]connect: "</span> <span class="token operator">&lt;&lt;</span> ep <span class="token operator">&lt;&lt;</span> <span class="token string">"..."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket <span class="token function">socket</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">co_await</span> socket<span class="token punctuation">.</span><span class="token function">async_connect</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span>use_awaitable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[client]connected"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[client]ping..."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>string <span class="token function">ping</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">auto</span> write_size <span class="token operator">=</span> <span class="token keyword">co_await</span> asio<span class="token double-colon punctuation">::</span><span class="token function">async_write</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span><span class="token function">buffer</span><span class="token punctuation">(</span>ping<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                                                 asio<span class="token double-colon punctuation">::</span>use_awaitable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assert</span><span class="token punctuation">(</span>write_size <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[client]read..."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    asio<span class="token double-colon punctuation">::</span>streambuf buf<span class="token punctuation">;</span>\n    <span class="token keyword">auto</span> read_size <span class="token operator">=</span> <span class="token keyword">co_await</span> asio<span class="token double-colon punctuation">::</span><span class="token function">async_read</span><span class="token punctuation">(</span>\n        socket<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span><span class="token function">transfer_at_least</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span>use_awaitable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">co_return</span> <span class="token function">to_string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"server side"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">server</span> <span class="token punctuation">{</span>\n\n  asio<span class="token double-colon punctuation">::</span>io_context <span class="token operator">&amp;</span>_context<span class="token punctuation">;</span>\n  asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>acceptor _acceptor<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n  <span class="token function">server</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>io_context <span class="token operator">&amp;</span>context<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_context</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_acceptor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token operator">~</span><span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">const</span> asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>endpoint <span class="token operator">&amp;</span>ep<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[server]listen: "</span> <span class="token operator">&lt;&lt;</span> ep <span class="token operator">&lt;&lt;</span> <span class="token string">"..."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    _acceptor<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>ep<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    _acceptor<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>ep<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    _acceptor<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// coroutineを起動する</span>\n    <span class="token keyword">auto</span> ex <span class="token operator">=</span> _context<span class="token punctuation">.</span><span class="token function">get_executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    asio<span class="token double-colon punctuation">::</span><span class="token function">co_spawn</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token function">accept_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span>detached<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  asio<span class="token double-colon punctuation">::</span>awaitable<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token function">accept_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// 単なるループになって再起が不要に</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n      <span class="token keyword">auto</span> <span class="token punctuation">[</span>e<span class="token punctuation">,</span> socket<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">co_await</span> _acceptor<span class="token punctuation">.</span><span class="token function">async_accept</span><span class="token punctuation">(</span>use_nothrow_awaitable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[server]accept error: "</span> <span class="token operator">&lt;&lt;</span> e <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[server]accepted"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n      <span class="token comment">// coroutineを起動する</span>\n      <span class="token keyword">auto</span> ex <span class="token operator">=</span> _context<span class="token punctuation">.</span><span class="token function">get_executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      asio<span class="token double-colon punctuation">::</span><span class="token function">co_spawn</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token function">session</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span>detached<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  asio<span class="token double-colon punctuation">::</span>awaitable<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token function">session</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// echo server ぽい ping pong</span>\n    asio<span class="token double-colon punctuation">::</span>streambuf buf<span class="token punctuation">;</span>\n    <span class="token keyword">auto</span> <span class="token punctuation">[</span>e1<span class="token punctuation">,</span> read_size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">co_await</span> asio<span class="token double-colon punctuation">::</span><span class="token function">async_read</span><span class="token punctuation">(</span>\n        socket<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span><span class="token function">transfer_at_least</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> use_nothrow_awaitable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">auto</span> pong <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[server]ping: "</span> <span class="token operator">&lt;&lt;</span> pong <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    pong <span class="token operator">+=</span> <span class="token string">"pong"</span><span class="token punctuation">;</span>\n    <span class="token keyword">auto</span> <span class="token punctuation">[</span>e2<span class="token punctuation">,</span> write_size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">co_await</span> asio<span class="token double-colon punctuation">::</span><span class="token function">async_write</span><span class="token punctuation">(</span>\n        socket<span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span><span class="token function">buffer</span><span class="token punctuation">(</span>pong<span class="token punctuation">)</span><span class="token punctuation">,</span> use_nothrow_awaitable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[server]pong: "</span> <span class="token operator">&lt;&lt;</span> write_size <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp">  <span class="token keyword">auto</span> ep <span class="token operator">=</span> asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span><span class="token function">endpoint</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>address<span class="token double-colon punctuation">::</span><span class="token function">from_string</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                                    PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// server</span>\n  asio<span class="token double-colon punctuation">::</span>io_context server_context<span class="token punctuation">;</span>\n  server <span class="token function">server</span><span class="token punctuation">(</span>server_context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>ep<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  std<span class="token double-colon punctuation">::</span>thread <span class="token function">server_thread</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>server_context<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> server_context<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// thread でループを回す。</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"ループ(io_context)が隠蔽されていないのが良いですね。"),"\n",p.createElement(a.h1,null,"asio api"),"\n",p.createElement(a.h2,null,"io_context"),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++23</code>'}})," の ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Networking TS</code>'}})," に向けた変更？"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://amedama1x1.hatenablog.com/entry/2016/04/05/205340"},"Networking TS の Boost.Asio からの変更点 - その 1: Associated allocator")),"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://amedama1x1.hatenablog.com/entry/2016/08/20/222326"},"Networking TS の Boost.Asio からの変更点 - その 3: Executor")),"\n"),"\n",p.createElement(a.blockquote,null,"\n",p.createElement(a.p,null,"io_service は Executor と ExecutionContext という概念に分割されたことで, io_context に名前が変わりました"),"\n"),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Boost 1.66</code>'}})),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://amedama1x1.hatenablog.com/entry/2017/12/09/102405"},"Networking TS の Boost.Asio からの変更点 - その 4: Associated Executor")),"\n"),"\n",p.createElement(a.p,null,"単純に io_service を io_context に追きかえるだけで動いた。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asio.hpp></span></span>\n\nio_context context<span class="token punctuation">;</span>\n\n<span class="token comment">// 全てのタスクが消化されるまでブロックする。</span>\ncontext<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// スレッド上で実行する例</span>\nstd<span class="token double-colon punctuation">::</span>thread <span class="token function">run_thread</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>context<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> context<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 止める</span>\ncontext<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrun_thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"endpoint"),"\n",p.createElement(a.p,null,"ipaddress + port"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp">asip<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>endpoint <span class="token function">ep</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>address<span class="token double-colon punctuation">::</span><span class="token function">from_string</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"tcp connect"),"\n",p.createElement(a.p,null,"socket"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp">io_context context<span class="token punctuation">;</span>\nasio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket <span class="token function">socket</span><span class="token punctuation">(</span>coontext<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"basic"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket socket<span class="token punctuation">,</span> <span class="token keyword">const</span> asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>endpoint <span class="token operator">&amp;</span>ep<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">auto</span> on_connect <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> asio<span class="token double-colon punctuation">::</span>error_code <span class="token operator">&amp;</span>ec<span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>ec<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"error: "</span> <span class="token operator">&lt;&lt;</span> ec <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"connected"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  socket<span class="token punctuation">.</span><span class="token function">async_connect</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> on_connect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++11 future</code>'}})),"\n",p.createElement(a.p,null,"std::future に対して ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">continue_with</code>'}})," する手段を用意しないと、これ単体では使いづらい"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>future<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token function">connect_future</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket socket<span class="token punctuation">,</span> <span class="token keyword">const</span> asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>endpoint <span class="token operator">&amp;</span>ep<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">// move するのが大変な場合があるので手抜き</span>\n  <span class="token keyword">auto</span> p <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">auto</span> f <span class="token operator">=</span> p<span class="token operator">-></span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  socket<span class="token punctuation">.</span><span class="token function">async_connect</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> <span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>error_code ec<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>ec<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n      <span class="token comment">// future value</span>\n      p<span class="token operator">-></span><span class="token function">set_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> f<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++20 coroutine</code>'}})),"\n",p.createElement(a.p,null,"有望"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp">asio<span class="token double-colon punctuation">::</span>awaitable<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token function">co</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>io_context <span class="token operator">&amp;</span>context<span class="token punctuation">,</span> <span class="token keyword">const</span> asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>endpoint <span class="token operator">&amp;</span>ep<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n  asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket <span class="token function">socket</span><span class="token punctuation">(</span>coontext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">co_await</span> socket<span class="token punctuation">.</span><span class="token function">async_connect</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span>use_awaitable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"tcp listen"),"\n",p.createElement(a.h2,null,"raed_async"),"\n",p.createElement(a.h2,null,"write_async"),"\n",p.createElement(a.h1,null,"coroutine 詳細"),"\n",p.createElement(a.p,null,"asio の coroutine を学んでいたらできないことが出てきた。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> result <span class="token operator">=</span> <span class="token keyword">co_await</span> <span class="token function">rpc_call</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.h1,null,"自前の Awaiter が必要？"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>AS<span class="token operator">></span>\nasio<span class="token double-colon punctuation">::</span>awaitable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">rpc_call</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>method<span class="token punctuation">,</span> AS<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> as<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n  asio<span class="token double-colon punctuation">::</span>io_context context<span class="token punctuation">;</span>\n  asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket <span class="token function">socket</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>endpoint ep<span class="token punctuation">;</span>\n\n  <span class="token keyword">co_await</span> socket<span class="token punctuation">.</span><span class="token function">connect_async</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span>use_awaitable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// msgpack-rpc</span>\n  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">uint8_t</span><span class="token operator">></span> request <span class="token operator">=</span> <span class="token function">make_request</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> as<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">co_await</span> asio<span class="token double-colon punctuation">::</span><span class="token function">write_async</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> request<span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span>use_awaitable<span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n  <span class="token comment">// ここで実行の流れが切れる</span>\n\n  <span class="token comment">// ?</span>\n  std<span class="token double-colon punctuation">::</span>promise<span class="token operator">&lt;</span>R<span class="token operator">></span> p<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">co_await std::future</code>'}})," できるぽいが, ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asio</code>'}})," と混ぜてうまくいくのだろうか。"),"\n",p.createElement(a.h1,null,"c++20 coroutine"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"https://cpprefjp.github.io/lang/cpp20/coroutines.html"),"\n",p.createElement(a.li,null,"https://www.scs.stanford.edu/~dm/blog/c++-coroutines.html"),"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://qiita.com/tan-y/items/ae54153ec3eb42f80638"},"C++ でコルーチン (async/await 準備編)")),"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://qiita.com/tan-y/items/6033ab9e7298999bf214#await_ready"},"C++ で async/await をする")),"\n"),"\n",p.createElement(a.p,null,"内部で ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">co_await</code>'}}),", ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">co_yield</code>'}}),", ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">co_return</code>'}})," の何れかを使う関数は coroutine になる。\n返り値の型から promise_type を得られるようにする必要がある。"),"\n",p.createElement(a.p,null,"初期化は ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">promise_type::get_return_object</code>'}})," から始まるぽい。"),"\n",p.createElement(a.h2,null,"generator の例"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">generator</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">promise_type</span><span class="token punctuation">;</span>\n  <span class="token keyword">using</span> handle <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>coroutine_handle<span class="token operator">&lt;</span>promise_type<span class="token operator">></span><span class="token punctuation">;</span>  \n  <span class="token keyword">struct</span> <span class="token class-name">promise_type</span> <span class="token punctuation">{</span>\n    <span class="token keyword">auto</span> <span class="token function">get_return_object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> generator<span class="token punctuation">{</span>handle<span class="token double-colon punctuation">::</span><span class="token function">from_promise</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">using</span> handle <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>coroutine_handle<span class="token operator">&lt;</span>promise_type<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n  handle coro<span class="token punctuation">;</span>\n  <span class="token function">generator</span><span class="token punctuation">(</span>handle h<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">coro</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp">promise_type promise<span class="token punctuation">;</span>\n\n<span class="token comment">// 戻り値型オブジェクトの初期化</span>\n<span class="token keyword">auto</span> result <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">get_return_object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.h1,null,"Asio の実装"),"\n",p.createElement(a.h2,null,"asio::awaitable"),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asio::awaitable&lt;T></code>'}})," が CoroutineTrait の実装。"),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">include/asio/awaitable.hpp</code>'}})),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">Executor</span> <span class="token operator">=</span> any_io_executor<span class="token operator">></span>\n<span class="token keyword">class</span> <span class="token class-name">ASIO_NODISCARD</span> awaitable\n<span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n  <span class="token comment">/// The type of the awaited value.</span>\n  <span class="token keyword">typedef</span> T value_type<span class="token punctuation">;</span>\n\n  <span class="token comment">/// The executor type that will be used for the coroutine.</span>\n  <span class="token keyword">typedef</span> Executor executor_type<span class="token punctuation">;</span>\n\n  <span class="token comment">/// Default constructor.</span>\n  <span class="token keyword">constexpr</span> <span class="token function">awaitable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span>\n    <span class="token operator">:</span> <span class="token function">frame_</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/// Move constructor.</span>\n  <span class="token function">awaitable</span><span class="token punctuation">(</span>awaitable<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>\n    <span class="token operator">:</span> <span class="token function">frame_</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">exchange</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>frame_<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/// Destructor</span>\n  <span class="token operator">~</span><span class="token function">awaitable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>frame_<span class="token punctuation">)</span>\n      frame_<span class="token operator">-></span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/// Checks if the awaitable refers to a future result.</span>\n  <span class="token keyword">bool</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>frame_<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>GENERATING_DOCUMENTATION<span class="token punctuation">)</span></span></span>\n\n  <span class="token comment">// Support for co_await keyword.</span>\n  <span class="token keyword">bool</span> <span class="token function">await_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Support for co_await keyword.</span>\n  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">U</span><span class="token operator">></span>\n  <span class="token keyword">void</span> <span class="token function">await_suspend</span><span class="token punctuation">(</span>\n      detail<span class="token double-colon punctuation">::</span>coroutine_handle<span class="token operator">&lt;</span>detail<span class="token double-colon punctuation">::</span>awaitable_frame<span class="token operator">&lt;</span>U<span class="token punctuation">,</span> Executor<span class="token operator">>></span> h<span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n    frame_<span class="token operator">-></span><span class="token function">push_frame</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">.</span><span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Support for co_await keyword.</span>\n  T <span class="token function">await_resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">awaitable</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>awaitable<span class="token operator">&amp;&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>frame_<span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// !defined(GENERATING_DOCUMENTATION)</span></span>\n\n<span class="token keyword">private</span><span class="token operator">:</span>\n  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token operator">></span> <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">detail</span><span class="token operator">:</span><span class="token base-clause"><span class="token operator">:</span><span class="token class-name">awaitable_thread</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token operator">></span> <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">detail</span><span class="token operator">:</span><span class="token base-clause"><span class="token operator">:</span><span class="token class-name">awaitable_frame</span></span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Not copy constructible or copy assignable.</span>\n  <span class="token function">awaitable</span><span class="token punctuation">(</span><span class="token keyword">const</span> awaitable<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>\n  awaitable<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> awaitable<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Construct the awaitable from a coroutine\'s frame object.</span>\n  <span class="token keyword">explicit</span> <span class="token function">awaitable</span><span class="token punctuation">(</span>detail<span class="token double-colon punctuation">::</span>awaitable_frame<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Executor<span class="token operator">></span><span class="token operator">*</span> a<span class="token punctuation">)</span>\n    <span class="token operator">:</span> <span class="token function">frame_</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span>\n\n  detail<span class="token double-colon punctuation">::</span>awaitable_frame<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Executor<span class="token operator">></span><span class="token operator">*</span> frame_<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"promise_type"),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">include/asio/impl/awaitable.hpp</code>'}})),"\n",p.createElement(a.p,null,"// promise_type"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>ASIO_HAS_STD_COROUTINE<span class="token punctuation">)</span></span></span>\n\n<span class="token keyword">namespace</span> std <span class="token punctuation">{</span>\n\n<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">Executor</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>\n<span class="token keyword">struct</span> <span class="token class-name">coroutine_traits</span><span class="token operator">&lt;</span>asio<span class="token double-colon punctuation">::</span>awaitable<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Executor<span class="token operator">></span><span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">typedef</span> asio<span class="token double-colon punctuation">::</span>detail<span class="token double-colon punctuation">::</span>awaitable_frame<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Executor<span class="token operator">></span> promise_type<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span> <span class="token comment">// namespace std</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">else</span> <span class="token comment">// defined(ASIO_HAS_STD_COROUTINE)</span></span>\n\n<span class="token keyword">namespace</span> std <span class="token punctuation">{</span> <span class="token keyword">namespace</span> experimental <span class="token punctuation">{</span>\n\n<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">Executor</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>\n<span class="token keyword">struct</span> <span class="token class-name">coroutine_traits</span><span class="token operator">&lt;</span>asio<span class="token double-colon punctuation">::</span>awaitable<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Executor<span class="token operator">></span><span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">typedef</span> asio<span class="token double-colon punctuation">::</span>detail<span class="token double-colon punctuation">::</span>awaitable_frame<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Executor<span class="token operator">></span> promise_type<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment">// namespace std::experimental</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">endif</span> <span class="token comment">// defined(ASIO_HAS_STD_COROUTINE)</span></span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"asio::detail::awaitable_frame"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Executor</span><span class="token operator">></span>\n<span class="token keyword">class</span> <span class="token class-name">awaitable_frame</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">,</span> Executor<span class="token operator">></span>\n  <span class="token operator">:</span> <span class="token keyword">public</span> awaitable_frame_base<span class="token operator">&lt;</span>Executor<span class="token operator">></span>\n<span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n  awaitable<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">,</span> Executor<span class="token operator">></span> <span class="token function">get_return_object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token operator">-></span>coro_ <span class="token operator">=</span> <span class="token class-name">coroutine_handle</span><span class="token operator">&lt;</span>awaitable_frame<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">from_promise</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">awaitable</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">,</span> Executor<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">void</span> <span class="token function">return_void</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token operator">-></span>caller_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">rethrow_exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}))}var e=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?p.createElement(a,n,p.createElement(o,n)):o(n)},c=s(8678),l=s(8838);const u={code:n=>{let{children:a,className:s}=n;return s?p.createElement(l.Z,{className:s},a):p.createElement("code",null,a)}};function i(n){let{data:a,children:s}=n;return p.createElement(c.Z,null,p.createElement("h1",null,a.mdx.frontmatter.title),p.createElement(t.Zo,{components:u},s))}function k(n){return p.createElement(i,n,p.createElement(e,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-summer-update-asio-md-3e444480a3e4ecdbf386.js.map
{"version":3,"file":"component---content-posts-2017-06-threejs-setup-md-6ef8fce25ab93377c47a.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,OACNC,IAAK,QACJC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wCAAyC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yEAA0E,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,8BAA+B,gCAAiCK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,iBAAkB,oBAAqB,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,oDAAqD,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,oCAAqC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4IAA6I,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6EAA8E,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,sDAAuD,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,aAAc,KAAMK,EAAAA,cAAoBR,EAAYK,IAAK,KAAMG,EAAAA,cAAoBR,EAAYI,KAAM,CACvqCK,UAAW,uBACV,m3CAAs5C,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,eAAgB,KAAMK,EAAAA,cAAoBR,EAAYK,IAAK,KAAMG,EAAAA,cAAoBR,EAAYI,KAAM,CAC7iDK,UAAW,iBACV,gmEAAynE,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6BAA8B,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,WAAY,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4DAA6D,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,WACj6E,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECeO,MAAMa,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,C","sources":["webpack:///./content/posts/2017/06/threejs_setup.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"threejs のソースを自前で、minimize する環境を模索する。\"), \"\\n\", React.createElement(_components.p, null, \"なんとなく webpack をメインに据えてみたい。\\nnpm install -g xxx は適宜やるとして省略。\\nes2015 メモ\"), \"\\n\", React.createElement(_components.p, null, \"const, let\\n無名関数はアロー形式で()=>\", \" もしくは()=>expression\\n文字テンプレート\", React.createElement(_components.code, null, \"${expression}\"), \"\\npromise, await\"), \"\\n\", React.createElement(_components.p, null, \"Project 作成\\n$ mkdir app\\n$ cd app\\napp$ npm init\"), \"\\n\", React.createElement(_components.p, null, \"とりあえず git に登録しよう。\\n.gitignore は、\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/github/gitignore/blob/master/Node.gitignore\\nhttps://raw.githubusercontent.com/github/gitignore/master/Node.gitignore\"), \"\\n\", React.createElement(_components.p, null, \"をそのまま採用させていただきます。\\napp$ git init\\napp$ git add .\\napp$ git commit -m init\"), \"\\n\", React.createElement(_components.p, null, \"WebSocketServer\\napp$ npm install websocket --save\"), \"\\n\", React.createElement(_components.p, null, \"server.js\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"\\\"use strict\\\";\\n\\nconst http = require(\\\"http\\\");\\nconst WSServer = require(\\\"websocket\\\").server;\\nconst url = require(\\\"url\\\");\\nconst fs = require(\\\"fs\\\");\\n\\nconst port = 8888;\\n\\nfunction onHttpRequest(req, res) {\\n  fs.readFile(\\\"client.html\\\", \\\"utf8\\\", (err, text) => {\\n    res.writeHead(200, { \\\"Content-Type\\\": \\\"text/html\\\" });\\n    res.end(text);\\n  });\\n}\\nconst plainHttpServer = http.createServer(onHttpRequest).listen(port);\\nconst webSocketServer = new WSServer({ httpServer: plainHttpServer });\\n\\nlet clients = [];\\nfunction broadcast(message) {\\n  clients.forEach((con, i) => {\\n    con.send(message);\\n  });\\n}\\n\\nfunction onRequest(req) {\\n  const websocket = req.accept(null, req.origin || \\\"*\\\");\\n\\n  clients.push(websocket);\\n\\n  websocket.send(\\\"welcome to this server\\\");\\n  broadcast(\\n    `clients: [${clients.map((v, i) => v.remoteAddress[0]).join(\\\", \\\")}]`\\n  );\\n\\n  websocket.on(\\\"message\\\", (msg) => {\\n    console.log(`\\\"${msg.utf8Data}\\\" is recieved from ${req.origin} !`);\\n    websocket.send(msg.utf8Data);\\n  });\\n\\n  websocket.on(\\\"close\\\", (code, desc) => {\\n    console.log(`connection released!: ${code} - ${desc}`);\\n\\n    clients = clients.filter((v, i) => v != websocket);\\n    broadcast(\\n      `clients: [${clients.map((v, i) => v.remoteAddress[0]).join(\\\", \\\")}]`\\n    );\\n  });\\n}\\n\\nwebSocketServer.on(\\\"request\\\", onRequest);\\n\\nconsole.log(`server start: ${port}`);\\n\")), \"\\n\", React.createElement(_components.p, null, \"client.html\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<html>\\n  <head> </head>\\n  <body>\\n    <input id=\\\"message\\\" type=\\\"text\\\" /><button id=\\\"send\\\">send</button>\\n    <div id=\\\"output\\\"></div>\\n\\n    <script>\\n      \\\"use strict\\\";\\n      let attempts = 1;\\n      let ws = null;\\n\\n      const output = document.getElementById(\\\"output\\\");\\n      const sendmessage = document.getElementById(\\\"message\\\");\\n      sendmessage.addEventListener(\\\"keydown\\\", (e) => {\\n        if (e.keyCode == 13) {\\n          send(sendmessage.value);\\n        }\\n      });\\n      document\\n        .getElementById(\\\"send\\\")\\n        .addEventListener(\\\"click\\\", () => send(sendmessage.value));\\n\\n      function logger(msg) {\\n        output.innerHTML += `<div>${msg}</div>`;\\n      }\\n      function send(msg) {\\n        ws.send(msg);\\n        logger(`send: ${msg}`);\\n      }\\n\\n      function createWebSocket() {\\n        logger(`connecting... ${attempts++}`);\\n\\n        ws = new WebSocket(`ws://${location.host}`);\\n\\n        ws.onopen = (e) => {\\n          logger(`${e.type}: ${e.code || \\\"\\\"}`);\\n\\n          // reset the tries back to 1 since we have a new ws opened.\\n          attempts = 1;\\n\\n          // ...Your app's logic...\\n        };\\n\\n        ws.onclose = (e) => {\\n          logger(`${e.type}: ${e.code || \\\"\\\"}`);\\n          ws = null;\\n\\n          const time = generateInterval(attempts);\\n\\n          setTimeout(() => {\\n            // Connection has closed so try to reconnect every 10 seconds.\\n            createWebSocket();\\n          }, time);\\n        };\\n\\n        ws.onmessage = (e) => {\\n          logger(`${e.type}: ${e.data}`);\\n        };\\n      }\\n\\n      function generateInterval(k) {\\n        let maxInterval = (Math.pow(2, k) - 1) * 1000;\\n\\n        if (maxInterval > 30 * 1000) {\\n          maxInterval = 30 * 1000; // If the generated interval is more than 30 seconds, truncate it down to 30 seconds.\\n        }\\n\\n        // generate the interval to a random number between 0 and the maxInterval determined from above\\n        return Math.random() * maxInterval;\\n      }\\n\\n      window.addEventListener(\\\"DOMContentLoaded\\\", () => createWebSocket());\\n    </script>\\n  </body>\\n</html>\\n\")), \"\\n\", React.createElement(_components.p, null, \"WebSocket を再接続するアルゴリズムの工夫\"), \"\\n\", React.createElement(_components.p, null, \"webpack\"), \"\\n\", React.createElement(_components.p, null, \"http://webpack.github.io/docs/tutorials/getting-started/\"), \"\\n\", React.createElement(_components.p, null, \"threejs\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","pre","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
{"version":3,"file":"component---content-posts-2013-11-28-pathogen-vim-md-4427ec7823beb94159df.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,YAAa,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,o3DACtM,CAKA,UAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECmBO,MAAMY,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2013/11/28/pathogen_vim.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"vim 環境整備\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Windows8でコーディングができるようにvim回りを整備する。\\nコマンドライン環境としてPowerShellを採用してそこからvim(gvim)する方向性。\\n前の日記を整理して書き直し。\\nPowerShellを使えるようにしてvimとgitをインストールする\\nPowerShellを管理者権限で実行して以下のように実行する。\\npowershell> Set-ExecutionPolicy RemoteSigned\\n\\nパッケージ管理として Chocolatey\\nをインストール。dos窓で以下のように実行する。\\ndos> @powershell -NoProfile -ExecutionPolicy unrestricted -Command \\\"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\\\" && SET PATH=%PATH%;%systemdrive%\\\\chocolatey\\\\bin\\n\\npowershellの設定ファイル作成する。shellの.profileに相当するファイル。\\n\\nC:/Users/_USER_NAME_/Documents/WindowsPowerShell/Microsoft.PowerShell_profile.ps1\\n\\nとりあえずwhichコマンド的な関数を書いておく\\nfunction which([string] $command=$(throw \\\"need command name\\\")){\\n    $Env:Path.Split(\\\";\\\") | %{ ls $_  2> $null } | ?{ $_.Name -match \\\"^$command\\\" } | % { $_.FullName }\\n}\\n\\n改めてPowerShellを起動してchocolateyでvimをインストールする\\npowershell> cinst vim\\n\\ngitも入れる。\\npowershell> cinst git\\n\\ncinstの実行直後はいろいろPathが通っていなかったりして使えない場合があるのでその場合はpowershellを再起動。\\nvimを整備する\\nNerdTreeを入れようと思ったらpathogen.vim使えと書いてあったのでpathogen.vim入れる。\\npowershell> cd $HOME\\npowershell> mkdir vimfiles\\npowershell> cd vimfiles\\npowershell> mkdir autoload, bundle\\npowershell> git init\\n\\npathogen.vim\\nを入れる。downloadしてvimfiles/autoload/pathogen.vimに保存する。\\npowershell> git add .\\npowershell> git commit -m init\\n\\nとりあえずgitに登録した。\\n_vimrc\\nexecute pathogen#infect()\\nsyntax on\\nfiletype plugin indent on\\n\\ncolorscheme darkblue\\n\\nset hidden\\nset nobackup\\n\\n_gvimrc\\ncolorscheme desert\\n\\nset iminsert=0\\nset imsearch=-1\\nset visualbell t_vb=\\n\\nset columns=100\\nset lines=56\\n\\nNerdTree\\nNerdTree をgit\\nsubmoduleとしてインストールする。\\npowershell> cd vimfiles/bundle\\npowershell> git submodule add https://github.com/scrooloose/nerdtree.git\\n\\n以上でvim環境が始動した。\\n追記\\nWindowsだとNerdTreeの[m]キーのメニューにcopyが出ない問題があったがstackoverflowに\\n原因と解決方法が書いてあった。\\nhttp://stackoverflow.com/questions/11269926/nerdtree-copy-command-in-windows-7\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-12-06-threejs-01-md-4a709804d06bb1e7ee2f.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,KAAM,SACLC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBN,EAAYG,KAAM,CAC3CI,wBAAyB,CACvBC,OAAQ,ijHAGd,CAKA,MAJA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWX,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BCTA,MAAMM,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,MAAME,EAAcD,EAAKE,IAAID,YAC7B,OAAOb,EAAAA,cAAoBe,EAAAA,EAAQ,KAAMf,EAAAA,cAAoB,KAAM,KAAMa,EAAYG,OAAQhB,EAAAA,cAAoB,MAAO,CACtHQ,UAAW,cACVK,EAAYI,MAAQJ,EAAYI,KAAKC,OAAS,GAAKL,EAAYI,KAAKE,KAAIC,GAClEpB,EAAAA,cAAoBqB,EAAAA,GAAM,CAC/BC,GAAI,SAASF,EAAG,IAChBG,SAAU,OACTvB,EAAAA,cAAoB,SAAU,KAAMoB,OACpCpB,EAAAA,cAAoBwB,EAAAA,GAAa,CACpCzB,WAAYA,GACXQ,GACL,CACe,SAASkB,EAAiBhC,GACvC,OAAOO,EAAAA,cAAoBU,EAAcjB,EAAOO,EAAAA,cAAoB0B,EAAqBjC,GAC3F,C","sources":["webpack:///./content/posts/2015/12/06/threejs_01.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">\\nsource\\nTypeScriptを学び始めた目的のひとつであるThree.jsをようやくはじめた。\\n「Node.jsとSocket.IOで連結してリアルタイムにシーンをアニメーションするっ」とか\\n遠大な構想だったのだが小さいところから始めよう。\\nhello world的な\\n本家のgetting started\\nhtmlにスクリプトを追加。\\n&lt;script src=\\\"threejs_01.js\\\">&lt;/script>\\n\\nthreejs_01.js\\nvar scene = new THREE.Scene();\\nvar camera = new THREE.PerspectiveCamera(75\\n    , window.innerWidth / window.innerHeight\\n    , 0.1, 1000);\\n\\nvar renderer = new THREE.WebGLRenderer();\\nrenderer.setSize(window.innerWidth, window.innerHeight);\\ndocument.body.appendChild(renderer.domElement);\\n\\nvar geometry = new THREE.BoxGeometry(1, 1, 1);\\nvar material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\\nvar cube = new THREE.Mesh(geometry, material);\\nscene.add(cube);\\n\\ncamera.position.z = 5;\\n\\nvar render = function() {\\n    requestAnimationFrame(render);\\n\\n    cube.rotation.x += 0.1;\\n    cube.rotation.y += 0.1;\\n\\n    renderer.render(scene, camera);\\n};\\n\\nrender();\\n\\ntypescript化する。\\ngulpにタスクを仕込んだので拡張子をtsにして待つのみ。\\nerror TS2304: Cannot find name 'THREE'\\n\\nthree.jsの型定義が無いので追加。\\n> tsd query three -rosa install\\n\\ntsの先頭にtsdの参照を追加\\n/// &lt;reference path='../../../../typings/tsd.d.ts' />\\n\\n無事typescript化に成功。\\ntsconfig.jsonはこんな感じ。\\n{\\n    \\\"compilerOptions\\\": {\\n        \\\"module\\\": \\\"commonjs\\\",\\n        \\\"target\\\": \\\"es5\\\",\\n        \\\"noImplicitAny\\\": true,\\n        \\\"outDir\\\": \\\".\\\",\\n        \\\"rootDir\\\": \\\".\\\",\\n        \\\"sourceMap\\\": false\\n    },\\n    \\\"exclude\\\": [\\n        \\\"node_modules\\\"\\n    ]\\n}\\n\\ncanvasの作成先を変える\\nrenderer.setSize(window.innerWidth, window.innerHeight);\\ndocument.body.appendChild(renderer.domElement);\\n\\nを変えよう。\\ndom操作等にjqueryを使う意向なのでjquery導入。\\n> tsd query jquery -rosa install\\n\\nhtmlにdivを追加して\\n&lt;div id=\\\"renderer\\\" style=\\\"width:300px;height:200px;\\\">&lt;/div>\\n\\nレンダラのサイズと親を変える。\\nvar $container=$('div#renderer');\\nrenderer.setSize($container.width(), $container.height());\\n$container.append(renderer.domElement);\\n\\nカメラのアスペクト比も変える。\\nvar camera = new THREE.PerspectiveCamera(75\\n    , $container.width()/$container.height()\\n    , 0.1, 1000);\\n\\nTypeScript風に書き換えてみる\\nせっかくTypeScriptにしているのでフリーダムに書き換えてみる。\\n/// &lt;reference path='../../../../typings/tsd.d.ts' />\\n\\n\\nclass Renderer {\\n    $container: JQuery;\\n    renderer: THREE.Renderer;\\n\\n    scene: THREE.Scene;\\n    camera: THREE.Camera;\\n    mesh: THREE.Mesh;\\n\\n    CreateRenderer($container: JQuery) {\\n        this.$container = $container;\\n\\n        this.renderer = new THREE.WebGLRenderer();\\n        this.renderer.setSize($container.width(), $container.height());\\n        $container.append(this.renderer.domElement);\\n    }\\n\\n    CreateScene() {\\n        this.scene = new THREE.Scene();\\n\\n        var geometry = new THREE.BoxGeometry(1, 1, 1);\\n        var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\\n        this.mesh = new THREE.Mesh(geometry, material);\\n        this.scene.add(this.mesh);\\n\\n        this.camera = new THREE.PerspectiveCamera(75\\n            , this.$container.width() / this.$container.height()\\n            , 0.1, 1000);\\n        this.camera.position.z = 5;\\n    }\\n\\n    Render(){\\n        requestAnimationFrame(this.Render.bind(this));\\n\\n        // update scene\\n        this.mesh.rotation.x += 0.1;\\n        this.mesh.rotation.y += 0.1;\\n\\n        // render\\n        this.renderer.render(this.scene, this.camera);\\n    }\\n}\\nvar renderer = new Renderer();\\n\\n\\n$(() => {\\n    var $container = $('div#renderer');\\n    renderer.CreateRenderer($container);\\n    renderer.CreateScene();\\n\\n    renderer.Render();\\n});</code></pre></div>\"\n    }\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2015/12/06/threejs_01.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
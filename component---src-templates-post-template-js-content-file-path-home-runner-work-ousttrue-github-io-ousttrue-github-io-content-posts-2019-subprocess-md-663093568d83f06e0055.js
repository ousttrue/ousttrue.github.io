"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4009],{9933:function(e,n,t){t.r(n),t.d(n,{default:function(){return u}});var l=t(1151),r=t(7294);function c(e){const n=Object.assign({p:"p",pre:"pre",code:"code",h2:"h2",h3:"h3",ul:"ul",li:"li",h4:"h4"},(0,l.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.p,null,"https://docs.python.org/3/library/subprocess.html"),"\n",r.createElement(n.p,null,"こういうやつ"),"\n",r.createElement(n.pre,null,r.createElement(n.code,null,"\n      +-------+\n      | child |\n      |process|\n      +-------+\n   stdin ^ | stdout\n         | v\n      +-------+\n      |process|\n      +-------+\n-> stdin     stdout ->\n")),"\n",r.createElement(n.h2,null,"subprocess モジュール"),"\n",r.createElement(n.p,null,"subprocess は、"),"\n",r.createElement(n.pre,null,r.createElement(n.code,null,"os.system\nos.spawn*\n")),"\n",r.createElement(n.p,null,"の置き換え。"),"\n",r.createElement(n.h3,null,"subprocess.run"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"https://docs.python.org/3/library/subprocess.html#subprocess.run"),"\n"),"\n",r.createElement(n.p,null,"中でPopenして結果を集めて ",r.createElement(n.code,null,"CompletedProcess")," として返す。"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-python"},"# 抜粋\ndef run(...):\n    with Popen(*popenargs, **kwargs) as process:\n        try:\n            stdout, stderr = process.communicate(input, timeout=timeout) \n\n    return CompletedProcess(process.args, retcode, stdout, stderr)\n")),"\n",r.createElement(n.p,null,"実行して結果の文字列を得て終わりというタイプの用途向け。\n旧 ",r.createElement(n.code,null,"os.system")," の代替になると思う。"),"\n",r.createElement(n.h3,null,"subprocess.Popen"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"https://docs.python.org/3/library/subprocess.html#popen-constructor"),"\n"),"\n",r.createElement(n.p,null,"標準入力、標準出力を制御するのはこっち。"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-python"},"subprocess.Popen(['cmd_name', 'arg0', 'arg1'...],\n    stdin=subprocess.PIPE,\n    stdout=subprocess.PIPE,\n    stderr=subprocess.PIPE,\n    cwd=None, env=None,\n    text=False\n    )\n")),"\n",r.createElement(n.p,null,"Readループが一個しかない時はこれでいいんでないかな。"),"\n",r.createElement(n.h2,null,"今回のテーマ"),"\n",r.createElement(n.pre,null,r.createElement(n.code,null,"\n      +-------+\n      | child |\n      |process|\n      +-------+\n   stdin ^ | @stdout\n         | v\n      +-------+\n      |process| ここでロギングして通信内容を確認したい\n      +-------+\n  @stdin ^ | stdout\n         | v\n      +-------+\n      | parent|\n      |process|\n      +-------+\n\n")),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"@のところを常時読み込みにしたい(2つのReadループ)"),"\n",r.createElement(n.li,null,"@stdin をReadするとブロックして固まるのでつらい"),"\n"),"\n",r.createElement(n.p,null,"つらいのだ。"),"\n",r.createElement(n.h2,null,"asyncio"),"\n",r.createElement(n.p,null,"２つのReaderを非同期で制御しようということで 。"),"\n",r.createElement(n.h3,null,"asyncio の基本"),"\n",r.createElement(n.p,null,"loop を露出させる。"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-python"})),"\n",r.createElement(n.p,null,"loop は暗黙。\n基本的にこちらでよいと思う。\n必要に応じて取得する。"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-python"})),"\n",r.createElement(n.h4,null,"asyncio.create_task で新しいスタックを開始する"),"\n",r.createElement(n.p,null,"新しいスタックなのでエラーハンドリングが無いことに注意。"),"\n",r.createElement(n.h4,null,"StreamReaderProtocol と StreamWriterProtocol"),"\n",r.createElement(n.p,null,"コールバックと Stream を結び付ける。"),"\n",r.createElement(n.h3,null,"Windowsの標準入出力はIOCPできない"),"\n",r.createElement(n.p,null,"IOCPできるハンドルは決まっていて、"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"\n",r.createElement(n.p,null,"通常のファイル"),"\n"),"\n",r.createElement(n.li,null,"\n",r.createElement(n.p,null,"Socket"),"\n"),"\n",r.createElement(n.li,null,"\n",r.createElement(n.p,null,"NamedPipe"),"\n"),"\n",r.createElement(n.li,null,"\n",r.createElement(n.p,null,"https://tim.mcnamara.nz/post/176613307022/iocp-and-stdio"),"\n"),"\n"),"\n",r.createElement(n.h4,null,"python3.7 で ",r.createElement(n.code,null,"asyncio.create_subprocess")," ができた"),"\n",r.createElement(n.p,null,"child process 側はこれで助かった。"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"https://docs.python.org/3/library/asyncio-subprocess.html"),"\n"),"\n",r.createElement(n.p,null,"なんか、たまに ",r.createElement(n.code,null,"socket.exception")," が出るので、\ntcpのlocalhost接続にリダイレクトするとか謎の技使っているのかもしれぬ。"),"\n",r.createElement(n.p,null,"おかげで、子プロセスの標準入出力から ",r.createElement(n.code,null,"StreamReader")," と ",r.createElement(n.code,null,"StreamWriter"),"\nを楽に取得できる。"),"\n",r.createElement(n.h4,null,"重い NativeCoroutine は、ThreadPoolExecutorに逃がす"),"\n",r.createElement(n.p,null,"標準入力側"),"\n",r.createElement(n.p,null,"GILを回避して、別スレッドで待てるのではないか。"),"\n",r.createElement(n.p,null,"どんな処理が、NativeCoroutine なのか。"))}var a=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?r.createElement(n,e,r.createElement(c,e)):c(e)};t(8678);function o(e){let{data:n,children:t}=e;return r.createElement(r.Fragment,null,r.createElement("h1",null,n.mdx.frontmatter.title),r.createElement(l.Zo,null,t))}function u(e){return r.createElement(o,e,r.createElement(a,e))}},8678:function(e,n,t){t(7294)},1151:function(e,n,t){t.d(n,{Zo:function(){return o},ah:function(){return c}});var l=t(7294);const r=l.createContext({});function c(e){const n=l.useContext(r);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const a={};function o({components:e,children:n,disableParentContext:t}){let o;return o=t?"function"==typeof e?e({}):e||a:c(e),l.createElement(r.Provider,{value:o},n)}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2019-subprocess-md-663093568d83f06e0055.js.map
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-05-21-xorg-md-33deef00730296adc40b.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,KAAM,OACNC,EAAG,IACHC,GAAI,OACHC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,KAAM,CACrFM,wBAAyB,CACvBC,OAAQ,mRAER,KAAMF,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,yBAA4B,KAAMI,EAAAA,cAAoBR,EAAYG,KAAM,CACzHM,wBAAyB,CACvBC,OAAQ,mIAER,KAAMF,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,gEAAmE,KAAMG,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,0BAA2B,KAAMG,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,cAAe,KAAMG,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,uBAAwB,KAAMG,EAAAA,cAAoBR,EAAYG,KAAM,CACnXM,wBAAyB,CACvBC,OAAQ,wMAER,KAAMF,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,kCAAmC,KAAMG,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,6DAA8D,KAAMI,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,uBAAwB,KAAMG,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,qGAAsG,KAAMI,EAAAA,cAAoBR,EAAYG,KAAM,CAC3cM,wBAAyB,CACvBC,OAAQ,mLAER,KAAMF,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,gDAAiD,KAAMG,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,uBAA0B,KAAMI,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,uBAAwB,KAAMG,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,uBAAwB,KAAMG,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,0BAA2B,KAAMG,EAAAA,cAAoBR,EAAYG,KAAM,CACnbM,wBAAyB,CACvBC,OAAQ,uNAER,KAAMF,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,4BAA6B,KAAMG,EAAAA,cAAoBR,EAAYG,KAAM,CAC3HM,wBAAyB,CACvBC,OAAQ,opCAGd,CAKA,MAJA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWb,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBChCA,MAAMQ,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBa,EAAAA,EAAQ,KAAMb,EAAAA,cAAoB,KAAM,KAAMY,EAAKE,IAAIC,YAAYC,OAAQhB,EAAAA,cAAoBiB,EAAAA,GAAa,CACrIlB,WAAYA,GACXQ,GACL,CACe,SAASW,EAAiB3B,GACvC,OAAOS,EAAAA,cAAoBU,EAAcnB,EAAOS,EAAAA,cAAoBmB,EAAqB5B,GAC3F,C","sources":["webpack:///./content/posts/2013/05/21/xorg.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    span: \"span\",\n    p: \"p\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\"># xorgインストール\\n\\ngentooにxorgをインストールする\\n\\nThe X Server Configuration HOWTO\\nhttp://www.gentoo.org/doc/en/xorg-config.xml\\n\\n/etc/portage/make.conf</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"INPUT_DEVICES=\\\"evdev\\\"\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\"></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h1, null, \"echo \\\"x11-base/xorg-server udev\\\" >> /etc/portage/package.use\"), \"\\n\", React.createElement(_components.h1, null, \"emerge -av xorg-server\"), \"\\n\", React.createElement(_components.h1, null, \"env-update\"), \"\\n\", React.createElement(_components.h1, null, \"source /etc/profile\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">\\n## fglrx\\nhttp://wiki.gentoo.org/wiki/Fglrx\\nAMD A10 向けにfglrxドライバ\\n</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h1, null, \"cat /proc/cpuinfo | grep model\"), \"\\n\", React.createElement(_components.p, null, \"model name : AMD A10-5700 APU with Radeon(tm) HD Graphics\"), \"\\n\", React.createElement(_components.h1, null, \"lspci | grep -i vga\"), \"\\n\", React.createElement(_components.p, null, \"00:01.0 VGA compatible controller: Advanced Micro Devices [AMD] nee ATI Trinity [Radeon HD 7660D]\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">\\nkernel作り直し [Direct Rendering Manager]を無効にする。\\n</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h1, null, \"genkernel --lvm2 --menuconfig --no-clean all\"), \"\\n\", React.createElement(_components.p, null, \"VIDEO_CARDS=\\\"fglrx\\\"\"), \"\\n\", React.createElement(_components.h1, null, \"emerge xorg-drivers\"), \"\\n\", React.createElement(_components.h1, null, \"aticonfig --initial\"), \"\\n\", React.createElement(_components.h1, null, \"eselect opengl set ati\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">\\n## intel\\nVIDEO_CARDS=\\\"intel\\\"\\n\\n# Desktop\\n\\ngnomeとかをいれずにopenboxを素で使う。lxdeぽい感じ。\\n</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h1, null, \"emerge -av xterm xmodmap\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">\\nWindow Manager\\n# emerge -av openbox openbox-menu\\n\\nメニュー設定\\n./config/openbox/menu.xml\\n\\nDisplay Manager\\n# emerge -av lxdm\\n# vim /etc/conf.d/xdm\\n# /etc/init.d/xdm start\\n# rc-update add xdm default\\n\\nIME\\n# emerge -av scim-anthy\\n\\nFont\\n# emerge -av ricty\\n\\nTerm\\n# emerge -av xfce4-terminal\\n\\nTaskbar\\n# emerge -av tint2\\n\\nFiler\\n# pcmanfm -av pcmanfm\\n\\nDesktop関連のデーモン\\nUSEにconsolekit, dbus追加\\n# emerge --ask --changed-use --deep @world\\n# rc-update add consolekit default\\n# rc-update add dbus default\\n\\nCapsキーをControlに変更。\\n.Xmodmap\\n!!\\n!! Caps_Lock to Control\\n!!\\nremove Lock = Caps_Lock\\nadd Control = Caps_Lock\\nkeysym Caps_Lock = Control_L\\n\\nセッション\\n~/.xsession\\nxmodmap .Xmodmap\\n\\nexport LANG=ja_JP.UTF-8\\n# 日本語入力周り\\nexport XMODIFIERS=\\\"@im=SCIM\\\"\\nexport GTK_IM_MODULE=\\\"scim-bridge\\\"\\nexport QT_IM_MODULE=\\\"scim-bridge\\\"\\nscim -d &amp;\\n\\nexec ck-launch-session openbox-session\\n\\nTouchPad\\nhttp://wiki.gentoo.org/wiki/Synaptics\\n/etc/portage/make.conf\\nINPUT_DEVICES=\\\"synaptics\\\"\\n\\nemerge --ask --changed-use --deep world</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/05/21/xorg.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","span","p","h1","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
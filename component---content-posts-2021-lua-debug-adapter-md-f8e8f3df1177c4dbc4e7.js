"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5504],{7496:function(e,n,t){t.r(n);var l=t(1151),a=t(7294);function c(e){const n=Object.assign({p:"p",code:"code",pre:"pre",h2:"h2",h3:"h3"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"nvim の nvim-dap で lua をデバッグするべく自分で書いてみた。\n手頃なのが見つからなかったので。"),"\n",a.createElement(n.p,null,"https://github.com/ousttrue/my_nvim/blob/master/luada.lua"),"\n",a.createElement(n.p,null,"https://microsoft.github.io/debug-adapter-protocol/ の自前実装。"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"request")," のうち ",a.createElement(n.code,null,"initialize"),", ",a.createElement(n.code,null,"launch"),", ",a.createElement(n.code,null,"setBreakpoints"),", ",a.createElement(n.code,null,"configurationDone"),", ",a.createElement(n.code,null,"threads"),", ",a.createElement(n.code,null,"stackTrace"),", ",a.createElement(n.code,null,"scopes"),", ",a.createElement(n.code,null,"variables"),", ",a.createElement(n.code,null,"continue"),", ",a.createElement(n.code,null,"next")," を実装した。\n",a.createElement(n.code,null,"event")," のうち ",a.createElement(n.code,null,"initialized"),", ",a.createElement(n.code,null,"exited"),", ",a.createElement(n.code,null,"stopped(breakpoint, step)")," を実装した。"),"\n",a.createElement(n.p,null,"これで最低限の breakpoint を設定して止める、ステップ実行、変数表示までできた。"),"\n",a.createElement(n.p,null,"ログレベルを設定して"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-lua"},"require('dap').set_log_level('trace')\n")),"\n",a.createElement(n.p,null,"nvim の ",a.createElement(n.code,null,':lua print(vim.fn.stdpath "cache")')," に配置される ",a.createElement(n.code,null,"dap.log")," を観察したらだいたいできた。"),"\n",a.createElement(n.p,null,"nvim-dap の設定は以下。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-lua"},'local dap = require("dap")\n\nlocal luada = vim.api.nvim_get_var("my_nvim_root") .. "/luada.lua"\n\n-- luada adapter を登録\ndap.adapters.luada = {\n\t-- debug用のスクリプトを lua で実行し、標準入出力で DAP 通信(JSON-RPC)を開始する\n\ttype = "executable",\n\tcommand = vim.api.nvim_get_var("my_nvim_root") .. "/neovim/.deps/usr/bin/luajit.exe",\n\targs = { luada },\n}\n-- filetype lua のときに luada を使用する。launch の引数\ndap.configurations.lua = {\n\t{\n\t\tname = "lua debug adapter",\n\t\ttype = "luada",\n\t\trequest = "launch",\n\t\tprogram = "${fileDirname}\\\\${file}",\n\t\targs = { "a", "b", "c" },\n\t},\n}\n')),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"+---------+    DAP       +--------------------+\n| nvim dap|-------\x3estdin |luajit.exe luada.lua|\n|         |<-------stdout|                    |\n+---------+              +--------------------+\n                                              +==> loadscript(target_lua_script)\n")),"\n",a.createElement(n.p,null,"入出力を DAP で占有してしまうので、それでも大丈夫なスクリプトしかデバッグできない。\n(print 関数は、stderr に出力するように退避したので、",a.createElement(n.code,null,"dap.log")," には出る)"),"\n",a.createElement(n.p,null,"素の standalone の lua interpreter で簡単にできる範囲で実装する方針。"),"\n",a.createElement(n.h2,null,"はまりポイント"),"\n",a.createElement(n.h3,null,"Windows 版 は、",a.createElement(n.code,null,"io.stdout")," で ",a.createElement(n.code,null,"CR")," が ",a.createElement(n.code,null,"CRLF")," に変換されるのを回避できない。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-c++"},"setmode(_fileno(stdout),_O_BINARY);\n")),"\n",a.createElement(n.p,null,"を lua で呼び出す手段が無い。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"Content-Leght: 123\\n\\n\n")),"\n",a.createElement(n.p,null,"と出力して変換されるのに任せることにした。"),"\n",a.createElement(n.h3,null,"debug.sethook 内で coroutine.yield できない"),"\n",a.createElement(n.p,null,"https://stackoverflow.com/questions/54858455/lua-debug-hooks-seems-to-prevent-the-coroutine-from-working"),"\n",a.createElement(n.p,null,"breakpoint 等によるスクリプト中断を ",a.createElement(n.code,null,"coroutine.yield")," で実装しようとしたのだけど断念した。\n(yield すると ",a.createElement(n.code,null,"suspend")," にならずに ",a.createElement(n.code,null,"dead")," になる)"),"\n",a.createElement(n.p,null,"https://github.com/tomblind/local-lua-debugger-vscode は、coroutine で実装しているような気がするのだが・・・。"),"\n",a.createElement(n.p,null,"yield する代わりに main.loop をネストさせてそこで通信待機させることにした、"),"\n",a.createElement(n.h3,null,"launch で開始すると早すぎる"),"\n",a.createElement(n.p,null,"これは、 ",a.createElement(n.code,null,"nvim-dap")," の実装の問題のような気がするが、\ncapabilities に以下を設定して、 ",a.createElement(n.code,null,"configurationDone")," リクエストで自開始する。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-lua"},"supportsConfigurationDoneRequest = true,\n")),"\n",a.createElement(n.h2,null,"ToDo"),"\n",a.createElement(n.p,null,"luada リポジトリを作って vscode 拡張としてリリースする。"))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(c,e)):c(e)}},1151:function(e,n,t){t.d(n,{ah:function(){return c}});var l=t(7294);const a=l.createContext({});function c(e){const n=l.useContext(a);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---content-posts-2021-lua-debug-adapter-md-f8e8f3df1177c4dbc4e7.js.map
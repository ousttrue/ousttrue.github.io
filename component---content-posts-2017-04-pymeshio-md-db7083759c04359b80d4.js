"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9597],{5247:function(e,n,t){t.r(n);var r=t(1151),l=t(7294);function o(e){const n=Object.assign({p:"p"},(0,r.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.p,null,"はじめてのBlenderアドオン開発を読んでいる。pymeshioを更新してBlenderの作法にちゃんと適合させようというわけである。"),"\n",l.createElement(n.p,null,"最近、BlenderのAddOn管理ツールBlender-Add-on-Managerというのを見つけて、どういう動作をしているのか気になった。自作のpymeshioは出てくるのか見てみると出てこなかった。bl_infoの中のコメントの書き方が悪かったらしい。出てくるように直してインストールしてみた。今度はBlenderが発見してくれない。これは、Blenderの検索パスのくせのせいで.がパスに含まれていると出てこないということだった。そもそも、%USERPROFILE%/AppData/Roaming/Blender Foundation/Blender/2.78/scripts/addonsというようなパスにインストールする仕組みになっていることを知らなかったという。\nで、ツール経由でインストールしてみたのはいいのだがpymeshioは動かないな。\nBlender非依存のpythonライブラリ部分をコピーしなおす必要がある。\nむしろ、そっちの方が本体でBlenderはおまけだったという経緯があるのであるが、前からpymeshioのblenderプラグインのメンテナンス性の悪さはこのフォルダ構成が一因であった。この際addonsに直接cloneして動くような構成にする方がいいなぁ。新しいAddOnを再構築するか。\npymeshioはblenderから切り離して開発を継続する。pymeshioと新しいAddOnの共通部分の同期は手動コピペにするｗ\n計画"),"\n",l.createElement(n.p,null,"https://github.com/ousttrue/MmdUtility"),"\n",l.createElement(n.p,null,"[x] 0.1\nBlender-Add-on-Managerからインストールして動作するように構成する\n[x] 0.2\nbl.pyを除去する。確かbl.pyはblender2.4と2.6のギャップを埋めて、2.6初期のAPIの不安さを隠蔽するために作った。もはや無用の長物なので取り除く\n[x] 0.3\n物理の扱いを変える。"),"\n",l.createElement(n.p,null,"http://mrsoramame.jpn.org/archives/138\nhttps://github.com/12funkeys/rigid_bodys_gen"),"\n",l.createElement(n.p,null,"pymeshioを作ったときはBlenderの物理がよくわかっていなかった。\n[ ] 1.0\nVMD対応"))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?l.createElement(n,e,l.createElement(o,e)):o(e)}},1151:function(e,n,t){t.d(n,{ah:function(){return o}});var r=t(7294);const l=r.createContext({});function o(e){const n=r.useContext(l);return r.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---content-posts-2017-04-pymeshio-md-db7083759c04359b80d4.js.map
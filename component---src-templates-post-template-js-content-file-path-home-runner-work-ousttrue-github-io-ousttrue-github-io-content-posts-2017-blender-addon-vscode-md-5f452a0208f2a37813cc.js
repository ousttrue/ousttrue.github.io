"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3551],{2274:function(n,s,a){a.r(s),a.d(s,{default:function(){return k}});var t=a(1151),e=a(7294);function p(n){const s=Object.assign({p:"p",a:"a",span:"span",strong:"strong",h2:"h2"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(s.p,null,"VSCodeのリモートデバッグを利用してBlenderのPythonにデバッガをアタッチする。"),"\n",e.createElement(s.p,null,e.createElement(s.a,{href:"https://pypi.python.org/pypi/ptvsd"},"PTVSD")),"\n",e.createElement(s.p,null,"VisualStudioのPTVS向けのリモートデバッグモジュール。VSCodeも対応しているらしい。\nリモート側でptvsdをimportして待ち受けて、VisualStudio側からtcp経由でアタッチする。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> ptvsd\nptvsd<span class="token punctuation">.</span>enable_attach<span class="token punctuation">(</span>secret <span class="token operator">=</span> <span class="token string">\'secret\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">\'0.0.0.0\'</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> os <span class="token operator">!=</span> <span class="token string">\'Windows\'</span><span class="token punctuation">:</span>\n    ptvsd<span class="token punctuation">.</span>wait_for_attach<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># スクリプトが終わらないようにブロックする</span></code></pre></div>'}}),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">+--------------+\n|remoteのpython|\n|         ptvsd|tcp:3000 &lt;-- VisualStudio attach\n+--------------+</code></pre></div>'}}),"\n",e.createElement(s.p,null,"dos窓"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">> netstat -an | find "3000"\n  TCP         0.0.0.0:3000           0.0.0.0:0              LISTENING</code></pre></div>'}}),"\n",e.createElement(s.p,null,"確かに待っている。\nTCP経由なのでptvsd側が、LinuxやRasPi、Blenderの組み込みPythonなどなんであってもアタッチできる。\n素のPythonでやってみる"),"\n",e.createElement(s.p,null,"Windows10(64bit)\nPython-3.6\nPTVSD-3.0.0"),"\n",e.createElement(s.p,null,"PTVSDのバージョンが3.0.0でないと\nデバッグアダプタープロセスが予期せず終了しました。"),"\n",e.createElement(s.p,null,"等のエラーが出てうまくいかぬ。"),"\n",e.createElement(s.p,null,e.createElement(s.a,{href:"https://github.com/DonJayamanne/pythonVSCode/issues/1039"},"https://github.com/DonJayamanne/pythonVSCode/issues/1039")),"\n",e.createElement(s.p,null,"ptvsdのインストール"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">> py -3.6 -m pip install ptvsd==3.0.0</code></pre></div>'}}),"\n",e.createElement(s.p,null,"testプロジェクト"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">> mkdir ptvsd_test</code></pre></div>'}}),"\n",e.createElement(s.p,null,"VSCodeでptvsd_testフォルダを開く。\ntestスクリプト\nptvsd_test/main.py"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> time\n\n<span class="token comment"># PTVSDを準備する</span>\n<span class="token keyword">import</span> ptvsd\nlisten <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">\'0.0.0.0\'</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>\nptvsd<span class="token punctuation">.</span>enable_attach<span class="token punctuation">(</span><span class="token string">\'my_secret\'</span><span class="token punctuation">,</span> listen<span class="token punctuation">)</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'wait_for_attach...\'</span><span class="token punctuation">,</span> listen<span class="token punctuation">)</span>\nptvsd<span class="token punctuation">.</span>wait_for_attach<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># リモートデバッガの接続を待つ</span>\n\ntime<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 接続後少し待つ</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'connected\'</span><span class="token punctuation">)</span>\n\n<span class="token comment"># デバッグするコード</span>\ni <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    i <span class="token operator">+=</span> <span class="token number">1</span>\n    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">>py -3.6 main.py\nwait_for_attach... (\'0.0.0.0\', 3000)</code></pre></div>'}}),"\n",e.createElement(s.p,null,"VSCodeから接続\nptvsd_test/main.pyを開いてデバッグ開始。構成の追加でpythonを選択する。"),"\n",e.createElement(s.p,null,"ptvsd_test/.vscode/launch.json"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token comment">// IntelliSense を使用して利用可能な属性を学べます。</span>\n    <span class="token comment">// 既存の属性の説明をホバーして表示します。</span>\n    <span class="token comment">// 詳細情報は次を確認してください: https://go.microsoft.com/fwlink/?linkid=830387</span>\n    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>\n    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Python"</span><span class="token punctuation">,</span>\n            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"python"</span><span class="token punctuation">,</span>\n            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>\n            <span class="token property">"stopOnEntry"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            <span class="token property">"pythonPath"</span><span class="token operator">:</span> <span class="token string">"${config:python.pythonPath}"</span><span class="token punctuation">,</span>\n            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${file}"</span><span class="token punctuation">,</span>\n            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}"</span><span class="token punctuation">,</span>\n            <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token property">"envFile"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}/.env"</span><span class="token punctuation">,</span>\n            <span class="token property">"debugOptions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token string">"WaitOnAbnormalExit"</span><span class="token punctuation">,</span>\n                <span class="token string">"WaitOnNormalExit"</span><span class="token punctuation">,</span>\n                <span class="token string">"RedirectOutput"</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token comment">// これ</span>\n            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Python: Attach"</span><span class="token punctuation">,</span>\n            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"python"</span><span class="token punctuation">,</span>\n            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"attach"</span><span class="token punctuation">,</span>\n            <span class="token property">"localRoot"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}"</span><span class="token punctuation">,</span>\n            <span class="token property">"remoteRoot"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}"</span><span class="token punctuation">,</span>\n            <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>\n            <span class="token property">"secret"</span><span class="token operator">:</span> <span class="token string">"my_secret"</span><span class="token punctuation">,</span>\n            <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"localhost"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n        <span class="token comment">// 以降省略</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"デバッグの選択メニューでPython:Attachを選択。改めて開始。\nうまく接続できればデバッグコンソールにprintした内容が表示される。\nbreakポイントもステップ実行も可能。素晴らしい。\nBlenderのAddOnでやってみる"),"\n",e.createElement(s.p,null,e.createElement(s.a,{href:"https://github.com/Barbarbarbarian/Blender-VScode-Debugger"},"https://github.com/Barbarbarbarian/Blender-VScode-Debugger")),"\n",e.createElement(s.p,null,"これ。\nBlenderのPythonにptvsdをインストールする\nBlenderを起動して以下のスクリプトを実行する。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> sys\n<span class="token keyword">for</span> x <span class="token keyword">in</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"適当なパスを選んでそこにptvsd-3.0.0をコピーする。\nptvsd-3.0.0.zipをダウンロード。\n解凍してptvsdフォルダをBlenderのsys.pathに含まれていたC:/Program Files/Blender Foundation/Blenderにコピーした。\nBlender-VScode-Debuggerをインストールする"),"\n",e.createElement(s.p,null,"File - UserPreferences - Add-ons と潜ってinstall Add-on from FileボタンからBlender_VScode_Debugger.pyを選択する。\nAdd-onsからDevelopment: Debugger for Visual Codeを選択してチェックボックスをOnにする\n三角を押してPreferencesを展開、Path of PTVSD module:にptvsdをインストールしたパスを設定する(うちではC:/Program Files/Blender Foundation/Blender)\nSave - User Settings"),"\n",e.createElement(s.p,null,"実行してみる\n3DViewでspaceを押してConnect to Visual Studio Code Debuggerを選択。\ndos窓"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">> netstat -an | find "3000"\n  TCP         0.0.0.0:3000           0.0.0.0:0              LISTENING</code></pre></div>'}}),"\n",e.createElement(s.p,null,"待っている。\n試しにAddOnを作ってみる\n例えばWindows版のBlenderのAddOnパスは\nC:/Users/",e.createElement(s.strong,null,"USER_NAME"),"/AppData/Roaming/Blender Foundation/Blender/2.79/scripts/addons\nです。\nHello AddOnを作る。\nhello.pyとhello/",e.createElement(s.strong,null,"init"),".pyという選択肢があるが、後者で作る。\ngitやVSCodeを使うのだからフォルダが独立している方がよろしい。\nhelloフォルダを作って、VSCodeでフォルダを開いた。\nhello/",e.createElement(s.strong,null,"init"),".pyを作成。"),"\n",e.createElement(s.p,null,e.createElement(s.a,{href:"https://docs.blender.org/manual/en/dev/advanced/scripting/addon_tutorial.html"},"https://docs.blender.org/manual/en/dev/advanced/scripting/addon_tutorial.html")),"\n",e.createElement(s.p,null,"を参考に。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python">bl_info <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Move X Axis"</span><span class="token punctuation">,</span>\n    <span class="token string">"category"</span><span class="token punctuation">:</span> <span class="token string">"Object"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">import</span> bpy\n\n\n<span class="token keyword">class</span> <span class="token class-name">ObjectMoveX</span><span class="token punctuation">(</span>bpy<span class="token punctuation">.</span>types<span class="token punctuation">.</span>Operator<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">"""My Object Moving Script"""</span>      <span class="token comment"># Use this as a tool-tip for menu items and buttons.</span>\n    bl_idname <span class="token operator">=</span> <span class="token string">"object.move_x"</span>        <span class="token comment"># Unique identifier for buttons and menu items to reference.</span>\n    bl_label <span class="token operator">=</span> <span class="token string">"Move X by One"</span>         <span class="token comment"># Display name in the interface.</span>\n    bl_options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'REGISTER\'</span><span class="token punctuation">,</span> <span class="token string">\'UNDO\'</span><span class="token punctuation">}</span>  <span class="token comment"># Enable undo for the operator.</span>\n\n    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># execute() is called when running the operator.</span>\n\n        <span class="token comment"># The original script</span>\n        scene <span class="token operator">=</span> context<span class="token punctuation">.</span>scene\n        <span class="token keyword">for</span> obj <span class="token keyword">in</span> scene<span class="token punctuation">.</span>objects<span class="token punctuation">:</span>\n            obj<span class="token punctuation">.</span>location<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token number">1.0</span>\n\n        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">\'FINISHED\'</span><span class="token punctuation">}</span>            <span class="token comment"># Lets Blender know the operator finished successfully.</span>\n\n<span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    bpy<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>register_class<span class="token punctuation">(</span>ObjectMoveX<span class="token punctuation">)</span>\n\n\n<span class="token keyword">def</span> <span class="token function">unregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    bpy<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>unregister_class<span class="token punctuation">(</span>ObjectMoveX<span class="token punctuation">)</span>\n\n\n<span class="token comment"># This allows you to run the script directly from Blenders Text editor</span>\n<span class="token comment"># to test the add-on without having to install it.</span>\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>\n    register<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Blenderを再起動して、AddOnのチェックボックスを有効にする。\n3DViewでスペースを押してMove X by oneを実行してみる。\n動けば準備完了。\nAddOnをステップ実行してみる"),"\n",e.createElement(s.p,null,"3DViewでConnect to Visual Studio Code Debugger\nVSCodeで構成を追加してRemoteDebuggerでアタッチ"),"\n",e.createElement(s.p,null,"hello/.vscode/launch.json"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json">        <span class="token punctuation">{</span>\n            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Python: Attach"</span><span class="token punctuation">,</span>\n            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"python"</span><span class="token punctuation">,</span>\n            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"attach"</span><span class="token punctuation">,</span>\n            <span class="token property">"localRoot"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}"</span><span class="token punctuation">,</span>\n            <span class="token property">"remoteRoot"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}"</span><span class="token punctuation">,</span>\n            <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>\n            <span class="token property">"secret"</span><span class="token operator">:</span> <span class="token string">"my_secret"</span><span class="token punctuation">,</span>\n            <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"localhost"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"VSCodeでexecute関数のscene=context.sceneにbreak pointをセットする\n3DViewでMove X by one"),"\n",e.createElement(s.p,null,"うまくいった。"),"\n",e.createElement(s.h2,null,"Memo"),"\n",e.createElement(s.p,null,"Blenderプロセスが生きていればいいのでptvsd.wait_for_attach()する必要はない\nPythonのターンになるまで接続が処理されないので、VSCodeからアタッチした後AddOnを実行するまでVSCodeは待ち状態になる"))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?e.createElement(s,n,e.createElement(p,n)):p(n)},c=a(8678),l=a(1883),r=a(8838);const u={code:n=>{let{children:s,className:a}=n;return a?e.createElement(r.Z,{className:a},s):e.createElement("code",null,s)}};function i(n){let{data:s,children:a}=n;const p=s.mdx.frontmatter;return e.createElement(c.Z,null,e.createElement("h1",null,p.title),e.createElement("div",{className:"tags-index"},p.tags&&p.tags.length>0&&p.tags.map((n=>e.createElement(l.rU,{to:"/tags/"+n+"/",itemProp:"url"},e.createElement("button",null,n))))),e.createElement(t.Zo,{components:u},a))}function k(n){return e.createElement(i,n,e.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-blender-addon-vscode-md-5f452a0208f2a37813cc.js.map
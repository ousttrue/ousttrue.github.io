{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-06-cpp-11-rpc-md-0f0fcec66d7be6dc7acd.js","mappings":"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","sources":["webpack:///./content/posts/2017/06/cpp11_rpc.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"最近のC++(-std=c++14)でMessagePack-RPCを再実装してみる。\"), \"\\n\", React.createElement(_components.h1, null, \"基本設計\"), \"\\n\", React.createElement(_components.p, null, \"MessagePack-RPCの仕様をおさらいすると以下の通り。\"), \"\\n\", React.createElement(_components.p, null, \"request\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">[type, msgid, method, params]\\n (0)   (int)  (str)   (array)</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"response\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">[type, msgid, error, result]\\n (1)   (int)  (any)  (any)</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"msgpackのバイト列を受け取って、msgpackのバイト列を返す関数として一般化する。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token keyword\\\">typedef</span> std<span class=\\\"token double-colon punctuation\\\">::</span>vector<span class=\\\"token operator\\\">&lt;</span>std<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token keyword\\\">uint8_t</span><span class=\\\"token operator\\\">></span> bytes<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// msgpackのバイト列を引数にとり、msgpackのバイト列を返す</span>\\n<span class=\\\"token keyword\\\">typedef</span> std<span class=\\\"token double-colon punctuation\\\">::</span>function<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token function\\\">bytes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> <span class=\\\"token operator\\\">&amp;</span>bytes<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span> procedurecall<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"任意の関数呼び出しからprocedurecallを作り出せるようにして、MessagePack-RPCシステムの部品として使えるようにする。\\n簡単な例\\n例として\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token operator\\\">+</span>b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"をprocedurecallに変換してみる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\">procedurecall <span class=\\\"token function\\\">make_procedurecall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>f<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// request -> response ではなくparams -> result</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>f<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> bytes<span class=\\\"token operator\\\">&amp;</span> src<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-></span>bytes\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// unpack args</span>\\n        <span class=\\\"token keyword\\\">auto</span> parser <span class=\\\"token operator\\\">=</span> msgpackpp<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token function\\\">parser</span><span class=\\\"token punctuation\\\">(</span>src<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        std<span class=\\\"token double-colon punctuation\\\">::</span>tuple<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">></span> args<span class=\\\"token punctuation\\\">;</span>\\n        parser <span class=\\\"token operator\\\">>></span> args<span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\">// call</span>\\n        <span class=\\\"token keyword\\\">auto</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>std<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">get</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">0</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> std<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">get</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\">// pack result</span>\\n        msgpackpp<span class=\\\"token double-colon punctuation\\\">::</span>packer packer<span class=\\\"token punctuation\\\">;</span>\\n        packer <span class=\\\"token operator\\\">&lt;&lt;</span> r<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> packer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get_payload</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">int add(int, int)</code>\"\n    }\n  }), \" を \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">procedurecall</code>\"\n    }\n  }), \" に変換するというのは、引数のアンパック、関数呼び出し、結果のパックという一連の定型コードの呼び出しになる。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">procedurecall</code>\"\n    }\n  }), \" の使い方は以下の通り。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token comment\\\">// register</span>\\n<span class=\\\"token keyword\\\">auto</span> proc <span class=\\\"token operator\\\">=</span> msgpackpp<span class=\\\"token double-colon punctuation\\\">::</span>rpc<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token function\\\">make_procedurecall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>add<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// call</span>\\n<span class=\\\"token keyword\\\">auto</span> packer <span class=\\\"token operator\\\">=</span> msgpackpp<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token function\\\">packer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\npacker <span class=\\\"token operator\\\">&lt;&lt;</span> std<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token function\\\">make_tuple</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">auto</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">proc</span><span class=\\\"token punctuation\\\">(</span>packer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get_payload</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// result</span>\\n<span class=\\\"token function\\\">REQUIRE</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> msgpackpp<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token function\\\">parser</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">get_number</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"とりあえず動いたが、関数を増やすたびにこれだけのコードを記述するのはやってられませぬ。\\n以下のような理想形を目指して作りこんでゆく。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token function\\\">REQUIRE</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">msgpack_procedurecall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token operator\\\">+</span>b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">lambda</code>\"\n    }\n  }), \" が動けば他も動くようにできるので、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">lambda</code>\"\n    }\n  }), \" を第一に実装する。\"), \"\\n\", React.createElement(_components.h1, null, \"実装\"), \"\\n\", React.createElement(_components.p, null, \"ステップ毎に説明しようと思っていたが分かりにくいので、コードにコメントを追加することにした。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\">make_procedurecall\\n<span class=\\\"token keyword\\\">template</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">F</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">C</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>AS<span class=\\\"token punctuation\\\">,</span> std<span class=\\\"token double-colon punctuation\\\">::</span>size_t<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> IS<span class=\\\"token operator\\\">></span>\\nprocedurecall <span class=\\\"token function\\\">_make_procedurecall</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> F <span class=\\\"token operator\\\">&amp;</span>f\\n    <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">R</span><span class=\\\"token punctuation\\\">(</span>C<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>AS<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">const</span> <span class=\\\"token comment\\\">// template引数R, C, ASを受け付けるためのダミー</span>\\n    <span class=\\\"token punctuation\\\">,</span> std<span class=\\\"token double-colon punctuation\\\">::</span>index_sequence<span class=\\\"token operator\\\">&lt;</span>IS<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\">// template引数ISを受け付けるためのダミー</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// request -> response ではなくparams -> result</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>f<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> bytes<span class=\\\"token operator\\\">&amp;</span> src<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-></span>bytes\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// unpack args</span>\\n        <span class=\\\"token keyword\\\">auto</span> parser <span class=\\\"token operator\\\">=</span> msgpackpp<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token function\\\">parser</span><span class=\\\"token punctuation\\\">(</span>src<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        std<span class=\\\"token double-colon punctuation\\\">::</span>tuple<span class=\\\"token operator\\\">&lt;</span>AS<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">></span> args<span class=\\\"token punctuation\\\">;</span>\\n        parser <span class=\\\"token operator\\\">>></span> args<span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\">// call</span>\\n        <span class=\\\"token keyword\\\">auto</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>std<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">get</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span>IS<span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 可変長テンプレート引数を展開できる。ISと...が離れていることに注意</span>\\n\\n        <span class=\\\"token comment\\\">// pack result</span>\\n        msgpackpp<span class=\\\"token double-colon punctuation\\\">::</span>packer packer<span class=\\\"token punctuation\\\">;</span>\\n        packer <span class=\\\"token operator\\\">&lt;&lt;</span> r<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> packer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get_payload</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">template</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">F</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">C</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>AS<span class=\\\"token operator\\\">></span>\\nprocedurecall <span class=\\\"token function\\\">_make_procedurecall</span><span class=\\\"token punctuation\\\">(</span>F f\\n    <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">R</span><span class=\\\"token punctuation\\\">(</span>C<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>AS<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">const</span> <span class=\\\"token comment\\\">// template引数R, C, ASを受け付けるためのダミー</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">_make_procedurecall</span><span class=\\\"token punctuation\\\">(</span>f\\n        <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">&amp;</span><span class=\\\"token keyword\\\">decltype</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token punctuation\\\">)</span><span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token keyword\\\">operator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// lambdaの返り値と引数の型を次のテンプレートに渡す</span>\\n        <span class=\\\"token punctuation\\\">,</span> std<span class=\\\"token double-colon punctuation\\\">::</span>index_sequence_for<span class=\\\"token operator\\\">&lt;</span>AS<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// std::get呼び出しのためにindex_sequenceを作る。</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token comment\\\">// あらゆる型のlambdaを受け付けるようにした</span>\\n<span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token keyword\\\">template</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">F</span><span class=\\\"token operator\\\">></span>\\nprocedurecall <span class=\\\"token function\\\">make_procedurecall</span><span class=\\\"token punctuation\\\">(</span>F f<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">_make_procedurecall</span><span class=\\\"token punctuation\\\">(</span>f\\n        <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">&amp;</span><span class=\\\"token keyword\\\">decltype</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token punctuation\\\">)</span><span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token keyword\\\">operator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// lambdaの返り値と引数の型を次のテンプレートに渡す</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nmsgpack_call\\n<span class=\\\"token keyword\\\">template</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">F</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">C</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>AS<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token keyword\\\">decltype</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">auto</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">_msgpack_call</span><span class=\\\"token punctuation\\\">(</span>F f\\n    <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">R</span><span class=\\\"token punctuation\\\">(</span>C<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>AS<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">const</span> <span class=\\\"token comment\\\">// template引数R, C, ASを受けるためのダミー</span>\\n    <span class=\\\"token punctuation\\\">,</span> AS<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> args<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">auto</span> proc <span class=\\\"token operator\\\">=</span> msgpackpp<span class=\\\"token double-colon punctuation\\\">::</span>rpc<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token function\\\">make_procedurecall</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// call</span>\\n    msgpackpp<span class=\\\"token double-colon punctuation\\\">::</span>packer packer<span class=\\\"token punctuation\\\">;</span>\\n    packer <span class=\\\"token operator\\\">&lt;&lt;</span> std<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token function\\\">make_tuple</span><span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 可変長テンプレート引数を展開できる</span>\\n    <span class=\\\"token keyword\\\">auto</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">proc</span><span class=\\\"token punctuation\\\">(</span>packer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get_payload</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// unpack result</span>\\n    R value<span class=\\\"token punctuation\\\">;</span>\\n    msgpackpp<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token function\\\">parser</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">>></span> value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">template</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">F</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>AS<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token keyword\\\">decltype</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">auto</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">msgpack_call</span><span class=\\\"token punctuation\\\">(</span>F f<span class=\\\"token punctuation\\\">,</span> AS<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 返り値の型はreturnから型推論</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">_msgpack_call</span><span class=\\\"token punctuation\\\">(</span>f\\n    <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">&amp;</span><span class=\\\"token keyword\\\">decltype</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token punctuation\\\">)</span><span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token keyword\\\">operator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// lambdaの返り値と引数の型をテンプレート引数に渡す</span>\\n    <span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h1, null, \"使う。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token function\\\">REQUIRE</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token operator\\\">==</span><span class=\\\"token function\\\">msgpack_call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">REQUIRE</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">==</span><span class=\\\"token function\\\">msgpack_call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">valiadic template</code>\"\n    }\n  }), \" おそるべし。\\n従来であれば、1引数、２引数・・・と引数の個数ごとに手作業でバージョンを増やさねばならなかったものが、わりとさくっと書けるな。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/06/cpp11_rpc.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h1","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-com-wrl-md-30502620b41e75639bea.js","mappings":"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","sources":["webpack:///./content/posts/2017/com_wrl.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"古のATLのWindows8以降？版のWRLを使ってみる。\"), \"\\n\", React.createElement(_components.h2, null, \"IXMLHTTPRequest2を使うサンプルコードをベースにWRL化してみる。\"), \"\\n\", React.createElement(_components.p, null, \"ComPtr\\n何はともあれComPtrを取り入れる。\\nBefore\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"#include <Msxml6.h>\\n#pragma comment(lib, \\\"msxml6.lib\\\")\\n\\n#define SAFERELEASE(p){ if(p){p->Release(); p=nullptr;}}\\n\\nint main(int, char **)\\n{\\n    CoInitializeEx(NULL, COINITBASE_MULTITHREADED);\\n\\n    IXMLHTTPRequest2 *pXHR=nullptr;\\n    auto hr = CoCreateInstance(CLSID_FreeThreadedXMLHTTP60,\\n            NULL,\\n            CLSCTX_INPROC_SERVER,\\n            IID_PPV_ARGS(&pXHR));\\n    if (FAILED(hr)) {\\n        goto EXIT;\\n    }\\n\\nEXIT:\\n    SAFERELEASE(pXHR);\\n    CoUninitialize();\\n\\n    if (FAILED(hr)) {\\n        return 1;\\n    }\\n    return 0;\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"SAFERELEASEとgoto\"), \"\\n\", React.createElement(_components.p, null, \"ComPtrを取り入れてSAFERELEASEとgotoを除去しよう。\\nAfter\\nRAIIを取り入れて積極的にEarly Outできる(後始末が自動になったので)。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"#include <Msxml6.h>\\n#pragma comment(lib, \\\"msxml6.lib\\\")\\n#include <wrl/client.h>\\n\\n\\nclass ComInitializer\\n{\\npublic:\\n    ComInitializer()\\n    {\\n        CoInitializeEx(NULL, COINITBASE_MULTITHREADED);\\n    }\\n    ~ComInitializer()\\n    {\\n        CoUninitialize();\\n    }\\n};\\n\\nint main(int, char **)\\n{\\n    ComInitializer co;\\n\\n    Microsoft::WRL::ComPtr<IXMLHTTPRequest2> pXHR;\\n    auto hr = CoCreateInstance(CLSID_FreeThreadedXMLHTTP60,\\n            NULL,\\n            CLSCTX_INPROC_SERVER,\\n            IID_PPV_ARGS(&pXHR));\\n    if (FAILED(hr)) {\\n        return 1;\\n    }\\n\\n    return 0;\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"IUnknown実装とComPtr初期化\"), \"\\n\", React.createElement(_components.p, null, \"Callbackの定義等で自らComオブジェクトを定義する場合がある。\\nIXMLHTTPRequest2Callbackを実装する例。\\nBefore\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"class CCallback :public IXMLHTTPRequest2Callback\\n{\\n    ULONG m_cRef=1;\\n\\npublic:\\n    CCallback()\\n    {\\n    }\\n\\n    ~CCallback()\\n    {\\n    }\\n\\n    // IUnknown\\n    STDMETHODIMP_(ULONG) AddRef()override\\n    {\\n        InterlockedIncrement(&m_cRef);\\n        return m_cRef;\\n    }\\n\\n    STDMETHODIMP_(ULONG) Release()override\\n    {\\n        ULONG ulRefCount = InterlockedDecrement(&m_cRef);\\n        if (0 == m_cRef)\\n        {\\n            delete this;\\n        }\\n        return ulRefCount;\\n    }\\n\\n    STDMETHODIMP QueryInterface (REFIID riid, void **ppvObj)override\\n    {\\n        // Always set out parameter to NULL, validating it first.\\n        if (!ppvObj) return E_INVALIDARG;\\n\\n        *ppvObj = NULL;\\n        if (riid == IID_IUnknown \\n                || riid == IID_IXMLHTTPRequest2Callback \\n           )\\n        {\\n            // Increment the reference count and return the pointer.\\n            *ppvObj = (LPVOID)this;\\n            AddRef();\\n            return NOERROR;\\n        }\\n\\n        return E_NOINTERFACE;\\n    }\\n\\n    // IXMLHTTPRequest2Callback\\n    STDMETHODIMP OnRedirect(\\n        __RPC__in_opt IXMLHTTPRequest2 *pXHR,\\n        __RPC__in_string const WCHAR *pwszRedirectUrl)override\\n    {\\n        return E_NOTIMPL;\\n    }\\n\\n    STDMETHODIMP\\n        OnHeadersAvailable(\\n            __RPC__in_opt IXMLHTTPRequest2 *pXHR,\\n            DWORD dwStatus,\\n            __RPC__in_string const WCHAR *pwszStatus\\n        )override\\n    {\\n        return E_NOTIMPL;\\n    }\\n\\n    STDMETHODIMP\\n        OnDataAvailable(\\n            __RPC__in_opt IXMLHTTPRequest2 *pXHR,\\n            __RPC__in_opt ISequentialStream *pResponseStream\\n        )override\\n    {\\n        return E_NOTIMPL;\\n    }\\n\\n    STDMETHODIMP\\n        OnResponseReceived(\\n            __RPC__in_opt IXMLHTTPRequest2 *pXHR,\\n            __RPC__in_opt ISequentialStream *pResponseStream\\n        )override\\n    {\\n        return E_NOTIMPL;\\n    }\\n\\n    STDMETHODIMP\\n        OnError(\\n            __RPC__in_opt IXMLHTTPRequest2 *pXHR,\\n            HRESULT hrError\\n        )override\\n    {\\n        return E_NOTIMPL;\\n    }\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"IUnknownの実装(AddRef, Release, QueryInterface)が定型コードである\"), \"\\n\", React.createElement(_components.p, null, \"newしたときにリファレンスカウントが1であること、AddRef, Releaseを正しく実装する\\nQueryInterfaceを正しく実装する(あとでインタフェースを増減させたときに更新を忘れたりする)\"), \"\\n\", React.createElement(_components.p, null, \"ComPtrの初期化が不穏\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"Microsoft::WRL::ComPtr<CCallback> pCallback;\\n// RefCount=1のインスタンスを内部ポインタ(&演算子)に渡す\\n*((CCallback**)&pCallback)=new CCallback(); \\n\")), \"\\n\", React.createElement(_components.p, null, \"または、\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"Microsoft::WRL::ComPtr<CCallback> pCallback(new CCallback); // 1+1はRefCount=2\\npCallback.Get()->Release(); // 1に減らす\\n\")), \"\\n\", React.createElement(_components.p, null, \"のようなあからさまに不穏なコードを書かなければならない。\\n間違いの元である。\\nAfter\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"#include <wrl/implements.h>\\nclass CCallback :\\n    public Microsoft::WRL::RuntimeClass<\\n    Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::ClassicCom>, IXMLHTTPRequest2Callback>\\n{\\npublic: \\n    CCallback()\\n    {\\n    }\\n\\n    ~CCallback()\\n    {\\n    }\\n\\n    // IXMLHTTPRequest2Callback\\n    // 省略\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"とすることでIUnknownの実装をWRL::RuntimeClassに任せることができる。\\nまた、newによる初期化を禁止されるので、newではなくWRL::Makeを使う。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"error C2248: 'Microsoft::WRL::Details::DontUseNewUseMake::operator new': private メンバー (クラス 'Microsoft::WRL::Details::DontUseNewUseMake' で宣言されている) にアクセスできません。\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"Microsoft::WRL::ComPtr<CCallback> pCallback=Microsoft::WRL::Make<CCallback>();\\n\")), \"\\n\", React.createElement(_components.h2, null, \"MakeAndInitialize 初期化メソッド\"), \"\\n\", React.createElement(_components.p, null, \"Makeよりこっちの方がCom風。\\nRuntimeClassInitializeという名前のメンバ関数で初期化する。失敗した場合はS_OK以外を返す。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"class CCallback :\\n    public Microsoft::WRL::RuntimeClass<\\n    Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::ClassicCom>, IXMLHTTPRequest2Callback>\\n{\\npublic: \\n\\n    STDMETHODIMP RuntimeClassInitialize()\\n    {\\n        return S_OK;\\n    }\\n\\n};\\n\\nMicrosoft::WRL::ComPtr<CCallback> pCallback;\\nhr=Microsoft::WRL::MakeAndInitialize<CCallback>(&pCallback);\\nif (FAILED(hr)) {\\n    return 2;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"MakeAndInitialize 初期化メソッド(引数)\\n9つまでいける。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"    STDMETHODIMP RuntimeClassInitialize(DWORD value)\\n    {\\n        return S_OK;\\n    }\\n\\n    DWORD value = 255;\\n    Microsoft::WRL::ComPtr<CCallback> pCallback;\\n    hr=Microsoft::WRL::MakeAndInitialize<CCallback>(&pCallback, value);\\n    if (FAILED(hr)) {\\n        return 2;\\n    }\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/com_wrl.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
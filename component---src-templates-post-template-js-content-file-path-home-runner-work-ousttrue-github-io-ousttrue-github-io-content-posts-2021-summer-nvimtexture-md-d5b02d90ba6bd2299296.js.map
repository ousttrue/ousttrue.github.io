{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-summer-nvimtexture-md-d5b02d90ba6bd2299296.js","mappings":"8JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,OACNC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBV,EAAMW,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBX,EAAYG,EAAG,KAAMQ,EAAAA,cAAoBX,EAAYI,KAAM,CAC9HQ,wBAAyB,CACvBC,OAAQ,4CAER,wBAAyBF,EAAAA,cAAoBX,EAAYK,EAAG,CAC9DS,KAAM,gDACL,oBAAqB,2CAA4C,KAAMH,EAAAA,cAAoBX,EAAYG,EAAG,KAAM,2CAA4C,KAAMQ,EAAAA,cAAoBX,EAAYM,GAAI,KAAM,aAAc,KAAMK,EAAAA,cAAoBX,EAAYO,GAAI,KAAM,KAAMI,EAAAA,cAAoBX,EAAYQ,GAAI,KAAM,+CAAgD,KAAMG,EAAAA,cAAoBX,EAAYQ,GAAI,KAAM,kDAAmD,KAAMG,EAAAA,cAAoBX,EAAYQ,GAAI,KAAM,wDAAyD,KAAMG,EAAAA,cAAoBX,EAAYQ,GAAI,KAAM,qBAAsB,KAAMG,EAAAA,cAAoBX,EAAYQ,GAAI,KAAM,8BAA+B,MAAO,KAAMG,EAAAA,cAAoBX,EAAYI,KAAM,CAC/vBQ,wBAAyB,CACvBC,OAAQ,oTAER,KAAMF,EAAAA,cAAoBX,EAAYO,GAAI,KAAM,KAAMI,EAAAA,cAAoBX,EAAYQ,GAAI,KAAM,YAAa,KAAMG,EAAAA,cAAoBX,EAAYQ,GAAI,KAAM,qCAAsC,KAAMG,EAAAA,cAAoBX,EAAYQ,GAAI,KAAM,qBAAsB,MAAO,KAAMG,EAAAA,cAAoBX,EAAYM,GAAI,KAAM,UAAW,KAAMK,EAAAA,cAAoBX,EAAYO,GAAI,KAAM,KAAMI,EAAAA,cAAoBX,EAAYQ,GAAI,KAAM,cAAe,KAAMG,EAAAA,cAAoBX,EAAYQ,GAAI,KAAM,gBAAiB,MAAO,KAAMG,EAAAA,cAAoBX,EAAYM,GAAI,KAAM,YAAa,KAAMK,EAAAA,cAAoBX,EAAYG,EAAG,KAAM,iEACpnB,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOgB,QAASC,GAAaf,OAAOC,OAAO,CAAC,GAAGO,EAAAA,EAAAA,MAAsBV,EAAMW,YAC3E,OAAOM,EAAYL,EAAAA,cAAoBK,EAAWjB,EAAOY,EAAAA,cAAoBb,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCrBA,MAAMW,EAAa,CACjBO,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYT,EAAAA,cAAoBU,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYR,EAAAA,cAAoB,OAAQ,KAAMQ,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOZ,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMa,EAAKC,IAAIC,YAAYC,OAAQhB,EAAAA,cAAoBiB,EAAAA,GAAa,CAC7IlB,WAAYA,GACXS,GACL,CACe,SAASU,EAAiB9B,GACvC,OAAOY,EAAAA,cAAoBW,EAAcvB,EAAOY,EAAAA,cAAoBmB,EAAqB/B,GAC3F,C","sources":["webpack:///./content/posts/2021/summer/nvimtexture.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    a: \"a\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Nvy</code>\"\n    }\n  }), \" の改造をしてだいたい構造を理解した。\\n\", React.createElement(_components.a, {\n    href: \"https://github.com/ousttrue/msgpack-rpc-asio\"\n  }, \"msgpack-rpc-asio\"), \" をオーバーホールして使えるようになった。\\nということで一から組みなおすで。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/NvimTexture\"), \"\\n\", React.createElement(_components.h1, null, \"部品を疎結合にする\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Window(HWND, resize, keyboard, mouse event)\"), \"\\n\", React.createElement(_components.li, null, \"NvimPipe(stdin, stdout, msgpack-rpc transport)\"), \"\\n\", React.createElement(_components.li, null, \"EventDispatcher(WindowEvent と MsgPackRPCMessage の処理)\"), \"\\n\", React.createElement(_components.li, null, \"D3D DeviceManager\"), \"\\n\", React.createElement(_components.li, null, \"D3D Renderer(RenderTarget)\"), \"\\n\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">            +--------+\\n+----+ pipe |Renderer|redraw\\n|nvim|----->+--------+\\n|    |&lt;-----+------+\\n+----+      |Window|resize, keyboard, mouse event\\n            +------+</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"MainLoop\"), \"\\n\", React.createElement(_components.li, null, \"NvimMsgPackRPC Read-Dispatch Loop\"), \"\\n\", React.createElement(_components.li, null, \"RenderLoop(30FPS)\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"Sample\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"FullWindow\"), \"\\n\", React.createElement(_components.li, null, \"imgui と混在させる\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"20210910\"), \"\\n\", React.createElement(_components.p, null, \"それなりに動くようになった。\\nkey-logger や msgpack-rpc の通信ログを横に表示できるようにしたい。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/summer/nvimtexture.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","a","h1","ul","li","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
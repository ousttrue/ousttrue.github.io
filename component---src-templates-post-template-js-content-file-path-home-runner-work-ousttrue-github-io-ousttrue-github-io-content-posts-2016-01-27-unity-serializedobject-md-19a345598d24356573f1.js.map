{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2016-01-27-unity-serializedobject-md-19a345598d24356573f1.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,iCAAkC,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CACtKI,wBAAyB,CACvBC,OAAQ,67FAGd,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BCVA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,MAAME,EAAcD,EAAKE,IAAID,YAC7B,OAAOb,EAAAA,cAAoBe,EAAAA,EAAQ,KAAMf,EAAAA,cAAoB,KAAM,KAAMa,EAAYG,OAAQhB,EAAAA,cAAoB,MAAO,CACtHQ,UAAW,cACVK,EAAYI,MAAQJ,EAAYI,KAAKC,OAAS,GAAKL,EAAYI,KAAKE,KAAIC,GAClEpB,EAAAA,cAAoBqB,EAAAA,GAAM,CAC/BC,GAAI,SAASF,EAAG,IAChBG,SAAU,OACTvB,EAAAA,cAAoB,SAAU,KAAMoB,OACpCpB,EAAAA,cAAoBwB,EAAAA,GAAa,CACpCzB,WAAYA,GACXQ,GACL,CACe,SAASkB,EAAiBjC,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoB0B,EAAqBlC,GAC3F,C","sources":["webpack:///./content/posts/2016/01/27/unity_serializedobject.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Unity の SerializedObject のメモ。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">PropertyDrawers have two uses:\\n- Customize the GUI of every instance of a Serializable class.\\n- Customize the GUI of script members with custom PropertyAttributes.\\n\\nできることは２つ。\\nSerializeable classのPropertyDrawerを定義する。\\nPropertyAttributeを定義して既存のSerializable classのPropertyDrawerを差し替える。\\nNot Serializableなclassに対してPropertyDrawerを定義することはできぬ(TimeSpanとかね)。\\nPropertyDrawerを定義してみる\\nusing UnityEngine;\\n#if UNITY_EDITOR\\nusing UnityEditor;\\n#endif\\n\\npublic class SampleAttribute : PropertyAttribute\\n{\\n}\\n\\n#if UNITY_EDITOR\\n[CustomPropertyDrawer(typeof(SampleAttribute))]\\npublic class SampleDrawer : PropertyDrawer\\n{\\n    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)\\n    {\\n        var sampleAttribute = (SampleAttribute)attribute;\\n        Debug.Log(property);\\n        EditorGUI.PropertyField(position, property, new GUIContent(\\\"Hoge\\\"));\\n    }\\n}\\n#endif\\n\\npublic class SampleBehaviour : MonoBehaviour\\n{\\n    [Sample]\\n    public int Value;\\n}\\n\\nproperty.Path\\n(x:14.00, y:154.00, width:266.00, height:16.00) path: Value\\n\\nOnGUIでデバッグプリント\\n        Debug.LogFormat(\\\"{0} path: {1}\\\", position, property.propertyPath);\\n\\nなるほど。次のプロパティではどうか。\\n    [Sample]\\n    public List&lt;int> ValueArray;\\n\\n    [Sample]\\n    public List&lt;int> ValueList;\\n\\nOnGUIが呼ばれぬ。プリミティブ型以外はだめなのか？\\nかと思いきや中身に対して呼ばれることが分かった。\\n配列、Listの中身に対してPropertyDrawerが呼ばれる。\\n(x:14.00, y:208.00, width:258.00, height:16.00) path: ValueArray.Array.data[0]\\n(x:14.00, y:262.00, width:258.00, height:16.00) path: ValueList.Array.data[0]\\n\\nSerializable class\\npublic enum IngredientUnit { Spoon, Cup, Bowl, Piece }\\n\\n// Custom serializable class\\n[Serializable]\\npublic class Ingredient\\n{\\n    [Sample]\\n    public string name;\\n\\n    [Sample]\\n    public int amount = 1;\\n\\n    [Sample]\\n    public IngredientUnit unit;\\n}\\n\\n    public Ingredient ingredient;\\n\\n    public List&lt;Ingredient> ingredientList;\\n\\n(x:14.00, y:298.00, width:258.00, height:16.00) path: ingredient.name\\n(x:14.00, y:406.00, width:258.00, height:16.00) path: ingredientList.Array.data[0].name\\n\\nCustomEditor\\nデフォルトと同じ挙動。DrawDefaultInspector()の前後にボタンを追加したりできる。\\n[CustomEditor(typeof(SampleBehaviour))]\\npublic class ObjectGeneratorEditor : Editor\\n{\\n    public override void OnInspectorGUI()\\n    {\\n        DrawDefaultInspector();\\n    }\\n}\\n\\nSerializedObjectのPropertyを列挙してみる\\n    public override void OnInspectorGUI()\\n    {\\n        serializedObject.Update();\\n\\n        var it = serializedObject.GetIterator();\\n        bool hasNext = it.NextVisible(true);\\n        while(hasNext)\\n        {\\n            //Debug.Log(it.propertyPath);\\n            var expand = EditorGUILayout.PropertyField(it, false);\\n            hasNext=it.NextVisible(expand);\\n        }\\n\\n        serializedObject.ApplyModifiedProperties();\\n    }\\n\\n\\nEditorGUIの関数はpositionが必要\\nEditorGUILayoutはposition無用。</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2016/01/27/unity_serializedobject.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
{"version":3,"file":"component---content-posts-2015-11-20-starting-jade-md-eed5c97459abcd0c8f3a.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mSAAoS,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CACndI,UAAW,uBACV,4oCAAqqC,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,iCACztC,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECiBO,MAAMa,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,C","sources":["webpack:///./content/posts/2015/11/20/starting_jade.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"練習用に入手してきた”HTML5/CSS3 モダンコーディング”を写経しながら jade を取り入れてみる。\\nextend で layout を共有したかったので ejs から jade に取り換えてみた。\\nsass も取り入れようかと思ったが思いとどまった。\\nどんどん拡大・拡散していく gulp 環境なので控えめにしないと手に負えなくなりそうな感じだ。\\ngulp 向けに jade 適用 plugin(ejs 版の改造)を作ってみた。\\n既にそういうプラグインも存在していそうであるが、\\nこのくらいなら自作した方が早かったり。\\njade-applyer.js\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"var through = require(\\\"through2\\\");\\nvar gutil = require(\\\"gulp-util\\\");\\nvar fs = require(\\\"fs\\\");\\nvar jade = require(\\\"jade\\\");\\n\\nmodule.exports = function (options, map) {\\n  options = options || {};\\n  if (!options.filename) {\\n    throw new gutil.PluginError(\\\"jade-applyer\\\", \\\"`filename` required\\\");\\n  }\\n  options.pretty = true;\\n\\n  map = map || {};\\n\\n  return through.obj(function (file, enc, cb) {\\n    if (file.isStream()) {\\n      cb(new gutil.PluginError(\\\"jade-applyer\\\", \\\"Streaming not supported\\\"));\\n      return;\\n    }\\n\\n    try {\\n      //console.log(file.frontMatter);\\n      var template = fs.readFileSync(options.filename, \\\"utf-8\\\");\\n      var data = JSON.parse(JSON.stringify(file.frontMatter || {}));\\n      if (!file.isNull()) {\\n        data.page = file.contents.toString();\\n      }\\n      for (var key in map) {\\n        data[key] = map[key];\\n      }\\n      file.contents = new Buffer(jade.compile(template, options)(data));\\n      file.path = gutil.replaceExtension(file.path, \\\".html\\\");\\n      this.push(file);\\n    } catch (err) {\\n      this.emit(\\\"error\\\", new gutil.PluginError(\\\"jade-applyer\\\", err));\\n    }\\n\\n    cb();\\n  });\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"シンタックスハイライトも適用してある程度体裁が整ってきた。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
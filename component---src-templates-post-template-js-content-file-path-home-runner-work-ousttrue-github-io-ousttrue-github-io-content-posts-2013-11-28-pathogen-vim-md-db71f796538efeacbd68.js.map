{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-11-28-pathogen-vim-md-db71f796538efeacbd68.js","mappings":"8JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,YAAa,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CACjJI,wBAAyB,CACvBC,OAAQ,w/DAGd,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCXA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBa,EAAAA,EAAQ,KAAMb,EAAAA,cAAoB,KAAM,KAAMY,EAAKE,IAAIC,YAAYC,OAAQhB,EAAAA,cAAoBiB,EAAAA,GAAa,CACrIlB,WAAYA,GACXQ,GACL,CACe,SAASW,EAAiB1B,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoBmB,EAAqB3B,GAC3F,C","sources":["webpack:///./content/posts/2013/11/28/pathogen_vim.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"vim 環境整備\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Windows8でコーディングができるようにvim回りを整備する。\\nコマンドライン環境としてPowerShellを採用してそこからvim(gvim)する方向性。\\n前の日記を整理して書き直し。\\nPowerShellを使えるようにしてvimとgitをインストールする\\nPowerShellを管理者権限で実行して以下のように実行する。\\npowershell> Set-ExecutionPolicy RemoteSigned\\n\\nパッケージ管理として Chocolatey\\nをインストール。dos窓で以下のように実行する。\\ndos> @powershell -NoProfile -ExecutionPolicy unrestricted -Command \\\"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\\\" &amp;&amp; SET PATH=%PATH%;%systemdrive%\\\\chocolatey\\\\bin\\n\\npowershellの設定ファイル作成する。shellの.profileに相当するファイル。\\n\\nC:/Users/_USER_NAME_/Documents/WindowsPowerShell/Microsoft.PowerShell_profile.ps1\\n\\nとりあえずwhichコマンド的な関数を書いておく\\nfunction which([string] $command=$(throw \\\"need command name\\\")){\\n    $Env:Path.Split(\\\";\\\") | %{ ls $_  2> $null } | ?{ $_.Name -match \\\"^$command\\\" } | % { $_.FullName }\\n}\\n\\n改めてPowerShellを起動してchocolateyでvimをインストールする\\npowershell> cinst vim\\n\\ngitも入れる。\\npowershell> cinst git\\n\\ncinstの実行直後はいろいろPathが通っていなかったりして使えない場合があるのでその場合はpowershellを再起動。\\nvimを整備する\\nNerdTreeを入れようと思ったらpathogen.vim使えと書いてあったのでpathogen.vim入れる。\\npowershell> cd $HOME\\npowershell> mkdir vimfiles\\npowershell> cd vimfiles\\npowershell> mkdir autoload, bundle\\npowershell> git init\\n\\npathogen.vim\\nを入れる。downloadしてvimfiles/autoload/pathogen.vimに保存する。\\npowershell> git add .\\npowershell> git commit -m init\\n\\nとりあえずgitに登録した。\\n_vimrc\\nexecute pathogen#infect()\\nsyntax on\\nfiletype plugin indent on\\n\\ncolorscheme darkblue\\n\\nset hidden\\nset nobackup\\n\\n_gvimrc\\ncolorscheme desert\\n\\nset iminsert=0\\nset imsearch=-1\\nset visualbell t_vb=\\n\\nset columns=100\\nset lines=56\\n\\nNerdTree\\nNerdTree をgit\\nsubmoduleとしてインストールする。\\npowershell> cd vimfiles/bundle\\npowershell> git submodule add https://github.com/scrooloose/nerdtree.git\\n\\n以上でvim環境が始動した。\\n追記\\nWindowsだとNerdTreeの[m]キーのメニューにcopyが出ない問題があったがstackoverflowに\\n原因と解決方法が書いてあった。\\nhttp://stackoverflow.com/questions/11269926/nerdtree-copy-command-in-windows-7</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/11/28/pathogen_vim.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
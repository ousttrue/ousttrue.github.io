{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-cppwinrt-uwp-md-41c53397a0bdab53bae8.js","mappings":"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","sources":["webpack:///./content/posts/2017/cppwinrt_uwp.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"C++/CX を置き換えるよさげなライブラリ C++WinRT を発見した。\"), \"\\n\", React.createElement(_components.p, null, \"C++/CX の機能を純粋な C++(C++17 とか新しめの)で実装したものらしく、WinRT の C++バインディングのような位置。\\nC++/CX で\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"Windows::UI::Core::CoreWindow ^window;\\n\")), \"\\n\", React.createElement(_components.p, null, \"のようなものを\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"#include <winrt/Windows.UI.Core.h>\\nwinrt::Windows::UI::Core::Core window;\\n\")), \"\\n\", React.createElement(_components.p, null, \"のように置き換える。\", React.createElement(_components.code, null, \"-> \"), \"じゃなくて \", React.createElement(_components.code, null, \".\"), \" を使うスマートポインタで実装されている。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Migrating C++/CX source code to C++/WinRT\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"C++/CX で async, await な非同期を実装する道具だった PPL もうまく置き換えているようだ。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Using C++ co-routines with C++/WinRT asynchronous methods\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"やってみる\\nclone\\nhttps://github.com/Microsoft/cppwinrtをcloneしてincludeできるようにしておく。\\nC++WinRT はヘッダオンリーライブラリである。\\nビルド確認\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/Microsoft/cppwinrt/tree/master/10.0.15063.0/Samples/CL\"), \"\\n\", React.createElement(_components.p, null, \"をベース。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"// main.cpp\\n#pragma comment(lib, \\\"windowsapp\\\")\\n\\n#include <winrt/base.h>\\n\\nint __stdcall wWinMain(HINSTANCE, HINSTANCE, PWSTR, int)\\n{\\n    winrt::init_apartment();\\n\\n    return 0;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"あえて CMake で。\\nCMakeLists.txt\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cmake\"\n  }, \"CMAKE_MINIMUM_REQUIRED(VERSION 3.5)\\nPROJECT(RendererToolkit) # .sln\\n\\nADD_DEFINITIONS(\\n    -DWIN32=1\\n    -DUNICODE=1\\n    -D_UNICODE=1\\n    )\\n\\nSET(CMAKE_C_FLAGS \\\"/ZW /EHsc /await /std:c++latest\\\")\\nSET(CMAKE_CXX_FLAGS ${CMAKE_C_FLAGS})\\nINCLUDE_DIRECTORIES(\\n    # 適当にcloneしたパスを参照\\n    ${CMAKE_CURRENT_LIST_DIR}/cppwinrt/10.0.15063.0\\n    )\\n\\n##############################################################################\\n# project\\n##############################################################################\\nSET(PROJECTNAME _SampleCoreWindow)\\n\\nFILE(GLOB SRCS *.cpp *.h)\\n\\nADD_EXECUTABLE(${PROJECTNAME} WIN32 ${SRCS})\\n\\nTARGET_INCLUDE_DIRECTORIES(${PROJECTNAME} PUBLIC\\n    ${SUBRENDERER_INCLUDE}\\n    )\\n\")), \"\\n\", React.createElement(_components.p, null, \"UWP をターゲットにしたプロジェクトを生成する。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"> mkdir build\\n> cd build\\nbuild> cmake.exe -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -DCMAKE_C_FLAGS=/ZW /EHsc -G \\\"Visual Studio 15 2017 Win64\\\" ..\\n\")), \"\\n\", React.createElement(_components.p, null, \"ビルドすると警告が出る。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"warning C4447: スレッド モデルのない 'main' シグネチャが見つかりました。'int main(Platform::Array<Platform::String^>^ args)' の使用を検討してください。\\n\")), \"\\n\", React.createElement(_components.p, null, \"以下のように属性をつければ外せた。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"[Platform::MTAThread]\\nint __stdcall wWinMain(HINSTANCE, HINSTANCE, PWSTR, int)\\n\")), \"\\n\", React.createElement(_components.p, null, \"Debug - X64 - ローカルコンピューター でアプリが起動して、即終了することが確認できればよし。\\nUWP の作法で空の App を作ってみる\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"#pragma comment(lib, \\\"windowsapp\\\")\\n\\n#include <winrt/Windows.ApplicationModel.Core.h>\\n#include <winrt/Windows.UI.Core.h>\\n\\n//\\n// IFrameworkViewSourceとIFrameworkViewを一体化させるのは必要(ばらすとエラーになった)\\n//\\nstruct App : winrt::implements<App\\n    , winrt::Windows::ApplicationModel::Core::IFrameworkViewSource\\n    , winrt::Windows::ApplicationModel::Core::IFrameworkView>\\n{\\n    winrt::Windows::ApplicationModel::Core::IFrameworkView CreateView()\\n    {\\n        return *this;\\n    }\\n\\n    void Initialize(winrt::Windows::ApplicationModel::Core::CoreApplicationView const&)\\n    {\\n    }\\n\\n    void Load(winrt::hstring const&)\\n    {\\n    }\\n\\n    void Uninitialize()\\n    {\\n    }\\n\\n    void Run()\\n    {\\n        auto window = winrt::Windows::UI::Core::CoreWindow::GetForCurrentThread();\\n        window.Activate();\\n\\n        //\\n\\n        auto dispatcher = window.Dispatcher();\\n        dispatcher.ProcessEvents(winrt::Windows::UI::Core::CoreProcessEventsOption::ProcessUntilQuit);\\n    }\\n\\n    void SetWindow(winrt::Windows::UI::Core::CoreWindow const&)\\n    {\\n\\n    }\\n};\\n\\n\\nint __stdcall wWinMain(HINSTANCE, HINSTANCE, PWSTR, int)\\n{\\n    winrt::init_apartment();\\n\\n    winrt::Windows::ApplicationModel::Core::CoreApplication::Run(App());\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"警告とは無関係に、実行に\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"[Platform::MTAThread]\"), \" か \", React.createElement(_components.code, null, \"winrt::init_apartment();\"), \" のどちらかが必要？\"), \"\\n\", React.createElement(_components.p, null, \"IUnknown*を得る\\nwinrt::get_abi\\nメモ\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/Kitware/CMake/blob/master/Tests/VSWinStorePhone/CMakeLists.txt\"), \"\\n\", React.createElement(_components.p, null, \"VisualStudio2017 の C++/CX Universal D3D11 のテンプレートを C++/WinRT バージョンに改造できた。間違ってもコンパイルが通って実行時エラーになるのに難儀したが、C++/CX よりはだいぶ使い勝手がよさげな感じ。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/cppwinrt_uwp.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","ul","li","_provideComponents","components","React","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-12-21-node-self-build-md-c15c26e641858ce63623.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6FAA8F,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,89IACvR,CAKA,MAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCTA,SAASY,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOJ,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMK,EAAKE,IAAIC,YAAYC,OAAQT,EAAAA,cAAoBU,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBpB,GACvC,OAAOS,EAAAA,cAAoBG,EAAcZ,EAAOS,EAAAA,cAAoBY,EAAqBrB,GAC3F,C,4HCuBO,MAAMsB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBf,GAC/B,MAAMgB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfd,EACFA,EAAWgB,GAGb,IAAIA,KAAsBhB,IAChC,CAACgB,EAAmBhB,GACzB,CAGA,MAAMiB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACX,EAAU,SAAEO,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAflB,EACHA,EAAW,CAAC,GACZA,GAAciB,EAEJF,EAAiBf,GAG5B,gBACLc,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2015/12/21/node_self_build.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"謎のクラッシュ(FFI でネイティブプラグインがアクセス違反で死ぬ)を追跡するため、\\nVC のデバッガをアタッチするべく自前ビルドする。\\nnode-v5.3.0.tar.xz\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"7zipで解凍。\\npython2系にpathを通してvcbuild.batをたたく。\\n> vcbuild.bat\\n\\nv8もlibuvも全部入りらしくあっさりとほぼビルドできた。\\nSignTool Error: No certificates were found that met all the given criteria.\\nFailed to sign exe\\n\\ndocument\\nhttps://github.com/nodejs/node-v0.x-archive/wiki/Installation#building-on-windows\\ndebugビルドの作り方はこう。\\n> vcbuild.bat nosign debug\\n\\nnodeをデバッグ実行\\n\\nnode-v5.3.0にnode.slnができているのでこれをVisualStudio2015で開く。\\nnodeをスタートアッププロジェクトに指定\\nnodeの設定のdebugタブで、カレントディレクトリとコマンドライン引数を指定\\nf5\\n\\n例外が再現した\\nvoid CallbackInfo::DispatchToV8(callback_info *info, void *retval, void **parameters, bool dispatched) {\\n  Nan::HandleScope scope;\\n\\n  static const char* errorMessage = \\\"ffi fatal: callback has been garbage collected!\\\";\\n\\n  if (info->function == NULL) {\\n    // throw an error instead of segfaulting.\\n    // see: https://github.com/rbranson/node-ffi/issues/72\\n    if (dispatched) {\\n        Local<Value> errorFunctionArgv[1];\\n        errorFunctionArgv[0] = Nan::New<String>(errorMessage).ToLocalChecked();\\n        info->errorFunction->Call(1, errorFunctionArgv);\\n    }\\n    else {\\n      Nan::ThrowError(errorMessage);\\n    }\\n  } else {\\n    // invoke the registered callback function\\n    Local<Value> functionArgv[2];\\n    functionArgv[0] = WrapPointer((char *)retval, info->resultSize);\\n    functionArgv[1] = WrapPointer((char *)parameters, sizeof(char *) * info->argc);\\n    Local<Value> e = info->function->Call(2, functionArgv); // <-- ここ。functionがnullptrになってるよ!\\n    if (!e->IsUndefined()) {\\n      if (dispatched) {\\n        Local<Value> errorFunctionArgv[1];\\n        errorFunctionArgv[0] = e;\\n        info->errorFunction->Call(1, errorFunctionArgv);\\n      } else {\\n        Nan::ThrowError(e);\\n      }\\n    }\\n  }\\n}\\n\\nううむ。if文でnullチェックしてるのにelse側に落ちてるな。矢張りスレッドとかGCが絡んでいそうな気がするぞ。\\nちょうどnode-ffiでjavascriptのコールバックを呼び出しているところなのではないか。\\nコールスタック\\n>   ffi_bindings.node!CallbackInfo::DispatchToV8(_callback_info * info, void * retval, void * * parameters, bool dispatched) 行 73   C++\\n    ffi_bindings.node!CallbackInfo::WatcherCallback(uv_async_s * w, int revents) 行 94   C++\\n    node.exe!uv_process_async_wakeup_req(uv_loop_s * loop, uv_async_s * handle, uv_req_s * req) 行 97    C\\n\\nよく見るとまさにffi_bindings.node(node-ffiのネイティブプラグイン)内で問題が発生している。\\n呼び出しスレッドはメインスレッドか・・・。\\n何回も試してみると例外がむしろdllのスレッド側で起こることの方が多い。\\n他にWaitSingleObjectがstdcallの関数をスレッド実行しているものが４本。\\nひょっとして、コールバックの頻度が高すぎなんじゃないのか・・・。\\ncallback_infoはffiの構造体。こいつのデストラクタが呼ばれているのが確認できれば手がかりになるな。\\nで、callback_info->functionを解放する下記の部分がメインスレッドから呼ばれて、その後に\\nスレッドからのコールバック呼び出しがクラッシュしているらしいことを発見。\\nnode_modules/ffi/src/callback_info.cc\\n/*\\n * Called when the `ffi_closure *` pointer (actually the \\\"code\\\" pointer) get's\\n * GC'd on the JavaScript side. In this case we have to unwrap the\\n * `callback_info *` struct, dispose of the JS function Persistent reference,\\n * then finally free the struct.\\n */\\n\\nvoid closure_pointer_cb(char *data, void *hint) {\\n  callback_info *info = reinterpret_cast<callback_info *>(hint);\\n  // dispose of the Persistent function reference\\n  delete info->function;\\n  info->function = NULL;\\n  // now we can free the closure data\\n  ffi_closure_free(info);\\n}\\n\\nコールスタック\\n>   ffi_bindings.node!closure_pointer_cb(char * data, void * hint) 行 42 C++\\n    node.exe!node::Buffer::CallbackInfo::WeakCallback(v8::Isolate * isolate, v8::Local<v8::Object> object) 行 159    C++\\n\\n     省略\\n\\n    node.exe!v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace space, const char * gc_reason, const v8::GCCallbackFlags callbackFlags) 行 556 C++\\n\\n     省略\\n\\n    node.exe!node::Buffer::New(v8::Isolate * isolate, char * data, unsigned int length, void (char *, void *) * callback, void * hint) 行 347    C++\\n    binding.node!`anonymous namespace'::WrapPointer(char * ptr, unsigned int length) 行 147  C++\\n    binding.node!`anonymous namespace'::ReadPointer(const Nan::FunctionCallbackInfo<v8::Value> & info) 行 261    C++\\n    binding.node!Nan::imp::FunctionCallbackWrapper(const v8::FunctionCallbackInfo<v8::Value> & info) 行 174  C++\\n\\nなんか、GCが発動して回収されちゃっているぽい？\\n2015/09/20\\n* Nodejs GC is crashing when a C function is returning NULL\\nむしろこっちか\\n2015/11/05\\n* Node.js v5.0.0でnode-ffiやNodObjCが動かない\\nしかし、うちのnode.jsは\\n> node --version\\nv5.3.0\\n\\nうむ。\\nむしろこっちか\\n2015/09/15\\n* ffi.Function underlying Callback is garbage collected\\n死ななくなった。これっぽいな。\\n64bit版で試してみる\\nこれはこれで死ぬ。\\nまとめ\\n\\nnode-ffiのFunctionでGCに回収されてしまう書き方のところがある(FFI.Function内)\\n32bit版のnode-ffiではSTDCALLを指定できる(ABI=2)\\n64bit版のnode-ffiではIA64にされるのでSTDCALLは動かぬ\\n\\ngypでのIA64とX64の扱いの違いがわかったら修正できるかな。\\nX86_WIN32の時にFFI_STDCALLを定義する修正をプルリクしてみよう。\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2015/12/21/node_self_build.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9418],{696:function(e,n,t){t.r(n);var l=t(1151),a=t(7294);function o(e){const n=Object.assign({p:"p",pre:"pre",code:"code"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"何のことか分かりにくいが以下のコードで再現できる。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-csharp"},"public int m_count;\n\nvoid OnRender(int eventID)\n{\n    m_count++;\n}\n\nvoid Update()\n{\n    var p = Marshal.GetFunctionPointerForDelegate(OnRender);\n    GL.IssuePluginEvent(p, 0);\n}\n")),"\n",a.createElement(n.p,null,"SharpDX を Unity 上で使うべく GL.IssuePluginEvent に C#の Delegate を渡す実験をしていた。これをやると、Editor 終了時もしくは次回 play 時に UnityEditor が Freeze する(100%)。Unity5.5.3 と Unity2017.1.0beta1 で再現した。\n調べてみたところ、"),"\n",a.createElement(n.p,null,"https://forum.unity3d.com/threads/problem-with-callbacks.87513/"),"\n",a.createElement(n.p,null,"が該当しそうかと思ったがちょっと違う。新しいスレッドを起こしている訳では無いので。 ただ、条件は下記の通り"),"\n",a.createElement(n.p,null,"C#の delegate を関数ポインタとして C に渡す\nその関数ポインタが異なるスレッドから呼び出される"),"\n",a.createElement(n.p,null,"次に"),"\n",a.createElement(n.p,null,"https://blog.tedd.no/2016/10/09/investigating-unity-hang-on-second-run-multi-threading/"),"\n",a.createElement(n.p,null,"を当たった。ここで紹介している visualstudio の debug - window - 並列スタックで状況を確認する手法を使ってみたところ以下のようになっていた。"),"\n",a.createElement(n.p,null,"mono_domain_unload が固まっているような気がするぞ。"),"\n",a.createElement(n.p,null,"http://stackoverflow.com/questions/10138015/unloading-mono-domains-in-multithreaded-context"),"\n",a.createElement(n.p,null,"mono が delegate から関数ポインタを作るのに使っているらしい invoke wrappers の周りの回収に失敗しているのではないかというような気がする。"),"\n",a.createElement(n.p,null,"http://d.hatena.ne.jp/saiya_moebius/20090319/1237434037"),"\n",a.createElement(n.p,null,"Unity 上で打つ手は見つからなかった・・・"))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(o,e)):o(e)}},1151:function(e,n,t){t.d(n,{ah:function(){return o}});var l=t(7294);const a=l.createContext({});function o(e){const n=l.useContext(a);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---content-posts-2017-04-mono-domain-unload-md-ad9d9309f8b4c45b78d8.js.map
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[465],{657:function(e,n,t){t.r(n),t.d(n,{default:function(){return d}});var l=t(1151),a=t(7294);function r(e){const n=Object.assign({h1:"h1",p:"p",a:"a",span:"span",h2:"h2"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h1,null,"ExampleBrowser を読んでいる"),"\n",a.createElement(n.p,null,"fork して改造しながら読んでいる。"),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://github.com/ousttrue/bullet3"},"https://github.com/ousttrue/bullet3")),"\n",a.createElement(n.p,null,"やっと構造がわかってきた。\nコードはディレクトリに別れているのだけど、\nCMake を整理しながら推進。"),"\n",a.createElement(n.p,null,"ざっくりとこんな感じか。"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">rankdir="BT"\n\nExampleBrowser -> SimpleOpenGL3App -> gwen -> "Select DEMO";\n</code></pre></div>'}}),"\n",a.createElement(n.p,null,"で、この SimpleOpenGL3App を glfw に、gwen を imgui に置き換えてコードを単純化している。\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">bulletphysic</code>'}})," の マルチクライアント システム ぽい ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">SharedMemory</code>'}})," を解読したい。\n各 Demo は、 ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">CommonExampleInterface</code>'}})," できれいに分離されている。\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">SharedMemory</code>'}})," と各クライアントの通信内容と ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">OpenGL</code>'}})," の繋ぎの部分が知りたい。"),"\n",a.createElement(n.p,null,"この pybullet の下地の部分がシーン同期システムに使えないかと。\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Unity</code>'}})," とかだとノードに剛体をくっつけるのだけど、\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">bullet</code>'}})," 的には、剛体に ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Mesh</code>'}})," をつける考えになるような。"),"\n",a.createElement(n.h2,null,"20220118"),"\n",a.createElement(n.p,null,a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">各デモ</code>'}})," と ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Physics</code>'}})," と ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Renderer</code>'}})," を分離できればよいのだが。\nわりと規模が大きい。"),"\n",a.createElement(n.h2,null,"20220122"),"\n",a.createElement(n.p,null,"だいぶ読んだ。",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">GLInstancingRenderer</code>'}})," がレンダラー本体。\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">btIDebugDraw</code>'}})," とは別に普通の Renderer が実装されていてこっちを解読したい。\nbtIDebugDraw だと wireframe になるのかな。"))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(r,e)):r(e)},s=t(8678),u=t(1883),m=t(8838);const o={code:e=>{let{children:n,className:t}=e;return t?a.createElement(m.Z,{className:t},n):a.createElement("code",null,n)}};function g(e){let{data:n,children:t}=e;const r=n.mdx.frontmatter;return a.createElement(s.Z,null,a.createElement("h1",null,r.title),a.createElement("div",{className:"tags-index"},r.tags&&r.tags.length>0&&r.tags.map((e=>a.createElement(u.rU,{to:"/tags/"+e+"/",itemProp:"url"},a.createElement("button",null,e))))),a.createElement(l.Zo,{components:o},t))}function d(e){return a.createElement(g,e,a.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-0115-pybullet-md-53463c697472b3e0330b.js.map
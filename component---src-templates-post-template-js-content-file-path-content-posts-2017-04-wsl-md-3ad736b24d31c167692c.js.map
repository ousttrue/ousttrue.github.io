{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2017-04-wsl-md-3ad736b24d31c167692c.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,wDAAyD,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAC7LI,wBAAyB,CACvBC,OAAQ,83FAGd,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BCVA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,MAAME,EAAcD,EAAKE,IAAID,YAC7B,OAAOb,EAAAA,cAAoBe,EAAAA,EAAQ,KAAMf,EAAAA,cAAoB,KAAM,KAAMa,EAAYG,OAAQhB,EAAAA,cAAoB,MAAO,CACtHQ,UAAW,cACVK,EAAYI,MAAQJ,EAAYI,KAAKC,OAAS,GAAKL,EAAYI,KAAKE,KAAIC,GAClEpB,EAAAA,cAAoBqB,EAAAA,GAAM,CAC/BC,GAAI,SAASF,EAAG,IAChBG,SAAU,OACTvB,EAAAA,cAAoB,SAAU,KAAMoB,OACpCpB,EAAAA,cAAoBwB,EAAAA,GAAa,CACpCzB,WAAYA,GACXQ,GACL,CACe,SAASkB,EAAiBjC,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoB0B,EAAqBlC,GAC3F,C","sources":["webpack:///./content/posts/2017/04/wsl.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Windows SubSystem for Linux\\nわりとよくなっていそうな感じなので使ってみる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">wsltty導入\\nminttyにwslビルド(wslbridge同梱)という素敵インストーラが提供されていた。\\nインストーラーを実行したらショートカットができる。片方のショートカットの末尾に”–login”を追加して、”~/.profile”が実行されるようにした。\\n%LOCALAPPDATA%\\\\wsltty\\\\bin\\\\mintty.exe --wsl -o Locale=C -o Charset=UTF-8 /bin/wslbridge -C~ -t /bin/bash --login\\n\\n\\nhttps://github.com/mintty/wsltty\\n\\n.profile\\nコメントイン\\numask 022\\n\\ninputrc\\n\\\"\\\\C-n\\\":history-search-forward\\n\\\"\\\\C-p\\\":history-search-backward\\nset bell-style none\\n\\n.tmux.conf\\nset -g prefix C-l\\nbind C-l send-prefix\\nunbind C-b\\nset -sg escape-time 1\\nbind r source-file ~/.tmux.conf \\\\; display \\\"Reloaded!\\\"\\n\\nset-option -g default-terminal screen-256color\\nset -g terminal-overrides 'xterm:colors=256'\\n\\nsetw -g mode-keys vi\\n\\nvim\\n\\ndein.vimによるプラグイン管理のマイベストプラクティス\\n\\ndein\\n$ curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > installer.sh\\n$ sh installer.sh ~/.cache/dein\\n$ mkdir -p ~/.config/nvim\\n\\n~/.config/nvim/dein.toml\\n[[plugins]]\\nrepo = 'Shougo/dein.vim'\\n\\n[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える\\nrepo = 'osyo-manga/vim-precious'\\ndepends = ['context_filetype.vim']\\n\\n[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ\\nrepo = 'Shougo/context_filetype.vim'\\n\\n[[plugins]] # toml syntax\\nrepo = 'cespare/vim-toml'\\non_ft = 'toml'\\n\\n[[plugins]] # カラースキーマ\\nrepo = 'w0ng/vim-hybrid'\\nhook_add = '''\\nset background=dark\\n\\\" colorscheme 設定は source 後に行う必要があるので VimEnter で行う。\\n\\\" 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。\\nau MyAutoCmd VimEnter * nested colorscheme hybrid\\n'''\\n\\n[[plugins]]\\nrepo = 'itchyny/lightline.vim'\\n\\n[[plugins]]\\nrepo = 'scrooloose/nerdtree'\\n\\n.vimrc\\nif !&amp;compatible\\n  set nocompatible\\nendif\\n\\n\\\" reset augroup\\naugroup MyAutoCmd\\n  autocmd!\\naugroup END\\n\\n\\\" dein settings {{{\\n\\\" dein自体の自動インストール\\nlet s:cache_home = empty($XDG_CACHE_HOME) ? expand('~/.cache') : $XDG_CACHE_HOME\\nlet s:dein_dir = s:cache_home . '/dein'\\nlet s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'\\nif !isdirectory(s:dein_repo_dir)\\n  call system('git clone https://github.com/Shougo/dein.vim ' . shellescape(s:dein_repo_dir))\\nendif\\nlet &amp;runtimepath = s:dein_repo_dir .\\\",\\\". &amp;runtimepath\\n\\\" プラグイン読み込み＆キャッシュ作成\\n\\\"let s:toml_file = fnamemodify(expand('&lt;sfile>'), ':h').'/dein.toml'\\nlet s:toml_file = '~/.config/nvim'.'/dein.toml'\\nif dein#load_state(s:dein_dir)\\n  call dein#begin(s:dein_dir)\\n  call dein#load_toml(s:toml_file)\\n  call dein#end()\\n  call dein#save_state()\\nendif\\n\\\" 不足プラグインの自動インストール\\nif has('vim_starting') &amp;&amp; dein#check_install()\\n  call dein#install()\\nendif\\n\\\" }}}\\n\\n\\\"ビープ音すべてを無効にする\\nsyntax on\\nfiletype on\\nset visualbell t_vb=\\nset noerrorbells \\\"エラーメッセージの表示時にビープを鳴らさない\\nset laststatus=2\\nset noswapfile nobackup noundofile\\nset hidden\\n\\ngolang\\nbinaryをdownloadして/usr/local/goに展開\\nnvm\\n\\nhttps://github.com/creationix/nvm</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/04/wsl.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
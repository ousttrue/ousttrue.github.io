"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[734],{6962:function(n,a,s){s.r(a),s.d(a,{default:function(){return k}});var e=s(1151),t=s(7294);function o(n){const a=Object.assign({p:"p",span:"span",h2:"h2"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"python でちょっとしたツールを書くときに便利。\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">make</code>'}})," みたいにタスクを定義して、コマンドラインから実行する。\ntask として定義した関数の引数に応じてコマンドライン引数をさばけるので ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">argparse</code>'}})," せずにすませることができる。"),"\n",t.createElement(a.h2,null,"install"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">$ pip install invoke</code></pre></div>'}}),"\n",t.createElement(a.h2,null,"tasks.py"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> invoke <span class="token keyword">import</span> task\n\n<span class="token decorator annotation punctuation">@task</span>\n<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> who<span class="token operator">=</span><span class="token string">"hoge"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">\'\'\'\n    hello task\n    \'\'\'</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f\'hello </span><span class="token interpolation"><span class="token punctuation">{</span>hoge<span class="token punctuation">}</span></span><span class="token string">\'</span></span><span class="token punctuation">)</span>\n\n\n<span class="token decorator annotation punctuation">@task</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span>\n<span class="token keyword">def</span> <span class="token function">ver</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">\'\'\'\n    version\n    \'\'\'</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>version<span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"使う"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">$ invoke -l           \nAvailable tasks:\n\n  hello   hello task\n  ver     version\n\n$ invoke hello --help\nUsage: inv[oke] [--core-opts] hello [--options] [other tasks here ...]\n\nDocstring:\n  hello task\n\nOptions:\n  -w STRING, --who=STRING\n\n$ invoke hello fuga  \nNo idea what \'fuga\' is!\n$ invoke hello -w fuga\nhello fuga\n$ invoke ver\nhello hoge\n3.8.6 (tags/v3.8.6:db45529, Sep 23 2020, 15:52:53) [MSC v.1927 64 bit (AMD64)]</code></pre></div>'}}),"\n",t.createElement(a.h2,null,"vscode でデバッグ"),"\n",t.createElement(a.p,null,"module に ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">invoke</code>'}})," を設定してやる"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json">        <span class="token punctuation">{</span>\n            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"task"</span><span class="token punctuation">,</span>\n            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"python"</span><span class="token punctuation">,</span>\n            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>\n            <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"invoke"</span><span class="token punctuation">,</span>\n            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token string">"hello"</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token property">"console"</span><span class="token operator">:</span> <span class="token string">"integratedTerminal"</span>\n        <span class="token punctuation">}</span></code></pre></div>'}}))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(o,n)):o(n)},l=s(8678),c=s(1883),r=s(8838);const u={code:n=>{let{children:a,className:s}=n;return s?t.createElement(r.Z,{className:s},a):t.createElement("code",null,a)}};function i(n){let{data:a,children:s}=n;const o=a.mdx.frontmatter;return t.createElement(l.Z,null,t.createElement("h1",null,o.title),t.createElement("div",{className:"tags-index"},o.tags&&o.tags.length>0&&o.tags.map((n=>t.createElement(c.rU,{to:"/tags/"+n+"/",itemProp:"url"},t.createElement("button",null,n))))),t.createElement(e.Zo,{components:u},s))}function k(n){return t.createElement(i,n,t.createElement(p,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-invoke-md-bb86ff6fc504c07f5d76.js.map
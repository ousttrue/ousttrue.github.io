{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-02-hololens-input-md-e038e4c3a205ee1cdb3a.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,qCAAsC,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAC1KI,wBAAyB,CACvBC,OAAQ,2pEAGd,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCXA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBa,EAAAA,EAAQ,KAAMb,EAAAA,cAAoB,KAAM,KAAMY,EAAKE,IAAIC,YAAYC,OAAQhB,EAAAA,cAAoBiB,EAAAA,GAAa,CACrIlB,WAAYA,GACXQ,GACL,CACe,SAASW,EAAiB1B,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoBmB,EAAqB3B,GAC3F,C","sources":["webpack:///./content/posts/2017/02/hololens_input.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Hololens の InputManager の動きを読んでみた\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">HoloToolkit.Unity.InputModule.InputManager\\nAssets/HoloToolkit/Input/Prefabs/InputManagerプレハブから見る。\\nInputManager\\n  + (GazeManager)\\n  + (GazeStablilizer)\\n  + (InputManager)\\n  + (StabilizationPlaneModifier)\\n\\n  GesturesInput# BaseInputSource(UnityEngine.VR.WSA.Input.GestureRecognizerを通じてジェスチャーを取得する)\\n  RawInteractionSourcesInput# BaseInputSource(UnityEngine.VR.WSA.Input.InteractionSourceを通じて手の検出・位置・ロストなどのイベントを検知する)\\n  EditorHandsInput# BaseInputSource(Editor向けに手イベントを偽装する)\\n\\nこんな感じに親子関係があって結構たくさんスクリプトがアタッチされている。\\n主要な部分だけに減らすと以下の3つのスクリプトになる。\\nInputManager\\n  + (GazeManager)\\n  + (InputManager)\\n  GesturesInput# BaseInputSource(UnityEngine.VR.WSA.Input.GestureRecognizerを通じてジェスチャーを取得する)\\n\\nこの３つのスクリプトは下記のように連携する。\\nGazeManager -> raycast -> hitObject\\n                                  |\\n                                  v\\nGesturesInput -> event -> InputManager -> hitObjectのeventハンドラを実行する\\n\\nUnityのEventSystemとの連携\\n通常のUnityのEventは、EventSystemがアタッチされたInputModule(StandardInputModule)のProcess関数をコールすることで始まる。\\nHoloToolkitのInputManagerは、GestureRecognizer等からのイベントを即座にUnityのEventに変換して発行していた。\\nShouldSendUnityUiEventsでInputManager.csを検索すると以下がヒットする。\\nHoloToolkit-Unity\\\\Assets\\\\HoloToolkit\\\\Input\\\\Scripts\\\\InputManager.cs(308)\\nHoloToolkit-Unity\\\\Assets\\\\HoloToolkit\\\\Input\\\\Scripts\\\\InputManager.cs(317)\\nHoloToolkit-Unity\\\\Assets\\\\HoloToolkit\\\\Input\\\\Scripts\\\\InputManager.cs(340)\\nHoloToolkit-Unity\\\\Assets\\\\HoloToolkit\\\\Input\\\\Scripts\\\\InputManager.cs(363)\\nHoloToolkit-Unity\\\\Assets\\\\HoloToolkit\\\\Input\\\\Scripts\\\\InputManager.cs(386)\\n\\nコードを見てみると\\n// hololensのevent\\nExecuteEvents.ExecuteHierarchy(newObject, null, OnFocusEnterEventHandler);\\nif (ShouldSendUnityUiEvents)\\n{\\n    // unity仕様に変換して実行\\n    ExecuteEvents.ExecuteHierarchy(newObject\\n        , GazeManager.Instance.UnityUIPointerEvent, ExecuteEvents.pointerEnterHandler);\\n}\\n\\nという風になっていて、以下の5種類のイベント転送を実装していた。\\n\\nIPointerClickHandler\\nIPointerDownHandler\\nIPointerEnterHandler\\nIPointerExitHandler\\nIPointerUpHandler\\n\\nこれだとButton等のクリックイベントを処理するタイプのものは動く。\\nDragとかScrollイベントは別途イベント転送してやる必要がありそう。\\nなるほど。</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/02/hololens_input.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
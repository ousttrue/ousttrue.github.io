"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9308],{6751:function(n,t,e){e.r(t),e.d(t,{default:function(){return r}});var c=e(1151),_=e(7294);function l(n){const t=Object.assign({pre:"pre",code:"code"},(0,c.ah)(),n.components);return _.createElement(t.pre,null,_.createElement(t.code,null,'Windowsでcmakeを使う場合に外部ライブラリの解決がわりと困難。\n\ncmakeのfind_packageがうまくうごかないのである。Unix系であれば `CMAKE_INSTALL_PREFIX(/usr/local)` にインストールされた依存プロジェクトを発見できるし、足りなければインストールすることもできる。それに、`apt-get` とか `pacman` とかあるので、自分で全部ビルドするということはあまり必要なかったりする今日この頃です。Windowsにはそういうのがなかった(CMAKE_INSTALL_PREFIXはどこなのか)のだけど、最近出てきたvcpkgがそれをやってくれる。\n\nArUcoをvcpkgとcmakeでビルドする\nということでvcpkgで外部ライブラリを構築し、一部をソースごとプロジェクトにコピーする方法でArUco(OpenCV)のビルドをやってみる。ArUcoのデバッグ版にアタッチしたり改造したりするつもりなので、opencvのモジュール版ArUcoではなく単体の方を使う。環境は、Windows10(64bit)にVisualStudio2017(C++)。\nvcpkgを準備\n\n* https://github.com/Microsoft/vcpkg\n\nshell\n> git clone https://github.com/Microsoft/vcpkg.git\n> cd vcpkg\nvcpkg> .\\bootstrap-vcpkg.bat\n\nvcpkgで64bit版のopencvをインストール\nvcpkg> .\\vcpkg.exe install opencv:x64-windows\n\nvcpkg/installed/x64-windowsにinclude, lib, bin等がインストールされる。\nvcpkgで64bit版のfreeglutをインストール\nvcpkg> .\\vcpkg.exe install freeglut:x64-windows\n\n\narucoのソースを入手\nOpenCVのモジュール\n\nhttp://docs.opencv.org/trunk/d9/d6d/tutorial_table_of_content_aruco.html\n\nではなくてこっち。\n\nhttp://www.uco.es/investiga/grupos/ava/node/26\nhttps://sourceforge.net/projects/aruco/files/\n\naruco-2.0.19.zipを手に入れた。\nとりあえずビルドしてみる\nvcpkgはd:/vcpkgにインストールされている。\n\nshell\naruco-2.0.19> mkdir build\naruco-2.0.19/build> cmake -D CMAKE_INSTALL_PREFIX=d:/vcpkg/installed/x64-windows -D OpenCVDir=d:/vcpkg/installed/x64-windows/share/opencv -D BUILD_GLSAMPLES=1 -G "Visual Studio 15 2017 Win64" ..\n\n\naruco_test_glとaruco_test_markermap_glのビルドでエラーが出るのでちょっとコードを修正する。\ngl.hより先にWindows.hをincludeしてあげる。\n\nc++\n#ifdef __APPLE__\n#include <GLUT/glut.h>\n\n#elif defined(_MSC_VER)\n#include <Windows.h>\n#include <GL/glut.h>\n\n#else\n#include <GL/gl.h>\n#include <GL/glut.h>\n#endif\n\n\nあとfreeglutのリンクををdebug, release振り分けのために、\nCMakeLists.txtをちょっと改造。だいたいこういう感じ。\n\ncmake\nIF (GLUT_FOUND)\n\tSTRING(REPLACE lib/freeglut.lib debug/lib/freeglutd.lib GLUT_glut_DEBUG_LIBRARY ${GLUT_glut_LIBRARY})\n\tMESSAGE(STATUS "GLUT_glut_DEBUG_LIBRARY=${GLUT_glut_DEBUG_LIBRARY}")\n\tset (OPENGL_LIBS  general\n\t\t${OPENGL_gl_LIBRARY}\n\t\t${OPENGL_glu_LIBRARY}\n\t\toptimized ${GLUT_glut_LIBRARY}\n\t\tdebug ${GLUT_glut_DEBUG_LIBRARY}\n\t\t)\nENDIF()\n\n\nこの部分と連携する。\nTARGET_LINK_LIBRARIES(aruco_test_gl ${OPENGL_LIBS})\n\nこれで、CMAKE_INSTALL_PREFIX/binにパスを通せばプログラムは動作する。\narucoのテストデータを入手してwebcamで動作確認\nテストデータを入手する。\n\nhttps://sourceforge.net/projects/aruco/files/\n\naruco-test-data-2.0.zipを手に入れた。\nこの中のintrinsics.ymlを引数にして実行する(本来は、カメラキャリブレーションをしてintrinsics.ymlを自分のカメラ用に作成する必要がある)。\naruco_test_gl.exe "live" "path_to_intrinsics.yml" 0.05\naruco_test_glとarucoの入った小さいプロジェクト\nArUcoを改造する予定。\n\nintrinsics.ymlを省略したり簡略化したい(fovyとaspectratioだけにするなど)\n左手系(DirectXやUnity)に対応\n\nということで、arucoのソースを含めている。\n\nshell\naruco_test\n\n  + CMakeLists.txt\n\n  + aruco_test_gl\n    + CMakeLists.txt\n    + aruco_test_gl.cpp(aruco-2.0.19/utils_gl/aruco_test_gl.cppをコピー)\n\n  + src(aruco-2.0.19/srcをコピー)\n\n\nCMakeLists.txt\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8)\nPROJECT(aruco)\n\nFIND_PACKAGE(OpenCV REQUIRED )\nSET (ARUCO_REQUIRED_LIBRARIES ${OpenCV_LIBS})\nINCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})\n\nFIND_PACKAGE(OpenGL REQUIRED)\n\nFIND_PACKAGE(GLUT)\nMESSAGE(STATUS "GLUT_glut_LIBRARY=${GLUT_glut_LIBRARY}")\nSTRING(REPLACE lib/freeglut.lib debug/lib/freeglutd.lib GLUT_glut_DEBUG_LIBRARY ${GLUT_glut_LIBRARY})\nMESSAGE(STATUS "GLUT_glut_DEBUG_LIBRARY=${GLUT_glut_DEBUG_LIBRARY}")\nIF (GLUT_FOUND)\n    set (OPENGL_LIBS  general\n        ${OPENGL_gl_LIBRARY}\n        ${OPENGL_glu_LIBRARY}\n        optimized ${GLUT_glut_LIBRARY}\n        debug ${GLUT_glut_DEBUG_LIBRARY}\n        )\nENDIF()\n\nADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)\nSET(CMAKE_CXX_FLAGS "/wd4819 /EHsc")\n\nADD_SUBDIRECTORY(src)\nADD_SUBDIRECTORY(utils_gl)\n\naruco_test_gl/CMakeLists.txt\nINCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/src ${GNULIBS_INCLUDE_DIR})\nLINK_LIBRARIES(${PROJECT_NAME} ${REQUIRED_LIBRARIES} )\n\nIF(OPENGL_LIBS)\n    ADD_EXECUTABLE(aruco_test_gl\n        aruco_test_gl.cpp\n        )\n    TARGET_LINK_LIBRARIES(aruco_test_gl ${OPENGL_LIBS})\n\n\n以上で、arucoを例にvcpkgでopencvとfreeglutdを外部管理してcmakeでプロジェクトを取り廻す例を作った。\n作業例。\n\nhttps://github.com/ousttrue/aruco_test\n'))}var u=function(n){void 0===n&&(n={});const{wrapper:t}=Object.assign({},(0,c.ah)(),n.components);return t?_.createElement(t,n,_.createElement(l,n)):l(n)};e(8678);function o(n){let{data:t,children:e}=n;return _.createElement(_.Fragment,null,_.createElement("h1",null,t.mdx.frontmatter.title),_.createElement(c.Zo,null,e))}function r(n){return _.createElement(o,n,_.createElement(u,n))}},8678:function(n,t,e){e(7294)},1151:function(n,t,e){e.d(t,{Zo:function(){return o},ah:function(){return l}});var c=e(7294);const _=c.createContext({});function l(n){const t=c.useContext(_);return c.useMemo((()=>"function"==typeof n?n(t):{...t,...n}),[t,n])}const u={};function o({components:n,children:t,disableParentContext:e}){let o;return o=e?"function"==typeof n?n({}):n||u:l(n),c.createElement(_.Provider,{value:o},t)}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-07-cmake-2017-md-2d3907a82634f849934c.js.map
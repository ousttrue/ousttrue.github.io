"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7799],{309:function(n,s,a){a.r(s),a.d(s,{default:function(){return k}});var t=a(1151),p=a(7294);function o(n){const s=Object.assign({p:"p",span:"span"},(0,t.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(s.p,null,"骨入りモデルとかやってみようかと思ったのだけど、その前に Three.js のソースを見やすい状態で作業したい。\n結合前の Three.js を自前ビルドしながら運用する方法を調べてみる。\nbuild.py, or how to generate a compressed three.js file\nと本家に書いてある。python 使うんか。gulp でやりてぇな。\n全部 concat して uglify したらいいんじゃないか。\nやってみよう。\nとりあえず bower で導入した three.js 関連を削除。\nthreejs.src フォルダを作って three.js ソースの src ディレクトリの中身を展開した。"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gulp.task('bowerjs', function () {\n\n    var files = [\n        './bower_components/jquery/dist/jquery.js',\n        './bower_components/highlightjs/highlight.pack.js',\n        './bower_components/stats.js/build/stats.min.js',\n        './lib/**/*.js', // &lt;-- 中にthree.jsのsrcをコピーした\n    ];\n    gulp.src(files)\n        .pipe($.plumber({ errorHandler: $.notify.onError('&lt;%= error.message %>') }))\n        .pipe($.debug({ title: 'bowerjs files:' }))\n        .pipe($.sourcemaps.init())\n        //.pipe($.uglify())\n        .pipe($.concat('all.min.js'))\n        .pipe($.sourcemaps.write('./', {\n            sourceMappingURL: function (file) {\n                return file.relative + '.map';\n            }\n        }))\n        .pipe(gulp.dest('build/js'))\n        .pipe(browser.reload({ stream: true }))\n    ;\n});\n\nこれで作ったall.min.jsではエラーが出てだめですね。\n単にsrcをconcatするだけではだめだ。本家のドキュメントを読み始める。\n/three.js/utils/build/\n\nでビルドできるよって書いてあります。python関係ないみたいだ。\n> npm install\n> node build.js --include common --include extras\n\nなるほどbuild.jsを見てみよう。\nincludeってなんだろうと調べてみると\n/three.js/utils/build/includes\n\nにjsonファイルがあり中にjsファイルがリストされている。\nなるほど。src下を全部concatするのではなくここに書いてあるものを、書いてある順でconcatすればいいんでないか。\n//\ngulp.task('threejs:build', function(){\n    var common=JSON.parse(fs.readFileSync('three.js/includes/common.json')).map(function(v, i){ return 'three.js/'+v; });\n    gulp.src(common)\n        .pipe($.concat('three.js'))\n        .pipe(gulp.dest('./lib'))\n        ;\n});\n\ngulp.task('bowerjs', ['threejs:build'], function () {\n    // 前と同じ\n}</code></pre></div>"}}),"\n",p.createElement(s.p,null,"これで実行するとそれっぽい three.js が出てくるが、まだエラーが出る。\nでエラー行に飛ぶと ifdef がある。なんだこれは。"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="glsl"><pre class="language-glsl"><code class="language-glsl"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">USE_ALPHAMAP</span></span>\n\n    diffuseColor<span class="token punctuation">.</span>a <span class="token operator">*=</span> <span class="token function">texture2D</span><span class="token punctuation">(</span> alphaMap<span class="token punctuation">,</span> vUv <span class="token punctuation">)</span><span class="token punctuation">.</span>g<span class="token punctuation">;</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n\nglslだ・・・。\n確かに、build<span class="token punctuation">.</span>js内で拡張子がglslのファイルだけ別処理になっている。\n<span class="token keyword">if</span><span class="token punctuation">(</span> file<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span> <span class="token char">\'.glsl\'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    contents <span class="token operator">=</span> <span class="token char">\'THREE.ShaderChunk[ \\\'\'</span> <span class="token operator">+</span>\n        path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span> file<span class="token punctuation">,</span> <span class="token char">\'.glsl\'</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">\'\\\' ] =\'</span> <span class="token operator">+</span>\n        JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> contents <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">\';\\n\'</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n\nちょっとgulpのフィルタを作りますか。\nthree<span class="token punctuation">.</span>shaderchunk<span class="token punctuation">.</span>js\nvar through <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token char">\'through2\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nvar gutil <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token char">\'gulp-util\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nvar fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token char">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nvar path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token char">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">return</span> through<span class="token punctuation">.</span><span class="token function">obj</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>file<span class="token punctuation">,</span> enc<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">cb</span><span class="token punctuation">(</span>new gutil<span class="token punctuation">.</span><span class="token function">PluginError</span><span class="token punctuation">(</span><span class="token char">\'three.shadechunk\'</span><span class="token punctuation">,</span> <span class="token char">\'Streaming not supported\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">\'.glsl\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            var contents <span class="token operator">=</span> <span class="token char">\'THREE.ShaderChunk[ \\\'\'</span> <span class="token operator">+</span>\n                path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token char">\'.glsl\'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">\'\\\' ] =\'</span> <span class="token operator">+</span>\n                JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>contents<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">\';\\n\'</span><span class="token punctuation">;</span>\n            file<span class="token punctuation">.</span>contents <span class="token operator">=</span> new <span class="token function">Buffer</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            file<span class="token punctuation">.</span>path <span class="token operator">=</span> file<span class="token punctuation">.</span>path <span class="token operator">+</span> <span class="token string">".js"</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ngulpファイルの呼び出しの方。これでthree<span class="token punctuation">.</span>js<span class="token operator">/</span>srcからthree<span class="token punctuation">.</span>jsを作成できた。\nあとは、sourcemapが付くようにした。\ngulpfile<span class="token punctuation">.</span>js\ngulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token char">\'threejs:build\'</span><span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    var <span class="token keyword">common</span><span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token char">\'three.js/includes/common.json\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token char">\'three.js/\'</span><span class="token operator">+</span>v<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    var extras<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token char">\'three.js/includes/extras.json\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token char">\'three.js/\'</span><span class="token operator">+</span>v<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token keyword">common</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>extras<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">threeShaderchunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token char">\'three.js\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token char">\'./lib\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nFireFoxでブレイクポイントを仕掛けてステップ実行できた。\nこれで、Loaderの自作とかが捗るぞ。</code></pre></div>'}}))}var c=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?p.createElement(s,n,p.createElement(o,n)):o(n)},e=a(8678),u=a(8838);const l={code:n=>{let{children:s,className:a}=n;return a?p.createElement(u.Z,{className:a},s):p.createElement("code",null,s)}};function i(n){let{data:s,children:a}=n;return p.createElement(e.Z,null,p.createElement("h1",null,s.mdx.frontmatter.title),p.createElement(t.Zo,{components:l},a))}function k(n){return p.createElement(i,n,p.createElement(c,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-12-08-threejs-05-md-82741d1137f52e82d178.js.map
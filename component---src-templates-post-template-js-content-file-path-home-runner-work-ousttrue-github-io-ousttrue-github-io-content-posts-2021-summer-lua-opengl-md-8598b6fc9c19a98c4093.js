"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9137],{4041:function(e,n,t){t.r(n),t.d(n,{default:function(){return f}});var l=t(1151),a=t(7294);function c(e){const n=Object.assign({p:"p",h1:"h1",pre:"pre",code:"code"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"imgui bind がだいたいできて軌道に乗ったので、glTF viewer の作成にとりかかる。"),"\n",a.createElement(n.p,null,"https://www.glfw.org/docs/latest/quick.html"),"\n",a.createElement(n.p,null,"の回転アニメーション以外できた。"),"\n",a.createElement(n.h1,null,"luajit の cdef で頂点配列の定義が捗る"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-c++"},"static const struct\n{\n    float x, y;\n    float r, g, b;\n} vertices[3] =\n{\n    { -0.6f, -0.4f, 1.f, 0.f, 0.f },\n    {  0.6f, -0.4f, 0.f, 1.f, 0.f },\n    {   0.f,  0.6f, 0.f, 0.f, 1.f }\n};\n")),"\n",a.createElement(n.p,null,"が、"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-lua"},'ffi.cdef([[\nstruct Vertex2DRGB\n{\n    float x, y;\n    float r, g, b;\n};\n]])\n\nlocal vertices = ffi.new(\n    "struct Vertex2DRGB[3]",\n    { -0.6, -0.4, 1., 0., 0. },\n    { 0.6, -0.4, 0., 1., 0. },\n    { 0., 0.6, 0., 0., 1. }\n)\n')),"\n",a.createElement(n.p,null,"などという書き方ができてしまう。luajit ffi 強い。"),"\n",a.createElement(n.h1,null,"ffi.metatype"),"\n",a.createElement(n.p,null,"luajit を活かした線形代数ライブラリを探索していて、"),"\n",a.createElement(n.p,null,"https://github.com/bjornbytes/maf"),"\n",a.createElement(n.p,null,"を見つけた。"),"\n",a.createElement(n.p,null,"luajit ffi には便利関数"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"ffi.metatype(ct, metatable)\n")),"\n",a.createElement(n.p,null,"があって、これを使うと ffi.cdef した C の struct に lua の metatable を合体できる。"),"\n",a.createElement(n.p,null,"線形代数ライブラリは、 ",a.createElement(n.code,null,"ffi.metatype")," を使って自作してみよう(mafにはvec3 と quaternion しかないのもあり)。\nついでに、lua の unittest を取り入れましょう。"),"\n",a.createElement(n.h1,null,"20210830"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"mat4")," を実装してみた。"),"\n",a.createElement(n.p,null,"https://github.com/ousttrue/limgui/blob/master/lua/mafex.lua"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-C"},"    typedef union {\n        struct {\n            float _11, _12, _13, _14;\n            float _21, _22, _23, _24;\n            float _31, _32, _33, _34;\n            float _41, _42, _43, _44;\n        };\n        float array[16];\n    } mat4;\n")),"\n",a.createElement(n.p,null,"という定義で OpenGL の uniform 変数に直接渡せるので使いやすい。"))}var r=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(c,e)):c(e)};t(8678);function u(e){let{data:n,children:t}=e;return a.createElement(a.Fragment,null,a.createElement("h1",null,n.mdx.frontmatter.title),a.createElement(l.Zo,null,t))}function f(e){return a.createElement(u,e,a.createElement(r,e))}},8678:function(e,n,t){t(7294)},1151:function(e,n,t){t.d(n,{Zo:function(){return u},ah:function(){return c}});var l=t(7294);const a=l.createContext({});function c(e){const n=l.useContext(a);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const r={};function u({components:e,children:n,disableParentContext:t}){let u;return u=t?"function"==typeof e?e({}):e||r:c(e),l.createElement(a.Provider,{value:u},n)}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-summer-lua-opengl-md-8598b6fc9c19a98c4093.js.map
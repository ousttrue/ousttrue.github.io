"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9311],{1607:function(e,n,t){t.r(n),t.d(n,{default:function(){return p}});var a=t(1151),l=t(7294);function s(e){const n=Object.assign({h2:"h2",p:"p",span:"span",ul:"ul",li:"li",a:"a",h3:"h3",h4:"h4"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h2,null,"rust で D3D11 レンダラを進めてきたが・・・"),"\n",l.createElement(n.p,null,"当初 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rust</code>'}})," で ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">d3d11</code>'}})," のレンダラーを作ろうとして作業を進めていた。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">imgui</code>'}})," を組み込んで、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">glTF</code>'}})," をロードして ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">unlit</code>'}})," で描画するところまで作ったが、\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">GUI</code>'}})," の作りこみが大変そうな感じだった。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rust</code>'}})," は関数オーバーロードが無いので　",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">imgui</code>'}})," のラッパーの使い勝手が ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++</code>'}})," より落ちるなど。\nポインターを渡せるのは素敵なのだが。"),"\n",l.createElement(n.h2,null,"nvim-0.5 はおもしろい"),"\n",l.createElement(n.p,null,"ここで寄り道して、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nvim</code>'}})," をいじり始めた。\nちょうどバージョン ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">0.5</code>'}})," がリリースされるタイミングで、",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">0.5</code>'}})," になると lua サポートが強化されて、設定が lua で書けるとのこと。"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://zenn.dev/hituzi_no_sippo/articles/871c06cdbc45b53181e3"},"NeovimとLua")),"\n"),"\n",l.createElement(n.p,null,"ということで Windows 向けのソースからのビルドシステムを作って ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nvim</code>'}})," 環境を整備してみた。\nlua で記述された plugin をなるべく採用。"),"\n",l.createElement(n.p,null,"https://github.com/ousttrue/my_nvim"),"\n",l.createElement(n.p,null,"最近常用していた、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vscode</code>'}})," の便利さにどこまで追いつけるか。"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Language Server Protocol。nvim-0.5 から nvim-lsp (luaで書いてある) がある。組み込み"),"\n",l.createElement(n.li,null,"Debug Adapter Protocol。nvim-0.5 から nvim-dap (lulで書いてある) がある。https://github.com/mfussenegger/nvim-dap"),"\n"),"\n",l.createElement(n.p,null,"vscode から ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">lsp</code>'}})," と ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">dap</code>'}})," という重要な資産を持ってこれるので慣れればいけそうである。\n調べたところ下記のようだった。"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"codelldb(native debugger c++ や rust) は nvim-dap を改造すれば使えた https://github.com/ousttrue/nvim-dap"),"\n",l.createElement(n.li,null,"rust-analyzer 動いた"),"\n",l.createElement(n.li,null,"python: lsp, dap ともに動きそう"),"\n",l.createElement(n.li,null,"lua: lsp, dap ともに動きそう"),"\n",l.createElement(n.li,null,"csharp: lsp, dap ともに動きそう(Unityはうまくいかず)"),"\n"),"\n",l.createElement(n.p,null,"nvim-lsp も nvim-dap も lua で簡単に記述されているので、コードを読めば、たぶんわかる。\nあとは、タスクランナーを整備すれば開発環境に使えそう。"),"\n",l.createElement(n.h2,null,"luarocks の Windows 運用"),"\n",l.createElement(n.p,null,"lua で記述された nvim のパッケージマネージャー https://github.com/wbthomason/packer.nvim を採用したのだが、\nWindows で luarocks 機能が動かなかった。https://luarocks.org/ は ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">lua</code>'}})," のパッケージマネージャー。\nちょっと、古め(vc2017より前)の vc でないとだめぽい。\n改造した。"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"https://github.com/ousttrue/packer.nvim"),"\n",l.createElement(n.li,null,"https://github.com/ousttrue/hererocks"),"\n"),"\n",l.createElement(n.p,null,"hererocks は、luarocks のインストーラー。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">LUA_PATH</code>'}})," ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">package.path</code>'}})," を理解した。"),"\n",l.createElement(n.h2,null,"スタンドアロンの lua インタプリタによるプロジェクト"),"\n",l.createElement(n.p,null,"luarocks が無事に Windows で運用できるようになったので、プロジェクトローカルに必要なライブラリをインストールして、\nスタンドアロンの lua インタープリターを起点にしたアプリ開発ができないか探ってみた。\nlua インタプリタがアプリ組み込みだと dap の運用がしづらい(port 開けて attach とかになる)のでスタンドアロンの lua インタープリターを推す。"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text"># フォルダ構成\nproject_root\n  + lua(.gitignore) # hererocks でローカルビルドする\n  + main.lua</code></pre></div>'}}),"\n",l.createElement(n.p,null,"これで、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">lsp</code>'}})," と ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">dap</code>'}})," が利用できれば快適になるのではないか。"),"\n",l.createElement(n.h3,null,"lua の LanguageServer"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"https://marketplace.visualstudio.com/items?itemName=sumneko.lua","\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"https://github.com/sumneko/lua-language-server"),"\n"),"\n"),"\n"),"\n",l.createElement(n.p,null,"がしっかり動き、",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">EmmyLua</code>'}})," の型ヒントを活用できることが分かった。"),"\n",l.createElement(n.p,null,"https://github.com/neovim/nvim-lspconfig/blob/a21a509417aa530fb7b54020f590fa5ccc67de77/CONFIG.md#sumneko_lua に例があって、"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua">require<span class="token string">\'lspconfig\'</span><span class="token punctuation">.</span>sumneko_lua<span class="token punctuation">.</span><span class="token function">setup</span> <span class="token punctuation">{</span>\n  settings <span class="token operator">=</span> <span class="token punctuation">{</span>\n    Lua <span class="token operator">=</span> <span class="token punctuation">{</span>\n      workspace <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token comment">-- Make the server aware of Neovim runtime files</span>\n        library <span class="token operator">=</span> <span class="token punctuation">{</span>\n          <span class="token punctuation">[</span>vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">\'$VIMRUNTIME/lua\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token comment">-- lua標準の型定義がある</span>\n          <span class="token punctuation">[</span>vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">\'$VIMRUNTIME/lua/vim/lsp\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token comment">-- Vimの型定義がある</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",l.createElement(n.p,null,"インテリセンスが効くし、組み込み関数の型ヒントも追加できる。"),"\n",l.createElement(n.h3,null,"lua の DebugAdapter"),"\n",l.createElement(n.p,null,"DebugAdapter も問題なく動いた。\nluajit の場合は対応しているものを使うべし。"),"\n",l.createElement(n.h4,null,"Lua Debug"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"https://marketplace.visualstudio.com/items?itemName=actboy168.lua-debug","\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"https://github.com/actboy168/lua-debug"),"\n"),"\n"),"\n"),"\n",l.createElement(n.p,null,"https://github.com/actboy168/bee.lua の"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Add error hook (for debugger)"),"\n",l.createElement(n.li,null,"Add resume/yield hook (for debugger)"),"\n"),"\n",l.createElement(n.p,null,"謎の機能で実装されているぽい。"),"\n",l.createElement(n.h4,null,"Local Lua Debugger"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,"https://marketplace.visualstudio.com/items?itemName=tomblind.local-lua-debugger-vscode"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"https://github.com/tomblind/local-lua-debugger-vscode"),"\n"),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,"luajit でも動く"),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,"TypeScriptToLua で書かれている"),"\n"),"\n"),"\n",l.createElement(n.h2,null,"lua で 3D"),"\n",l.createElement(n.p,null,"ちょっと試したところ、 luajit の ",l.createElement(n.a,{href:"https://luajit.org/ext_ffi.html"},"FFI")," を使うのが有望そうという感触を得た。\nd3d は lua でやっている人があまりいなかった。"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"https://github.com/sonoro1234/LuaJIT-GLFW"),"\n",l.createElement(n.li,null,"https://github.com/sonoro1234/LuaJIT-ImGui"),"\n"),"\n",l.createElement(n.p,null,"最新の luajit-2.1.0-beta3(lua-5.1仕様) でいく。"),"\n",l.createElement(n.h2,null,"imgui の ffi"),"\n",l.createElement(n.p,null,l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cimgui</code>'}})," ではなく 素の ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">imgui</code>'}})," の luajit ffi できるか実験した。"),"\n",l.createElement(n.p,null,"https://stackoverflow.com/questions/6691651/is-it-possible-to-use-functions-from-c-namespaces-with-luajit-ffi"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua">ffi<span class="token punctuation">.</span>cdef<span class="token string">[[\nvoid Test1_Method1(void) asm("_ZN5Test17Method1Ev");\n]]</span></code></pre></div>'}}),"\n",l.createElement(n.p,null,"のように mangling に対応すればできそう。"),"\n",l.createElement(n.h2,null,"libclang による コード生成"),"\n",l.createElement(n.p,null,"ということで、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">luajit</code>'}})," + ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FFI</code>'}})," を中心に ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">imgui</code>'}})," ラッパーを作ってレンダラーというか 3D ツールのインフラとなる、\n簡単なレンダラーと ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Gizmo</code>'}})," に対応したツールキットを作るという方向になってきた。"),"\n",l.createElement(n.p,null,l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">imgui</code>'}})," の ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">luajit</code>'}})," ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FFI</code>'}})," の使い勝手が重要。"),"\n",l.createElement(n.p,null,"https://github.com/ousttrue/limgui"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"[ ] libclang で ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">imgui.h</code>'}})," をパースして、luajit FFI 生成と ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">lsp</code>'}})," への EmmyLua アノテーション生成を同時にやるツール。"),"\n"))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?l.createElement(n,e,l.createElement(s,e)):s(e)},u=(t(8678),t(8838));const o={code:e=>{let{children:n,className:t}=e;return t?l.createElement(u.Z,{className:t},n):l.createElement("code",null,n)}};function r(e){let{data:n,children:t}=e;return l.createElement(l.Fragment,null,l.createElement("h1",null,n.mdx.frontmatter.title),l.createElement(a.Zo,{components:o},t))}function p(e){return l.createElement(r,e,l.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-lua-imgui-plan-md-8d89bd7955ee6d4e3302.js.map
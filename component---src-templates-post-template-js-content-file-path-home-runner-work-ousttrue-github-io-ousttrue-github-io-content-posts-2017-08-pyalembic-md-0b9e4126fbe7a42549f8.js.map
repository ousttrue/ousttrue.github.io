{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-08-pyalembic-md-0b9e4126fbe7a42549f8.js","mappings":"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","sources":["webpack:///./content/posts/2017/08/pyalembic.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Windows 上で PyAlembic を使いたいのだができるのか。\\n素直に Linux でやるべきでは・・・\\nWindows10(64bit) + Python-3.6(64bit)\"), \"\\n\", React.createElement(_components.p, null, \"作業場。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/openexr\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Anaconda3(Windows10 64bit)でモジュール探す\\n> conda install -c conda-forge alembic\\n\")), \"\\n\", React.createElement(_components.p, null, \"しかし、これは違う Alembic だった。\\nPython の alembic は、database migrations tool と名前が被っております。\\nなるほど・・・。\\nPython2.7 なら\"), \"\\n\", React.createElement(_components.p, null, \"http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyalembic\"), \"\\n\", React.createElement(_components.p, null, \"あとから発見。わいは、Python3.6 にしたいので。\\n自前でビルドを試みる\\nalembic-1.7.1/python/PyAlembic がそれですな。\\n問題が２つある。\"), \"\\n\", React.createElement(_components.p, null, \"Python2(Python3 にしたい)\\nBoost.Python(PyBind11 にしてリンク問題とおさらばしたい)\"), \"\\n\", React.createElement(_components.p, null, \"さすがに PyBind11 差し替えはやるにしても後にするべきなので、 Python3 化だけやる。\\nBoost.Python のビルド\\nBoost.Python で使う Python を明示するには、user-config.jam に記述する。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"BOOST_DIR/user-conifg.jam\\nusing python\\n    : 3.6                   # Version\\n    : D:\\\\\\\\Anaconda3\\\\\\\\python.exe      # Python Path\\n    : D:\\\\\\\\Anaconda3\\\\\\\\include         # include path\\n    : D:\\\\\\\\Anaconda3\\\\\\\\libs            # lib path(s)\\n    : <define>BOOST_ALL_NO_LIB=1\\n    ;\\n\")), \"\\n\", React.createElement(_components.p, null, \"ビルド\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"boost> b2.exe -j3 --stagedir=stage\\\\x86_64 link=shared runtime-link=shared threading=multi toolset=msvc-14.0 address-model=64 --with-python\\n\")), \"\\n\", React.createElement(_components.p, null, \"link=shared にして dll を生成することが必要。\\nこれは、iex.pyd と imath.pyd 間で Boost.Python の static 変数を共有するために必須である(pyex の型登録周りか)。\\nIlmBase を修正\\nilmbase-2.2.0/IexMath/IexMathFloatExc.h\\nの以下の部分を修正する。多分、記述ミスなのだけど誰も Windows ビルドしないので気付かれていないのであろう。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"//#if defined(IEX_EXPORTS)↲\\n#if defined(IEXMATH_EXPORTS)↲\\n\")), \"\\n\", React.createElement(_components.p, null, \"これで ilmbase をビルドしておく。vcpkg を使った。\\nalembic を修正\\nalembic-1.7.1/lib/Alembic/AbcCoreLayer/CMakeLists.txt を修正してヘッダを追加する(PyAlembic が使う)\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cmake\"\n  }, \"INSTALL(FILES Read.h Util.h\\n    Foundation.h # 追加\\n    DESTINATION include/Alembic/AbcCoreLayer)\\n\")), \"\\n\", React.createElement(_components.p, null, \"これも、vcpkg を使った。\\nPyIlmBase のビルド\\nOpenEXR のサイトにある pyilmbase-2.2.0tar.gz を使おうとしたのだけど、github の方が新しいようなのでこちらを使う。\\nPython3 向けの修正\\nPython2 と Pytnon3 間での非互換によるコンパイルエラーを直していく。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"PySliceObject_XXX -> PyObject_XXX\\nPyInt_XXX -> PyLong_XXX\\nPyString_AsString -> PyUnicode_AsUTF8\\n_PyThreadState_Current -> _PyThreadState_UncheckedGet()\\n\")), \"\\n\", React.createElement(_components.p, null, \"参考\"), \"\\n\", React.createElement(_components.p, null, \"Python3 Advent Calendar - Python で 2/3 両方で動くコードを書く(C/API)\\nFix build for Python 3.5\\nhttp://py3c.readthedocs.io/en/latest/guide.html\"), \"\\n\", React.createElement(_components.p, null, \"CMake 設定\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cmake\"\n  }, \"CMAKE_INSTALL_PREFIX\\nBOOST_ROOT\\nILMBASE_PACKAGE_PREFIX\\nFIND_PACKAGE(numpy)をコメントアウト\\nDebugでもPython36.libにリンクするように、#include <Python.h>を除去(boost/python.hpp経由でインクルードさせればそうなる)\\n\")), \"\\n\", React.createElement(_components.p, null, \"ビルドが通るようになった。\\nPyAlembic のビルド\\n当初、Alembic のプロジェクトで Python フラグを有効にして一緒にビルドしようとしていたが、PyIlmBase 傘下に PyAlembic をコピーする方式に変えた。\\nalembic-1.7.1/python/PyAlembic を ilmbase-2.2.0/PyIlmBase にコピーして、CMakeLists.txt を調整する。\\nCMake 設定\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cmake\"\n  }, \"Alembic_ROOT\\n\")), \"\\n\", React.createElement(_components.p, null, \"参考\"), \"\\n\", React.createElement(_components.p, null, \"uimac 実装メモ - PyImath\"), \"\\n\", React.createElement(_components.p, null, \"PyAlembic のビルドが通ったので実行してみよう\\nPyAlembic/Tests/testPolyMesh.py を動かしてみようと思う。\\nこういう感じに準備する。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"testPolyMesh.py\\niex.pyd\\nPyIex.dll\\nimath.pyd\\nPyImath.dll\\nalembic.lib\\nalembic.pyd\\nboost_python-vc140-mt-1_61.dll # debug buildもこれ\\n\\n> C:/python36/python.exe testPolyMesh.py\\n\")), \"\\n\", React.createElement(_components.p, null, \"import alembic でクラッシュする。デバッガで追ってみると、モジュールの初期化でエラーが発生している。一個ずつ直す。\\n初期化の修正\\nPython3 化による変更？\\nAbcView\\n今回の作業目標。\"), \"\\n\", React.createElement(_components.p, null, \"http://alembic.github.io/abcview/\"), \"\\n\", React.createElement(_components.p, null, \"これを動作させたい。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"AbcView has the following requirements:\\n\\nPython 2.6+ => Python 3.6 で動くように改造する(print 文とか)\\nPyAlembic。できた\\nPyAbcOpenGL。できた\\nPyOpenGL。pip\\nargparse。pip\\nPyQt4。http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyalembic\\nnumpy-mkl。http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyalembic\\n\\nPyQt4 をインストール\\n\\nhttps://stackoverflow.com/questions/22640640/how-to-install-pyqt4-on-windows-using-pip\\nhttp://www.lfd.uci.edu/~gohlke/pythonlibs/#pyqt4\\n\\nこんな感じで公式の Python3.6(64bit)に対してインストール。\\nD:\\\\Python36\\\\Scripts\\\\pip.exe install .\\\\PyQt4-4.11.4-cp36-cp36m-win_amd64.whl\\n\\nhttps://www.tutorialspoint.com/pyqt/pyqt_hello_world.htm\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import sys\\nfrom PyQt4 import QtGui\\n\\ndef window():\\n    app = QtGui.QApplication(sys.argv)\\n    w = QtGui.QWidget()\\n    b = QtGui.QLabel(w)\\n    b.setText(\\\"Hello World!\\\")\\n    w.setGeometry(100,100,200,50)\\n    b.move(50,20)\\n    w.setWindowTitle(\\\"PyQt\\\")\\n    w.show()\\n    sys.exit(app.exec_())\\n\\nif __name__ == '__main__':\\n    window()\\n\")), \"\\n\", React.createElement(_components.p, null, \"動いた。\\nalembicgl.pyd, alembic.pyd, imath.pyd, iex.pyd と依存 dll 群を wheel 化する\\n同じ dll を参照する pyd を同じフォルダに配置したいので、\\n共通の親モジュールとして ilm を定義してその中にすべての pyd と dll を収めることにした。\\nそのうえでこれを間接的にエクスポートするモジュール’iex’, ‘imath’, ‘alembic’, ‘alembicgl’\\nを作る計画。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"ilm\\n    + __init__.py\\n    + iex.pyd\\n    + imath.pyd\\n    + alembic.pyd\\n    + alembicgl.pyd\\n    + PyEx.dll\\n    + PyImath.dll\\n    + boost_python.dll\\n    + Alembic.dll # VCPKG BUILD\\n    + ilmbase.dll # VCPKG BUILD\\n    + iex.dll # VCPKG BUILD\\n    + imath.dll # VCPKG BUILD\\n    + half.dll # VCPKG BUILD\\n    + hdf5.dll # VCPKG BUILD\\n    + zip.dll # VCPKG BUILD\\n    + szip.dll # VCPKG BUILD\\niex\\n    + __init__.py # ilm.iexを公開\\nimath\\n    + __init__.py # ilm.imathを公開\\nalembic\\n    + __init__.py # ilm.alembicを公開\\nalembicgl\\n    + __init__.py # ilm.alembicglを公開\\nsetup.py\\n\")), \"\\n\", React.createElement(_components.p, null, \"iex/init.py\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"from ilm.iex import \\\\*\\n\")), \"\\n\", React.createElement(_components.p, null, \"こういうのを iex, imath, alembic, alembicgl それぞれに作った。\\nsetup.py\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"#!/usr/bin/env python\\n\\nfrom setuptools import setup, Distribution\\n\\n\\nsetup(\\n        name='alembic',\\n        version='0.1',\\n        description='Alembic Library',\\n        packages=['ilm', 'iex', 'imath', 'alembic', 'alembicgl'],\\n        package_data={\\n            'ilm':['*.pyd', '*.dll'],\\n            },\\n        )\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"py_package> D:\\\\Python36\\\\python.exe setup.py bidst_wheel\\npy_package> D:\\\\Python36\\\\Scripts\\\\pip.exe install .\\\\dist\\\\alembic-0.1-cp36-cp36m-win_amd64.whl\\n\")), \"\\n\", React.createElement(_components.p, null, \"AbcView を実行してみる\\nこういう感じに配置して、abcview_main.py を実行してみる。\\nabcview_main.py `# bin/abcview から改名(名前がフォルダと被らないように変更)\\nabcview\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"**init**.py\\n\")), \"\\n\", React.createElement(_components.p, null, \"python2 仕様の部分をまとめて修正。\"), \"\\n\", React.createElement(_components.p, null, \"https://docs.python.jp/3/library/2to3.html\"), \"\\n\", React.createElement(_components.p, null, \"AbcView> D:\\\\Python36\\\\python.exe D:\\\\Python36\\\\Tools\\\\scripts\\\\2to3.py -w .\"), \"\\n\", React.createElement(_components.p, null, \"print 文、except 文などの定型的な文法問題はこれで一網打尽。ディレクトリを指定することでまとめて処理できる。\\nfile.toAscii() => file\\nこれも Python2 との非互換か。\\nQtCore.QString(str(value)) => str(value)\\nQString は、Python の String でよさげ。\\n動いた\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/openexr/releases/tag/v0.1\"), \"\\n\", React.createElement(_components.p, null, \"タイムラインを操作したら蛸が動いた。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/08/pyalembic.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
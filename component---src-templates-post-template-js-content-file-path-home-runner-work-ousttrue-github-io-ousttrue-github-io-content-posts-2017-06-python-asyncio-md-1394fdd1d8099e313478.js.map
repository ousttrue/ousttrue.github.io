{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-06-python-asyncio-md-1394fdd1d8099e313478.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,qFAAsF,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,sBAAuB,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,uBAAwB,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,aAAc,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,oBAAqB,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,aAAc,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4DAA6D,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CAC5rBI,UAAW,mBACV,4KAA6K,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,+DAAgE,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,uFAAwF,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CAC3fI,UAAW,mBACV,wPAAyP,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,0CAA2C,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CAC3aI,UAAW,mBACV,6GAA8G,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,iLAAkL,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CACvaI,UAAW,mBACV,kbAAmb,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wCAAyC,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,+mBAAgnB,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6CAA8C,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CAC74CI,UAAW,mBACV,+WAAgX,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,qIAAsI,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6IAA8I,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CAC1zBI,UAAW,mBACV,udAAwd,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,qEAAsE,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,6aAA8a,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,OAAQ,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CACvuCI,UAAW,mBACV,oPAAqP,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yJAA0J,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mFAAoF,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mCAAoC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,SAAU,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CACryBI,UAAW,mBACV,0rBAA2rB,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6BAC/uB,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCzBA,SAASa,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOL,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMM,EAAKE,IAAIC,YAAYC,OAAQV,EAAAA,cAAoBW,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBrB,GACvC,OAAOS,EAAAA,cAAoBI,EAAcb,EAAOS,EAAAA,cAAoBa,EAAqBtB,GAC3F,C,4HCuBO,MAAMuB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBhB,GAC/B,MAAMiB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAff,EACFA,EAAWiB,GAGb,IAAIA,KAAsBjB,IAChC,CAACiB,EAAmBjB,GACzB,CAGA,MAAMkB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACZ,EAAU,SAAEQ,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfnB,EACHA,EAAW,CAAC,GACZA,GAAckB,EAEJF,EAAiBhB,GAG5B,gBACLe,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2017/06/python_asyncio.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Python の Version3.4 から始まった asyncio 周りについてのメモ。\\n環境は、Windows10 上の python3.6(64bit)。\"), \"\\n\", React.createElement(_components.p, null, \"Version\\nPython3.4\"), \"\\n\", React.createElement(_components.p, null, \"asyncio\\nyield from\"), \"\\n\", React.createElement(_components.p, null, \"Python3.5\"), \"\\n\", React.createElement(_components.p, null, \"async def\\nawait\"), \"\\n\", React.createElement(_components.p, null, \"EventLoop\"), \"\\n\", React.createElement(_components.p, null, \"https://docs.python.org/3/library/asyncio-eventloop.html\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import asyncio\\nloop=asyncio.get_event_loop()\\nprint(loop)\\n# <_WindowsSelectorEventLoop running=False closed=False debug=False>\\n\\nloop.run_forever()\\nprint('done')\\n\")), \"\\n\", React.createElement(_components.p, null, \"ただし永遠(forever)走り続けるのでプロセスを kill しないと止まらず。\\nWindows 向けの loop\"), \"\\n\", React.createElement(_components.p, null, \"https://docs.python.org/3/library/asyncio-eventloops.html#asyncio.ProactorEventLoop\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import asyncio\\nimport sys\\n\\nif sys.platform == 'win32':\\n    loop = asyncio.ProactorEventLoop()\\n    # <ProactorEventLoop running=False closed=False debug=False>\\n    asyncio.set_event_loop(loop)\\nelse:\\n    loop = asyncio.get_event_loop()\\n\")), \"\\n\", React.createElement(_components.p, null, \"以降、loop を得るコードを省略。\\nEventLoop に関数を投入する\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"def func(loop):\\n    loop.stop() # 停止\\n\\nloop.call_soon(func, loop)\\nloop.run_forever()\\nprint('done')\\n\")), \"\\n\", React.createElement(_components.p, null, \"asyncio.get_event_loop で loop を取得。loop.call_soon で loop に関数を投入できる。\\n投入された関数は、loop.run_forever で消化される。\\nついでに、loop.stop で run_forever から抜けることができる。\\nEventLoop に generator を投入する\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"def gen(loop, name, count):\\n    print(name, loop.time())\\n    for i in range(count):\\n        print(name, i, loop.time())\\n        yield\\n    print(name, 'done')\\n    loop.stop()\\n\\nasyncio.ensure_future(gen(loop, 'a', 3))\\nasyncio.ensure_future(gen(loop, 'b', 3))\\nloop.run_forever()\\n\\na 534341.609\\na 0 534341.609\\nb 534341.609\\nb 0 534341.609\\na 1 534341.609\\nb 1 534341.609\\na 2 534341.609\\nb 2 534341.609\\na done\\nb done\\n\")), \"\\n\", React.createElement(_components.p, null, \"loop.stop で止まった。\\nすべての task が終わるのを待つ\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"def gen(loop, name, count):\\n    print(name, loop.time())\\n    for i in range(count):\\n        print(name, i, loop.time())\\n        yield\\n    print(name, 'done')\\n\\ntaskA=asyncio.ensure_future(gen(loop, 'a', 3), loop=loop)\\ntaskB=asyncio.ensure_future(gen(loop, 'b', 5), loop=loop)\\nfuture=asyncio.gather(taskA, taskB)\\nfuture.add_done_callback(lambda future: loop.stop())\\ntask=asyncio.ensure_future(future, loop=loop)\\n\\nloop.run_forever()\\n\\na 571911.359\\na 0 571911.359\\nb 571911.359\\nb 0 571911.359\\na 1 571911.359\\nb 1 571911.359\\na 2 571911.359\\nb 2 571911.359\\na done\\nb 3 571911.359\\nb 4 571911.359\\nb done\\n\")), \"\\n\", React.createElement(_components.p, null, \"loop.run_until_complete で future が終わるのを待つ\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"def gen(loop, name, count):\\n    print(name, loop.time())\\n    for i in range(count):\\n        print(name, i, loop.time())\\n        yield\\n    print(name, 'done')\\nfutureA=asyncio.ensure_future(gen(loop, 'a', 3), loop=loop)\\nfutureB=asyncio.ensure_future(gen(loop, 'b', 5), loop=loop)\\nfuture=asyncio.gather(futureA, futureB)\\n\\nloop.run_until_complete(future)\\n\")), \"\\n\", React.createElement(_components.p, null, \"future の終了を待って loop.stop したいなら run_until_complete するのが明瞭。\\nPEP492 – Coroutines with async and await syntax(python3.5 09-Apr-2015)\"), \"\\n\", React.createElement(_components.p, null, \"generator を流用した coroutine は紛らわしいので、coroutine に独自のシンタックスを導入するで。native coroutine と呼称する。C で実装しているわけではない。\\n関数内で await を使わなくても coroutine として有効\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"async def read_data(db):\\n    pass\\n\\nEventLoopにnative coroutineを投入する\\nasync def gen(loop, name, count):\\n    print(name, loop.time())\\n    for i in range(count):\\n        print(name, i, loop.time())\\n        #yield\\n        await asyncio.sleep(0)\\n    print(name, 'done')\\n\\ntaskA=asyncio.ensure_future(gen(loop, 'a', 3), loop=loop)\\ntaskB=asyncio.ensure_future(gen(loop, 'b', 5), loop=loop)\\nfuture=asyncio.gather(taskA, taskB)\\n\\nloop.run_until_complete(future)\\n\")), \"\\n\", React.createElement(_components.p, null, \"yield を await asyncio.sleep(0)で置き換えた。\\nyield のままだと TypeError になる。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Traceback (most recent call last):\\n  File \\\".\\\\exp.py\\\", line 18, in <module>\\n    taskA=asyncio.ensure_future(gen(loop, 'a', 3), loop=loop)\\n  File \\\"D:\\\\Python36\\\\lib\\\\asyncio\\\\tasks.py\\\", line 519, in ensure_future\\n    raise TypeError('A Future, a coroutine or an awaitable is required')\\nTypeError: A Future, a coroutine or an awaitable is required\\n\\nIt is a TypeError if __await__ returns anything but an iterator.\\n\")), \"\\n\", React.createElement(_components.p, null, \"実験。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"def it():\\n    yield\\n\\nasync def co_y():\\n    yield\\n\\nasync def co():\\n    pass\\n\\n<class 'generator'>\\n<class 'async_generator'>\\n.\\\\exp.py:22: RuntimeWarning: coroutine 'co' was never awaited\\n  print(type(co()))\\n<class 'coroutine'>\\n\")), \"\\n\", React.createElement(_components.p, null, \"async_generator…。async def 内で yield すると違うものになるのね。syntax error にはできんな。\\n自前のメインループに loop を組み込むとすれば\\nloop.once のような関数があると毎フレーム小出しにタスクを消化できるのだが。\\nググってみた。\"), \"\\n\", React.createElement(_components.p, null, \"https://stackoverflow.com/questions/29868372/python-asyncio-run-event-loop-once\"), \"\\n\", React.createElement(_components.p, null, \"loop.stop(); loop.run_forever()\"), \"\\n\", React.createElement(_components.p, null, \"なるほど。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"async def gen(loop, name, count):\\n    print(name, loop.time())\\n    for i in range(count):\\n        print(name, i, loop.time())\\n        await asyncio.sleep(0)\\n    print(name, 'done')\\n\\ntaskA=asyncio.ensure_future(gen(loop, 'a', 3), loop=loop)\\ntaskB=asyncio.ensure_future(gen(loop, 'b', 5), loop=loop)\\nfuture=asyncio.gather(taskA, taskB)\\n\\ncount=1\\nwhile not future.done():\\n    print(count)\\n    count+=1\\n    # loop one step\\n    loop.stop()\\n    loop.run_forever()\\n\\nprint('done')\\n\\n1\\na 579281.828\\na 0 579281.828\\nb 579281.828\\nb 0 579281.828\\n2\\na 1 579281.828\\nb 1 579281.828\\n3\\na 2 579281.828\\nb 2 579281.828\\n4\\na done\\nb 3 579281.828\\n5\\nb 4 579281.828\\n6\\nb done\\n7\\ndone\\n\")), \"\\n\", React.createElement(_components.p, null, \"いいかんじになった。これなら付き合っていけそうだ。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/06/python_asyncio.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
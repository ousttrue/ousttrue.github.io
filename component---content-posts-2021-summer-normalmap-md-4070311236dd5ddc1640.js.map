{"version":3,"file":"component---content-posts-2021-summer-normalmap-md-4070311236dd5ddc1640.js","mappings":"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","sources":["webpack:///./content/posts/2021/summer/normalmap.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h1: \"h1\",\n    pre: \"pre\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"glTFViewerの実装がてら法線マップの実装をやってみる。\\n\", React.createElement(_components.code, null, \"OpenGL 4.0 Shading Language Cookbook\"), \" を参考に進めた。\"), \"\\n\", React.createElement(_components.h1, null, \"法線mapとTangentを供給する\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet をサンプルモデルとした。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"glActiveTexture\"), \" がうまくいかず難航する。\\n以下のようにして、無理やり解決。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-glsl\"\n  }, \"#version 400\\n#extension GL_ARB_shading_language_420pack : enable\\nlayout(binding = 0) uniform sampler2D Tex0;\\nlayout(binding = 1) uniform sampler2D Tex1;\\n\")), \"\\n\", React.createElement(_components.p, null, \"すべての sampler2D が 0 にバインディングされる挙動だった。\\n\", React.createElement(_components.code, null, \"#version 420\"), \" はうまくいかなかったので断念。\\nエラーは出ないが、何もレンダリングされなくなった。\"), \"\\n\", React.createElement(_components.h1, null, \"Tangent が格納されていないので生成する\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/KhronosGroup/glTF/tree/master/specification/2.0 に以下のよう書いてある。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Implementation note: When tangents are not specified, client implementations should calculate tangents using default MikkTSpace algorithms. For best results, the mesh triangles should also be processed using default MikkTSpace algorithms.\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"MikkTSpace\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/mmikk/MikkTSpace\"), \"\\n\", React.createElement(_components.p, null, \"さくっと dll を作成して、 luajit から呼びだしてみた。\\n\", React.createElement(_components.code, null, \"indices\"), \" \", React.createElement(_components.code, null, \"POSITION\"), \" \", React.createElement(_components.code, null, \"NORMAL\"), \" \", React.createElement(_components.code, null, \"TEXCOORD0\"), \" を入力して \", React.createElement(_components.code, null, \"TANGENT\"), \" を出力する。\\nわりと適当で動く \", React.createElement(_components.code, null, \"luajit ffi\"), \" 恐るべし。\\nさすがに C の方に呼びだし回数を減らすラッパーを作ったほうが速そうだが、動かすだけなら問題なし。\"), \"\\n\", React.createElement(_components.p, null, \"memo\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://bgolus.medium.com/generating-perfect-normal-maps-for-unity-f929e673fc57#c473\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"Shader\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"OpenGL 4.0 Shading Language Cookbook\"), \" の phong shading を省略して法線だけ確認。\\n\", React.createElement(_components.code, null, \"2倍して1引く\"), \" を補った。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-glsl\"\n  }, \"#version 400\\nuniform mat4 MVP;\\nuniform mat4 ModelViewMatrix;\\nuniform mat3 NormalMatrix;\\nuniform vec3 LightDirection;\\n\\nlayout(location = 0) in vec3 VertexPosition;\\nlayout(location = 1) in vec3 VertexNormal;\\nlayout(location = 2) in vec2 VertexTexCoord;\\nlayout(location = 3) in vec4 VertexTangent;\\nout vec3 LightDir;\\nout vec3 ViewDir;\\nout vec2 TexCoord;\\nout vec3 Debug;\\n\\nvoid main() {\\n  vec3 normal = normalize(NormalMatrix * VertexNormal);\\n  vec3 tangent = normalize(NormalMatrix * vec3(VertexTangent));\\n  vec3 binormal = normalize(cross(normal, tangent)) * VertexTangent.w;\\n  mat3 toObjectLocal =\\n      mat3(tangent.x, binormal.x, normal.x, tangent.y, binormal.y, normal.y,\\n           tangent.z, binormal.z, normal.z);\\n  vec3 pos = vec3(ModelViewMatrix * vec4(VertexPosition, 1.0));\\n  LightDir = normalize(toObjectLocal * LightDirection);\\n  ViewDir = toObjectLocal * normalize(-pos);\\n  TexCoord = VertexTexCoord;\\n  Debug = vec3(VertexTangent);\\n\\n  gl_Position = MVP * vec4(VertexPosition, 1.0);\\n};\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-glsl\"\n  }, \"#version 400\\n#extension GL_ARB_shading_language_420pack : enable\\n\\nlayout(binding = 0) uniform sampler2D Tex0;\\nlayout(binding = 1) uniform sampler2D Tex1;\\nin vec3 LightDir;\\nin vec3 ViewDir;\\nin vec2 TexCoord;\\nin vec3 Debug;\\nout vec4 FragColor;\\n\\nvoid main() {\\n  vec4 texColor = texture2D(Tex0, TexCoord);\\n  vec4 normal = texture2D(Tex1, TexCoord);\\n\\n  // FragColor = vec4(Debug, 1);\\n\\n  float intensity = max(dot(LightDir, (normal.xyz * 2 - 1)), 0);\\n  vec3 color = vec3(intensity);\\n  FragColor = vec4(color, 1);\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"glTF の シェーダー では、 \", React.createElement(_components.code, null, \"mat3\"), \" を fragment shader に送りこんでいた。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/bwasty/gltf-viewer/tree/master/src/shaders\"), \"\\n\", React.createElement(_components.p, null, \"tangent space でライティングするという概念は同じらしい。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","h1","pre","blockquote","ul","li","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
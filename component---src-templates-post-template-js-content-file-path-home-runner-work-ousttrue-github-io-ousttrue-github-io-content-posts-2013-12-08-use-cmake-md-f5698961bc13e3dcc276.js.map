{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-12-08-use-cmake-md-f5698961bc13e3dcc276.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,KAAM,SACLC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBN,EAAYG,KAAM,CAC3CI,wBAAyB,CACvBC,OAAQ,g4MAGd,CAKA,MAJA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWX,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCVA,MAAMM,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBa,EAAAA,EAAQ,KAAMb,EAAAA,cAAoB,KAAM,KAAMY,EAAKE,IAAIC,YAAYC,OAAQhB,EAAAA,cAAoBiB,EAAAA,GAAa,CACrIlB,WAAYA,GACXQ,GACL,CACe,SAASW,EAAiBzB,GACvC,OAAOO,EAAAA,cAAoBU,EAAcjB,EAAOO,EAAAA,cAAoBmB,EAAqB1B,GAC3F,C","sources":["webpack:///./content/posts/2013/12/08/use_cmake.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">ArUcoを使おうとしたら、msvcpdのvc10版を要求されてvc12でデバッグビルドが動かなかった。\\n\\n最新版のOpenCV-2.4.7をゲットしてきたところvc10とvc11は含まれて居るのだが、vc12ビルドは含まれていなかった(vc2013は早すぎたかw)。\\n仕方ないので自前ビルドすることにした。\\nということでcmakeの使い方を調べてみる。\\nついでに、cmakeでビルドしたライブラリを特定のディレクトリを基準にインストールする方法を調べてみる。\\n練習にzlibをビルドしてインストールしてみる\\n以下のようなディレクトリ構成で運用してみることを目標に作業開始。\\nlocal_vc12\\n + bin # dll置き場\\n + include # dllを使うのに必要なheader置き場\\n + lib # dllのimportライブラリ置き場\\n\\n外部依存の無い適当なライブラリで練習してみようということでzlibを選定。\\nさっそくcmakeを使ってみようと思ったら、zlib-1.2.8にはCmakeLists.txtが含まれとるで。\\nC:\\\\src> cd zlib-1.2.8\\nC:\\\\src\\\\zlib-1.2.8> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\nC:\\\\src\\\\zlib-1.2.8> msbuild INSTALL.vcxproj\\nC:\\\\src\\\\zlib-1.2.8> msbuild INSTALL.vcxproj /p:Configuration=Release\\n\\n以上で下記のようになった。\\nC:/local_vc12\\nC:/local_vc12/bin\\nC:/local_vc12/bin/zlib.dll\\nC:/local_vc12/bin/zlibd.dll\\nC:/local_vc12/include\\nC:/local_vc12/include/zconf.h\\nC:/local_vc12/include/zlib.h\\nC:/local_vc12/lib\\nC:/local_vc12/lib/zlib.lib\\nC:/local_vc12/lib/zlibd.lib\\nC:/local_vc12/lib/zlibstatic.lib\\nC:/local_vc12/lib/zlibstaticd.lib\\nC:/local_vc12/share\\nC:/local_vc12/share/man\\nC:/local_vc12/share/man/man3\\nC:/local_vc12/share/man/man3/zlib.3\\nC:/local_vc12/share/pkgconfig\\nC:/local_vc12/share/pkgconfig/zlib.pc\\n\\n素晴らしい。\\nOpenCV-2.4.7でやってみる\\nC:\\\\src> cd opencv-2.4.7\\nC:\\\\src\\\\opencv-2.4.7> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\nC:\\\\src\\\\opencv-2.4.7> msbuild ALL_BUILD.vcxproj\\n\\n失敗する。\\n\\nhttps://github.com/SpecLad/opencv/commit/7973594a01228107dcb9d2d1f10eb64498b91aac\\nhttp://stackoverflow.com/questions/17409956/cannot-compile-opencv-2-4-5-with-vs-2013-rtm\\n\\nあとIlmxxxでmin, maxのエラーが出るので”#include\\n&lt;algorithm>“する。std::min,\\nmaxはalgorithmに入っとる。ALL_BUILDが成功したらINSTALLする。\\nC:\\\\src\\\\opencv-2.4.7> msbuild INSTALL.vcxproj\\n\\nこれで”local_vc12”にopencvも入った。\\ncmakeはいままで敬遠していたのだがライブラリのinstallまで面倒見てくれるのはいいですな。\\n同じく敬遠していた自前dllを使う開発が捗りそうな感じだ。\\nArUcoをビルド\\ncmakeを使ったアプリ(ライブラリを使う方)のビルド。\\nC:\\\\src> cd aruco-1.2.4\\nC:\\\\src\\\\aruco-1.2.4> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\n\\nここでエラーが出る。\\nOpenCVが正式ビルドと違うディレクトリにインストールされたために検知に失敗する。\\n“C:/local_vc12/OpenCVConfig.cmake”を直接修正した。\\nget_filename_component(OpenCV_CONFIG_PATH \\\"${CMAKE_CURRENT_LIST_FILE}\\\" PATH CACHE)\\n#if(OpenCV_RUNTIME AND OpenCV_ARCH)\\n#  if(OpenCV_STATIC AND EXISTS \\\"${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib/OpenCVConfig.cmake\\\")\\n#    if(OpenCV_CUDA AND EXISTS \\\"${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib/OpenCVConfig.cmake\\\")\\n#      set(OpenCV_LIB_PATH \\\"${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib\\\")\\n#    else()\\n#      set(OpenCV_LIB_PATH \\\"${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib\\\")\\n#    endif()\\n#  elseif(EXISTS \\\"${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib/OpenCVConfig.cmake\\\")\\n#    if(OpenCV_CUDA AND EXISTS \\\"${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib/OpenCVConfig.cmake\\\")\\n#      set(OpenCV_LIB_PATH \\\"${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib\\\")\\n#    else()\\n#      set(OpenCV_LIB_PATH \\\"${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib\\\")\\n#    endif()\\n#  endif()\\n#endif()\\nset(OpenCV_LIB_PATH \\\"${OpenCV_CONFIG_PATH}/lib\\\")\\n\\nこれでビルドできた。\\nC:\\\\src\\\\aruco-1.2.4> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\nC:\\\\src\\\\opencv-2.4.7> msbuild ALL_BUILD.vcxproj\\n\\nしかし、OpenGLを使ったサンプルがビルドされぬ。\\nどうやらglutが見つからないらいしい。せっかくなのでFreeGlutを入れてみますか。\\nFreeGlut\\nhttp://freeglut.sourceforge.net/\\nC:\\\\src\\\\freeglut-2.8.1> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\nCMake Error: The source directory \\\"C:/src/freeglut-2.8.1\\\" does not appear to contain CMakeLists.txt.\\nSpecify --help for usage, or press the help button on the CMake GUI.\\n\\nCMakeLists.txtが無い。作ってみる。\\nproject (freeglut)\\n\\nfile(GLOB SOURCES \\\"src/*.c\\\")\\nADD_LIBRARY(freeglut SHARED ${SOURCES})\\n\\ninclude_directories(include)\\n\\nADD_DEFINITIONS(-DFREEGLUT_EXPORTS)\\nADD_DEFINITIONS(-D_USRDLL)\\nADD_DEFINITIONS(-D_WINDOWS)\\nADD_DEFINITIONS(-DWIN32)\\n\\nC:\\\\src\\\\freeglut-2.8.1> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\nC:\\\\src\\\\opencv-2.4.7> msbuild ALL_BUILD.vcxproj\\n\\nビルドできた。INSTALL.vcxprojが見当たらないのでCMakeLists.txtに追記する必要がありそう。\\nインストールに関する追記。\\n# dll\\nINSTALL(TARGETS freeglut RUNTIME\\n    DESTINATION bin)\\n# lib\\nINSTALL(TARGETS freeglut ARCHIVE\\n    DESTINATION lib)\\n# headers\\nINSTALL(DIRECTORY include/\\n    DESTINATION include\\n    PATTERN \\\"Makefile.*\\\" EXCLUDE\\n)\\n\\nインストールしてみる。\\nC:\\\\src\\\\freeglut-2.8.1> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\nC:\\\\src\\\\opencv-2.4.7> msbuild INSTALL.vcxproj\\n\\n -- Install configuration: \\\"Debug\\\"\\n -- Installing: C:/local_vc12/bin/freeglut.dll\\n -- Installing: C:/local_vc12/lib/freeglut.lib\\n -- Installing: C:/local_vc12/include\\n -- Installing: C:/local_vc12/include/GL\\n -- Up-to-date: C:/local_vc12/include/GL/freeglut.h\\n -- Up-to-date: C:/local_vc12/include/GL/freeglut_ext.h\\n -- Up-to-date: C:/local_vc12/include/GL/freeglut_std.h\\n -- Up-to-date: C:/local_vc12/include/GL/glut.h\\n\\nインストール成功。\\n再度ArUco\\nC:\\\\src\\\\freeglut-2.8.1> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\n -- FOUND OPENGL=YES    LIBS=opengl32;glu32;C:/local_vc12/lib/freeglut.lib\\n\\nglutが発見されたようだ。\\nどうやらcmakeはCMAKE_INSTALL_PREFIXにライブラリを探しに行くようですな。\\nC:\\\\src\\\\opencv-2.4.7> msbuild ALL_BUILD.vcxproj\\n\\ngl.hの前に”#include &lt;windows.h>“してやってビルドできた。\\nDebug版の後ろに”d”をつける\\nFreeGlutのCmakeLists.txtにzlibの”CmakeLists.txt”から頂いてきた。\\nset(CMAKE_DEBUG_POSTFIX \\\"d\\\")\\n\\n記述順の影響があるようで前の方(ADD_LIBRARYより前？)に書く必要があるっぽい。\\nDebug版の後ろに”d”がついたライブラリを使う\\n\\nhttp://stackoverflow.com/questions/2209929/linking-different-libraries-for-debug-and-release-builds-in-cmake-on-windows\\nhttp://stackoverflow.com/questions/5497348/debug-and-release-library-linking-with-cmake-visual-studio\\n\\nこういう書き方でできた。\\nset (OPENGL_LIBS  general ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY} optimized ${GLUT_glut_LIBRARY} debug ${GLUT_glut_DEBUG_LIBRARY})\\n\\nCMAKE_DEBUG_POSTFIXに関連は使われる方と使う方の双方で合わせる必要があるので変更する場合は自分で両方の面倒を見なければならない。\\n一応、cmakeのひととおりの使い方が分かってきた。\\nvcがmsbuildを使うようになってビルドが制御可能になっている感じ。\\nmakeの各ターゲットに対するmsbuildの実行方法は以下の通り。\\n\\\"target\\\", \\\"make\\\", \\\"msbuild\\\"\\n\\\"build\\\", \\\"make all\\\", \\\"msbuild ALL_BUILD.vcxproj /t:Build\\\"\\n\\\"release build\\\", \\\"?\\\", \\\"msbuild ALL_BUILD.vcxproj /t:Build /p:Configuration=Release\\\"\\n\\\"debug build\\\", \\\"?\\\", \\\"msbuild ALL_BUILD.vcxproj /t:Build /p:Configuration=Debug\\\"\\n\\\"clean\\\", \\\"make clean\\\", \\\"msbuild ALL_BUILD.vcxproj /t:Clean\\\"\\n\\\"install\\\", \\\"make install\\\", \\\"msbuild INSTALL.vcxproj\\\"\\n\\nちょっといろいろビルドしてみる。</code></pre></div>\"\n    }\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/12/08/use_cmake.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2598],{2345:function(n,e,t){t.r(e),t.d(e,{default:function(){return u}});var a=t(1151),r=t(7294);function o(n){const e=Object.assign({span:"span",p:"p"},(0,a.ah)(),n.components);return r.createElement(r.Fragment,null,r.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">タイトルが長いが、RenderingスレッドでC#関数を呼び出すと次回play時に固まるの続きです。\n\n前回の記事についてメールで指摘をいただきました。\n意訳\n\nmono_thread_detachすればいいよ\n\nなるほど、やってみよう。\nmono_thread_detachとは\n\nhttp://docs.go-mono.com/index.aspx?link=xhtml%3Adeploy%2Fmono-api-threads.html\n\nそいう関数があることはわかった。名前しか分からん。\n\nhttp://www.mono-project.com/docs/advanced/embedding/\nhttps://github.com/mono/mono/blob/master/docs/threading\n\nMonoをスクリプトエンジンとしてホスティングする場合に使うAPIらしい。\nMonoエンジンでC#のコードを実行する場合実行スレッドでは事前にスレッドの初期化をする必要があり、他所で作られた既存のスレッドを初期化するのがmono_thread_attachらしい。 mono_thread_attachされたスレッドはMonoの終了時に回収対象として登録されるが、これを解除するのがmono_thread_detachのようだ。\nやってみる\ndocumentが見つからなかったので、使われているコードを参考にしてみる。\n\nhttps://github.com/jart/freeswitch/blob/master/src/mod/languages/mod_managed/mod_managed.cpp\n\nusing System;\nusing System.Runtime.InteropServices;\nusing UnityEngine;\n\n\npublic class CallbackOnRenderThread : MonoBehaviour\n{\n    [DllImport("mono")]\n    static extern IntPtr mono_thread_current();\n\n    [DllImport("mono")]\n    static extern IntPtr mono_thread_detach(IntPtr p);\n\n    public int m_count;\n    public IntPtr m_renderThread;\n\n    void OnRender(int eventID)\n    {\n        m_count++;\n        m_renderThread = mono_thread_current();\n    }\n\n    private void OnApplicationQuit()\n    {\n        Debug.Log(m_count);\n\n        if (m_renderThread != IntPtr.Zero)\n        {\n            Debug.LogFormat("detach thread: {0}", m_renderThread);\n            mono_thread_detach(m_renderThread);\n            m_renderThread = IntPtr.Zero;\n        }\n    }\n\n    delegate void OnRenderFunc(int eventID);\n    OnRenderFunc m_callback;\n\n    void Update()\n    {\n        m_callback = new OnRenderFunc(OnRender);\n        var p = Marshal.GetFunctionPointerForDelegate(m_callback);\n        GL.IssuePluginEvent(p, 0);\n    }\n}\n\nCollecting from unknown threadと怒られる・・・\nならば、\npublic class CallbackOnRenderThread : MonoBehaviour\n{\n    [DllImport("mono")]\n    static extern IntPtr mono_thread_current();\n\n    [DllImport("mono")]\n    static extern IntPtr mono_thread_detach(IntPtr p);\n\n    public int m_count;\n    //public IntPtr m_renderThread;\n\n    void OnRender(int eventID)\n    {\n        try\n        {\n            m_count++;\n        }\n        finally\n        {\n            mono_thread_detach(mono_thread_current());\n        }\n    }\n\n    delegate void OnRenderFunc(int eventID);\n    OnRenderFunc m_callback;\n\n    void Update()\n    {\n        m_callback = new OnRenderFunc(OnRender);\n        var p = Marshal.GetFunctionPointerForDelegate(m_callback);\n        GL.IssuePluginEvent(p, 0);\n    }\n}</code></pre></div>'}}),"\n",r.createElement(e.p,null,"できちゃった。\nやったぜ。"))}var c=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?r.createElement(e,n,r.createElement(o,n)):o(n)},l=t(8678),d=t(4160),m=t(8736);const i={code:n=>{let{children:e,className:t}=n;return t?r.createElement(m.Z,{className:t},e):r.createElement("code",null,e)}};function s(n){let{data:e,children:t}=n;const o=e.mdx.frontmatter;return r.createElement(l.Z,null,r.createElement("h1",null,o.title),r.createElement("div",{className:"tags-index"},o.tags&&o.tags.length>0&&o.tags.map((n=>r.createElement(d.rU,{to:"/tags/"+n+"/",itemProp:"url"},r.createElement("button",null,n))))),r.createElement(a.Zo,{components:i},t))}function u(n){return r.createElement(s,n,r.createElement(c,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2017-unity-mono-thread-md-bb97f5f2a8e2dbdbe9e0.js.map
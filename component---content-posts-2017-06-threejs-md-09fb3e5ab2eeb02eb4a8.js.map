{"version":3,"file":"component---content-posts-2017-06-threejs-md-09fb3e5ab2eeb02eb4a8.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wGAAyG,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4BAA6B,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CACpWI,UAAW,iBACV,w2DAAk3D,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6EAA8E,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,8DAA+D,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4CAA6C,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gDAAiD,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CACj3EI,UAAW,uBACV,+vEACL,CAKA,UAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECeO,MAAMa,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,C","sources":["webpack:///./content/posts/2017/06/threejs.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"前のサイトは gulp を使って typescript で threejs.js していたのだけど、hugo で生成している今サイトでは素の javascript かなぁ。\\nes6 の練習を兼ねて。\"), \"\\n\", React.createElement(_components.p, null, \"hugo の md ファイルの中に直書きしてみた\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<div id=\\\"threejs\\\"></div>\\n<script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/three.js/85/three.min.js\\\"></script>\\n<script\\n  type=\\\"text/javascript\\\"\\n  src=\\\"https://threejs.org/examples/js/controls/OrbitControls.js\\\"\\n></script>\\n<script>\\n  function createScene() {\\n    var scene = new THREE.Scene();\\n\\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\\n    var material = new THREE.MeshPhongMaterial({ color: 0x0000ff });\\n    var box = new THREE.Mesh(geometry, material);\\n    box.position.y = 0.5;\\n    scene.add(box);\\n\\n    var light = new THREE.DirectionalLight(0xffffff);\\n    light.position.set(1, 1, 1);\\n    scene.add(light);\\n\\n    var planeGeometry = new THREE.PlaneGeometry(10, 10, 10, 10);\\n    var planeMaterial = new THREE.MeshBasicMaterial({\\n      color: 0x533e25,\\n      wireframe: true,\\n    });\\n    var planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\\n    var toRad = Math.PI / 180;\\n    planeMesh.rotation.x = 90 * toRad;\\n    scene.add(planeMesh);\\n\\n    var axis = new THREE.AxisHelper(1000);\\n    axis.position.set(0, 0, 0);\\n    scene.add(axis);\\n\\n    return scene;\\n  }\\n\\n  window.addEventListener(\\\"DOMContentLoaded\\\", function () {\\n    var renderer = new THREE.WebGLRenderer();\\n    renderer.setSize(800, 600);\\n    document.getElementById(\\\"threejs\\\").appendChild(renderer.domElement);\\n\\n    var scene = createScene();\\n\\n    var camera = new THREE.PerspectiveCamera(45, 800 / 600, 1, 1000);\\n    camera.position.set(2, 3, 5);\\n    camera.lookAt({ x: 0, y: 0, z: 0 });\\n\\n    var controls = new THREE.OrbitControls(camera);\\n\\n    var render = function () {\\n      requestAnimationFrame(render);\\n      //cube.rotation.x += 1 * Math.PI / 180;\\n      //cube.rotation.y += 1 * Math.PI / 180;\\n      //cube.rotation.z += 1 * Math.PI / 180;\\n      controls.update();\\n      renderer.render(scene, camera);\\n    };\\n    render();\\n  });\\n</script>\\n\")), \"\\n\", React.createElement(_components.p, null, \"動いた。\\nなるほど。\\nToDo\\nちょっと OrbitControls をカスタマイズしたいね。\\nメタセコ的なマウスボタンのアサインにしたい\"), \"\\n\", React.createElement(_components.p, null, \"左ドラッグはカメラ操作以外に開けておく\\n右ドラッグがカメラ回転\\n中ドラッグがカメラ移動\\nホイールがカメラドリー\"), \"\\n\", React.createElement(_components.p, null, \"マウスイベントの取得は WebGL エレメントの上にマウスカーソルがあるときだけ\"), \"\\n\", React.createElement(_components.p, null, \"OrbitControls.js が原因でテキストボックスに入力できなくなった問題の解決\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"stage.addEventListener(\\\"mouseover\\\", function () {\\n  controls.enabled = true;\\n  document.body.style.cursor = \\\"pointer\\\";\\n});\\n\\nstage.addEventListener(\\\"mouseout\\\", function () {\\n  controls.enabled = false;\\n  document.body.style.cursor = \\\"default\\\";\\n});\\n\\nfunction createScene() {\\n  var scene = new THREE.Scene();\\n\\n  var geometry = new THREE.BoxGeometry(1, 1, 1);\\n  var material = new THREE.MeshPhongMaterial({ color: 0x0000ff });\\n  var box = new THREE.Mesh(geometry, material);\\n  box.position.y = 0.5;\\n  scene.add(box);\\n\\n  var light = new THREE.DirectionalLight(0xffffff);\\n  light.position.set(1, 1, 1);\\n  scene.add(light);\\n\\n  var planeGeometry = new THREE.PlaneGeometry(10, 10, 10, 10);\\n  var planeMaterial = new THREE.MeshBasicMaterial({\\n    color: 0x533e25,\\n    wireframe: true,\\n  });\\n  var planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\\n  var toRad = Math.PI / 180;\\n  planeMesh.rotation.x = 90 * toRad;\\n  scene.add(planeMesh);\\n\\n  var axis = new THREE.AxisHelper(1000);\\n  axis.position.set(0, 0, 0);\\n  scene.add(axis);\\n\\n  scene.update = function () {\\n    box.rotation.x += 1 * toRad;\\n    box.rotation.y += 1 * toRad;\\n    box.rotation.z += 1 * toRad;\\n  };\\n\\n  return scene;\\n}\\n\\nfunction onLoaded() {\\n  var stage = document.getElementById(\\\"threejs\\\");\\n\\n  var width = stage.clientWidth;\\n  var height = stage.clientHeight;\\n  console.log(width, height);\\n\\n  var renderer = new THREE.WebGLRenderer();\\n  renderer.setSize(width, height);\\n  stage.appendChild(renderer.domElement);\\n\\n  var scene = createScene();\\n\\n  var camera = new THREE.PerspectiveCamera(45, width / height, 1, 1000);\\n  camera.position.set(2, 3, 5);\\n  camera.lookAt({ x: 0, y: 0, z: 0 });\\n\\n  var controls = new THREE.OrbitControls(camera);\\n  controls.enabled = false;\\n\\n  stage.addEventListener(\\\"mouseover\\\", function () {\\n    controls.enabled = true;\\n    document.body.style.cursor = \\\"pointer\\\";\\n  });\\n\\n  stage.addEventListener(\\\"mouseout\\\", function () {\\n    controls.enabled = false;\\n    document.body.style.cursor = \\\"default\\\";\\n  });\\n\\n  var render = function () {\\n    requestAnimationFrame(render);\\n    scene.update();\\n    controls.update();\\n    renderer.render(scene, camera);\\n  };\\n  render();\\n}\\n\\nwindow.addEventListener(\\\"DOMContentLoaded\\\", onLoaded);\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
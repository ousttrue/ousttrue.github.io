"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5093],{9298:function(e,t,n){n.r(t),n.d(t,{default:function(){return g}});var l=n(1151),a=n(7294);function c(e){const t=Object.assign({h1:"h1",p:"p",a:"a",span:"span",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h2:"h2"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.h1,null,"名付けて cydeer"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://github.com/ousttrue/cydeer"},"https://github.com/ousttrue/cydeer")),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">python</code>'}}),", ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cython</code>'}}),", ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">dear imgui</code>'}})," の組み合わせで名前を付けようと思ったのだが、既に先人がいっぱいいて名前が被るので適当に決めた。🦌"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://github.com/HankiDesign/awesome-dear-imgui#languages"},"https://github.com/HankiDesign/awesome-dear-imgui#languages")),"\n",a.createElement(t.p,null,"最初、",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DearPyGui</code>'}})," のサイトが強そうだったので試そうと思ったのだけど用途が違いそうだった。\n次に、しばらく ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pyimgui</code>'}})," を使っていい感じだったので、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docking</code>'}})," ブランチ対応を見たら開発ブランチならば動いたので、自前ビルドを改造して使っていた。\nPR も送ってみたのだが、\nどうせなら自分で作ろうという機運が高まったので、作った。\ncydeer は pyOpenGL とともに使う ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">薄い</code>'}})," ImGui ラッパーという路線である。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ctypes</code>'}})," を併用することでポインタを直接扱う。 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">camel case</code>'}})," と ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">snake case</code>'}})," の変換を含めて何も変えない。"),"\n",a.createElement(t.table,null,a.createElement(t.thead,null,a.createElement(t.tr,null,a.createElement(t.th,null,"lib"),a.createElement(t.th,null,"binder"),a.createElement(t.th,null,"imgui"),a.createElement(t.th,null,"window & graphincs"),a.createElement(t.th,null,"コメント"))),a.createElement(t.tbody,null,a.createElement(t.tr,null,a.createElement(t.td,null,"(python)cydeer"),a.createElement(t.td,null,"cython + ctypes(generate using libclang.cindex )"),a.createElement(t.td,null,"imgui docking branch"),a.createElement(t.td,null,"glfw など + pyOpenGL でがんばる"),a.createElement(t.td,null,"可能な限りAPIの改変をしない。ポインタは ctypes で作る")),a.createElement(t.tr,null,a.createElement(t.td,null,"(python)pyimgui"),a.createElement(t.td,null,"cython"),a.createElement(t.td,null,"imgui"),a.createElement(t.td,null,"glfw など + pyOpenGL でがんばる"),a.createElement(t.td,null,"ポインタ引数(p_openなど)による返り値を、tuple による複値で表現")),a.createElement(t.tr,null,a.createElement(t.td,null,"(python)DearPyGui"),a.createElement(t.td,null,"未確認"),a.createElement(t.td,null,"未確認"),a.createElement(t.td,null,"DirectX11。python からアクセスできない？"),a.createElement(t.td,null,"imgui をラップして独自 API。python で OpenGL するという目的には使えぬ")),a.createElement(t.tr,null,a.createElement(t.td,null,"(c)cimgui"),a.createElement(t.td,null,"未確認"),a.createElement(t.td,null,"未確認"),a.createElement(t.td),a.createElement(t.td,null,"imgui を ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">extern C</code>'}})," にラップしたもの。他言語バインド向け")),a.createElement(t.tr,null,a.createElement(t.td,null,"(rust)imgui-rs"),a.createElement(t.td,null,"未確認"),a.createElement(t.td,null,"未確認"),a.createElement(t.td),a.createElement(t.td,null,"builder パターンで Default 引数を代替")))),"\n",a.createElement(t.p,null,"imgui ラップには、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">関数オーバーロード</code>'}})," , ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">デフォルト引数</code>'}})," , ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">メンバー関数</code>'}})," という難所がある。\n要するに ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++</code>'}})," 要素なのだけど、",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++</code>'}})," 要素含めての imgui の使い勝手なので。各言語バインディングで悩ましいところです。\nたとえば、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rust</code>'}})," は関数オーバーロードやデフォルト引数が無いので API を変えてます。"),"\n",a.createElement(t.p,null,"C# とかでも、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">const ImVec2 pos&amp; = ImVec2(0, 0)</code>'}})," のような引数を解決するのは手間がかかったりする。\nDLLImport 定義に対するデフォルト引数では解決できないので、 C# 側で一時変数を作ってポインターを取得する必要がある。"),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">デフォルト引数</code>'}})," は cython で普通に解決した。\nclang.cindex から値を取れれば難しくない。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">メンバー関数</code>'}})," は ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ctypes</code>'}})," に ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cython</code>'}})," のメソッドを定義して、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">self</code>'}})," を ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this pointer</code>'}})," に cast して呼び出すコードを作った(ImGuiFontAtlas)。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">関数オーバーロード</code>'}})," は ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cython</code>'}})," でディスパッチするのはつらいので、",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MenuItem_2</code>'}})," のような suffix をつけて人間が選ぶようにした。"),"\n",a.createElement(t.p,null,"忘れていたが、もっとも問題になるのが ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">構造体の値渡し・返し</code>'}})," だった(C++に限らない？)。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">D言語</code>'}})," , ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rust</code>'}})," ともにこれができない(vcのコンパイラと互換性がない？)ので注意が必要だった。コンパイルは通るが動作がおかしかったような。\nImGui の ImVec2 を値返しする関数でヒットする。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cydeer</code>'}})," は、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cython</code>'}})," を採用したので、",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cython</code>'}})," 関数の出口で python 型に入れ替えるだけである。"),"\n",a.createElement(t.p,null,"あと、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cydeer</code>'}})," は ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pyi</code>'}})," 標準装備でいい感じである(一部実際のpython型と齟齬があるが・・・)。"),"\n",a.createElement(t.h2,null,"実装上の課題"),"\n",a.createElement(t.p,null,"cython の cimport の扱いがやっかいで、",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">imgui</code>'}}),", ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">imgui.internal</code>'}})," に分割しようとするとうまくいかなかった。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cydeer</code>'}})," に関しては巨大な単一のモジュールで行くのが無難かもしれない。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">internal</code>'}})," やノードエディターとか追加するときに分けたいのだけど。"),"\n",a.createElement(t.p,null,"現状、Windows + python-3.10 しか試していない。\nWindows11 の wslg + wayland で動くようにしたい。"))}var r=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.ah)(),e.components);return t?a.createElement(t,e,a.createElement(c,e)):c(e)},s=n(8678),u=n(1883),m=n(8838);const d={code:e=>{let{children:t,className:n}=e;return n?a.createElement(m.Z,{className:n},t):a.createElement("code",null,t)}};function o(e){let{data:t,children:n}=e;const c=t.mdx.frontmatter;return a.createElement(s.Z,null,a.createElement("h1",null,c.title),a.createElement("div",{className:"tags-index"},c.tags&&c.tags.length>0&&c.tags.map((e=>a.createElement(u.rU,{to:"/tags/"+e+"/",itemProp:"url"},a.createElement("button",null,e))))),a.createElement(l.Zo,{components:d},n))}function g(e){return a.createElement(o,e,a.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-winter-python-imgui-md-aa6bf2332ee81c17284c.js.map
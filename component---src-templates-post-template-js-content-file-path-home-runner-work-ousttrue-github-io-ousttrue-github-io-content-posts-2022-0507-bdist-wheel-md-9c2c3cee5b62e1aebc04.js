"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9509],{8343:function(n,a,s){s.r(a),s.d(a,{default:function(){return i}});var e=s(1151),t=s(7294);function p(n){const a=Object.assign({h1:"h1",span:"span",p:"p"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.h1,null,"bdist_wheel + pep517 ではまる"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">setup.py bdist_wheel</code></pre></div>'}}),"\n",t.createElement(a.p,null,"なら成功するが、"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">pip wheel .</code></pre></div>'}}),"\n",t.createElement(a.p,null,"だと失敗するという現象に悩まされる。\ncmake でビルドしている extension の pyd が含まれないのである。"),"\n",t.createElement(a.p,null,"原因は、 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">setup.py</code>'}})," の下記の記述。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">build_ext_cmake</span><span class="token punctuation">(</span>build_ext<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">for</span> ext <span class="token keyword">in</span> self<span class="token punctuation">.</span>extensions<span class="token punctuation">:</span>\n            self<span class="token punctuation">.</span>build_cmake<span class="token punctuation">(</span>ext<span class="token punctuation">)</span>\n\n    <span class="token keyword">def</span> <span class="token function">build_cmake</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ext<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token comment"># these dirs will be created in build_py, so if you don\'t have</span>\n        <span class="token comment"># any python sources to bundle, the dirs will be missing</span>\n        build_temp <span class="token operator">=</span> pathlib<span class="token punctuation">.</span>Path<span class="token punctuation">(</span>self<span class="token punctuation">.</span>build_temp<span class="token punctuation">)</span>\n        build_temp<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>\n        ext_path <span class="token operator">=</span> pathlib<span class="token punctuation">.</span>Path<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_ext_fullpath<span class="token punctuation">(</span>ext<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># &lt;- これ</span>\n        ext_path<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"直した。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python">        ext_path <span class="token operator">=</span> pathlib<span class="token punctuation">.</span>Path<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_ext_fullpath<span class="token punctuation">(</span>ext<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>absolute<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"たぶん、 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">get_ext_fullpath</code>'}})," が相対パスを返していて、変なところに ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pyd</code>'}})," が出力されていた。\npip の時だけフォルダの構成や pwd が変わっている様子。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">pip wheel . -v</code></pre></div>'}}),"\n",t.createElement(a.p,null,"として、ログと睨めっこしていたら気付いた。\npip が subprocess とか使うので、デバッガがアタッチできなくて、なかなかわからなかった。"))}var l=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},c=(s(8678),s(8838));const o={code:n=>{let{children:a,className:s}=n;return s?t.createElement(c.Z,{className:s},a):t.createElement("code",null,a)}};function u(n){let{data:a,children:s}=n;return t.createElement(t.Fragment,null,t.createElement("h1",null,a.mdx.frontmatter.title),t.createElement(e.Zo,{components:o},s))}function i(n){return t.createElement(u,n,t.createElement(l,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-0507-bdist-wheel-md-9c2c3cee5b62e1aebc04.js.map
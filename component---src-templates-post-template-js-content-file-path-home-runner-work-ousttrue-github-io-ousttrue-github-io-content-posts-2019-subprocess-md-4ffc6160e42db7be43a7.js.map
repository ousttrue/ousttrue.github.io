{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2019-subprocess-md-4ffc6160e42db7be43a7.js","mappings":"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","sources":["webpack:///./content/posts/2019/subprocess.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"https://docs.python.org/3/library/subprocess.html\"), \"\\n\", React.createElement(_components.p, null, \"こういうやつ\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">\\n      +-------+\\n      | child |\\n      |process|\\n      +-------+\\n   stdin ^ | stdout\\n         | v\\n      +-------+\\n      |process|\\n      +-------+\\n-> stdin     stdout -></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"subprocess モジュール\"), \"\\n\", React.createElement(_components.p, null, \"subprocess は、\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">os.system\\nos.spawn*</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"の置き換え。\"), \"\\n\", React.createElement(_components.h3, null, \"subprocess.run\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://docs.python.org/3/library/subprocess.html#subprocess.run\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"中でPopenして結果を集めて \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CompletedProcess</code>\"\n    }\n  }), \" として返す。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># 抜粋</span>\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">with</span> Popen<span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>popenargs<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span>kwargs<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">as</span> process<span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">try</span><span class=\\\"token punctuation\\\">:</span>\\n            stdout<span class=\\\"token punctuation\\\">,</span> stderr <span class=\\\"token operator\\\">=</span> process<span class=\\\"token punctuation\\\">.</span>communicate<span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">input</span><span class=\\\"token punctuation\\\">,</span> timeout<span class=\\\"token operator\\\">=</span>timeout<span class=\\\"token punctuation\\\">)</span> \\n\\n    <span class=\\\"token keyword\\\">return</span> CompletedProcess<span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>args<span class=\\\"token punctuation\\\">,</span> retcode<span class=\\\"token punctuation\\\">,</span> stdout<span class=\\\"token punctuation\\\">,</span> stderr<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"実行して結果の文字列を得て終わりというタイプの用途向け。\\n旧 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">os.system</code>\"\n    }\n  }), \" の代替になると思う。\"), \"\\n\", React.createElement(_components.h3, null, \"subprocess.Popen\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://docs.python.org/3/library/subprocess.html#popen-constructor\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"標準入力、標準出力を制御するのはこっち。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">subprocess<span class=\\\"token punctuation\\\">.</span>Popen<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'cmd_name'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'arg0'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'arg1'</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    stdin<span class=\\\"token operator\\\">=</span>subprocess<span class=\\\"token punctuation\\\">.</span>PIPE<span class=\\\"token punctuation\\\">,</span>\\n    stdout<span class=\\\"token operator\\\">=</span>subprocess<span class=\\\"token punctuation\\\">.</span>PIPE<span class=\\\"token punctuation\\\">,</span>\\n    stderr<span class=\\\"token operator\\\">=</span>subprocess<span class=\\\"token punctuation\\\">.</span>PIPE<span class=\\\"token punctuation\\\">,</span>\\n    cwd<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> env<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span>\\n    text<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">False</span>\\n    <span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Readループが一個しかない時はこれでいいんでないかな。\"), \"\\n\", React.createElement(_components.h2, null, \"今回のテーマ\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">\\n      +-------+\\n      | child |\\n      |process|\\n      +-------+\\n   stdin ^ | @stdout\\n         | v\\n      +-------+\\n      |process| ここでロギングして通信内容を確認したい\\n      +-------+\\n  @stdin ^ | stdout\\n         | v\\n      +-------+\\n      | parent|\\n      |process|\\n      +-------+\\n</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"@のところを常時読み込みにしたい(2つのReadループ)\"), \"\\n\", React.createElement(_components.li, null, \"@stdin をReadするとブロックして固まるのでつらい\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"つらいのだ。\"), \"\\n\", React.createElement(_components.h2, null, \"asyncio\"), \"\\n\", React.createElement(_components.p, null, \"２つのReaderを非同期で制御しようということで 。\"), \"\\n\", React.createElement(_components.h3, null, \"asyncio の基本\"), \"\\n\", React.createElement(_components.p, null, \"loop を露出させる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"loop は暗黙。\\n基本的にこちらでよいと思う。\\n必要に応じて取得する。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h4, null, \"asyncio.create_task で新しいスタックを開始する\"), \"\\n\", React.createElement(_components.p, null, \"新しいスタックなのでエラーハンドリングが無いことに注意。\"), \"\\n\", React.createElement(_components.h4, null, \"StreamReaderProtocol と StreamWriterProtocol\"), \"\\n\", React.createElement(_components.p, null, \"コールバックと Stream を結び付ける。\"), \"\\n\", React.createElement(_components.h3, null, \"Windowsの標準入出力はIOCPできない\"), \"\\n\", React.createElement(_components.p, null, \"IOCPできるハンドルは決まっていて、\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"通常のファイル\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Socket\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"NamedPipe\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"https://tim.mcnamara.nz/post/176613307022/iocp-and-stdio\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"python3.7 で \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">asyncio.create_subprocess</code>\"\n    }\n  }), \" ができた\"), \"\\n\", React.createElement(_components.p, null, \"child process 側はこれで助かった。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://docs.python.org/3/library/asyncio-subprocess.html\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"なんか、たまに \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">socket.exception</code>\"\n    }\n  }), \" が出るので、\\ntcpのlocalhost接続にリダイレクトするとか謎の技使っているのかもしれぬ。\"), \"\\n\", React.createElement(_components.p, null, \"おかげで、子プロセスの標準入出力から \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">StreamReader</code>\"\n    }\n  }), \" と \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">StreamWriter</code>\"\n    }\n  }), \"\\nを楽に取得できる。\"), \"\\n\", React.createElement(_components.h4, null, \"重い NativeCoroutine は、ThreadPoolExecutorに逃がす\"), \"\\n\", React.createElement(_components.p, null, \"標準入力側\"), \"\\n\", React.createElement(_components.p, null, \"GILを回避して、別スレッドで待てるのではないか。\"), \"\\n\", React.createElement(_components.p, null, \"どんな処理が、NativeCoroutine なのか。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2019/subprocess.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","h2","h3","ul","li","h4","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-05-19-call-with-tuple-md-57687254cc15a238b7a5.js","mappings":"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","sources":["webpack:///./content/posts/2013/05/19/call-with-tuple.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"msgpack-rpc-asio の関数登録と実行\\nmsgpack-rpc のリクエストは、によると\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"[type, msgid, method, params]\\n\")), \"\\n\", React.createElement(_components.p, null, \"という形式なので method 名を std::string として params を std::tuple として得られる。\\nこれをサーバ側で如何に呼び出すかについて。\\n単純な実装だと以下のようにメソッド名をキーにして分岐することになる。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"int and(int, int);\\nclass dispatcher { void dispatch(int msgid, const std::string &method,\\nconst msgpack::object &params) { if(method==“add”){ // 引数展開\\nstd::tuple t; params.convert(&t);\\n// 関数実行\\nint result=add(std::get<0>(t), std::get<1>(t));\\n\\n// 結果のパッキング\\n// response [type, msgid, error, result]\\nmsgpack::sbuffer response;\\nmsgpack::packer<msgpack::sbuffer> pk(&response);\\npk.pack_array(4)\\npk.pack(1);\\npk.pack(msgid);\\npk.pack_nil();\\npk.pack(result);\\n\\n// responseを送り返す\\n\\n\\n} else{ throw “unknown func”; }\\n\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"引数展開、関数呼び出し、結果のパッキングと一連の操作を定型処理として括りだすと下記のように書ける。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"// ２引数展開用 class dispatcher { // 実行 void dispatcher::dispatch(int\\nmsgid, const std::string &method, const msgpack::object &params) {\\nif(method==“add”){ msgpack::sbuffer response=unpack_exec_pack(msgid,\\nadd, params);\\n// responseを送り返す\\n\\n\\n} else{ throw “unknown func”; }\\n\\n}\\n// ヘルパー template msgpack::sbuffer unpack_exec_pack(int msgid,\\nR(*f)(A1, A2), const msgpack::object &params) { // 引数展開 std::tuple\\nt; params.convert(&t);\\n// 関数実行\\nR result=add(std::get<0>(t), std::get<1>(t));\\n\\n// 結果のパッキング\\n// response [type, msgid, error, result]\\nmsgpack::sbuffer response;\\nmsgpack::packer<msgpack::sbuffer> pk(&response);\\npk.pack_array(4)\\npk.pack(1);\\npk.pack(msgid);\\npk.pack_nil();\\npk.pack(result);\\n\\nreturn response;\\n\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"１引数関数から９引数くらいまでと返り値 void 版を作ってやればだいたいの関数を登録することができる。\\nさらに 関数の登録と実行を分けるべく次のように拡張した。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"class\\ndispatcher { std::map m_map;\\n// 実行 void dispatch(int msgid, const std::string &method, const\\nmsgpack::object &params) { std::function f=m_map.find(method);\\nif(f!=m_map.end()){ // 関数実行 msgpack::sbuffer resonse=f(msgid,\\nparams);\\n// responseを送り返す\\n\\n\\n} else{ throw “unknown func”; }\\n\\n}\\n// 登録 template void add_handler(const std::string &method, R(*f)(A1,\\nA2)) {\\nm_map[method]=f->msgpack::sbuffer{\\n// 引数展開\\nstd::tuple<A1, A2> t;\\nparams.convert(&t);\\n\\n// 実行\\nR result=f(std::get<0>(t), std::get<1>(t));\\n\\n// 結果のパッキング\\n// response [type, msgid, error, result]\\nmsgpack::sbuffer response;\\nmsgpack::packer<msgpack::sbuffer> pk(&response);\\npk.pack_array(4)\\npk.pack(1);\\npk.pack(msgid);\\npk.pack_nil();\\npk.pack(result);\\n\\nreturn response;\\n\\n\\n};\\n\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"msgpack->引数展開->c++関数呼び出し->msgpack\"), \" への一連の操作を 同一のシグネチャの \", React.createElement(_components.code, null, \"std::function\"), \" に封じ込めることができる。\\n次にこれを関数ポインタ以外に関数オブジェクトを受け付けるように拡張したい。\\nまず、std::function から実装。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"c++   // std::function用   template<typname R, typename A1, typename A2>   void add_handler(contt std::string &method, std::function<R(A1, A2)> f)   {     // 中身同じ   }\\n\")), \"\\n\", React.createElement(_components.p, null, \"呼び出し時に std::function を経由するようにすればあらゆる関数呼び出しを登録できる。\\n例えば、ラムダ関数も以下のように登録できる。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"c++ // ラムダ登録 dispatcher d; d.add_handler(\\\"add\\\",      std::function<int(int, int)>(       [](int a, int b)->int{          return a+b;        }));\\n\")), \"\\n\", React.createElement(_components.p, null, \"しかし、どうせなら\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"c++ dispatcher d; d.add_handler(\\\"add\\\",      [](int a, int b)->int{        return a+b;      });\\n\")), \"\\n\", React.createElement(_components.p, null, \"と書きたい。\\nとなると下記のような登録関数を書かねばならぬが関数のシグネチャがわからないので中身を記述することができない。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"// ラムダの登録\\ntemplate<typname F>\\nvoid add_handler(const std::string &method, F f)   {     // 型がわからぬ   }\\n\")), \"\\n\", React.createElement(_components.p, null, \"ここで関数オブジェクトの operator()へのポインタを型推論することで F のシグネチャを得ることができる。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"template void add_handler(const std::string &method, F f,\\nR(C::*)(A1, A2)const) { // 中身同じ }\\n// ラムダの登録 // std::functionも受けられる // std::bindは無理だった //\\n\")), \"\\n\", React.createElement(_components.p, null, \"operator()がひとつしかない関数オブジェクトを受け付けられる？\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"template\\nvoid add_handler(const std::string &method, F f) {\\n// 上の関数で型推論させる\\nadd_handler(method, f, &F::operator()); }\\n\")), \"\\n\", React.createElement(_components.p, null, \"これでめでたくラムダも直接登録できるようになった。\\nただし、operator()のオーバーロードが解決できないらしく std::bind が登録できない。\\nstd::bind に関しては、ラムダで代用できるし std::function でラップできるのでおいておくことにした。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/05/19/call-with-tuple.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
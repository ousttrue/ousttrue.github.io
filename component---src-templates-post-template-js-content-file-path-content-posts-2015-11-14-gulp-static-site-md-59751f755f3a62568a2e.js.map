{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2015-11-14-gulp-static-site-md-59751f755f3a62568a2e.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,oBAAqB,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CACzJI,wBAAyB,CACvBC,OAAQ,q4JAGd,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BCVA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,MAAME,EAAcD,EAAKE,IAAID,YAC7B,OAAOb,EAAAA,cAAoBe,EAAAA,EAAQ,KAAMf,EAAAA,cAAoB,KAAM,KAAMa,EAAYG,OAAQhB,EAAAA,cAAoB,MAAO,CACtHQ,UAAW,cACVK,EAAYI,MAAQJ,EAAYI,KAAKC,OAAS,GAAKL,EAAYI,KAAKE,KAAIC,GAClEpB,EAAAA,cAAoBqB,EAAAA,GAAM,CAC/BC,GAAI,SAASF,EAAG,IAChBG,SAAU,OACTvB,EAAAA,cAAoB,SAAU,KAAMoB,OACpCpB,EAAAA,cAAoBwB,EAAAA,GAAa,CACpCzB,WAAYA,GACXQ,GACL,CACe,SAASkB,EAAiBjC,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoB0B,EAAqBlC,GAC3F,C","sources":["webpack:///./content/posts/2015/11/14/gulp_static_site.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"gulp で静的サイト生成その２\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">引き続き、サイト生成作業を続行中。見た目は置いておいて(bootstrap入れたけど)機能を優先して作ろう。\\n「次へ」と「前へ」のリンクを作れば内部リンクは揃う。\\ngulpは自由度が高いのでなんとでもなるな。\\n強まったmakeのようで非常にポテンシャルを感じる。\\n中期的なも目標としてはローカルもしくはLAN内のnode.jsがホストとなるGUIをさくっと作れるようになるというものがあるのだが、\\n関連項目が多すぎてひたすら拡がっていくのが危険だ。\\n特に、インターネットで調べながらだと収束せずにひたすら拡散する傾向がある。\\nanglar, backboneは避けようと思ったのだがmithrilは気になっているし、electronも気になっている。\\nあと、typescriptもはやめに使いこなしたい。\\nだいぶgulpがわかってきた\\n「前へ」と「次へ」は全部のファイルをリストに投入してソートして隣通しのパスを得る必要がある。\\n一度リストに投入してから前へと次へを処理した後で、再度リストの中身を一個ずつ後ろに渡せばいいじゃない。\\nということでやってみたらあっさりできた。\\n野良プラグインの作り方が分かるとgulp面白いな。\\nmake-toc.js\\nvar through = require('through2');\\nvar gutil = require('gulp-util');\\nvar path = require('path');\\n\\nmodule.exports = function (outputFileName, options) {\\n\\n    options = options || {};\\n    var dest = options.dest;\\n    var filelist = [];\\n\\n    function transform(file, encoding, callback) {\\n\\n        // ファイルを集める\\n        filelist.push(file);\\n\\n        // callback()は必ず実行\\n        callback();\\n    }\\n\\n    function flush(callback) {\\n\\n        if (filelist.length > 0) {\\n\\n            // sortすることで日付順に並ぶ\\n            filelist.sort(function compareNumbers(a, b) {\\n                if (a.path &lt; b.path) {\\n                    return 1;\\n                } else {\\n                    return -1;\\n                }\\n            });\\n            var file = filelist[0];\\n\\n            // 目次\\n            var output_map = {\\n                cwd: file.cwd,\\n                base: file.base,\\n                path: file.base + outputFileName,\\n            };\\n           // console.log(output_map);\\n            var output = new gutil.File(output_map);\\n\\n            var html = '&lt;ul>\\\\n';\\n            //console.log(filelist.length);\\n            for (var i = 0; i &lt; filelist.length; ++i) {\\n                var f = filelist[i];\\n                var rel = dest + \\\"/\\\" + f.path.substr(f.base.length).replace(/\\\\\\\\/g, '/');\\n                //console.log(rel);\\n                html += '&lt;li>&lt;a href=\\\"' + rel + '\\\">' + f.frontMatter.title + '&lt;/a>&lt;/li>\\\\n';\\n\\n                // 各アイテムのfrontMatterにnextとprevを付ける\\n                // 降順に並んでいる\\n                if (i === 0) {\\n                    // 先頭\\n                    f.frontMatter.next = \\\"\\\";\\n                    f.frontMatter.prev = path.relative(path.dirname(f.path), filelist[i + 1].path).replace(/\\\\\\\\/g, '/');\\n                }\\n                else if (i === filelist.length-1) {\\n                    // 終端\\n                    f.frontMatter.next = path.relative(path.dirname(f.path), filelist[i - 1].path).replace(/\\\\\\\\/g, '/');\\n                    f.frontMatter.prev = \\\"\\\";\\n                }\\n                else {\\n                    f.frontMatter.next = path.relative(path.dirname(f.path), filelist[i - 1].path).replace(/\\\\\\\\/g, '/');\\n                    f.frontMatter.prev = path.relative(path.dirname(f.path), filelist[i + 1].path).replace(/\\\\\\\\/g, '/');\\n                }\\n            }\\n            html += '&lt;/ul>\\\\n';\\n            output.contents = new Buffer(html);\\n\\n            // filelistをoutputにくっつける\\n            output.filelist = filelist;\\n\\n            this.push(output);\\n        }\\n\\n        // callback()は必ず実行\\n        callback();\\n    }\\n\\n    return through.obj(transform, flush);\\n};\\n\\n\\nresplit.js\\nvar through = require('through2');\\nvar gutil = require('gulp-util');\\nvar path = require('path');\\n\\nmodule.exports = function () {\\n\\n    function transform(file, encoding, callback) {\\n\\n        // ファイルがnullの場合\\n        if (file.isNull()) {\\n            // 次のプラグインに処理を渡すためにthis.push(file)しておく\\n            this.push(file);\\n            // callback()は必ず実行\\n            return callback();\\n        }\\n\\n        // ファイルがstreamの場合（このサンプルプラグインはstreamに対応しない）\\n        if (file.isStream()) {\\n            // emit('error')を使って、プラグイン呼び出し側に'error'イベントを発生させる\\n            this.emit('error', new gutil.PluginError('gulp-diff', 'Streaming not supported'));\\n            // callback()は必ず実行\\n            return callback();\\n        }\\n\\n        // do something\\n        for(var key in file.filelist){\\n            var output=file.filelist[key];\\n            this.push(output);\\n        }\\n\\n        // callback()は必ず実行\\n        callback();\\n    }\\n\\n    return through.obj(transform);\\n};\\n\\n\\ngulfile.js\\ngulp.task('posts', function () {\\n    gulp.src(config.posts)\\n    // frontMatter処理してhtml化する\\n        .pipe($.frontMatter({ remove: true }))\\n        .pipe(myFrontmatter())\\n        .pipe($.markdown())\\n    // まとめてsortしてメタ情報を付与して目次を出力する\\n        .pipe(makeToc('index.html', { dest: 'posts' }))\\n        .pipe(gulp.dest('build'))\\n    // 再び分解する\\n        .pipe(resplit())\\n    // 以降通常\\n        .pipe($.debug({ title: 'files:' }))\\n    // テンプレートを適用して\\n        .pipe(ejsApplyer({ filename: 'templates/page.ejs' }, { root_path: '../../../../' }))\\n    // 出力\\n        .pipe(gulp.dest('build/posts'))\\n    ;\\n});</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2015/11/14/gulp_static_site.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
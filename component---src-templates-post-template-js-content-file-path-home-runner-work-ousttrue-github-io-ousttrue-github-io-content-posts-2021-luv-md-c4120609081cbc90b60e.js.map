{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-luv-md-c4120609081cbc90b60e.js","mappings":"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","sources":["webpack:///./content/posts/2021/luv.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"main loop がブロックするので luv を取り入れてみる。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/luvit/luv\"), \"\\n\", React.createElement(_components.h1, null, \"cmake で build\"), \"\\n\", React.createElement(_components.p, null, \"luv に CMake が付属しており簡単。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ cmake -S {LUV_DIR} -B {BUILD_DIR}\\n$ cmake --build {BUILD_DIR} --config Release</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h1, null, \"main loop を idle へ\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token comment\\\">-- Main loop</span>\\n<span class=\\\"token keyword\\\">while</span> app<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">new_frame</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">do</span>\\n    gui<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">update</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    app<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>gui<span class=\\\"token punctuation\\\">.</span>clear_color<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">end</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token keyword\\\">local</span> uv <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"luv\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">-- Main loop</span>\\n<span class=\\\"token keyword\\\">local</span> idle <span class=\\\"token operator\\\">=</span> uv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">new_idle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nidle<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token keyword\\\">not</span> app<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">new_frame</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">then</span>\\n        idle<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">stop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">end</span>\\n    gui<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">update</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    app<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>gui<span class=\\\"token punctuation\\\">.</span>clear_color<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">)</span>\\n\\nuv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"default\\\"</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h1, null, \"重い処理を thread へ\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\">    <span class=\\\"token keyword\\\">local</span> ctx <span class=\\\"token operator\\\">=</span> uv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">new_work</span><span class=\\\"token punctuation\\\">(</span>\\n        on_thread<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">--work,in threadpool</span>\\n        on_end <span class=\\\"token comment\\\">--after work, in loop thread</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n    uv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">queue_work</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">,</span> mp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">...</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Error: thread arg not support type 'table' at 2Error: thread arg not support type table at 1Uncaught Error: attempt to call a nil value</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"あ\"), \"\\n\", React.createElement(_components.h1, null, \"thread 間で受け渡しのできる型\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://github.com/luvit/luv/blob/master/docs.md#pseudo-types\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"threadargs: variable arguments (...) of type nil, boolean, number, string, or userdata\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"nvim ではそこで messagepack なわけか。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://tullio.hatenablog.com/entry/20121112/1352732239\"\n  }, \"Kyoto Tycoon+Lua-JIT拡張+MessagePack=無敵\"), \" 経由で \", React.createElement(_components.a, {\n    href: \"https://gist.github.com/catwell/2971290\"\n  }, \"The state of MessagePack in Lua\"), \" をたどり着く。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"If you want pure LuaJIT -> luajit-msgpack-pure\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"たしかに、これだ。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/catwell/luajit-msgpack-pure\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Windows なので \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">malloc</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">free</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">realloc</code>\"\n    }\n  }), \" が cdef できなかったのを修正\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">function</code>\"\n    }\n  }), \" と \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cdata</code>\"\n    }\n  }), \" を nil にしてスキップする処理を追加してみた\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"結果、巨大なテーブルの pack/unpack でブロックしてしまう。\\nあとスレッド側のエラーハンドリングをしてないので、デバッガはアタッチできないし、何もわからない。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pcall</code>\"\n    }\n  }), \" などでエラーメッセージを取得して、失敗した場合はエラーメッセージを投げるようにしてあげる必要がある。\"), \"\\n\", React.createElement(_components.p, null, \"なんとなく、使い方はわかった。\\n後で、アニメーションシステムを実装するときのインフラにも使えるかもしれない。\\nOpenGL のレンダースレッドと、シーン更新を分離する。\"), \"\\n\", React.createElement(_components.h1, null, \"関連\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://kimitok.hateblo.jp/entry/2014/04/16/223643\"\n  }, \"node.jsを支えるlibuvのチュートリアル\\\"uvbook\\\" :スレッド\")), \"\\n\", React.createElement(_components.li, null, \"https://nikhilm.github.io/uvbook/threads.html\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/luv.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h1","span","ul","li","blockquote","a","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
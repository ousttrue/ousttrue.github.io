"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9733],{64:function(n,e,r){r.r(e);var t=r(1151),a=r(7294);function i(n){const e=Object.assign({p:"p",ul:"ul",li:"li",pre:"pre",code:"code"},(0,t.ah)(),n.components);return a.createElement(a.Fragment,null,a.createElement(e.p,null,"こちらのモデルを使わせていただいております。"),"\n",a.createElement(e.p,null,"threejs_pmd_loader.ts source\nPmdLoader.ts source\n変換せずに直接 Pmd を読み込むべくカスタムローダーを作ってみよう。\nまず、SJIS 操作が必要なのでこちらを使わせて頂いた。"),"\n",a.createElement(e.ul,null,"\n",a.createElement(e.li,null,"https://github.com/polygonplanet/encoding.js\nあとは JSONLoader を参考にして ArrayBuffer から地道に情報を切り出していく。\nArrayBuffer から情報を切り出すのはこつがわかれば簡単で以下のようなヘルパークラスを作れば\nさくさくできる。\nBinaryReader"),"\n"),"\n",a.createElement(e.pre,null,a.createElement(e.code,{className:"language-javascript"},'class BinaryReader {\n  m_buffer: ArrayBuffer;\n  m_postiion = 0;\n\n  constructor(buffer: ArrayBuffer) {\n    this.m_buffer = buffer;\n  }\n\n  read(length: number) {\n    var slice = this.m_buffer.slice(this.m_postiion, this.m_postiion + length);\n    this.m_postiion += length;\n    return slice;\n  }\n\n  readString(length: number): string {\n    var slice = new Uint8Array(this.read(length));\n    let i = 0;\n    for (; i < slice.byteLength; ++i) {\n      if (slice[i] == 0) {\n        break;\n      }\n    }\n\n    return Encoding.codeToString(\n      Encoding.convert(slice.slice(0, i), {\n        to: "UNICODE",\n        from: "SJIS",\n      })\n    );\n  }\n\n  readFloat(): number {\n    var read = this.read(4);\n    return new Float32Array(read)[0];\n  }\n\n  readVector2(): THREE.Vector2 {\n    return new THREE.Vector2(this.readFloat(), this.readFloat());\n  }\n\n  readVector3(): THREE.Vector3 {\n    return new THREE.Vector3(\n      this.readFloat(),\n      this.readFloat(),\n      this.readFloat()\n    );\n  }\n\n  readRGB(): THREE.Color {\n    return new THREE.Color(\n      this.readFloat(),\n      this.readFloat(),\n      this.readFloat()\n    );\n  }\n\n  // int\n  readInt16(): number {\n    var read = this.read(2);\n    return new Int16Array(read)[0];\n  }\n\n  readInt32(): number {\n    var read = this.read(4);\n    return new Int32Array(read)[0];\n  }\n\n  // uint\n  readUint8(): number {\n    var read = this.read(1);\n    return new Uint8Array(read)[0];\n  }\n\n  readUint16(): number {\n    var read = this.read(2);\n    return new Uint16Array(read)[0];\n  }\n\n  readUint16Array(count: number): Uint16Array {\n    var read = this.read(2 * count);\n    return new Uint16Array(read);\n  }\n}\n')),"\n",a.createElement(e.p,null,"先頭の Vertices, Indices, Materials を読み込むところまで実装した。\n意外とあっさり Texture 読み込みまでできちゃった。Three.js 便利ですなぁ。\n骨を入れる前にシェーダーをやろう。\nトゥーンシェーダーでないと見栄えが悪い。"))}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?a.createElement(e,n,a.createElement(i,n)):i(n)}},1151:function(n,e,r){r.d(e,{ah:function(){return i}});var t=r(7294);const a=t.createContext({});function i(n){const e=t.useContext(a);return t.useMemo((()=>"function"==typeof n?n(e):{...e,...n}),[e,n])}}}]);
//# sourceMappingURL=component---content-posts-2015-12-22-threejs-pmd-loader-md-20574dbe3b671fb8affe.js.map
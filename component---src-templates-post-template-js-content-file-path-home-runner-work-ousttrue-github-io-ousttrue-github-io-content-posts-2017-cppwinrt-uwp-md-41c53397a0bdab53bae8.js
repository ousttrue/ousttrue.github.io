"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3729],{1676:function(n,e,t){t.r(e),t.d(e,{default:function(){return c}});var l=t(1151),r=t(7294);function i(n){const e=Object.assign({p:"p",pre:"pre",code:"code",ul:"ul",li:"li"},(0,l.ah)(),n.components);return r.createElement(r.Fragment,null,r.createElement(e.p,null,"C++/CX を置き換えるよさげなライブラリ C++WinRT を発見した。"),"\n",r.createElement(e.p,null,"C++/CX の機能を純粋な C++(C++17 とか新しめの)で実装したものらしく、WinRT の C++バインディングのような位置。\nC++/CX で"),"\n",r.createElement(e.pre,null,r.createElement(e.code,{className:"language-c++"},"Windows::UI::Core::CoreWindow ^window;\n")),"\n",r.createElement(e.p,null,"のようなものを"),"\n",r.createElement(e.pre,null,r.createElement(e.code,{className:"language-c++"},"#include <winrt/Windows.UI.Core.h>\nwinrt::Windows::UI::Core::Core window;\n")),"\n",r.createElement(e.p,null,"のように置き換える。",r.createElement(e.code,null,"-> "),"じゃなくて ",r.createElement(e.code,null,".")," を使うスマートポインタで実装されている。"),"\n",r.createElement(e.ul,null,"\n",r.createElement(e.li,null,"Migrating C++/CX source code to C++/WinRT"),"\n"),"\n",r.createElement(e.p,null,"C++/CX で async, await な非同期を実装する道具だった PPL もうまく置き換えているようだ。"),"\n",r.createElement(e.ul,null,"\n",r.createElement(e.li,null,"Using C++ co-routines with C++/WinRT asynchronous methods"),"\n"),"\n",r.createElement(e.p,null,"やってみる\nclone\nhttps://github.com/Microsoft/cppwinrtをcloneしてincludeできるようにしておく。\nC++WinRT はヘッダオンリーライブラリである。\nビルド確認"),"\n",r.createElement(e.p,null,"https://github.com/Microsoft/cppwinrt/tree/master/10.0.15063.0/Samples/CL"),"\n",r.createElement(e.p,null,"をベース。"),"\n",r.createElement(e.pre,null,r.createElement(e.code,{className:"language-c++"},'// main.cpp\n#pragma comment(lib, "windowsapp")\n\n#include <winrt/base.h>\n\nint __stdcall wWinMain(HINSTANCE, HINSTANCE, PWSTR, int)\n{\n    winrt::init_apartment();\n\n    return 0;\n}\n')),"\n",r.createElement(e.p,null,"あえて CMake で。\nCMakeLists.txt"),"\n",r.createElement(e.pre,null,r.createElement(e.code,{className:"language-cmake"},'CMAKE_MINIMUM_REQUIRED(VERSION 3.5)\nPROJECT(RendererToolkit) # .sln\n\nADD_DEFINITIONS(\n    -DWIN32=1\n    -DUNICODE=1\n    -D_UNICODE=1\n    )\n\nSET(CMAKE_C_FLAGS "/ZW /EHsc /await /std:c++latest")\nSET(CMAKE_CXX_FLAGS ${CMAKE_C_FLAGS})\nINCLUDE_DIRECTORIES(\n    # 適当にcloneしたパスを参照\n    ${CMAKE_CURRENT_LIST_DIR}/cppwinrt/10.0.15063.0\n    )\n\n##############################################################################\n# project\n##############################################################################\nSET(PROJECTNAME _SampleCoreWindow)\n\nFILE(GLOB SRCS *.cpp *.h)\n\nADD_EXECUTABLE(${PROJECTNAME} WIN32 ${SRCS})\n\nTARGET_INCLUDE_DIRECTORIES(${PROJECTNAME} PUBLIC\n    ${SUBRENDERER_INCLUDE}\n    )\n')),"\n",r.createElement(e.p,null,"UWP をターゲットにしたプロジェクトを生成する。"),"\n",r.createElement(e.pre,null,r.createElement(e.code,null,'> mkdir build\n> cd build\nbuild> cmake.exe -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -DCMAKE_C_FLAGS=/ZW /EHsc -G "Visual Studio 15 2017 Win64" ..\n')),"\n",r.createElement(e.p,null,"ビルドすると警告が出る。"),"\n",r.createElement(e.pre,null,r.createElement(e.code,null,"warning C4447: スレッド モデルのない 'main' シグネチャが見つかりました。'int main(Platform::Array<Platform::String^>^ args)' の使用を検討してください。\n")),"\n",r.createElement(e.p,null,"以下のように属性をつければ外せた。"),"\n",r.createElement(e.pre,null,r.createElement(e.code,null,"[Platform::MTAThread]\nint __stdcall wWinMain(HINSTANCE, HINSTANCE, PWSTR, int)\n")),"\n",r.createElement(e.p,null,"Debug - X64 - ローカルコンピューター でアプリが起動して、即終了することが確認できればよし。\nUWP の作法で空の App を作ってみる"),"\n",r.createElement(e.pre,null,r.createElement(e.code,{className:"language-c++"},'#pragma comment(lib, "windowsapp")\n\n#include <winrt/Windows.ApplicationModel.Core.h>\n#include <winrt/Windows.UI.Core.h>\n\n//\n// IFrameworkViewSourceとIFrameworkViewを一体化させるのは必要(ばらすとエラーになった)\n//\nstruct App : winrt::implements<App\n    , winrt::Windows::ApplicationModel::Core::IFrameworkViewSource\n    , winrt::Windows::ApplicationModel::Core::IFrameworkView>\n{\n    winrt::Windows::ApplicationModel::Core::IFrameworkView CreateView()\n    {\n        return *this;\n    }\n\n    void Initialize(winrt::Windows::ApplicationModel::Core::CoreApplicationView const&)\n    {\n    }\n\n    void Load(winrt::hstring const&)\n    {\n    }\n\n    void Uninitialize()\n    {\n    }\n\n    void Run()\n    {\n        auto window = winrt::Windows::UI::Core::CoreWindow::GetForCurrentThread();\n        window.Activate();\n\n        //\n\n        auto dispatcher = window.Dispatcher();\n        dispatcher.ProcessEvents(winrt::Windows::UI::Core::CoreProcessEventsOption::ProcessUntilQuit);\n    }\n\n    void SetWindow(winrt::Windows::UI::Core::CoreWindow const&)\n    {\n\n    }\n};\n\n\nint __stdcall wWinMain(HINSTANCE, HINSTANCE, PWSTR, int)\n{\n    winrt::init_apartment();\n\n    winrt::Windows::ApplicationModel::Core::CoreApplication::Run(App());\n}\n')),"\n",r.createElement(e.p,null,"警告とは無関係に、実行に"),"\n",r.createElement(e.p,null,r.createElement(e.code,null,"[Platform::MTAThread]")," か ",r.createElement(e.code,null,"winrt::init_apartment();")," のどちらかが必要？"),"\n",r.createElement(e.p,null,"IUnknown*を得る\nwinrt::get_abi\nメモ"),"\n",r.createElement(e.p,null,"https://github.com/Kitware/CMake/blob/master/Tests/VSWinStorePhone/CMakeLists.txt"),"\n",r.createElement(e.p,null,"VisualStudio2017 の C++/CX Universal D3D11 のテンプレートを C++/WinRT バージョンに改造できた。間違ってもコンパイルが通って実行時エラーになるのに難儀したが、C++/CX よりはだいぶ使い勝手がよさげな感じ。"))}var a=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,l.ah)(),n.components);return e?r.createElement(e,n,r.createElement(i,n)):i(n)};t(8678);function o(n){let{data:e,children:t}=n;return r.createElement(r.Fragment,null,r.createElement("h1",null,e.mdx.frontmatter.title),r.createElement(l.Zo,null,t))}function c(n){return r.createElement(o,n,r.createElement(a,n))}},8678:function(n,e,t){t(7294)},1151:function(n,e,t){t.d(e,{Zo:function(){return o},ah:function(){return i}});var l=t(7294);const r=l.createContext({});function i(n){const e=l.useContext(r);return l.useMemo((()=>"function"==typeof n?n(e):{...e,...n}),[e,n])}const a={};function o({components:n,children:e,disableParentContext:t}){let o;return o=t?"function"==typeof n?n({}):n||a:i(n),l.createElement(r.Provider,{value:o},e)}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-cppwinrt-uwp-md-41c53397a0bdab53bae8.js.map
{"version":3,"file":"component---content-posts-2013-11-26-unity-mmd-md-9fe7cdadcf86d7a9a7b5.js","mappings":"uHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,0BAA2B,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,iTAAkT,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,wCAAyC,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,sHAAuH,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,4OAA6O,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,0FAA2F,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,+CAC3qC,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECqBO,MAAMU,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2013/11/26/unity_mmd.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"仕事の都合もあって、Unityの学習を開始。\"), \"\\n\", React.createElement(_components.p, null, \"Unity開始\\nだいぶ前にオライリーのUnity本が出たころに少し触っただけなので初見とあまり変わらない。\\n今奥付、を見たら2011年9月とか書いてあった。\\nとりあえずUnity4.3をインストールして、\\n秀和システムの「見てわかるUnityゲーム制作超入門 (Game Developer Books)」\\nにさらっと目を通した。\\nこれからソフトバンクの「Unityではじめるゲームづくり(DVD付)\\n(ゲープロシリーズ) 」 を読むところ。\\nMikuMikuDance for Unityではまった\\nで、mmdモデルでもさくっと出してみようとしたところはまったのでそれについてメモ。\"), \"\\n\", React.createElement(_components.p, null, \"コンパイラ エラー CS0241 既定のパラメータ指定子は使用できません\"), \"\\n\", React.createElement(_components.p, null, \"が出てしまうと言うもの。\\n調べたところ、パラメータの規定値は.Net4.0で導入されたものらしいのだが\\n.Net3.5でコンパイルしようとしているのが原因とわかった。\\nで、手動で.Net4を使うようにしたら治った。\\n参考\"), \"\\n\", React.createElement(_components.p, null, \"http://ufcpp.net/study/csharp/sp4_optional.html\\nhttp://vmem.jp/2012/02/16/monodevelop%E3%81%A7%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%AEtarget-framework%E3%82%92mono-net-4-0%E3%81%AB%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B/\"), \"\\n\", React.createElement(_components.p, null, \"ところが別のマシンでやってみたら何事もなくできてしまった。\\n道理でググっても同じはまりが出てこないわけだ。\\n古いMonoDevelopの設定が残っているとかあったのか。\"), \"\\n\", React.createElement(_components.p, null, \"２冊目の方を読み始めた。\\n適当にTerrain書いただけだがわりとそれっぽい感じに。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9757],{7043:function(e,n,t){t.r(n),t.d(n,{default:function(){return g}});var a=t(1151),l=t(7294);function c(e){const n=Object.assign({p:"p",a:"a",span:"span",h2:"h2"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.p,null,"rust の FFI に取り組んでいた。\n結局、 sdl binding と imgui binding を自作した。"),"\n",l.createElement(n.p,null,"両方とも、既存の crate があるのに何故わざわざ自作するのかと言えば、\nラップされて使い方が変わったところを学ぶのが面倒くさかったからじゃ。\n",l.createElement(n.a,{href:"https://crates.io/crates/sdl2"},"SDL")," は　",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">HWND</code>'}})," を取得する方法がわかりにくくて ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">SDL_Event</code>'}})," を ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">imgui</code>'}})," に渡す方法はわからなかった。\n",l.createElement(n.a,{href:"https://crates.io/crates/imgui"},"imgui")," は最新版の ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docking</code>'}})," ブランチが使いたかった。"),"\n",l.createElement(n.p,null,l.createElement(n.a,{href:"https://crates.io/crates/clang-sys"},"clang-sys")," を使って rust の FFI コードを生成し、\n",l.createElement(n.a,{href:"https://crates.io/crates/cc"},"cc")," を使って ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">build.rs</code>'}})," でライブラリをビルドした。\nこれで、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c</code>'}})," ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++</code>'}})," のライブラリをソースビルドしてスタティックリンクし、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FFI</code>'}})," で関数を呼び出し放題。"),"\n",l.createElement(n.p,null,l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">imgui</code>'}})," の FFI 生成の方が簡単で、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">SDL</code>'}})," の方は C のマクロに苦しんだ(雑に対応)。\nとはいえ、わりと素直に記述できるので快適であった。"),"\n",l.createElement(n.p,null,"おかげで、 rust の FFI 周りに対する習熟度がだいぶ上がった。"),"\n",l.createElement(n.h2,null,"できないこと"),"\n",l.createElement(n.p,null,"POD の struct を return する関数を呼び出すとクラッシュした。"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">ImVec2 ImGui::GetContentRegionAvail();</code></pre></div>'}}),"\n",l.createElement(n.p,null,"D言語だけど"),"\n",l.createElement(n.p,null,"https://forum.dlang.org/thread/dkamxcamwttszxwwxttv@forum.dlang.org"),"\n",l.createElement(n.p,null,"の件らしく、C++ 側でラップした。"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">void pGetContentRegionAvail(ImVec2 *pOut) {\n  if (pOut) {\n    *pOut = GetContentRegionAvail();\n  }\n}</code></pre></div>'}}),"\n",l.createElement(n.h2,null,"自由に static link できる"),"\n",l.createElement(n.p,null,"build.rs を駆使して自由にリンクできるので、スタティックリンクとダイナミックリンクを制御できるので便利。\n特に Windows の場合、システムに共通のライブラリがインストールされていることが期待できないので、\nDLLを作ってコピーした入りパスを通すよりは、スタティックリンクする方が気楽。\n今回は ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cc</code>'}})," でコンパイルしたけど、",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++/c</code>'}})," は CMake でビルドする方が管理しやすいかもしれない。"))}var r=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?l.createElement(n,e,l.createElement(c,e)):c(e)},s=(t(8678),t(8838));const u={code:e=>{let{children:n,className:t}=e;return t?l.createElement(s.Z,{className:t},n):l.createElement("code",null,n)}};function o(e){let{data:n,children:t}=e;return l.createElement(l.Fragment,null,l.createElement("h1",null,n.mdx.frontmatter.title),l.createElement(a.Zo,{components:u},t))}function g(e){return l.createElement(o,e,l.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-rust-ffi-md-0e44b408217b3515bd3a.js.map
{"version":3,"file":"component---content-posts-2013-05-21-xorg-md-0dfbeb93443c5dd1b282.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,IAAK,MACLC,KAAM,OACNC,EAAG,IACHC,GAAI,OACHC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,IAAK,KAAMM,EAAAA,cAAoBT,EAAYI,KAAM,KAAM,uJAAwJ,KAAMK,EAAAA,cAAoBT,EAAYK,EAAG,KAAM,yBAA4B,KAAMI,EAAAA,cAAoBT,EAAYG,IAAK,KAAMM,EAAAA,cAAoBT,EAAYI,OAAQ,KAAMK,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,gEAAmE,KAAMG,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,0BAA2B,KAAMG,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,cAAe,KAAMG,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,uBAAwB,KAAMG,EAAAA,cAAoBT,EAAYG,IAAK,KAAMM,EAAAA,cAAoBT,EAAYI,KAAM,KAAM,4EAA6E,KAAMK,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,kCAAmC,KAAMG,EAAAA,cAAoBT,EAAYK,EAAG,KAAM,6DAA8D,KAAMI,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,uBAAwB,KAAMG,EAAAA,cAAoBT,EAAYK,EAAG,KAAM,qGAAsG,KAAMI,EAAAA,cAAoBT,EAAYG,IAAK,KAAMM,EAAAA,cAAoBT,EAAYI,KAAM,KAAM,uDAAwD,KAAMK,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,gDAAiD,KAAMG,EAAAA,cAAoBT,EAAYK,EAAG,KAAM,uBAA0B,KAAMI,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,uBAAwB,KAAMG,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,uBAAwB,KAAMG,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,0BAA2B,KAAMG,EAAAA,cAAoBT,EAAYG,IAAK,KAAMM,EAAAA,cAAoBT,EAAYI,KAAM,KAAM,2FAA8F,KAAMK,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,4BAA6B,KAAMG,EAAAA,cAAoBT,EAAYG,IAAK,KAAMM,EAAAA,cAAoBT,EAAYI,KAAM,KAAM,ohCACjtE,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWZ,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECkBO,MAAMa,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2013/05/21/xorg.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# xorgインストール\\n\\ngentooにxorgをインストールする\\n\\nThe X Server Configuration HOWTO\\nhttp://www.gentoo.org/doc/en/xorg-config.xml\\n\\n/etc/portage/make.conf\\n\")), \"\\n\", React.createElement(_components.p, null, \"INPUT_DEVICES=\\\"evdev\\\"\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code)), \"\\n\", React.createElement(_components.h1, null, \"echo \\\"x11-base/xorg-server udev\\\" >> /etc/portage/package.use\"), \"\\n\", React.createElement(_components.h1, null, \"emerge -av xorg-server\"), \"\\n\", React.createElement(_components.h1, null, \"env-update\"), \"\\n\", React.createElement(_components.h1, null, \"source /etc/profile\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\n## fglrx\\nhttp://wiki.gentoo.org/wiki/Fglrx\\nAMD A10 向けにfglrxドライバ\\n\\n\")), \"\\n\", React.createElement(_components.h1, null, \"cat /proc/cpuinfo | grep model\"), \"\\n\", React.createElement(_components.p, null, \"model name : AMD A10-5700 APU with Radeon(tm) HD Graphics\"), \"\\n\", React.createElement(_components.h1, null, \"lspci | grep -i vga\"), \"\\n\", React.createElement(_components.p, null, \"00:01.0 VGA compatible controller: Advanced Micro Devices [AMD] nee ATI Trinity [Radeon HD 7660D]\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\nkernel作り直し [Direct Rendering Manager]を無効にする。\\n\\n\")), \"\\n\", React.createElement(_components.h1, null, \"genkernel --lvm2 --menuconfig --no-clean all\"), \"\\n\", React.createElement(_components.p, null, \"VIDEO_CARDS=\\\"fglrx\\\"\"), \"\\n\", React.createElement(_components.h1, null, \"emerge xorg-drivers\"), \"\\n\", React.createElement(_components.h1, null, \"aticonfig --initial\"), \"\\n\", React.createElement(_components.h1, null, \"eselect opengl set ati\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\n## intel\\nVIDEO_CARDS=\\\"intel\\\"\\n\\n# Desktop\\n\\ngnomeとかをいれずにopenboxを素で使う。lxdeぽい感じ。\\n\\n\")), \"\\n\", React.createElement(_components.h1, null, \"emerge -av xterm xmodmap\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\nWindow Manager\\n# emerge -av openbox openbox-menu\\n\\nメニュー設定\\n./config/openbox/menu.xml\\n\\nDisplay Manager\\n# emerge -av lxdm\\n# vim /etc/conf.d/xdm\\n# /etc/init.d/xdm start\\n# rc-update add xdm default\\n\\nIME\\n# emerge -av scim-anthy\\n\\nFont\\n# emerge -av ricty\\n\\nTerm\\n# emerge -av xfce4-terminal\\n\\nTaskbar\\n# emerge -av tint2\\n\\nFiler\\n# pcmanfm -av pcmanfm\\n\\nDesktop関連のデーモン\\nUSEにconsolekit, dbus追加\\n# emerge --ask --changed-use --deep @world\\n# rc-update add consolekit default\\n# rc-update add dbus default\\n\\nCapsキーをControlに変更。\\n.Xmodmap\\n!!\\n!! Caps_Lock to Control\\n!!\\nremove Lock = Caps_Lock\\nadd Control = Caps_Lock\\nkeysym Caps_Lock = Control_L\\n\\nセッション\\n~/.xsession\\nxmodmap .Xmodmap\\n\\nexport LANG=ja_JP.UTF-8\\n# 日本語入力周り\\nexport XMODIFIERS=\\\"@im=SCIM\\\"\\nexport GTK_IM_MODULE=\\\"scim-bridge\\\"\\nexport QT_IM_MODULE=\\\"scim-bridge\\\"\\nscim -d &\\n\\nexec ck-launch-session openbox-session\\n\\nTouchPad\\nhttp://wiki.gentoo.org/wiki/Synaptics\\n/etc/portage/make.conf\\nINPUT_DEVICES=\\\"synaptics\\\"\\n\\nemerge --ask --changed-use --deep world\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","pre","code","p","h1","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
{"version":3,"file":"component---content-posts-2017-04-wsl-md-2f187d1780ad28c872df.js","mappings":"wHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wDAAyD,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,muFAClP,CAKA,UAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECmBO,MAAMY,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2017/04/wsl.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Windows SubSystem for Linux\\nわりとよくなっていそうな感じなので使ってみる。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"wsltty導入\\nminttyにwslビルド(wslbridge同梱)という素敵インストーラが提供されていた。\\nインストーラーを実行したらショートカットができる。片方のショートカットの末尾に”–login”を追加して、”~/.profile”が実行されるようにした。\\n%LOCALAPPDATA%\\\\wsltty\\\\bin\\\\mintty.exe --wsl -o Locale=C -o Charset=UTF-8 /bin/wslbridge -C~ -t /bin/bash --login\\n\\n\\nhttps://github.com/mintty/wsltty\\n\\n.profile\\nコメントイン\\numask 022\\n\\ninputrc\\n\\\"\\\\C-n\\\":history-search-forward\\n\\\"\\\\C-p\\\":history-search-backward\\nset bell-style none\\n\\n.tmux.conf\\nset -g prefix C-l\\nbind C-l send-prefix\\nunbind C-b\\nset -sg escape-time 1\\nbind r source-file ~/.tmux.conf \\\\; display \\\"Reloaded!\\\"\\n\\nset-option -g default-terminal screen-256color\\nset -g terminal-overrides 'xterm:colors=256'\\n\\nsetw -g mode-keys vi\\n\\nvim\\n\\ndein.vimによるプラグイン管理のマイベストプラクティス\\n\\ndein\\n$ curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > installer.sh\\n$ sh installer.sh ~/.cache/dein\\n$ mkdir -p ~/.config/nvim\\n\\n~/.config/nvim/dein.toml\\n[[plugins]]\\nrepo = 'Shougo/dein.vim'\\n\\n[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える\\nrepo = 'osyo-manga/vim-precious'\\ndepends = ['context_filetype.vim']\\n\\n[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ\\nrepo = 'Shougo/context_filetype.vim'\\n\\n[[plugins]] # toml syntax\\nrepo = 'cespare/vim-toml'\\non_ft = 'toml'\\n\\n[[plugins]] # カラースキーマ\\nrepo = 'w0ng/vim-hybrid'\\nhook_add = '''\\nset background=dark\\n\\\" colorscheme 設定は source 後に行う必要があるので VimEnter で行う。\\n\\\" 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。\\nau MyAutoCmd VimEnter * nested colorscheme hybrid\\n'''\\n\\n[[plugins]]\\nrepo = 'itchyny/lightline.vim'\\n\\n[[plugins]]\\nrepo = 'scrooloose/nerdtree'\\n\\n.vimrc\\nif !&compatible\\n  set nocompatible\\nendif\\n\\n\\\" reset augroup\\naugroup MyAutoCmd\\n  autocmd!\\naugroup END\\n\\n\\\" dein settings {{{\\n\\\" dein自体の自動インストール\\nlet s:cache_home = empty($XDG_CACHE_HOME) ? expand('~/.cache') : $XDG_CACHE_HOME\\nlet s:dein_dir = s:cache_home . '/dein'\\nlet s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'\\nif !isdirectory(s:dein_repo_dir)\\n  call system('git clone https://github.com/Shougo/dein.vim ' . shellescape(s:dein_repo_dir))\\nendif\\nlet &runtimepath = s:dein_repo_dir .\\\",\\\". &runtimepath\\n\\\" プラグイン読み込み＆キャッシュ作成\\n\\\"let s:toml_file = fnamemodify(expand('<sfile>'), ':h').'/dein.toml'\\nlet s:toml_file = '~/.config/nvim'.'/dein.toml'\\nif dein#load_state(s:dein_dir)\\n  call dein#begin(s:dein_dir)\\n  call dein#load_toml(s:toml_file)\\n  call dein#end()\\n  call dein#save_state()\\nendif\\n\\\" 不足プラグインの自動インストール\\nif has('vim_starting') && dein#check_install()\\n  call dein#install()\\nendif\\n\\\" }}}\\n\\n\\\"ビープ音すべてを無効にする\\nsyntax on\\nfiletype on\\nset visualbell t_vb=\\nset noerrorbells \\\"エラーメッセージの表示時にビープを鳴らさない\\nset laststatus=2\\nset noswapfile nobackup noundofile\\nset hidden\\n\\ngolang\\nbinaryをdownloadして/usr/local/goに展開\\nnvm\\n\\nhttps://github.com/creationix/nvm\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4789],{7924:function(n,s,a){a.r(s),a.d(s,{default:function(){return i}});var t=a(1151),p=a(7294);function o(n){const s=Object.assign({p:"p",a:"a",span:"span",ul:"ul",li:"li",h2:"h2"},(0,t.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(s.p,null,p.createElement(s.a,{href:"https://github.com/mfussenegger/nvim-dap"},"nvim-dap")," で rust をデバッグするべく悪戦苦闘中。\nnvim-dap というのは、来たる nvim-0.5 で動くようになる、 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vscode</code>'}})," のデバッグアダプターを動作させる機能。"),"\n",p.createElement(s.p,null,"rust(Windows) は native debugger をアタッチすればいいので、いくつか選択肢があって"),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools"),"\n",p.createElement(s.li,null,"https://marketplace.visualstudio.com/items?itemName=lanza.lldb-vscode"),"\n",p.createElement(s.li,null,"https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb"),"\n"),"\n",p.createElement(s.p,null,"最後の、",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vscode-lldb(codelldb)</code>'}})," https://github.com/vadimcn/vscode-lldb が使いたい。"),"\n",p.createElement(s.h2,null,"codelldb の起動"),"\n",p.createElement(s.p,null,"nvim-dap から ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">codelldb.exe</code>'}})," プロセスは起動している様子。通信がうまくいってないように見える。"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">> .\\.cache\\dein\\repos\\github.com\\puremourning\\vimspector\\gadgets\\windows\\CodeLLDB\\adapter\\codelldb.exe\nListening on port 55201</code></pre></div>'}}),"\n",p.createElement(s.p,null,"標準入出力を使うモードになっていないのでは？"),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">adapter/src/lib.rs</code>'}})),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="rust"><pre class="language-rust"><code class="language-rust"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">run_debug_server</span><span class="token punctuation">(</span>\n    addr<span class="token punctuation">:</span> <span class="token namespace">net<span class="token punctuation">::</span></span><span class="token class-name">SocketAddr</span><span class="token punctuation">,</span>\n    adapter_settings<span class="token punctuation">:</span> <span class="token namespace">debug_protocol<span class="token punctuation">::</span></span><span class="token class-name">AdapterSettings</span><span class="token punctuation">,</span>\n    multi_session<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> listener <span class="token operator">=</span> <span class="token class-name">TcpListener</span><span class="token punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Listening on port {}"</span><span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token function">local_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"遡る。 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">main -> debug_server -> entry -> run_debug_server</code>'}})),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="rust"><pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token namespace">env_logger<span class="token punctuation">::</span></span><span class="token class-name">Builder</span><span class="token punctuation">::</span><span class="token function">from_default_env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> matches <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"codelldb"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token class-name">Arg</span><span class="token punctuation">::</span><span class="token function">with_name</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">long</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">takes_value</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token class-name">Arg</span><span class="token punctuation">::</span><span class="token function">with_name</span><span class="token punctuation">(</span><span class="token string">"multi-session"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">long</span><span class="token punctuation">(</span><span class="token string">"multi-session"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token class-name">Arg</span><span class="token punctuation">::</span><span class="token function">with_name</span><span class="token punctuation">(</span><span class="token string">"preload"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">long</span><span class="token punctuation">(</span><span class="token string">"preload"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">takes_value</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token class-name">Arg</span><span class="token punctuation">::</span><span class="token function">with_name</span><span class="token punctuation">(</span><span class="token string">"liblldb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">long</span><span class="token punctuation">(</span><span class="token string">"liblldb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">takes_value</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token class-name">Arg</span><span class="token punctuation">::</span><span class="token function">with_name</span><span class="token punctuation">(</span><span class="token string">"params"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">long</span><span class="token punctuation">(</span><span class="token string">"params"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">takes_value</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">subcommand</span><span class="token punctuation">(</span><span class="token class-name">SubCommand</span><span class="token punctuation">::</span><span class="token function">with_name</span><span class="token punctuation">(</span><span class="token string">"terminal-agent"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token class-name">Arg</span><span class="token punctuation">::</span><span class="token function">with_name</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">long</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">takes_value</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">get_matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span> <span class="token operator">=</span> matches<span class="token punctuation">.</span><span class="token function">subcommand_matches</span><span class="token punctuation">(</span><span class="token string">"terminal-agent"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token namespace">terminal_agent<span class="token punctuation">::</span></span><span class="token function">terminal_agent</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>matches<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">debug_server</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>matches<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"どうやら、 ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">executable</code>'}})," かつ ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">stdio ではなく tcp</code>'}})," 通信というタイプで nvim-dap では未対応ということでよさそう。？"),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"起動"),"\n",p.createElement(s.li,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Listening on port XXXXX</code>'}})," メッセージから port を得る"),"\n",p.createElement(s.li,null,"そのポートに対して TCP 接続という手順が必要"),"\n"),"\n",p.createElement(s.p,null,"https://code.visualstudio.com/api/extension-guides/debugger-extension#alternative-approach-to-develop-a-debugger-extension"),"\n",p.createElement(s.p,null,"の ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DebugAdapterServer</code>'}})," タイプにあたる。"),"\n",p.createElement(s.h2,null,"nvim-dap の改造を試みる"),"\n",p.createElement(s.p,null,"adapter.type ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">executable</code>'}}),", ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">server</code>'}})," に加えて、第3の ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">executable_server</code>'}})," を作れるか。"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua"><span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">run_adapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>\n  <span class="token keyword">local</span> name <span class="token operator">=</span> configuration<span class="token punctuation">.</span>name <span class="token keyword">or</span> <span class="token string">\'[no name]\'</span>\n  <span class="token keyword">local</span> options <span class="token operator">=</span> adapter<span class="token punctuation">.</span>options <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  opts <span class="token operator">=</span> vim<span class="token punctuation">.</span><span class="token function">tbl_extend</span><span class="token punctuation">(</span><span class="token string">\'keep\'</span><span class="token punctuation">,</span> opts<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    cwd <span class="token operator">=</span> options<span class="token punctuation">.</span>cwd<span class="token punctuation">,</span>\n    env <span class="token operator">=</span> options<span class="token punctuation">.</span>env\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> adapter<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">\'executable\'</span> <span class="token keyword">then</span>\n    lazy<span class="token punctuation">.</span>progress<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">\'Running: \'</span> <span class="token operator">..</span> name<span class="token punctuation">)</span>\n    M<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>adapter<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>\n  <span class="token keyword">elseif</span> adapter<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">\'server\'</span> <span class="token keyword">then</span>\n    lazy<span class="token punctuation">.</span>progress<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">\'Running: \'</span> <span class="token operator">..</span> name<span class="token punctuation">)</span>\n    M<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>adapter<span class="token punctuation">.</span>host<span class="token punctuation">,</span> adapter<span class="token punctuation">.</span>port<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>\n  <span class="token keyword">elseif</span> adapter<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">\'executable_server\'</span> <span class="token keyword">then</span> <span class="token comment">-- 👈これを追加した</span>\n    lazy<span class="token punctuation">.</span>progress<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">\'Running: \'</span> <span class="token operator">..</span> name<span class="token punctuation">)</span>\n    <span class="token comment">-- local session = M.launch(adapter, configuration, opts)</span>\n    <span class="token keyword">local</span> stdin<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> <span class="token function">executable_server</span><span class="token punctuation">(</span>adapter<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>\n    <span class="token comment">-- `Error executing luv callback: vimL function must not be called in a lua loop callback`</span>\n    vim<span class="token punctuation">.</span>loop<span class="token punctuation">.</span><span class="token function">read_start</span><span class="token punctuation">(</span>stdout<span class="token punctuation">,</span> vim<span class="token punctuation">.</span><span class="token function">schedule_wrap</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n      <span class="token comment">-- codelldb の出力から port を得る</span>\n      <span class="token comment">-- Lisening on port xxxxx</span>\n      <span class="token keyword">local</span> port <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>data <span class="token punctuation">,</span> <span class="token string">"Listening on port (%d+)"</span> <span class="token punctuation">)</span>\n      M<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> port<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>\n    <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">else</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">\'Invalid adapter type %s, expected `executable` or `server`\'</span><span class="token punctuation">,</span> adapter<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">end</span>\n<span class="token keyword">end</span>\n\n<span class="token keyword">function</span> <span class="token function">executable_server</span><span class="token punctuation">(</span>adapter<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>\n  <span class="token keyword">local</span> uv <span class="token operator">=</span> vim<span class="token punctuation">.</span>loop\n  <span class="token keyword">local</span> stdin <span class="token operator">=</span> uv<span class="token punctuation">.</span><span class="token function">new_pipe</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> stdout <span class="token operator">=</span> uv<span class="token punctuation">.</span><span class="token function">new_pipe</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> stderr <span class="token operator">=</span> uv<span class="token punctuation">.</span><span class="token function">new_pipe</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span>\n  <span class="token keyword">local</span> handle\n  <span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">onexit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    stdin<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    stdout<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    stderr<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    handle<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">end</span>\n  <span class="token keyword">local</span> options <span class="token operator">=</span> adapter<span class="token punctuation">.</span>options <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">local</span> pid_or_err\n  handle<span class="token punctuation">,</span> pid_or_err <span class="token operator">=</span> uv<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span>adapter<span class="token punctuation">.</span>command<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    args <span class="token operator">=</span> adapter<span class="token punctuation">.</span>args<span class="token punctuation">;</span>\n    stdio <span class="token operator">=</span> <span class="token punctuation">{</span>stdin<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">}</span><span class="token punctuation">;</span>\n    cwd <span class="token operator">=</span> options<span class="token punctuation">.</span>cwd<span class="token punctuation">;</span>\n    env <span class="token operator">=</span> options<span class="token punctuation">.</span>env<span class="token punctuation">;</span>\n    detached <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> onexit<span class="token punctuation">)</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token string">\'Error running \'</span> <span class="token operator">..</span> adapter<span class="token punctuation">.</span>command <span class="token operator">..</span> <span class="token string">\': \'</span> <span class="token operator">..</span> pid_or_err<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> stdin<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr\n<span class="token keyword">end</span>\n\n<span class="token keyword">function</span> M<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> config<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> session <span class="token keyword">then</span>\n    session<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">end</span>\n  <span class="token keyword">if</span> <span class="token keyword">not</span> config<span class="token punctuation">.</span>request <span class="token keyword">then</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">\'config needs the `request` property which must be one of `attach` or `launch`\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n  <span class="token keyword">end</span>\n  <span class="token comment">-- initialize が早すぎるので config を connect 引数に</span>\n  session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'dap.session\'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> opts<span class="token punctuation">,</span> config<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> session\n<span class="token keyword">end</span>\n\n<span class="token keyword">function</span> Session<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> opts<span class="token punctuation">,</span> config<span class="token punctuation">)</span>\n  <span class="token keyword">local</span> session <span class="token operator">=</span> <span class="token function">session_defaults</span><span class="token punctuation">(</span>opts <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token function">setmetatable</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> self<span class="token punctuation">)</span>\n  self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self\n\n  <span class="token keyword">local</span> client <span class="token operator">=</span> uv<span class="token punctuation">.</span><span class="token function">new_tcp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  session<span class="token punctuation">.</span>client <span class="token operator">=</span> <span class="token punctuation">{</span>\n    write <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> \n        client<span class="token punctuation">:</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> \n    <span class="token keyword">end</span><span class="token punctuation">;</span>\n    close <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      client<span class="token punctuation">:</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      client<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">end</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  client<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span>host <span class="token keyword">or</span> <span class="token string">\'127.0.0.1\'</span><span class="token punctuation">,</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token function">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span>\n    client<span class="token punctuation">:</span><span class="token function">read_start</span><span class="token punctuation">(</span>rpc<span class="token punctuation">.</span><span class="token function">create_read_loop</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>\n      session<span class="token punctuation">:</span><span class="token function">handle_body</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>\n    <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token comment">-- connect が成立してから initialize を送る</span>\n    session<span class="token punctuation">:</span><span class="token function">initialize</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>\n\n  <span class="token keyword">end</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> session\n<span class="token keyword">end</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"動いた。 PR 作ろう。"))}var e=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?p.createElement(s,n,p.createElement(o,n)):o(n)},c=(a(8678),a(8838));const l={code:n=>{let{children:s,className:a}=n;return a?p.createElement(c.Z,{className:a},s):p.createElement("code",null,s)}};function u(n){let{data:s,children:a}=n;return p.createElement(p.Fragment,null,p.createElement("h1",null,s.mdx.frontmatter.title),p.createElement(t.Zo,{components:l},a))}function i(n){return p.createElement(u,n,p.createElement(e,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-nvim-dap-codelldb-md-0dd9b26c9ec6cd3327bd.js.map
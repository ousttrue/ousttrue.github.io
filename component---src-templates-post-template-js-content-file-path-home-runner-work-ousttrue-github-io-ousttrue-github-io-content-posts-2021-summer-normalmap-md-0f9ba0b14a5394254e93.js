"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8925],{9229:function(n,s,a){a.r(s),a.d(s,{default:function(){return k}});var e=a(1151),t=a(7294);function p(n){const s=Object.assign({p:"p",span:"span",h1:"h1",blockquote:"blockquote",ul:"ul",li:"li"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(s.p,null,"glTFViewerの実装がてら法線マップの実装をやってみる。\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">OpenGL 4.0 Shading Language Cookbook</code>'}})," を参考に進めた。"),"\n",t.createElement(s.h1,null,"法線mapとTangentを供給する"),"\n",t.createElement(s.p,null,"https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet をサンプルモデルとした。"),"\n",t.createElement(s.p,null,t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">glActiveTexture</code>'}})," がうまくいかず難航する。\n以下のようにして、無理やり解決。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="glsl"><pre class="language-glsl"><code class="language-glsl"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">version</span> <span class="token expression"><span class="token number">400</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">extension</span> <span class="token expression">GL_ARB_shading_language_420pack <span class="token operator">:</span> enable</span></span>\n<span class="token keyword">layout</span><span class="token punctuation">(</span>binding <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">uniform</span> <span class="token keyword">sampler2D</span> Tex0<span class="token punctuation">;</span>\n<span class="token keyword">layout</span><span class="token punctuation">(</span>binding <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">uniform</span> <span class="token keyword">sampler2D</span> Tex1<span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"すべての sampler2D が 0 にバインディングされる挙動だった。\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#version 420</code>'}})," はうまくいかなかったので断念。\nエラーは出ないが、何もレンダリングされなくなった。"),"\n",t.createElement(s.h1,null,"Tangent が格納されていないので生成する"),"\n",t.createElement(s.p,null,"https://github.com/KhronosGroup/glTF/tree/master/specification/2.0 に以下のよう書いてある。"),"\n",t.createElement(s.blockquote,null,"\n",t.createElement(s.p,null,"Implementation note: When tangents are not specified, client implementations should calculate tangents using default MikkTSpace algorithms. For best results, the mesh triangles should also be processed using default MikkTSpace algorithms."),"\n"),"\n",t.createElement(s.h1,null,"MikkTSpace"),"\n",t.createElement(s.p,null,"https://github.com/mmikk/MikkTSpace"),"\n",t.createElement(s.p,null,"さくっと dll を作成して、 luajit から呼びだしてみた。\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">indices</code>'}})," ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">POSITION</code>'}})," ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">NORMAL</code>'}})," ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">TEXCOORD0</code>'}})," を入力して ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">TANGENT</code>'}})," を出力する。\nわりと適当で動く ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">luajit ffi</code>'}})," 恐るべし。\nさすがに C の方に呼びだし回数を減らすラッパーを作ったほうが速そうだが、動かすだけなら問題なし。"),"\n",t.createElement(s.p,null,"memo"),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,"https://bgolus.medium.com/generating-perfect-normal-maps-for-unity-f929e673fc57#c473"),"\n"),"\n",t.createElement(s.h1,null,"Shader"),"\n",t.createElement(s.p,null,t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">OpenGL 4.0 Shading Language Cookbook</code>'}})," の phong shading を省略して法線だけ確認。\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">2倍して1引く</code>'}})," を補った。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="glsl"><pre class="language-glsl"><code class="language-glsl"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">version</span> <span class="token expression"><span class="token number">400</span></span></span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> MVP<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat4</span> ModelViewMatrix<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">mat3</span> NormalMatrix<span class="token punctuation">;</span>\n<span class="token keyword">uniform</span> <span class="token keyword">vec3</span> LightDirection<span class="token punctuation">;</span>\n\n<span class="token keyword">layout</span><span class="token punctuation">(</span>location <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token keyword">vec3</span> VertexPosition<span class="token punctuation">;</span>\n<span class="token keyword">layout</span><span class="token punctuation">(</span>location <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token keyword">vec3</span> VertexNormal<span class="token punctuation">;</span>\n<span class="token keyword">layout</span><span class="token punctuation">(</span>location <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token keyword">vec2</span> VertexTexCoord<span class="token punctuation">;</span>\n<span class="token keyword">layout</span><span class="token punctuation">(</span>location <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token keyword">vec4</span> VertexTangent<span class="token punctuation">;</span>\n<span class="token keyword">out</span> <span class="token keyword">vec3</span> LightDir<span class="token punctuation">;</span>\n<span class="token keyword">out</span> <span class="token keyword">vec3</span> ViewDir<span class="token punctuation">;</span>\n<span class="token keyword">out</span> <span class="token keyword">vec2</span> TexCoord<span class="token punctuation">;</span>\n<span class="token keyword">out</span> <span class="token keyword">vec3</span> Debug<span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">vec3</span> normal <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>NormalMatrix <span class="token operator">*</span> VertexNormal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">vec3</span> tangent <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>NormalMatrix <span class="token operator">*</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span>VertexTangent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">vec3</span> binormal <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>normal<span class="token punctuation">,</span> tangent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> VertexTangent<span class="token punctuation">.</span>w<span class="token punctuation">;</span>\n  <span class="token keyword">mat3</span> toObjectLocal <span class="token operator">=</span>\n      <span class="token keyword">mat3</span><span class="token punctuation">(</span>tangent<span class="token punctuation">.</span>x<span class="token punctuation">,</span> binormal<span class="token punctuation">.</span>x<span class="token punctuation">,</span> normal<span class="token punctuation">.</span>x<span class="token punctuation">,</span> tangent<span class="token punctuation">.</span>y<span class="token punctuation">,</span> binormal<span class="token punctuation">.</span>y<span class="token punctuation">,</span> normal<span class="token punctuation">.</span>y<span class="token punctuation">,</span>\n           tangent<span class="token punctuation">.</span>z<span class="token punctuation">,</span> binormal<span class="token punctuation">.</span>z<span class="token punctuation">,</span> normal<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">vec3</span> pos <span class="token operator">=</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span>ModelViewMatrix <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>VertexPosition<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  LightDir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>toObjectLocal <span class="token operator">*</span> LightDirection<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ViewDir <span class="token operator">=</span> toObjectLocal <span class="token operator">*</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token operator">-</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  TexCoord <span class="token operator">=</span> VertexTexCoord<span class="token punctuation">;</span>\n  Debug <span class="token operator">=</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span>VertexTangent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  gl_Position <span class="token operator">=</span> MVP <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>VertexPosition<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="glsl"><pre class="language-glsl"><code class="language-glsl"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">version</span> <span class="token expression"><span class="token number">400</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">extension</span> <span class="token expression">GL_ARB_shading_language_420pack <span class="token operator">:</span> enable</span></span>\n\n<span class="token keyword">layout</span><span class="token punctuation">(</span>binding <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">uniform</span> <span class="token keyword">sampler2D</span> Tex0<span class="token punctuation">;</span>\n<span class="token keyword">layout</span><span class="token punctuation">(</span>binding <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">uniform</span> <span class="token keyword">sampler2D</span> Tex1<span class="token punctuation">;</span>\n<span class="token keyword">in</span> <span class="token keyword">vec3</span> LightDir<span class="token punctuation">;</span>\n<span class="token keyword">in</span> <span class="token keyword">vec3</span> ViewDir<span class="token punctuation">;</span>\n<span class="token keyword">in</span> <span class="token keyword">vec2</span> TexCoord<span class="token punctuation">;</span>\n<span class="token keyword">in</span> <span class="token keyword">vec3</span> Debug<span class="token punctuation">;</span>\n<span class="token keyword">out</span> <span class="token keyword">vec4</span> FragColor<span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">vec4</span> texColor <span class="token operator">=</span> <span class="token function">texture2D</span><span class="token punctuation">(</span>Tex0<span class="token punctuation">,</span> TexCoord<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">vec4</span> normal <span class="token operator">=</span> <span class="token function">texture2D</span><span class="token punctuation">(</span>Tex1<span class="token punctuation">,</span> TexCoord<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// FragColor = vec4(Debug, 1);</span>\n\n  <span class="token keyword">float</span> intensity <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>LightDir<span class="token punctuation">,</span> <span class="token punctuation">(</span>normal<span class="token punctuation">.</span>xyz <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">vec3</span> color <span class="token operator">=</span> <span class="token keyword">vec3</span><span class="token punctuation">(</span>intensity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  FragColor <span class="token operator">=</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"glTF の シェーダー では、 ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mat3</code>'}})," を fragment shader に送りこんでいた。"),"\n",t.createElement(s.p,null,"https://github.com/bwasty/gltf-viewer/tree/master/src/shaders"),"\n",t.createElement(s.p,null,"tangent space でライティングするという概念は同じらしい。"))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,e.ah)(),n.components);return s?t.createElement(s,n,t.createElement(p,n)):p(n)},c=a(8678),l=a(8838);const u={code:n=>{let{children:s,className:a}=n;return a?t.createElement(l.Z,{className:a},s):t.createElement("code",null,s)}};function r(n){let{data:s,children:a}=n;return t.createElement(c.Z,null,t.createElement("h1",null,s.mdx.frontmatter.title),t.createElement(e.Zo,{components:u},a))}function k(n){return t.createElement(r,n,t.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-summer-normalmap-md-0f9ba0b14a5394254e93.js.map
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3961],{5073:function(n,e,t){t.r(e),t.d(e,{default:function(){return d}});var a=t(1151),l=t(7294);function s(n){const e=Object.assign({h1:"h1",p:"p",h2:"h2",code:"code",ul:"ul",li:"li",span:"span",blockquote:"blockquote"},(0,a.ah)(),n.components);return l.createElement(l.Fragment,null,l.createElement(e.h1,null,"PixarのUniversal Scene Descriptionをビルドしてみる"),"\n",l.createElement(e.p,null,"20170902。実はビルドスクリプトがあって、簡単になっていた。"),"\n",l.createElement(e.p,null,"動画でCEDEC2017のセッションを聞いてよさげな気がしたので再度やってみた(ちょっと前に途中までやって放置していた)。\nusdviewが使えるようにするとよいらしい。"),"\n",l.createElement(e.h2,null,"Pixar USD の Windows ビルド方法（2017/9 版）"),"\n",l.createElement(e.p,null,"自動ビルドスクリプトがついているので放っておくだけなのだけど、うまくいかなかったところを補足する。\n環境は、",l.createElement(e.code,null,"Windows10(64bit)")," + ",l.createElement(e.code,null,"VisualStudio2017")," + ",l.createElement(e.code,null,"VisualStudio2015 のコンパイラ追加インストール(VisualStudio2017のインストールメニューにある)"),"\nvisualstudio補足\nVisualStudioは、最近のバージョンに限ってもいろいろある。"),"\n",l.createElement(e.ul,null,"\n",l.createElement(e.li,null,"VisualStudio2017(MSVC14.1)のみ"),"\n",l.createElement(e.li,null,"VisualStudio2017(MSVC14.1)にVS2015(MSVC14.0)のコンパイラが追加インストールされている(うちはこれ)"),"\n",l.createElement(e.li,null,"VisualStudio2015(MSVC14.0)のみ"),"\n",l.createElement(e.li,null,"Visual C++ 2015 Build Tools(MSVC14.0)Python3ビルド向けにIDEの無いバージョン)"),"\n"),"\n",l.createElement(e.p,null,"ものによって ",l.createElement(e.code,null,"vcvars.bat")," の場所が違って、",l.createElement(e.code,null,"bjam")," とか ",l.createElement(e.code,null,"distutils")," がコンパイラの発見に失敗したりする場合があるようだ。\n",l.createElement(e.code,null,"cl.exe")," が見つからないような場合、visualstudioの提供する設定済みのdosプロンプトから始めるのが手堅いかもしれない。\n一応、\n",l.createElement(e.code,null,"VisualStudio2017 - x64 native tools command prompt")," からはじめる。\nCMakeはVisualStudioの検出にあまり失敗しないので、おもにBoostのビルド対策。\n効果があったかは不明。"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">D:\\work> cl\nMicrosoft(R) C/C++ Optimizing Compiler Version 19.10.25019 for x64\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n使い方: cl [ オプション... ] ファイル名... [ /link リンク オプション... ]</code></pre></div>'}}),"\n",l.createElement(e.p,null,l.createElement(e.code,null,"VS2017")," しか入っていないとき\nbuild_usd.py内Boost.Pythonに関してmsvc=14.0指定(VS2015)があるので、これをコメントアウトすればたぶんVS2017しかなくてもビルドできる。Windows版のPython2.7のビルドコンパイラは ",l.createElement(e.code,null,"VS2008(MSVC9.0)")," らしい。"),"\n",l.createElement(e.p,null,"https://www.microsoft.com/en-us/download/details.aspx?id=44266"),"\n",l.createElement(e.h2,null,"python補足"),"\n",l.createElement(e.p,null,"Python27以外のPythonが入っているとはまる率が上がる。"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">D:\\work> python -V\nPython 3.6.0 :: Anaconda 4.3.0 (64-bit)\n\n違うPythonだー。\nD:\\work> set PATH=D:\\Python27;D:\\Python27\\Scripts;%PATH%\nD:\\work> python -V\nPython 2.7.14rc1\nD:\\work> pip install pyside\nCollecting pyside\n  Downloading PySide-1.2.4-cp27-none-win_amd64.whl (45.0MB)\n    100% |################################| 45.0MB 36kB/s\nInstalling collected packages: pyside\nSuccessfully installed pyside-1.2.4</code></pre></div>'}}),"\n",l.createElement(e.p,null,"python使いたるもの２系、３系両方入っていたりするものである。\ncloneしてビルドスクリプトを実行"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">D:\\work> git clone https://github.com/PixarAnimationStudios/USD\n\nD:\\work> mkdir USD_build\nD:\\work> cd USD_build\nD:\\work\\USD_build>\n\nD:\\work\\USD_build> python ..\\USD\\build_scripts\\build_usd.py\nusage: build_usd.py [-h] [-n] [-v | -q] [--build BUILD]\n                    [--generator GENERATOR]\n                    [--build-shared | --build-monolithic] [--src SRC]\n                    [--inst INST] [--force FORCE_BUILD] [--force-all]\n                    [--tests | --no-tests] [--docs | --no-docs]\n                    [--imaging | --usd-imaging | --no-imaging]\n                    [--ptex | --no-ptex] [--embree | --no-embree]\n                    [--embree-location EMBREE_LOCATION]\n                    [--alembic | --no-alembic] [--hdf5 | --no-hdf5]\n                    [--maya | --no-maya] [--maya-location MAYA_LOCATION]\n                    [--katana | --no-katana]\n                    [--katana-api-location KATANA_API_LOCATION]\n                    [--houdini | --no-houdini]\n                    [--houdini-location HOUDINI_LOCATION]\n                    install_dir\nbuild_usd.py: error: too few arguments\n\nD:\\work\\USD_build> python ..\\USD\\build_scripts\\build_usd.py .\nERROR: CMake not found -- please install it and adjust your PATH</code></pre></div>'}}),"\n",l.createElement(e.p,null,"こんな風に足りないツールのメッセージが出るのでせっせとインストールしてパスを設定する。"),"\n",l.createElement(e.blockquote,null,"\n",l.createElement(e.p,null,"set PATH=D:\\Program Files\\CMake\\bin;%PATH%\nset PATH=D:\\Program Files\\NASM;%PATH%"),"\n"),"\n",l.createElement(e.p,null,"build…"),"\n",l.createElement(e.h2,null,"Alembicとか無しの最小ビルド。"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">D:\\work\\USD_build> python ..\\USD\\build_scripts\\build_usd.py .\n\nBuilding with settings:\n  USD source directory          D:\\work\\USD\n  USD install directory         D:\\work\\USD_build\n  3rd-party source directory    D:\\work\\USD_build\\src\n  3rd-party install directory   D:\\work\\USD_build\n  Build directory               D:\\work\\USD_build\\build\n\n  Building                      Shared libraries\n    Imaging                     On\n      Ptex support:             Off\n    UsdImaging                  On\n    Documentation               Off\n    Tests                       Off\n    Alembic Plugin              Off\n      HDF5 support:             Off\n    Maya Plugin                 Off\n    Katana Plugin               Off\n    Houdini Plugin              Off\n\n    Dependencies                zlib, boost, TBB, JPEG, TIFF, PNG, OpenEXR, GLEW, OpenImageIO, OpenSubdiv, PyOpenGL\n\nSTATUS: Installing zlib...\nSTATUS: Installing boost...\nSTATUS: Installing TBB...\nSTATUS: Installing JPEG...\nSTATUS: Installing TIFF...\nSTATUS: Installing PNG...</code></pre></div>'}}),"\n",l.createElement(e.p,null,"こんな感じに順番にビルドが進んでいく。"),"\n",l.createElement(e.h2,null,"pngのビルドでこけた"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">pngrutil.obj : error LNK2019: 未解決の外部シンボル inflateValidate が関数 png_inflate_claim で参照されました。</code></pre></div>'}}),"\n",l.createElement(e.p,null,"何故か、zlibへのリンクがうまくいっていない？\nCMakeのGUIでsourceをUSD_build/src/libpng-1.6.29、buildをD:/dev/_alembic/USD_build/build/libpng-1.6.29にして確認するとZLIB_LIBRARY_RELEASEがC:/Program Files/Anaconda3/Library/lib/z.libになっていてお察し。\npythonをフルパスで指定したらなんか治った。違うPythonが意図せず使われていたか。\ndos窓は、whichコマンドが無いしよくわからん。"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">work\\USD_build> D:\\python27\\python ..\\USD\\build_scripts\\build_usd.py . --force png\n\nSTATUS: Installing PNG...\nSTATUS: Installing OpenEXR...\nSTATUS: Installing GLEW...\nSTATUS: Installing OpenImageIO...\nSTATUS: Installing OpenSubdiv...\nSTATUS: Installing PyOpenGL...\nSTATUS: Installing PyOpenGL...\nSTATUS: Installing USD...\n\nSuccess! To use USD, please ensure that you have:\n  The following in your PYTHONPATH environment variable:\n    D:\\dev\\_alembic\\USD_build\\lib\\python\n\n  The following in your PATH environment variable:\n    D:\\dev\\_alembic\\USD_build\\bin\n    D:\\dev\\_alembic\\USD_build\\lib</code></pre></div>'}}),"\n",l.createElement(e.p,null,"ビルドできた。"),"\n",l.createElement(e.h2,null,"Boost.Pythonメモ"),"\n",l.createElement(e.p,null,l.createElement(e.code,null,"boost_python-vc140-mt-1_61.dll")," が ",l.createElement(e.code,null,"python36.dll")," とか違うのにリンクしてしまう場合。\n最悪PythonをすべてアンインストールしてPython27(64bit)だけをインストールすればいけるのだが、それでは負けた気がするのでBoost.Pythonに使うPythonを強制する方法。"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">USD_BUILD/user-conifg.jam\nusing python\n    : 2.7                   # Version\n    : C:\\\\Python27\\\\python.exe      # Python Path\n    : C:\\\\Python27\\\\include         # include path\n    : C:\\\\Python27\\\\libs            # lib path(s)\n    ;</code></pre></div>'}}),"\n",l.createElement(e.p,null,"を作って環境変数 ",l.createElement(e.code,null,"BOOST_BUILD_PATH")," を ",l.createElement(e.code,null,"user-config.jam")," のあるディレクトリに指定する。\n",l.createElement(e.code,null,"%USERROFILE%\\user-config.jam")," に作って ",l.createElement(e.code,null,"BOOST_BUILD_PATH")," 無しでもよいが、消し忘れるとあとではまる可能性が増えると思う。"),"\n",l.createElement(e.p,null,"http://www.boost.org/build/doc/html/bbv2/overview/configuration.html"),"\n",l.createElement(e.p,null,"WindowsのBoost.Pythonは作るときも使うときもリンクではまる。"),"\n",l.createElement(e.h2,null,"usdviewを使ってみる"),"\n",l.createElement(e.p,null,"USD_BUILD/bin/usdviewがある。"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">USD_BUILD\\bin> D:\\python27\\python usdview\n\nsys.path\nTraceback (most recent call last):\n  File "usdview", line 25, in &lt;module>\n    import pxr.Usdviewq as Usdviewq\nImportError: No module named pxr.Usdviewq\n\nenviron[‘PATH’]\nTraceback (most recent call last):\n  File "usdview", line 37, in &lt;module>\n    Usdviewq.Launcher().Run()\n  File "D:\\dev\\_alembic\\USD_build\\lib\\python\\pxr\\Usdviewq\\__init__.py", line 54, in Run\n    valid = self.ValidateOptions(arg_parse_result)\n  File "D:\\dev\\_alembic\\USD_build\\lib\\python\\pxr\\Usdviewq\\__init__.py", line 167, in ValidateOptions\n    from pxr import Sdf\n  File "D:\\dev\\_alembic\\USD_build\\lib\\python\\pxr\\Sdf\\__init__.py", line 24, in &lt;module>\n    import _sdf\nImportError: DLL load failed: 指定されたモジュールが見つかりません。</code></pre></div>'}}),"\n",l.createElement(e.p,null,"usdviewを改造してしまおう。\n環境変数PATHとPYTHONPATHを追加。\nusdview.cmd改造でもよいがpythonの方が書きやすいので。\nusdviewの冒頭のimport前に下記を追加。"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> os\n<span class="token keyword">import</span> sys\n\nbasepath<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nbin_dir<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>basepath<span class="token punctuation">,</span> <span class="token string">\'bin\'</span><span class="token punctuation">)</span>\nlib_dir<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>basepath<span class="token punctuation">,</span> <span class="token string">\'lib\'</span><span class="token punctuation">)</span>\nlibpython_dir<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>lib_dir<span class="token punctuation">,</span> <span class="token string">\'python\'</span><span class="token punctuation">)</span>\n\nsys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>libpython_dir<span class="token punctuation">)</span>\nos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">\'PATH\'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"%s;%s;"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>bin_dir<span class="token punctuation">,</span> lib_dir<span class="token punctuation">)</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">\'PATH\'</span><span class="token punctuation">]</span>\n\n\n<span class="token keyword">import</span> pxr<span class="token punctuation">.</span>Usdviewq <span class="token keyword">as</span> Usdviewq</code></pre></div>'}}),"\n",l.createElement(e.p,null,"実行。"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">USD_BUILD\\bin> D:\\python27\\python usdview\nusage: usdview [-h] [--renderer {opt,simple}] [--select PRIMPATH]\n               [--camera CAMERA] [--mask PRIMPATH[,PRIMPATH...]]\n               [--clearsettings] [--norender] [--unloaded] [--timing]\n               [--memstats {none,stage,stageAndImaging}]\n               [--numThreads NUMTHREADS] [--ff FIRSTFRAME] [--lf LASTFRAME]\n               [--complexity COMPLEXITY] [--quitAfterStartup]\n               usdFile\nusdview: error: too few arguments</code></pre></div>'}}),"\n",l.createElement(e.p,null,"引数が必要と。"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">cube.usd\n#usda 1.0\n\ndef Cube "Cube"\n{\n}</code></pre></div>'}}),"\n",l.createElement(e.p,null,"実行。"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">Warning: in Link at line 180 of D:\\dev\\_alembic\\USD\\pxr\\imaging\\lib\\hd\\glslProgram.cpp -- Failed to link shader:\nGeometry shader(s) failed to link.\nGeometry link error: HW_UNSUPPORTED.\nERROR: Internal compile error, error code: E_SC_LITERAL_NOT_DEFINED\nShader not supported by HW</code></pre></div>'}}),"\n",l.createElement(e.p,null,"Windowは出た。しかしglslのエラーで3DViewの描画ができぬ。\nRx480がだめなのだろうか。\nGTX買わねば・・・"),"\n",l.createElement(e.p,null,"Alembic追加する\nToDo"))}var o=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?l.createElement(e,n,l.createElement(s,n)):s(n)},i=t(8678),c=t(4160),p=t(8736);const r={code:n=>{let{children:e,className:t}=n;return t?l.createElement(p.Z,{className:t},e):l.createElement("code",null,e)}};function u(n){let{data:e,children:t}=n;const s=e.mdx.frontmatter;return l.createElement(i.Z,null,l.createElement("h1",null,s.title),l.createElement("div",{className:"tags-index"},s.tags&&s.tags.length>0&&s.tags.map((n=>l.createElement(c.rU,{to:"/tags/"+n+"/",itemProp:"url"},l.createElement("button",null,n))))),l.createElement(a.Zo,{components:r},t))}function d(n){return l.createElement(u,n,l.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2017-08-usd-md-8ae8648afb9a20a5e0ad.js.map
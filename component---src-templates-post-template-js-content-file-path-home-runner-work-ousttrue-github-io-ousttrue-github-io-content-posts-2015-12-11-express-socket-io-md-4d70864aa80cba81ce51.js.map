{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-12-11-express-socket-io-md-4d70864aa80cba81ce51.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,yBAA0B,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAC9JI,wBAAyB,CACvBC,OAAQ,oiSAGd,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BCVA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,MAAME,EAAcD,EAAKE,IAAID,YAC7B,OAAOb,EAAAA,cAAoBe,EAAAA,EAAQ,KAAMf,EAAAA,cAAoB,KAAM,KAAMa,EAAYG,OAAQhB,EAAAA,cAAoB,MAAO,CACtHQ,UAAW,cACVK,EAAYI,MAAQJ,EAAYI,KAAKC,OAAS,GAAKL,EAAYI,KAAKE,KAAIC,GAClEpB,EAAAA,cAAoBqB,EAAAA,GAAM,CAC/BC,GAAI,SAASF,EAAG,IAChBG,SAAU,OACTvB,EAAAA,cAAoB,SAAU,KAAMoB,OACpCpB,EAAAA,cAAoBwB,EAAAA,GAAa,CACpCzB,WAAYA,GACXQ,GACL,CACe,SAASkB,EAAiBjC,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoB0B,EAAqBlC,GAC3F,C","sources":["webpack:///./content/posts/2015/12/11/express_socket.io.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Socket.IO を実験する環境のメモ。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Expressは、serve-staticで静的なファイルのhostingが目的兼後で拡張できるように\\ncoffee-scriptは無しでES6要素をなるべく入れる\\nSocket.IOを手早く展開するのが目的なのでtypescriptは抜きにしようと思ったが、無い方がつらいので矢張り入れる\\n\\nhttps://github.com/ousttrue/sio_sample\\nProject生成\\n> mkdir sio_sample\\n> cd sio_sample\\nsio_sample> npm init -y\\nsio_sample> npm install gulp gulp-load-plugins gulp-nodemon browser-sync -D\\nsio_sample> npm install express socket.io body-parser method-override connect-logger errorhandler serve-static --save\\n\\nvscodeでes6を使えるように\\njsconifg.json\\n{\\n    \\\"compilerOptions\\\": {\\n        \\\"target\\\": \\\"ES6\\\"\\n    }\\n}\\n\\n後で拡張できるように以下のようなディレクトリ構成にする。\\nbuild &lt;- srcから(加工して)コピーされる\\n\\nsrc &lt;- 加工前のファイル置き場\\n  + server\\n    + app.js\\n  + client\\n    + index.html\\n    + index.js\\n\\nsrc/server/app.js\\n\\\"use strict\\\";\\n\\nconst http = require('http');\\nconst express = require('express');\\nconst port = process.env.port || 3000;\\nconst app = express();\\nconst server = http.createServer(app);\\nconst servestatic = require('serve-static');\\nconst serve_dir = __dirname + '/public';\\nconsole.log('serve %s', serve_dir);\\napp\\n    .use(servestatic(serve_dir))\\n;\\n\\n// socket.io\\nconst socketio = require('socket.io');\\nconst io = socketio(server);\\nio.on('connection', (socket) => {\\n    console.log('a client connected %s', socket);\\n    socket.on('disconnect', () => {\\n        console.log('a client disconnected');\\n    });\\n});\\n\\n// start\\nserver.listen(port);\\nconsole.log('start port: %d...', port);\\n\\nsrc/client/index.html\\n&lt;!DOCTYPE html>\\n&lt;html lang=\\\"en\\\">\\n&lt;head>\\n    &lt;meta charset=\\\"UTF-8\\\">\\n    &lt;title>Document&lt;/title>\\n    &lt;script src=\\\"index.js\\\">&lt;/script>\\n&lt;/head>\\n&lt;body>\\n    &lt;div id=\\\"target\\\">&lt;/div>\\n&lt;/body>\\n&lt;/html>\\n\\nsrc/client/index.js\\n\\\"use strict\\\";\\n\\nfunction setup(target) {\\n    const div = document.createElement('div');\\n    div.appendChild(document.createTextNode('onLoad'));\\n    target.appendChild(div);\\n}\\n\\nwindow.onload = () => {\\n\\n    setup(document.getElementById('target'));\\n\\n};\\n\\nsrcからbuildに展開するgulp\\ngulpfile.js\\nconst gulp = require('gulp');\\nconst $ = require('gulp-load-plugins')();\\n\\nconst config = {\\n    server_src: './src/server/**/*',\\n    server_dst: './build',\\n    client_src: './src/client/**/*',\\n    client_dst: './build/public'\\n};\\n\\ngulp.task('server', () => {\\n    gulp.src(config.server_src)\\n        .pipe(gulp.dest(config.server_dst));\\n});\\n\\ngulp.task('client', () => {\\n    gulp.src(config.client_src)\\n        .pipe(gulp.dest(config.client_dst));\\n});\\n\\ngulp.task('default', ['server', 'client']);\\n\\nbuild\\nsio_sample> gulp\\n\\nブラウザで動いた。\\nbrowserSync導入\\ngulpfile.js。browserSync\\nconst config = { // 追加分\\n    app_entry: './build/app.js',\\n    app_port: 5000,\\n};\\n\\nconst browserSync = require('browser-sync').create();\\ngulp.task('serve', ()=>{\\n    $.nodemon({\\n        script: config.app_entry,\\n        exp: 'js',\\n        ignore: [],\\n        env: {\\n            port: config.app_port\\n        }\\n    })\\n    .on('readable', ()=>{\\n        this.stdout.on('data', (chunk)=>{\\n            if (/^start /.test(chunk)){\\n                console.log('reloading...');\\n                browserSync.reload();\\n            }\\n            process.stdout.write(chunk)\\n        });\\n    });\\n});\\n\\ngulp.task('browser-sync', ['serve'], ()=>{\\n    browserSync.init({\\n        proxy: 'localhost:' + config.app_port,\\n        port: 3000,\\n        ws: true\\n    })\\n});\\n\\ngulpfile.js。watchタスク追加\\ngulp.task('server', () => {\\n    gulp.src(config.server_src)\\n        .pipe(gulp.dest(config.server_dst))\\n        .pipe(browserSync.stream())\\n        ;\\n});\\n\\ngulp.task('client', () => {\\n    gulp.src(config.client_src)\\n        .pipe(gulp.dest(config.client_dst))\\n        .pipe(browserSync.stream())\\n        ;\\n});\\n\\ngulp.task('build', ['server', 'client']);\\n\\ngulp.task('watch', ['build', 'browser-sync'], ()=>{\\n    gulp.watch(config.server_src, ['server']);\\n    gulp.watch(config.client_src, ['client']);\\n});\\n\\ngulp.task('default', ['watch']);\\n\\ngit\\nいったんgitに登録しよう。\\n.gitignore\\n/node_modules/\\n/build/\\n\\nSocket.IOの疎通\\n&lt;!DOCTYPE html>\\n&lt;html lang=\\\"en\\\">\\n&lt;head>\\n    &lt;meta charset=\\\"UTF-8\\\">\\n    &lt;title>Document&lt;/title>\\n    &lt;script type=\\\"text/javascript\\\" src=\\\"/socket.io/socket.io.js\\\">&lt;/script>\\n    &lt;script src=\\\"index.js\\\">&lt;/script>\\n&lt;/head>\\n&lt;body>\\n    &lt;div id=\\\"target\\\">&lt;/div>\\n&lt;/body>\\n&lt;/html>\\n\\n\\\"use strict\\\";\\n\\nfunction setup(target) {\\n    const div = document.createElement('div');\\n    div.appendChild(document.createTextNode('hello'));\\n    target.appendChild(div);\\n\\n    this.socket = io.connect();\\n}\\n\\nwindow.onload = () => {\\n    setup(document.getElementById('target'));\\n};\\n\\ntypescript導入\\nsio_sample> tsc --init\\n\\ntsconfig.json\\n{\\n    \\\"compilerOptions\\\": {\\n        \\\"module\\\": \\\"commonjs\\\",\\n        \\\"target\\\": \\\"es5\\\",\\n        \\\"noImplicitAny\\\": true,\\n        \\\"outDir\\\": \\\".\\\",\\n        \\\"rootDir\\\": \\\".\\\",\\n        \\\"sourceMap\\\": false\\n    },\\n    \\\"exclude\\\": [\\n        \\\"node_modules\\\"\\n    ]\\n}\\n\\nsio_sample> npm install gulp-typescript gulp-if gulp-plumber gulp-debug -D\\nsio_sample> cd src\\nsio_sample/src> tsd init\\nsio_sample/src> tsd query node express socket.io -rosa install\\n\\ngulpfile.js。typescriptのコンパイルを追加\\nconst path = require('path');\\nconst tsconfig = require('./tsconfig.json');\\nconst isTypescript = (file) => {\\n    const ext = path.extname(file.path).toLowerCase();\\n    return ext === '.ts';\\n}\\n\\ngulp.task('server', () => {\\n    gulp.src(config.server_src)\\n        .pipe($.plumber())\\n        .pipe($.if(isTypescript, $.typescript(tsconfig.compilerOptions)))\\n        .pipe($.debug('server'))\\n        .pipe(gulp.dest(config.server_dst))\\n        .pipe(browserSync.stream())\\n    ;\\n});\\n\\ngulp.task('client', () => {\\n    gulp.src(config.client_src)\\n        .pipe($.plumber())\\n        .pipe($.if(isTypescript, $.typescript(tsconfig.compilerOptions)))\\n        .pipe($.debug('client'))\\n        .pipe(gulp.dest(config.client_dst))\\n        .pipe(browserSync.stream())\\n    ;\\n});\\n\\nsrc/server/app.jsをapp.tsにリネーム\\n/// &lt;reference path=\\\"../typings/tsd.d.ts\\\" />\\n\\\"use strict\\\";\\n\\nimport http = require('http');\\nimport express = require('express');\\nconst port = process.env.port || 3000;\\nconst app = express();\\nconst server = http.createServer(app);\\nconst servestatic = require('serve-static');\\nconst serve_dir = __dirname + '/public';\\nconsole.log('serve %s', serve_dir);\\napp\\n    .use(servestatic(serve_dir))\\n;\\n\\n// socket.io\\nimport socketio = require('socket.io');\\nconst io = socketio(server);\\nio.on('connection', (socket) => {\\n    var clientAddress=socket.client.conn.remoteAddress;\\n    console.log('connected: %s', clientAddress);\\n    socket.on('disconnect', () => {\\n        console.log('disconnected: %s', clientAddress);\\n    });\\n});\\n\\n// start\\nserver.listen(port);\\nconsole.log('start port: %d...', port);\\n\\nsrc/client/index.jsをindex.tsにリネーム\\n/// &lt;reference path=\\\"../typings/tsd.d.ts\\\" />\\n\\\"use strict\\\";\\n\\ndeclare module io {\\n    export function connect(): SocketIO.Socket;\\n}\\n\\nfunction setup(target: Element) {\\n    const div = document.createElement('div');\\n    div.appendChild(document.createTextNode('hello socket.io'));\\n    target.appendChild(div);\\n\\n    this.socket = io.connect();\\n}\\n\\nwindow.onload = () => {\\n\\n    setup(document.getElementById('target'));\\n\\n};\\n\\nメッセージをやり取り\\nsrc/server/app.ts サーバーサイド。client-messageを受けてserver-messageを発行\\n// socket.io\\nimport socketio = require('socket.io');\\nconst io = socketio(server);\\nio.on('connection', (socket) => {\\n    var clientAddress = socket.client.conn.remoteAddress;\\n    console.log('connected: %s', clientAddress);\\n    socket.on('disconnect', () => {\\n        console.log('disconnected: %s', clientAddress);\\n    });\\n\\n    socket.on('client-message', (data: any) => {\\n        socket.emit('server-message', 'server clicked message');\\n    });\\n});\\n\\nsrc/client/index.ts クライアントサイド。buttonを押したらclient-messageを発行。server-messageを受けてテキストを描画\\n/// &lt;reference path=\\\"../typings/tsd.d.ts\\\" />\\n\\\"use strict\\\";\\n\\ndeclare module io {\\n    export function connect(): SocketIO.Socket;\\n}\\n\\nclass Client {\\n    socket: SocketIO.Socket;\\n\\n    constructor() {\\n        this.socket = io.connect();\\n    }\\n\\n    setup(target: Element) {\\n        const div = document.createElement('div');\\n        div.appendChild(document.createTextNode('hello socket.io'));\\n        target.appendChild(div);\\n\\n        this.socket.on('server-message', (data: any)=>{\\n            const div = document.createElement('div');\\n            div.appendChild(document.createTextNode(data.toString()));\\n            target.appendChild(div);\\n        });\\n\\n        const button=document.createElement('button');\\n        button.appendChild(document.createTextNode('send'));\\n        button.onclick=(ev: MouseEvent)=>{\\n            this.socket.emit('client-message', 'clicked');\\n        };\\n        target.appendChild(button);\\n    }\\n}\\nvar client=new Client();\\n\\nwindow.onload = () => {\\n\\n    client.setup(document.getElementById('target'));\\n\\n};</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2015/12/11/express_socket.io.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
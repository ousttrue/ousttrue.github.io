{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2017-07-hololens-cpp-md-7fbc7a6b69465ce116a7.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,2CAA4C,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,gGAAiG,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,8CAA+C,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,mBAAoB,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CACjeI,wBAAyB,CACvBC,OAAQ,8IAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,0JAA2J,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CACxPI,wBAAyB,CACvBC,OAAQ,61fAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,uTAAwT,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,2IAA4I,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,oIAAqI,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,+BAAgC,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,gBAAiB,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,wBAAyB,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,6CAA8C,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,0BAA2B,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,mHAAoH,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CACryCI,wBAAyB,CACvBC,OAAQ,gWAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,yBACrD,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BClBA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,MAAME,EAAcD,EAAKE,IAAID,YAC7B,OAAOb,EAAAA,cAAoBe,EAAAA,EAAQ,KAAMf,EAAAA,cAAoB,KAAM,KAAMa,EAAYG,OAAQhB,EAAAA,cAAoB,MAAO,CACtHQ,UAAW,cACVK,EAAYI,MAAQJ,EAAYI,KAAKC,OAAS,GAAKL,EAAYI,KAAKE,KAAIC,GAClEpB,EAAAA,cAAoBqB,EAAAA,GAAM,CAC/BC,GAAI,SAASF,EAAG,IAChBG,SAAU,OACTvB,EAAAA,cAAoB,SAAU,KAAMoB,OACpCpB,EAAAA,cAAoBwB,EAAAA,GAAa,CACpCzB,WAAYA,GACXQ,GACL,CACe,SAASkB,EAAiBjC,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoB0B,EAAqBlC,GAC3F,C","sources":["webpack:///./content/posts/2017/07/hololens_cpp.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"SharpDX で Hololens が頓挫したので、C++でまいりましょう。\"), \"\\n\", React.createElement(_components.p, null, \"VisualStudio2015update3 しか Univsersal cpp HolographicApp template が含まれないので github にコピーしておいた。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/HolographicApp\"), \"\\n\", React.createElement(_components.p, null, \"エミュレーターで描画が乱れる件\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">>>(tools)から</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"check を外したらなおった。\\n実機\\n問題ない。\\nHololens 特有の部分\\n通常の DirectX と HolographicApp の違いを調べていたのだけれど、\\n両目レンダリングを効率よくするために、複数のレンダーターゲットに対して\\nまとめてパイプラインを実行する関連のようだ。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\">VPAndRTArrayIndexFromAnyShaderFeedingRasterizer\\nVPAndRTArrayIndexFromAnyShaderFeedingRasterizerないとき<span class=\\\"token punctuation\\\">(</span>エミュレーター<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// A constant buffer that stores the model transform.</span>\\ncbuffer ModelConstantBuffer <span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">register</span><span class=\\\"token punctuation\\\">(</span>b0<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    float4x4 model<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// A constant buffer that stores each set of view and projection matrices in column-major format.</span>\\ncbuffer ViewProjectionConstantBuffer <span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">register</span><span class=\\\"token punctuation\\\">(</span>b1<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    float4x4 viewProjection<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Per-vertex data used as input to the vertex shader.</span>\\n<span class=\\\"token keyword\\\">struct</span> <span class=\\\"token class-name\\\">VertexShaderInput</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    min16float3 pos     <span class=\\\"token operator\\\">:</span> POSITION<span class=\\\"token punctuation\\\">;</span>\\n    min16float3 color   <span class=\\\"token operator\\\">:</span> COLOR0<span class=\\\"token punctuation\\\">;</span>\\n    uint        instId  <span class=\\\"token operator\\\">:</span> SV_InstanceID<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Per-vertex data passed to the geometry shader.</span>\\n<span class=\\\"token comment\\\">// Note that the render target array index will be set by the geometry shader</span>\\n<span class=\\\"token comment\\\">// using the value of viewId.</span>\\n<span class=\\\"token keyword\\\">struct</span> <span class=\\\"token class-name\\\">VertexShaderOutput</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    min16float4 pos     <span class=\\\"token operator\\\">:</span> SV_POSITION<span class=\\\"token punctuation\\\">;</span>\\n    min16float3 color   <span class=\\\"token operator\\\">:</span> COLOR0<span class=\\\"token punctuation\\\">;</span>\\n    uint        viewId  <span class=\\\"token operator\\\">:</span> TEXCOORD0<span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// SV_InstanceID % 2</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Simple shader to do vertex processing on the GPU.</span>\\nVertexShaderOutput <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>VertexShaderInput input<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    VertexShaderOutput output<span class=\\\"token punctuation\\\">;</span>\\n    float4 pos <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">float4</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">.</span>pos<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1.0f</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Note which view this vertex has been sent to. Used for matrix lookup.</span>\\n    <span class=\\\"token comment\\\">// Taking the modulo of the instance ID allows geometry instancing to be used</span>\\n    <span class=\\\"token comment\\\">// along with stereo instanced drawing; in that case, two copies of each</span>\\n    <span class=\\\"token comment\\\">// instance would be drawn, one for left and one for right.</span>\\n    <span class=\\\"token keyword\\\">int</span> idx <span class=\\\"token operator\\\">=</span> input<span class=\\\"token punctuation\\\">.</span>instId <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Transform the vertex position into world space.</span>\\n    pos <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mul</span><span class=\\\"token punctuation\\\">(</span>pos<span class=\\\"token punctuation\\\">,</span> model<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Correct for perspective and project the vertex position onto the screen.</span>\\n    pos <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mul</span><span class=\\\"token punctuation\\\">(</span>pos<span class=\\\"token punctuation\\\">,</span> viewProjection<span class=\\\"token punctuation\\\">[</span>idx<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    output<span class=\\\"token punctuation\\\">.</span>pos <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>min16float4<span class=\\\"token punctuation\\\">)</span>pos<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Pass the color through without modification.</span>\\n    output<span class=\\\"token punctuation\\\">.</span>color <span class=\\\"token operator\\\">=</span> input<span class=\\\"token punctuation\\\">.</span>color<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Set the instance ID. The pass-through geometry shader will set the</span>\\n    <span class=\\\"token comment\\\">// render target array index to whatever value is set here.</span>\\n    output<span class=\\\"token punctuation\\\">.</span>viewId <span class=\\\"token operator\\\">=</span> idx<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> output<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token comment\\\">// Per-vertex data from the vertex shader.</span>\\n<span class=\\\"token keyword\\\">struct</span> <span class=\\\"token class-name\\\">GeometryShaderInput</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    min16float4 pos     <span class=\\\"token operator\\\">:</span> SV_POSITION<span class=\\\"token punctuation\\\">;</span>\\n    min16float3 color   <span class=\\\"token operator\\\">:</span> COLOR0<span class=\\\"token punctuation\\\">;</span>\\n    uint        instId  <span class=\\\"token operator\\\">:</span> TEXCOORD0<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Per-vertex data passed to the rasterizer.</span>\\n<span class=\\\"token keyword\\\">struct</span> <span class=\\\"token class-name\\\">GeometryShaderOutput</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    min16float4 pos     <span class=\\\"token operator\\\">:</span> SV_POSITION<span class=\\\"token punctuation\\\">;</span>\\n    min16float3 color   <span class=\\\"token operator\\\">:</span> COLOR0<span class=\\\"token punctuation\\\">;</span>\\n    uint        rtvId   <span class=\\\"token operator\\\">:</span> SV_RenderTargetArrayIndex<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// &lt;- RTVテクスチャアレイのindex</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// This geometry shader is a pass-through that leaves the geometry unmodified</span>\\n<span class=\\\"token comment\\\">// and sets the render target array index.</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token function\\\">maxvertexcount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>triangle GeometryShaderInput input<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> inout TriangleStream<span class=\\\"token operator\\\">&lt;</span>GeometryShaderOutput<span class=\\\"token operator\\\">></span> outStream<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    GeometryShaderOutput output<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token function\\\">unroll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token operator\\\">++</span>i<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        output<span class=\\\"token punctuation\\\">.</span>pos   <span class=\\\"token operator\\\">=</span> input<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>pos<span class=\\\"token punctuation\\\">;</span>\\n        output<span class=\\\"token punctuation\\\">.</span>color <span class=\\\"token operator\\\">=</span> input<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>color<span class=\\\"token punctuation\\\">;</span>\\n        output<span class=\\\"token punctuation\\\">.</span>rtvId <span class=\\\"token operator\\\">=</span> input<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>instId<span class=\\\"token punctuation\\\">;</span>\\n        outStream<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Append</span><span class=\\\"token punctuation\\\">(</span>output<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nVPAndRTArrayIndexFromAnyShaderFeedingRasterizerあるとき\\n<span class=\\\"token comment\\\">// A constant buffer that stores the model transform.</span>\\ncbuffer ModelConstantBuffer <span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">register</span><span class=\\\"token punctuation\\\">(</span>b0<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    float4x4 model<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// A constant buffer that stores each set of view and projection matrices in column-major format.</span>\\ncbuffer ViewProjectionConstantBuffer <span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">register</span><span class=\\\"token punctuation\\\">(</span>b1<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    float4x4 viewProjection<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Per-vertex data used as input to the vertex shader.</span>\\n<span class=\\\"token keyword\\\">struct</span> <span class=\\\"token class-name\\\">VertexShaderInput</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    min16float3 pos     <span class=\\\"token operator\\\">:</span> POSITION<span class=\\\"token punctuation\\\">;</span>\\n    min16float3 color   <span class=\\\"token operator\\\">:</span> COLOR0<span class=\\\"token punctuation\\\">;</span>\\n    uint        instId  <span class=\\\"token operator\\\">:</span> SV_InstanceID<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Per-vertex data passed to the geometry shader.</span>\\n<span class=\\\"token comment\\\">// Note that the render target array index is set here in the vertex shader.</span>\\n<span class=\\\"token keyword\\\">struct</span> <span class=\\\"token class-name\\\">VertexShaderOutput</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    min16float4 pos     <span class=\\\"token operator\\\">:</span> SV_POSITION<span class=\\\"token punctuation\\\">;</span>\\n    min16float3 color   <span class=\\\"token operator\\\">:</span> COLOR0<span class=\\\"token punctuation\\\">;</span>\\n    uint        rtvId   <span class=\\\"token operator\\\">:</span> SV_RenderTargetArrayIndex<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// SV_InstanceID % 2 // &lt;- RTVテクスチャアレイのindex</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Simple shader to do vertex processing on the GPU.</span>\\nVertexShaderOutput <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>VertexShaderInput input<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    VertexShaderOutput output<span class=\\\"token punctuation\\\">;</span>\\n    float4 pos <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">float4</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">.</span>pos<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1.0f</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Note which view this vertex has been sent to. Used for matrix lookup.</span>\\n    <span class=\\\"token comment\\\">// Taking the modulo of the instance ID allows geometry instancing to be used</span>\\n    <span class=\\\"token comment\\\">// along with stereo instanced drawing; in that case, two copies of each</span>\\n    <span class=\\\"token comment\\\">// instance would be drawn, one for left and one for right.</span>\\n    <span class=\\\"token keyword\\\">int</span> idx <span class=\\\"token operator\\\">=</span> input<span class=\\\"token punctuation\\\">.</span>instId <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Transform the vertex position into world space.</span>\\n    pos <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mul</span><span class=\\\"token punctuation\\\">(</span>pos<span class=\\\"token punctuation\\\">,</span> model<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Correct for perspective and project the vertex position onto the screen.</span>\\n    pos <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mul</span><span class=\\\"token punctuation\\\">(</span>pos<span class=\\\"token punctuation\\\">,</span> viewProjection<span class=\\\"token punctuation\\\">[</span>idx<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    output<span class=\\\"token punctuation\\\">.</span>pos <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>min16float4<span class=\\\"token punctuation\\\">)</span>pos<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Pass the color through without modification.</span>\\n    output<span class=\\\"token punctuation\\\">.</span>color <span class=\\\"token operator\\\">=</span> input<span class=\\\"token punctuation\\\">.</span>color<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Set the render target array index.</span>\\n    output<span class=\\\"token punctuation\\\">.</span>rtvId <span class=\\\"token operator\\\">=</span> idx<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> output<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"どう違うのか\\n見比べてみたところ、\\nVPAndRTArrayIndexFromAnyShaderFeedingRasterizer=true の場合\\nVertexShader で SV_RenderTargetArrayIndex を使うことが可能で、\\nそうでない場合は VertexShader で使うことができないが GeometryShader で SV_RenderTargetArrayIndex を使うことが可能ということらしい。\\nデバッガで確認したところ、実機・エミュレーター共に\\nbackbuffer は D3D11_TEXTURE2D_DESC.ArraySize=2 となっていた。\"), \"\\n\", React.createElement(_components.p, null, \"https://developer.microsoft.com/en-us/windows/mixed-reality/rendering_in_directx#important_note_about_rendering_on_non-hololens_devices\"), \"\\n\", React.createElement(_components.p, null, \"実機では VPAndRTArrayIndexFromAnyShaderFeedingRasterizer=true、エミュレーターで false で gometryshader 版になることがわかった。\\nSV_RenderTargetArrayIndex\"), \"\\n\", React.createElement(_components.p, null, \"VR のためのステレオレンダリングを高速化するアイデア\"), \"\\n\", React.createElement(_components.p, null, \"なんとなくわかってきた。\"), \"\\n\", React.createElement(_components.p, null, \"ジオメトリシェーダを使用した複数画面描画\"), \"\\n\", React.createElement(_components.p, null, \"SV_ViewportArrayIndex というのもあるらしい。\\nなるほどー。\"), \"\\n\", React.createElement(_components.p, null, \"セマンティクス (DirectX HLSL)\"), \"\\n\", React.createElement(_components.p, null, \"まとめ\\nD3D11 専用のレンダラを作ってみる。\\nHololens と UWP 兼用のプロジェクトにできそうな気がする。\\nHololens の初期化に失敗したら通常の UWP にフォールバックすればよいのではないか。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">HoloApp\\n    Backbuffer\\n    CameraUpdate\\n    Input\\n        |\\n        v\\n    +----------+\\n    |SceneGraph|\\n    |Renderer  |\\n    +----------+\\n        ^\\n        |\\n    Input\\n    CameraUpdate\\n    Backbuffer\\nUwpApp</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"こんな感じのプロジェクトを模索してみよう。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/07/hololens_cpp.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
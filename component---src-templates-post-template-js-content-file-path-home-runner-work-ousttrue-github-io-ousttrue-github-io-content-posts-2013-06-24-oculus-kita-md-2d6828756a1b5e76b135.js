"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[948],{8648:function(n,e,t){t.r(e),t.d(e,{default:function(){return i}});var c=t(1151),l=t(7294);function r(n){const e=Object.assign({p:"p"},(0,c.ah)(),n.components);return l.createElement(e.p,null,"Oculus来たー\n6月10くらいにぽちってから２週間くらいで到着。いいタイミングに発注したらしい\nOculusことはじめ\noculus sdk downloadあたりで検索すると見つかるのでいただいてくる。\n特にログインとかアカウントとかは必要ない。\nSDKにはlibSDKとそれを使ったサンプルがvcプロジェクトで入っている。\noculusの組み込みには２段階あって、ひとつは両目向けに違うレンダリングをする作業、\n２つめはOculusのジャイロセンサの値を受け取ってカメラの方向を対応させる作業となっている。\nひとつめのステレオレンダリングに関しては、左目用と右目用にオフスクリーンレンダリングして\nそれを表示するときにシェーダーで歪ませるというものになる。 歪ませ方は、\nRenderTiny_D3D1X_Device.cpp や Oculus_SDK_Overview.pdfに書いてある。\nOpenCVとかのカメラ係数に似ているような気もするが同じものかは確認していない。\nふたつめの方は、LibOVRに任せると簡単でusbのHIDデバイスから値を随時取得して\nカメラ姿勢に適用するだけ。\nLibOVRはこのジャイロの値取得とDXUT的な3Dフレームワークが混合しているので\nジャイロの方だけを抽出して最小限にしたい。\nあと自分のコードに混ぜて公開していいのかライセンス的によくわからん。\nとりあえずglut化してみよう\nはじめに軽くTinyRoomをglutに移植しようと思ったらdxutみたいのがくっついていて途中で投げ出したｗ。\n手持ちで、OpenGLシェーダーとかオフスクリーンレンダリングを扱うシステムが無いので\nそこから作るのが少し時間がかかるので後回しに。\nIrrlichtのカメラをOculus化\n方向転換して、ベースにlibOVRを合体した。\ngithubのものはoculusのステレオレンダリングは実装済みなのでgyroを合成する件のみ。\nIrrlichtのカメラ行列の制御がよくわからぬが一応表示。\nあとでICameraSceneNodeを継承して作り直そう。\nmikuさんprprな感じになるにはもう少しかかるな・・・")}var u=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,c.ah)(),n.components);return e?l.createElement(e,n,l.createElement(r,n)):r(n)},a=(t(8678),t(8838));const o={code:n=>{let{children:e,className:t}=n;return t?l.createElement(a.Z,{className:t},e):l.createElement("code",null,e)}};function s(n){let{data:e,children:t}=n;return l.createElement(l.Fragment,null,l.createElement("h1",null,e.mdx.frontmatter.title),l.createElement(c.Zo,{components:o},t))}function i(n){return l.createElement(s,n,l.createElement(u,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-06-24-oculus-kita-md-2d6828756a1b5e76b135.js.map
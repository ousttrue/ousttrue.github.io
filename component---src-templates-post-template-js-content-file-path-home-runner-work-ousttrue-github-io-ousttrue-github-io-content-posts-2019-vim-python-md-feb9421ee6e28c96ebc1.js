"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[621],{7710:function(e,n,a){a.r(n),a.d(n,{default:function(){return g}});var t=a(1151),s=a(7294);function l(e){const n=Object.assign({p:"p",h2:"h2",span:"span",h3:"h3",a:"a"},(0,t.ah)(),e.components);return s.createElement(s.Fragment,null,s.createElement(n.p,null,"phthon2は使わないのでスルーで。"),"\n",s.createElement(n.h2,null,"vim組み込み"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> vim</code></pre></div>'}}),"\n",s.createElement(n.h3,null,s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">PLUGIN_ROOT/python3</code>'}})," パス"),"\n",s.createElement(n.p,null,"モジュールとして自動で ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">import</code>'}})," されるぽい。\nリロードは？\n開発不便なのでは。"),"\n",s.createElement(n.h3,null,"py3file コマンド"),"\n",s.createElement(n.p,null,s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">so%</code>'}})," などを経由してリロードできる。"),"\n",s.createElement(n.h3,null,"py3 コマンド"),"\n",s.createElement(n.p,null,"インポート済みの関数呼び出しなど短い処理にとどめた方がよいと思う。"),"\n",s.createElement(n.h2,null,"リモートプラグイン"),"\n",s.createElement(n.p,null,s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nvim</code>'}})," の機能で ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">msgpack-rpc</code>'}})," を通した別プロセスでの実行。"),"\n",s.createElement(n.p,null,"vim8 への移植版。 ",s.createElement(n.a,{href:"https://github.com/roxma/nvim-yarp"},"https://github.com/roxma/nvim-yarp")),"\n",s.createElement(n.h3,null,s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">PLUGIN_ROOT/rplugin/python3</code>'}})),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> neovim <span class="token comment"># msgpack-rpc で vim と通信する</span>\n\n\n<span class="token decorator annotation punctuation">@neovim<span class="token punctuation">.</span>plugin</span>\n<span class="token keyword">class</span> <span class="token class-name">RemotePlugin</span><span class="token punctuation">:</span>\n\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nvim<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>nvim <span class="token operator">=</span> nvim\n\n    <span class="token decorator annotation punctuation">@neovim<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token string">\'HogeCommand\'</span><span class="token punctuation">)</span> <span class="token comment"># vimのコマンドとして実行可能になる</span>\n    <span class="token keyword">def</span> <span class="token function">hogee</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">pass</span></code></pre></div>'}}),"\n",s.createElement(n.h2,null,"比べてみると"),"\n",s.createElement(n.p,null,s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim</code>'}})," もしくは ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">neovim</code>'}})," とやり取りする部分は、単体実行ができないような。\nなるほど。"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">GUIやVIM\n+--------+     これを単体で開発する\n|vim     |     +--------------+\n|もしくは|----\x3e|使うモジュール|\n|neovim  |     +--------------+\n|をimport|\n+--------+</code></pre></div>'}}),"\n",s.createElement(n.h2,null,"リモートプラグイン(GUI)"),"\n",s.createElement(n.p,null,"これは、",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">msgpack-rpc</code>'}})," を使うのだけど ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">GUI</code>'}})," から ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nvim</code>'}})," を特定の作法で起動して ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">GUIイベントを受け取る</code>'}})," というものでちょっと違う。"))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?s.createElement(n,e,s.createElement(l,e)):l(e)},o=a(8678),p=a(1883),r=a(8838);const u={code:e=>{let{children:n,className:a}=e;return a?s.createElement(r.Z,{className:a},n):s.createElement("code",null,n)}};function m(e){let{data:n,children:a}=e;const l=n.mdx.frontmatter;return s.createElement(o.Z,null,s.createElement("h1",null,l.title),s.createElement("div",{className:"tags-index"},l.tags&&l.tags.length>0&&l.tags.map((e=>s.createElement(p.rU,{to:"/tags/"+e+"/",itemProp:"url"},s.createElement("button",null,e))))),s.createElement(t.Zo,{components:u},a))}function g(e){return s.createElement(m,e,s.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2019-vim-python-md-feb9421ee6e28c96ebc1.js.map
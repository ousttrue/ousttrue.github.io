{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-winter-python-imgui-md-ddf4031fd523c1e19cd9.js","mappings":"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","sources":["webpack:///./content/posts/2021/winter/python_imgui.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"名付けて cydeer\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/cydeer\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"python\"), \", \", React.createElement(_components.code, null, \"cython\"), \", \", React.createElement(_components.code, null, \"dear imgui\"), \" の組み合わせで名前を付けようと思ったのだが、既に先人がいっぱいいて名前が被るので適当に決めた。🦌\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/HankiDesign/awesome-dear-imgui#languages\"), \"\\n\", React.createElement(_components.p, null, \"最初、\", React.createElement(_components.code, null, \"DearPyGui\"), \" のサイトが強そうだったので試そうと思ったのだけど用途が違いそうだった。\\n次に、しばらく \", React.createElement(_components.code, null, \"pyimgui\"), \" を使っていい感じだったので、 \", React.createElement(_components.code, null, \"docking\"), \" ブランチ対応を見たら開発ブランチならば動いたので、自前ビルドを改造して使っていた。\\nPR も送ってみたのだが、\\nどうせなら自分で作ろうという機運が高まったので、作った。\\ncydeer は pyOpenGL とともに使う \", React.createElement(_components.code, null, \"薄い\"), \" ImGui ラッパーという路線である。\\n\", React.createElement(_components.code, null, \"ctypes\"), \" を併用することでポインタを直接扱う。 \", React.createElement(_components.code, null, \"camel case\"), \" と \", React.createElement(_components.code, null, \"snake case\"), \" の変換を含めて何も変えない。\"), \"\\n\", React.createElement(_components.p, null, \"| lib               | binder                                           | imgui                | window & graphincs                       | コメント                                                              |\\n|-------------------|--------------------------------------------------|----------------------|------------------------------------------|-----------------------------------------------------------------------|\\n| (python)cydeer    | cython + ctypes(generate using libclang.cindex ) | imgui docking branch | glfw など + pyOpenGL でがんばる          | 可能な限りAPIの改変をしない。ポインタは ctypes で作る                 |\\n| (python)pyimgui   | cython                                           | imgui                | glfw など + pyOpenGL でがんばる          | ポインタ引数(p_openなど)による返り値を、tuple による複値で表現        |\\n| (python)DearPyGui | 未確認                                           | 未確認               | DirectX11。python からアクセスできない？ | imgui をラップして独自 API。python で OpenGL するという目的には使えぬ |\\n| (c)cimgui         | 未確認                                           | 未確認               |                                          | imgui を \", React.createElement(_components.code, null, \"extern C\"), \" にラップしたもの。他言語バインド向け              |\\n| (rust)imgui-rs    | 未確認                                           | 未確認               |                                          | builder パターンで Default 引数を代替                                 |\"), \"\\n\", React.createElement(_components.p, null, \"imgui ラップには、 \", React.createElement(_components.code, null, \"関数オーバーロード\"), \" , \", React.createElement(_components.code, null, \"デフォルト引数\"), \" , \", React.createElement(_components.code, null, \"メンバー関数\"), \" という難所がある。\\n要するに \", React.createElement(_components.code, null, \"c++\"), \" 要素なのだけど、\", React.createElement(_components.code, null, \"c++\"), \" 要素含めての imgui の使い勝手なので。各言語バインディングで悩ましいところです。\\nたとえば、 \", React.createElement(_components.code, null, \"rust\"), \" は関数オーバーロードやデフォルト引数が無いので API を変えてます。\"), \"\\n\", React.createElement(_components.p, null, \"C# とかでも、 \", React.createElement(_components.code, null, \"const ImVec2 pos& = ImVec2(0, 0)\"), \" のような引数を解決するのは手間がかかったりする。\\nDLLImport 定義に対するデフォルト引数では解決できないので、 C# 側で一時変数を作ってポインターを取得する必要がある。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"デフォルト引数\"), \" は cython で普通に解決した。\\nclang.cindex から値を取れれば難しくない。\\n\", React.createElement(_components.code, null, \"メンバー関数\"), \" は \", React.createElement(_components.code, null, \"ctypes\"), \" に \", React.createElement(_components.code, null, \"cython\"), \" のメソッドを定義して、 \", React.createElement(_components.code, null, \"self\"), \" を \", React.createElement(_components.code, null, \"this pointer\"), \" に cast して呼び出すコードを作った(ImGuiFontAtlas)。\\n\", React.createElement(_components.code, null, \"関数オーバーロード\"), \" は \", React.createElement(_components.code, null, \"cython\"), \" でディスパッチするのはつらいので、\", React.createElement(_components.code, null, \"MenuItem_2\"), \" のような suffix をつけて人間が選ぶようにした。\"), \"\\n\", React.createElement(_components.p, null, \"忘れていたが、もっとも問題になるのが \", React.createElement(_components.code, null, \"構造体の値渡し・返し\"), \" だった(C++に限らない？)。\\n\", React.createElement(_components.code, null, \"D言語\"), \" , \", React.createElement(_components.code, null, \"rust\"), \" ともにこれができない(vcのコンパイラと互換性がない？)ので注意が必要だった。コンパイルは通るが動作がおかしかったような。\\nImGui の ImVec2 を値返しする関数でヒットする。\\n\", React.createElement(_components.code, null, \"cydeer\"), \" は、 \", React.createElement(_components.code, null, \"cython\"), \" を採用したので、\", React.createElement(_components.code, null, \"cython\"), \" 関数の出口で python 型に入れ替えるだけである。\"), \"\\n\", React.createElement(_components.p, null, \"あと、 \", React.createElement(_components.code, null, \"cydeer\"), \" は \", React.createElement(_components.code, null, \"pyi\"), \" 標準装備でいい感じである(一部実際のpython型と齟齬があるが・・・)。\"), \"\\n\", React.createElement(_components.h2, null, \"実装上の課題\"), \"\\n\", React.createElement(_components.p, null, \"cython の cimport の扱いがやっかいで、\", React.createElement(_components.code, null, \"imgui\"), \", \", React.createElement(_components.code, null, \"imgui.internal\"), \" に分割しようとするとうまくいかなかった。\\n\", React.createElement(_components.code, null, \"cydeer\"), \" に関しては巨大な単一のモジュールで行くのが無難かもしれない。\\n\", React.createElement(_components.code, null, \"internal\"), \" やノードエディターとか追加するときに分けたいのだけど。\"), \"\\n\", React.createElement(_components.p, null, \"現状、Windows + python-3.10 しか試していない。\\nWindows11 の wslg + wayland で動くようにしたい。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/winter/python_imgui.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","code","h2","_provideComponents","components","React","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
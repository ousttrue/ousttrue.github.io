{"version":3,"file":"component---content-posts-2023-0313-gatsby-md-df34c302168ac25ed96d.js","mappings":"wHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,KAAM,SACLC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,uBAAwB,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,KAAMK,EAAAA,cAAoBT,EAAYK,GAAI,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,OAAQ,wBAAyBG,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,QAAS,MAAOG,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,SAAU,mBAAoB,KAAMG,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,2BAA4B,MAAO,KAAMI,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,MAAO,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,KAAMK,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,oCAAqC,KAAMI,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,wBAAyBI,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,YAAa,uBAAwB,MAAO,KAAMG,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,yDAA0D,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,KAAMK,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,WAAY,KAAMI,EAAAA,cAAoBT,EAAYK,GAAI,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,YAAa,OAAQ,KAAMG,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,sEAAuE,MAAO,KAAMI,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,iCACz0C,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWZ,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECkBO,MAAMa,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2023/0313-gatsby.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"なんとなく gatsby やってみる。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"mdx\"), \" はおもしろそう。カスタマイズはの記法は \", React.createElement(_components.code, null, \"hugo\"), \" や \", React.createElement(_components.code, null, \"jinja\"), \" よりも素直で簡単そうに見えた\"), \"\\n\", React.createElement(_components.li, null, \"GraphQL もわりと素直で簡単そうに見える\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"弱点\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"frontmatter が yaml 必要。toml 食えない。\"), \"\\n\", React.createElement(_components.li, null, \"既存の markdown がエラーになる。\", React.createElement(_components.code, null, \"<url> 記法\"), \" とか。エラーがあると全部失敗になる。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"ということで、 python のスクリプトで既存の markdown を改変して様式を合わせることにした。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"yaml 変換\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"<url> 記法\"), \" 除去\"), \"\\n\", React.createElement(_components.li, null, \"frontmatter.title が無い場合に先頭の見出しを title に付け替える(sphinx の myst 向けの記事？)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"かくして、白いサイトに戻った。\\n適当に組み立てて行こう。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","ul","li","code","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
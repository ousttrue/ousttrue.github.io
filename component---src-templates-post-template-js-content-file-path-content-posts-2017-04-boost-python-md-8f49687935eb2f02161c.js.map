{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2017-04-boost-python-md-8f49687935eb2f02161c.js","mappings":"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","sources":["webpack:///./content/posts/2017/04/boost_python.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"mmdbridge のビルドで必要になった Boost.Python 周り。\\nどうやら、OpenEXR 界隈では結構使われている様子。\\nAlembic とか USD とか。\\nしかし Windows 版の Boost.Python はリンク周りにはまり要素が多いので、記録しといた。\"), \"\\n\", React.createElement(_components.p, null, \"Python へのリンク\\npython_d.lib にリンクする必要がない場合\\nPython 自体のデバッグをするのでなければ python_d にリンクする必要はない。\\npython_d へのリンクの必要性は、リンクするライブラリを Debug で統一する必要の有無なのだけど、\\npyd を作っているときは必要ない。python.exe ではなく python_d.exe から実行して何もかもが、Debug を参照するようにするのはつらい。そうではなくて自分のアプリが Python を内臓する場合は、python_d にリンクした方がよい。Debug と Release の混在によるエラーが出る可能性があるので。で、mmdbridge は後者なので python_d をリンクすることに妥当性がある。\\npython_d.lib へのリンクを防止する\"), \"\\n\", React.createElement(_components.p, null, \"https://stackoverflow.com/questions/16200997/why-doesnt-include-python-h-work\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">ifdef</span> <span class=\\\"token expression\\\">_DEBUG</span></span>\\n  <span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">undef</span> <span class=\\\"token expression\\\">_DEBUG</span></span>\\n  <span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;Python.h></span></span>\\n  <span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">define</span> <span class=\\\"token macro-name\\\">_DEBUG</span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">else</span></span>\\n  <span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;Python.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">endif</span></span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"これが、常套手段になるようで pyd の開発時には入れておくとよい。\\nBoost.Python が python_d にリンクする\"), \"\\n\", React.createElement(_components.p, null, \"boost-1.64.0\\npython-3.5.3\"), \"\\n\", React.createElement(_components.p, null, \"debug 版の boost をビルドしたのだが、よく見ると Release 版の python35.dll の方がリンクされていた。がんばって、DEBUG マクロの定義等を調べたのだがなかなかわからなかった。どうやらどこかで undef _DEBUG されているらしいと当たりがついた。\"), \"\\n\", React.createElement(_components.p, null, \"boost/python/detail/wrap_python.hpp\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">ifdef</span> <span class=\\\"token expression\\\">_DEBUG</span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span> <span class=\\\"token directive keyword\\\">ifndef</span> <span class=\\\"token expression\\\">BOOST_DEBUG_PYTHON</span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>  <span class=\\\"token directive keyword\\\">ifdef</span> <span class=\\\"token expression\\\">_MSC_VER</span></span>\\n    <span class=\\\"token comment\\\">// VC8.0 will complain if system headers are #included both with</span>\\n    <span class=\\\"token comment\\\">// and without _DEBUG defined, so we have to #include all the</span>\\n    <span class=\\\"token comment\\\">// system headers used by pyconfig.h right here.</span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stddef.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdarg.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdio.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;stdlib.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;assert.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;errno.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;ctype.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;wchar.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;basetsd.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;io.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;limits.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;float.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;string.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;math.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>   <span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;time.h></span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>  <span class=\\\"token directive keyword\\\">endif</span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>  <span class=\\\"token directive keyword\\\">undef</span> <span class=\\\"token expression\\\">_DEBUG </span><span class=\\\"token comment\\\">// Don't let Python force the debug library just because we're debugging.</span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span>  <span class=\\\"token directive keyword\\\">define</span> <span class=\\\"token macro-name\\\">DEBUG_UNDEFINED_FROM_WRAP_PYTHON_H</span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span> <span class=\\\"token directive keyword\\\">endif</span></span>\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">endif</span></span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"python_d.lib にリンクするには\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">b2 --with-python --debug-configuration python-debugging=on</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"として\\nlibboost_python3-vc140-mt-gyd-1_64\\nを作成する。gyd の y が python debug らしい。\\nBoost.Python へのリンク\\nboost はどうやってリンクするライブラリの名前を決めているのか\\n#pragma comment(lib,\\\"wsock32.lib\\\")\"), \"\\n\", React.createElement(_components.p, null, \"どこかに#pragma が記述されているはずだが。\"), \"\\n\", React.createElement(_components.p, null, \"https://stackoverflow.com/questions/16200997/why-doesnt-include-python-h-work\\nhttp://d.hatena.ne.jp/torutk/20121004/p1\"), \"\\n\", React.createElement(_components.p, null, \"autolink らしい。自動的に有効になる。\"), \"\\n\", React.createElement(_components.p, null, \"http://www.boost.org/doc/libs/1_48_0/boost/config/auto_link.hpp\"), \"\\n\", React.createElement(_components.p, null, \"pragma リンクの名前が一致しないんだけど\"), \"\\n\", React.createElement(_components.p, null, \"libboost_python3-vc140-mt-gd-1_64 にリンクしたいのだが libboost_python-vc140-mt-gd-1_64 にリンクしようとする\\nboost_python3_vc140-mt-gd-1_64 にリンクしたいのいだが libboost_python-vc140-mt-gd-1_64 にリンクしようとする\"), \"\\n\", React.createElement(_components.p, null, \"BOOST_ALL_NO_LIB\"), \"\\n\", React.createElement(_components.p, null, \"を定義して autolink を阻止して自分でリンクする。\\npython3 はどうやって決まるのか\\nむしろ boost_python3 が BOOST_LIB_NAME から決まる。\\nBOOST_LIB_NAME は、boost/python/detail/config.hpp で下記の記述がある。\\nboost-1.61.0\\n#define BOOST_LIB_NAME boost_python\"), \"\\n\", React.createElement(_components.p, null, \"boost_python3.dll と boost_python.dll は両方 Python3 にリンクされとった\\nなんだってー。つまり、boost は複数の Python に対するビルド結果を共存させることは考慮されていないということだった。なるほど\\nRelease ビルドと Debug ビルドは同じ Release の dll にリンクするべき\\nDebug 版であっても、boost_python.dll も同じ Release 版にリンクされる。\\nAutoLink に逆らわない方がよい。\\nCMake の FIND_PACKAGE(BOOST)による Boost_LIBRARIES は使わない方がよいかもしれない。デバッグの方にリンクされてはまりうる。ていうか、はまった。\\n結論として、AutoLink 邪魔だーから AutoLink に従えとなった。\\npybind を使おう\\nヘッダオンリーなので。リンク無いし。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/pybind/pybind11\"), \"\\n\", React.createElement(_components.p, null, \"既存の Boost.Python を使ったコードでも、pybind は Boost.Python と似た API になっているので簡単に置き換えられる。\"), \"\\n\", React.createElement(_components.p, null, \"pybind11 で C++の関数を python から使う\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/04/boost_python.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
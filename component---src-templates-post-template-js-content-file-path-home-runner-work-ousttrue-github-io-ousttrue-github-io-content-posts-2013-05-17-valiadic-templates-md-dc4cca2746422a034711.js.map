{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-05-17-valiadic-templates-md-dc4cca2746422a034711.js","mappings":"8JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,8JAA+J,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CACnSI,wBAAyB,CACvBC,OAAQ,4wDAGd,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCXA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMY,EAAKC,IAAIC,YAAYC,OAAQf,EAAAA,cAAoBgB,EAAAA,GAAa,CAC7IjB,WAAYA,GACXQ,GACL,CACe,SAASU,EAAiBzB,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoBkB,EAAqB1B,GAC3F,C","sources":["webpack:///./content/posts/2013/05/17/valiadic-templates.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"可変長テンプレート引数\\n引き続きmsgpack-rpc-asioを実装しているのだが、可変長テンプレート引数(valiadic\\ntemplate)を使うと関数登録のような場合にうまく書けることがわかった。\\n昨日は関数オブジェクトからstd::functionの型を得るのに下記のようにしていたのだけど、\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++// ret template ret helper0(ret (f::*)(rest…));\\\"><pre class=\\\"language-c++// ret template ret helper0(ret (f::*)(rest…));\\\"><code class=\\\"language-c++// ret template ret helper0(ret (f::*)(rest…));\\\">template Ret helper0(Ret (F::*)(Rest…) const);\\n// 1 template A1 helper1(Ret (F::*)(A1, Rest…));\\ntemplate A1 helper1(Ret (F::*)(A1, Rest…) const);\\n// 2 template A2 helper2(Ret (F::*)(A1, A2, Rest…));\\ntemplate A2 helper2(Ret (F::*)(A1, A2, Rest…) const);\\ntemplate void add_handler(F handler, const std::string &amp;method) {\\ntypedef decltype(handler) functor; typedef\\ndecltype(helper0(&amp;functor::operator())) R; typedef\\ndecltype(helper1(&amp;functor::operator())) A1; typedef\\ndecltype(helper2(&amp;functor::operator())) A2;\\n// register function...\\nstd::function&lt;R(A1, A2)&gt; func(handler);\\n\\n} 次のように書けた。c++ template void add_handler(F handler,\\nR(C::*)(A1, A2)const) { // register function… std::function\\nfunc(handler); }\\ntemplate void add_handler(F handler, const std::string &amp;method) {\\nadd_handler(handler, &amp;decltype(handler)::operator()); }\\n昨日参照させてもらった\\nhttp://d.hatena.ne.jp/osyo-manga/20121205/1354674180\\nのコードがやっとわかるようになってきた。\\n\\n上記コードはさらに可変長テンプレート引数で\\n\\ntemplate void add_handler(F handler, R(C::*)(A…)const) { // register\\nfunction… std::function func(handler); }\\n``と書けるのですごく便利になる。 msgpack-rpcの関数コールバック登録や、luaのような組み込み言語への関数公開の実装が楽になりそうだ。 上記サイトでも取り上げられているが&amp;decltype(functor)::operator()`を関数テンプレートの型推論に投げることで\\n関数オブジェクトから型情報を取れるらしい。\\n気をよくして各所を可変長テンプレート引数を使うように書き換えたのだが、\\n致命的な問題を発見。\\nvc2010はなんと可変長テンプレート引数を未実装だった。\\nc++0xの機能がわりと入っているのでできると思っていたのに。\\nmsgpack-rpc-asioは、明瞭にvc2010をターゲットにしているので可変長テンプレート引数の使用を断念した。\\n２引数関数の操作までしか実装していない時点で気付いて良かった。\\nライブラリの不足はboost使えば済むが言語機能が無いのは困るな・・・。\\nvc2012に乗り換えたくなった。</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/05/17/valiadic-templates.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
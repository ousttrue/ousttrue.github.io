{"version":3,"file":"component---content-posts-2022-0115-pybullet-md-98b3ca8ca89cf1f60be8.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,IAAK,MACLC,KAAM,OACNC,GAAI,OACHC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,yBAA0B,KAAMO,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,uBAAwB,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,uCAAwC,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,0DAA2D,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,gBAAiB,KAAMM,EAAAA,cAAoBV,EAAYK,IAAK,KAAMK,EAAAA,cAAoBV,EAAYM,KAAM,CAClhBK,UAAW,sBACV,qFAA0F,KAAMD,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,mEAAoEM,EAAAA,cAAoBV,EAAYM,KAAM,KAAM,gBAAiB,wBAAyBI,EAAAA,cAAoBV,EAAYM,KAAM,KAAM,gBAAiB,uBAAwBI,EAAAA,cAAoBV,EAAYM,KAAM,KAAM,0BAA2B,mBAAoBI,EAAAA,cAAoBV,EAAYM,KAAM,KAAM,gBAAiB,mBAAoBI,EAAAA,cAAoBV,EAAYM,KAAM,KAAM,UAAW,iBAAkB,KAAMI,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,yCAA0CM,EAAAA,cAAoBV,EAAYM,KAAM,KAAM,SAAU,2BAA4BI,EAAAA,cAAoBV,EAAYM,KAAM,KAAM,UAAW,YAAaI,EAAAA,cAAoBV,EAAYM,KAAM,KAAM,QAAS,kBAAmB,KAAMI,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,YAAa,KAAMG,EAAAA,cAAoBV,EAAYI,EAAG,KAAMM,EAAAA,cAAoBV,EAAYM,KAAM,KAAM,OAAQ,MAAOI,EAAAA,cAAoBV,EAAYM,KAAM,KAAM,WAAY,MAAOI,EAAAA,cAAoBV,EAAYM,KAAM,KAAM,YAAa,8BAA+B,KAAMI,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,YAAa,KAAMG,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,UAAWM,EAAAA,cAAoBV,EAAYM,KAAM,KAAM,wBAAyB,eAAgBI,EAAAA,cAAoBV,EAAYM,KAAM,KAAM,gBAAiB,2EACh/C,CAKA,UAJA,SAAoBP,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWd,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECeO,MAAMe,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,C","sources":["webpack:///./content/posts/2022/0115-pybullet.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"ExampleBrowser を読んでいる\"), \"\\n\", React.createElement(_components.p, null, \"fork して改造しながら読んでいる。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/bullet3\"), \"\\n\", React.createElement(_components.p, null, \"やっと構造がわかってきた。\\nコードはディレクトリに別れているのだけど、\\nCMake を整理しながら推進。\"), \"\\n\", React.createElement(_components.p, null, \"ざっくりとこんな感じか。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-{digraph}\"\n  }, \"rankdir=\\\"BT\\\"\\n\\nExampleBrowser -> SimpleOpenGL3App -> gwen -> \\\"Select DEMO\\\";\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"で、この SimpleOpenGL3App を glfw に、gwen を imgui に置き換えてコードを単純化している。\\n\", React.createElement(_components.code, null, \"bulletphysic\"), \" の マルチクライアント システム ぽい \", React.createElement(_components.code, null, \"SharedMemory\"), \" を解読したい。\\n各 Demo は、 \", React.createElement(_components.code, null, \"CommonExampleInterface\"), \" できれいに分離されている。\\n\", React.createElement(_components.code, null, \"SharedMemory\"), \" と各クライアントの通信内容と \", React.createElement(_components.code, null, \"OpenGL\"), \" の繋ぎの部分が知りたい。\"), \"\\n\", React.createElement(_components.p, null, \"この pybullet の下地の部分がシーン同期システムに使えないかと。\\n\", React.createElement(_components.code, null, \"Unity\"), \" とかだとノードに剛体をくっつけるのだけど、\\n\", React.createElement(_components.code, null, \"bullet\"), \" 的には、剛体に \", React.createElement(_components.code, null, \"Mesh\"), \" をつける考えになるような。\"), \"\\n\", React.createElement(_components.h2, null, \"20220118\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"各デモ\"), \" と \", React.createElement(_components.code, null, \"Physics\"), \" と \", React.createElement(_components.code, null, \"Renderer\"), \" を分離できればよいのだが。\\nわりと規模が大きい。\"), \"\\n\", React.createElement(_components.h2, null, \"20220122\"), \"\\n\", React.createElement(_components.p, null, \"だいぶ読んだ。\", React.createElement(_components.code, null, \"GLInstancingRenderer\"), \" がレンダラー本体。\\n\", React.createElement(_components.code, null, \"btIDebugDraw\"), \" とは別に普通の Renderer が実装されていてこっちを解読したい。\\nbtIDebugDraw だと wireframe になるのかな。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","pre","code","h2","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
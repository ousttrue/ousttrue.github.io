"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[355],{6511:function(n,t,e){e.r(t),e.d(t,{default:function(){return i}});var a=e(1151),s=e(7294);function l(n){const t=Object.assign({p:"p",a:"a",h2:"h2",span:"span",ul:"ul",li:"li",h3:"h3"},(0,a.ah)(),n.components);return s.createElement(s.Fragment,null,s.createElement(t.p,null,"ソースの方のリポジトリがハードディスククラッシュで失われて\n更新できなくなっていたので、サイトを作りなおし。\n",s.createElement(t.a,{href:"https://wyam.io/"},"wyam"),"を使ってみる。"),"\n",s.createElement(t.h2,null,"インストール"),"\n",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">$ dotnet tool install -g Wyam.Tool</code></pre></div>'}}),"\n",s.createElement(t.h2,null,"初期化する"),"\n",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">$ mkdir site\n$ cd site\n$ wyam new --recipe blog</code></pre></div>'}}),"\n",s.createElement(t.ul,null,"\n",s.createElement(t.li,null,"config.wyam(siteの設定)"),"\n",s.createElement(t.li,null,"input(記事置き場)","\n",s.createElement(t.ul,null,"\n",s.createElement(t.li,null,"about.md"),"\n",s.createElement(t.li,null,"posts","\n",s.createElement(t.ul,null,"\n",s.createElement(t.li,null,"first-post.md"),"\n"),"\n"),"\n"),"\n"),"\n"),"\n",s.createElement(t.h3,null,"設定ファイル"),"\n",s.createElement(t.p,null,"config.wyam がそれで、C# を Roslyn で処理するらしい。\nおもしろい。"),"\n",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">// config.wyam\n#recipe Blog\n#theme Phantom\n\n// Customize your settings and add new ones here\nSettings[Keys.Host] = "ousttrue.github.io";\nSettings[BlogKeys.Title] = "三次元日誌";\nSettings[BlogKeys.Description] = "programming とか";\n\n// Add any pipeline customizations here</code></pre></div>'}}),"\n",s.createElement(t.p,null,s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#recipe Blog</code>'}})," がパイプライン設定で、 input フォルダの構成と処理を設定している。\n設定ファイルに展開したものを記述することもできるみたい。"),"\n",s.createElement(t.h3,null,"gitignore"),"\n",s.createElement(t.p,null,"https://wyam.io/docs/advanced/what_to_exclude_from_source_control"),"\n",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">#.gitignore\n.vs/\noutput/\nconfig.wyam.hash\nconfig.wyam.dll\nconfig.wyam.packages.xml</code></pre></div>'}}),"\n",s.createElement(t.h2,null,"生成する"),"\n",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">$ wyam</code></pre></div>'}}),"\n",s.createElement(t.ul,null,"\n",s.createElement(t.li,null,"output","\n",s.createElement(t.ul,null,"\n",s.createElement(t.li,null,"index.html"),"\n"),"\n"),"\n"),"\n",s.createElement(t.p,null,s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">$ wyam --watch --preview</code>'}})," で更新を監視して livereload できる。"),"\n",s.createElement(t.h3,null,"動作"),"\n",s.createElement(t.ul,null,"\n",s.createElement(t.li,null,"input/posts/ 配下の markdown が /posts/ 下にhtml化される"),"\n",s.createElement(t.li,null,"input/posts/**/hoge.md が /posts/hoge.html のように階層は無くなる"),"\n"),"\n",s.createElement(t.h2,null,"テーマを変えてみる"),"\n",s.createElement(t.ul,null,"\n",s.createElement(t.li,null,"https://wyam.io/recipes/blog/themes/"),"\n"),"\n",s.createElement(t.p,null,"コマンドラインに、 ",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">--theme THEME_NAME</code>'}})," とするか config.wyam に"),"\n",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">// config.wyam\n#theme THEME_NAME</code></pre></div>'}}),"\n",s.createElement(t.p,null,"とすれば OK。"),"\n",s.createElement(t.h2,null,"appveyor で GitHub-Pages に展開"),"\n",s.createElement(t.p,null,"https://wyam.io/docs/deployment/appveyor"),"\n",s.createElement(t.p,null,"CIよくわかってないので難航したが動くようになった。"),"\n",s.createElement(t.p,null,"GitHub-pages のユーザー頁を使ったので、\nソースのリポジトリと、html置き場のリポジトリを分けた。"),"\n",s.createElement(t.p,null,"ソースのリポジトリに AppVeyor を仕掛けて、\npush したときにビルドして、html置き場に push する。"),"\n",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">branches</span><span class="token punctuation">:</span>\n  <span class="token key atrule">only</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> master\n    \n<span class="token key atrule">environment</span><span class="token punctuation">:</span>\n  <span class="token key atrule">access_token</span><span class="token punctuation">:</span>\n    <span class="token comment"># EDIT the encrypted version of your GitHub access token</span>\n    <span class="token comment"># https://www.appveyor.com/docs/deployment/github/</span>\n    <span class="token key atrule">secure</span><span class="token punctuation">:</span> E+wmFkBHvRVLnVcg9mIBXP7iTXKIqJyi/DewA+0SEtkpWmtiNFKKhYzD4bs0nw2L\n\n<span class="token key atrule">install</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> mkdir ..\\Wyam\n  <span class="token punctuation">-</span> mkdir ..\\output\n  <span class="token comment"># Fetch the latest version of Wyam </span>\n  <span class="token punctuation">-</span> <span class="token string">"curl -s https://raw.githubusercontent.com/Wyamio/Wyam/master/RELEASE -o ..\\\\Wyam\\\\wyamversion.txt"</span>\n  <span class="token punctuation">-</span> set /P WYAMVERSION=&lt; ..\\Wyam\\wyamversion.txt\n  <span class="token punctuation">-</span> echo %WYAMVERSION%\n  <span class="token comment"># Get and unzip the latest version of Wyam</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">ps</span><span class="token punctuation">:</span> Start<span class="token punctuation">-</span>FileDownload "https<span class="token punctuation">:</span>//github.com/Wyamio/Wyam/releases/download/$env<span class="token punctuation">:</span>WYAMVERSION/Wyam<span class="token punctuation">-</span>$env<span class="token punctuation">:</span>WYAMVERSION.zip" <span class="token punctuation">-</span>FileName "..\\Wyam\\Wyam.zip"\n  <span class="token punctuation">-</span> 7z x ..\\Wyam\\Wyam.zip <span class="token punctuation">-</span>o..\\Wyam <span class="token punctuation">-</span>r\n\n<span class="token key atrule">build_script</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> dotnet ..\\Wyam\\Wyam.dll <span class="token punctuation">-</span><span class="token punctuation">-</span>output ..\\output\n\n<span class="token key atrule">on_success</span><span class="token punctuation">:</span>\n  <span class="token comment"># Switch branches to gh-pages, clean the folder, copy everything in from the Wyam output, and commit/push</span>\n  <span class="token comment"># See http://www.appveyor.com/docs/how-to/git-push for more info</span>\n  <span class="token punctuation">-</span> git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global credential.helper store\n  <span class="token comment"># EDIT your Git email and name</span>\n  <span class="token punctuation">-</span> git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.email ousttrue@gmail.com\n  <span class="token punctuation">-</span> git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.name ousttrue\n  <span class="token punctuation">-</span> <span class="token key atrule">ps</span><span class="token punctuation">:</span> Add<span class="token punctuation">-</span>Content "$env<span class="token punctuation">:</span>USERPROFILE\\.git<span class="token punctuation">-</span>credentials" "https<span class="token punctuation">:</span>//$($env<span class="token punctuation">:</span>access_token)<span class="token punctuation">:</span>x<span class="token punctuation">-</span>oauth<span class="token punctuation">-</span>basic@github.com`n"\n  <span class="token punctuation">-</span> git checkout gh<span class="token punctuation">-</span>pages\n  <span class="token punctuation">-</span> git rm <span class="token punctuation">-</span>rf .\n  <span class="token punctuation">-</span> xcopy ..\\output . /E\n  <span class="token comment"># EDIT your domain name or remove if not using a custom domain</span>\n  <span class="token comment"># - echo wyam.io > CNAME</span>\n  <span class="token comment"># EDIT the origin of your repository - have to reset it here because AppVeyor pulls from SSH, but GitHub won\'t accept SSH pushes</span>\n\n  <span class="token comment"># 送り先(push できるように environment access token をセットしている)</span>\n  <span class="token punctuation">-</span> git remote set<span class="token punctuation">-</span>url origin https<span class="token punctuation">:</span>//github.com/ousttrue/ousttrue.github.io.git\n  <span class="token comment"># 空の gh-pages ブランチに変更を追加</span>\n  <span class="token punctuation">-</span> git add <span class="token punctuation">-</span>A\n  <span class="token punctuation">-</span> git commit <span class="token punctuation">-</span>a <span class="token punctuation">-</span>m "Commit from AppVeyor"\n  <span class="token comment"># gh-pages ブランチから origin の master に送る(use の GitHubPages を使っているので master ブランチ運用)</span>\n  <span class="token punctuation">-</span> git push <span class="token punctuation">-</span>f origin gh<span class="token punctuation">-</span>pages<span class="token punctuation">:</span>master</code></pre></div>'}}),"\n",s.createElement(t.h2,null,"vscode で編集する"),"\n",s.createElement(t.p,null,"watch タスクを作成してバックグランドで ",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">input</code>'}})," の変更を監視。"),"\n",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tasks.json"><pre class="language-tasks.json"><code class="language-tasks.json">{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    &quot;version&quot;: &quot;2.0.0&quot;,\n    &quot;tasks&quot;: [\n        {\n            &quot;label&quot;: &quot;watch&quot;,\n            &quot;type&quot;: &quot;shell&quot;,\n            &quot;command&quot;: &quot;wyam&quot;,\n            &quot;args&quot;: [\n                &quot;--watch&quot;, &quot;--preview&quot;,\n            ],\n            &quot;problemMatcher&quot;: [\n            ],\n            &quot;isBackground&quot;: true\n        },\n    ]\n}</code></pre></div>'}}),"\n",s.createElement(t.p,null,"launch.json を作成して F5 でブラウザを開く。"),"\n",s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="launch.json"><pre class="language-launch.json"><code class="language-launch.json">{\n    // IntelliSense を使用して利用可能な属性を学べます。\n    // 既存の属性の説明をホバーして表示します。\n    // 詳細情報は次を確認してください: https://go.microsoft.com/fwlink/?linkid=830387\n    &quot;version&quot;: &quot;0.2.0&quot;,\n    &quot;configurations&quot;: [\n        {\n            &quot;type&quot;: &quot;chrome&quot;,\n            &quot;request&quot;: &quot;launch&quot;,\n            &quot;name&quot;: &quot;Launch Chrome against localhost&quot;,\n            &quot;url&quot;: &quot;http://localhost:5080&quot;,\n            &quot;webRoot&quot;: &quot;${workspaceFolder}&quot;\n        }\n    ]\n}</code></pre></div>'}}),"\n",s.createElement(t.p,null,"自動でリロードがかかるので快適。"),"\n",s.createElement(t.h2,null,"参考"),"\n",s.createElement(t.ul,null,"\n",s.createElement(t.li,null,"\n",s.createElement(t.p,null,"https://www.staticgen.com/wyam"),"\n",s.createElement(t.ul,null,"\n",s.createElement(t.li,null,"https://wyam.io/docs/resources/built-with-wyam"),"\n"),"\n"),"\n",s.createElement(t.li,null,"\n",s.createElement(t.p,null,s.createElement(t.a,{href:"https://qiita.com/MeilCli/items/425a5436aced08ba7062"},"静的サイトジェネレーターでC#を使いたかったからWyamを試したら最高だった")),"\n"),"\n"),"\n",s.createElement(t.p,null,"日本語で wyam に言及しているサイトはこれしかなかった。\nマイナーでござる。"))}var o=function(n){void 0===n&&(n={});const{wrapper:t}=Object.assign({},(0,a.ah)(),n.components);return t?s.createElement(t,n,s.createElement(l,n)):l(n)},c=(e(8678),e(8838));const u={code:n=>{let{children:t,className:e}=n;return e?s.createElement(c.Z,{className:e},t):s.createElement("code",null,t)}};function p(n){let{data:t,children:e}=n;return s.createElement(s.Fragment,null,s.createElement("h1",null,t.mdx.frontmatter.title),s.createElement(a.Zo,{components:u},e))}function i(n){return s.createElement(p,n,s.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2019-wyam-start-md-8071daa92b878ecbd4b4.js.map
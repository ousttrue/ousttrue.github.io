{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-glbufferdata-md-11b18d7d0a035cf9bcad.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,iDAAkD,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CACjOI,UAAW,eACV,oMAAqM,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4CAA6C,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CACzXI,UAAW,eACV,igCAA0gC,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wBAAyB,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CAC1qCI,UAAW,eACV,6zDAA40D,KAAMD,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CACp6DI,UAAW,eACV,4yBAAi0B,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,sCAAuC,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CAC/+BI,UAAW,eACV,wsEAAysE,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yBAA0B,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAMK,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,6CAA8C,MAAOG,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,kBAAmB,WAAYG,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,sBAAuB,8CAA+CG,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,mCAAoC,cAAeG,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,uBAAwB,eAAgB,KAAMG,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CAC12FI,UAAW,eACV,0gBAAqhB,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,8BACzkB,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCrBA,SAASa,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOL,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMM,EAAKE,IAAIC,YAAYC,OAAQV,EAAAA,cAAoBW,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBrB,GACvC,OAAOS,EAAAA,cAAoBI,EAAcb,EAAOS,EAAAA,cAAoBa,EAAqBtB,GAC3F,C,4HCuBO,MAAMuB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBhB,GAC/B,MAAMiB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAff,EACFA,EAAWiB,GAGb,IAAIA,KAAsBjB,IAChC,CAACiB,EAAmBjB,GACzB,CAGA,MAAMkB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACZ,EAAU,SAAEQ,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfnB,EACHA,EAAW,CAAC,GACZA,GAAckB,EAEJF,EAAiBhB,GAG5B,gBACLe,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2017/glbufferdata.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"glBufferDataに数字のlistを渡す場合以下のように渡せるがどうゆう実装なのか。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"vertices=[0, 1, 2] # x, y, z\\n\\nglBufferData(GL_ARRAY_BUFFER, \\n        len(vertices)*4,  # byte size\\n        (ctypes.c_float*len(vertices))(*vertices), # 謎のctypes\\n        GL_STATIC_DRAW)\\n\")), \"\\n\", React.createElement(_components.p, null, \"非常に読み辛かったがVisualStudioでステップ実行して動きを追ってみた。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"# site-packages/OpenGL/GL/VERSION/GL_1_5.py\\n@_lazy( glBufferData )\\ndef glBufferData( baseOperation, target, size, data=None, usage=None ):\\n    \\\"\\\"\\\"Copy given data into the currently bound vertex-buffer-data object\\n\\n    target -- the symbolic constant indicating which buffer type is intended\\n    size -- if provided, the count-in-bytes of the array\\n    data -- data-pointer to be used, may be None to initialize without\\n        copying over a data-set\\n    usage -- hint to the driver as to how to set up access to the buffer\\n\\n    Note: parameter \\\"size\\\" can be omitted, which makes the signature\\n        glBufferData( target, data, usage )\\n    instead of:\\n        glBufferData( target, size, data, usage )\\n    \\\"\\\"\\\"\\n    if usage is None:\\n        usage = data\\n        data = size\\n        size = None\\n    data = ArrayDatatype.asArray( data ) # <- ここでPythonの型をOpenGLに渡せるように変換\\n    if size is None:\\n        size = ArrayDatatype.arrayByteCount( data )\\n    return baseOperation( target, size, data, usage )\\n\")), \"\\n\", React.createElement(_components.p, null, \"難関。デバッガ無しでは追えませんでした。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"# site-packages/OpenGL/arrays/arraydatatype.py\\nclass HandlerRegistry( dict ):\\n    def __init__( self, plugin_match ):\\n        self.match = plugin_match\\n\\n    def __call__( self, value ): # 4\\n        \\\"\\\"\\\"Lookup of handler for given value\\\"\\\"\\\"\\n        try:\\n            typ = value.__class__\\n        except AttributeError as err:\\n            typ = type(value)\\n        handler = self.get( typ )\\n        if not handler:\\n            if hasattr( typ, '__mro__' ):\\n                for base in typ.__mro__:\\n                    handler = self.get( base )\\n                    if not handler:\\n                        handler = self.match( base ) # 5\\n                        if handler:\\n                            handler = handler.load()\\n                            if handler:\\n                                handler = handler()\\n                    if handler:\\n                        self[ typ ] = handler\\n                        if hasattr( handler, 'registerEquivalent' ):\\n                            handler.registerEquivalent( typ, base )\\n                        return handler\\n            raise TypeError(\\n                    \\\"\\\"\\\"No array-type handler for type %s.%s (value: %s) registered\\\"\\\"\\\"%(\\n                        typ.__module__, type.__name__, repr(value)[:50]\\n                        )\\n                    )\\n            return handler\\n\\nGLOBAL_REGISTRY = HandlerRegistry(\\n    plugins.FormatHandler.match # 6 -> plugins.pyに進む\\n    ) # 3\\nclass ArrayDatatype( object ):\\n    getHandler = GLOBAL_REGISTRY.__call__ # 2\\n    def asArray( cls, value, typeCode=None ): # 0 <- glBufferDataから呼ばれる\\n        \\\"\\\"\\\"Given a value, convert to preferred array representation\\\"\\\"\\\"\\n        return cls.getHandler(value).asArray( value, typeCode or cls.typeConstant ) # 1\\n    asArray = classmethod( logs.logOnFail( asArray, _log ) )\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"# site-packages/OpenGL/plugins.py\\nclass Plugin( object ):\\n    \\\"\\\"\\\"Base class for plugins to be loaded\\\"\\\"\\\"\\n    loaded = False\\n    def __init__( self, name, import_path, check = None, **named ):\\n        \\\"\\\"\\\"Register the plug-in\\\"\\\"\\\"\\n        self.registry.append( self ) # <-  FormatHandlerのインスタンスが登録される\\n\\nclass FormatHandler( Plugin ):\\n    \\\"\\\"\\\"Data-type storage-format handler\\\"\\\"\\\"\\n    registry = [] # <- OpenGL/__init__.pyで初期化される\\n    @classmethod\\n    def match( cls, value ): # 7\\n        \\\"\\\"\\\"Lookup appropriate handler based on value (a type)\\\"\\\"\\\"\\n        key = '%s.%s'%( value.__module__, value.__name__ )\\n        for plugin in cls.registry: # <- ここにハンドラのリストがある\\n            set = getattr( plugin, 'check', ())\\n            if set and key in set:\\n                return plugin\\n        return None\\n\")), \"\\n\", React.createElement(_components.p, null, \"これらがimport時にFormatHandlerとして登録される。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"# site-packages/OpenGL/__init__.py\\nFormatHandler( 'none', 'OpenGL.arrays.nones.NoneHandler', [ _bi+'.NoneType'],isOutput=False )\\n\\nif sys.version_info[0] < 3:\\n    FormatHandler( 'str', 'OpenGL.arrays.strings.StringHandler',[_bi+'.str'], isOutput=False )\\n    FormatHandler( 'unicode', 'OpenGL.arrays.strings.UnicodeHandler',[_bi+'.unicode'], isOutput=False )\\nelse:\\n    FormatHandler( 'bytes', 'OpenGL.arrays.strings.StringHandler',[_bi+'.bytes'], isOutput=False )\\n    FormatHandler( 'str', 'OpenGL.arrays.strings.UnicodeHandler',[_bi+'.str'], isOutput=False )\\n    \\nFormatHandler( 'list', 'OpenGL.arrays.lists.ListHandler', [\\n    _bi+'.list',\\n    _bi+'.tuple',\\n], isOutput=False )\\nFormatHandler( 'numbers', 'OpenGL.arrays.numbers.NumberHandler', [\\n    _bi+'.int',\\n    _bi+'.float',\\n    _bi+'.long',\\n], isOutput=False )\\nFormatHandler(\\n    'ctypesarrays', 'OpenGL.arrays.ctypesarrays.CtypesArrayHandler',\\n    [\\n        '_ctypes.ArrayType',\\n        '_ctypes.PyCArrayType',\\n        '_ctypes.Array',\\n        '_ctypes.array.Array',\\n    ],\\n    isOutput=True,\\n)\\nFormatHandler(\\n    'ctypesparameter',\\n    'OpenGL.arrays.ctypesparameters.CtypesParameterHandler',\\n    [\\n        _bi+'.CArgObject',\\n        'ctypes.c_uint',\\n        'ctypes.c_int',\\n        'ctypes.c_float',\\n        'ctypes.c_double',\\n        'ctypes.c_ulong',\\n        'ctypes.c_long',\\n        'ctypes.c_longlong',\\n    ],\\n    isOutput=True,\\n)\\nFormatHandler( 'ctypespointer', 'OpenGL.arrays.ctypespointers.CtypesPointerHandler',[\\n    'ctypes.c_void_p',\\n    '_ctypes._Pointer',\\n    'ctypes.c_char_p',\\n    '_ctypes.pointer._Pointer',\\n],isOutput=False )\\nFormatHandler( 'numpy', 'OpenGL.arrays.numpymodule.NumpyHandler', [\\n    'numpy.ndarray',\\n    'numpy.core.memmap.memmap',\\n],isOutput=True )\\nFormatHandler( 'buffer', 'OpenGL.arrays.buffers.BufferHandler', [\\n    'OpenGL.arrays._buffers.Py_buffer',\\n    _bi+'.memoryview',\\n    _bi+'.bytearray',\\n],isOutput=True )\\nFormatHandler( 'vbo', 'OpenGL.arrays.vbo.VBOHandler', ['OpenGL.arrays.vbo.VBO','OpenGL_accelerate.vbo.VBO'],isOutput=False )\\nFormatHandler( 'vbooffset', 'OpenGL.arrays.vbo.VBOOffsetHandler', ['OpenGL.arrays.vbo.VBOOffset','OpenGL_accelerate.vbo.VBOOffset'],isOutput=False )\\n\")), \"\\n\", React.createElement(_components.p, null, \"numpyとか定義されているね。なるほど。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"(ctypes.c_float*len(vertices))(*vertices)\"), \" は \", React.createElement(_components.code, null, \"ctypes.c_float\"), \" にマッチして、\", React.createElement(_components.code, null, \"CtypesArrayHandler\"), \" によって処理される。\\n一方、単なるPythonのlistであるverticesは、\", React.createElement(_components.code, null, \"OpenGL.arrays.lists.ListHandler\"), \" によって処理されて \", React.createElement(_components.code, null, \"NotImplementedError\"), \" に落ちるのであった。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"class ListHandler( formathandler.FormatHandler ):\\n    @classmethod\\n    def asArray( cls, value, typeCode=None ):\\n        \\\"\\\"\\\"Convert given value to a ctypes array value of given typeCode\\n        \\n        This does a *lot* of work just to get the data into the correct\\n        format.  It's not going to be anywhere near as fast as a numpy\\n        or similar approach!\\n        \\\"\\\"\\\"\\n        if typeCode is None:\\n            raise NotImplementedError( \\\"\\\"\\\"Haven't implemented type-inference for lists yet\\\"\\\"\\\" )\\n\")), \"\\n\", React.createElement(_components.p, null, \"確かにlistだと中身の型が決められんね。なるほど。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/glbufferdata.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
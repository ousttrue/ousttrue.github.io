"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7152],{4345:function(e,n,l){l.r(n);var t=l(1151),a=l(7294);function c(e){const n=Object.assign({p:"p",pre:"pre",code:"code",h1:"h1"},(0,t.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"すぐ忘れるのでここをチートシート化しよう。"),"\n",a.createElement(n.p,null,"構成\nsolution"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},"CMAKE_MINIMUM_REQUIRED(VERSION 2.8)\nPROJECT(hello) # .sln\n")),"\n",a.createElement(n.p,null,"subdirectory"),"\n",a.createElement(n.p,null,"https://cmake.org/cmake/help/latest/command/add_subdirectory.html"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},"ADD_SUBDIRECTORY(src)\n")),"\n",a.createElement(n.h1,null,"もしくは"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},"SUBDIRS(FOO BAR HOGE FUGA)\n")),"\n",a.createElement(n.p,null,"target\nexe"),"\n",a.createElement(n.p,null,"https://cmake.org/cmake/help/latest/command/add_executable.html"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},"ADD_EXECUTABLE(hello\n    main.cpp\n    renderer.cpp\n    scene.cpp\n    )\n")),"\n",a.createElement(n.p,null,"file を集める例"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},"FILE(GLOB SRC\n    *.cpp\n    *.h\n    )\nADD_EXECUTABLE(hello\n    ${SRC}\n    )\n")),"\n",a.createElement(n.h1,null,"fo winmain"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},"ADD_EXECUTABLE(hello_windows WIN32\n    ${SRC}\n    )\n")),"\n",a.createElement(n.p,null,"static lib"),"\n",a.createElement(n.p,null,"https://cmake.org/cmake/help/latest/command/add_library.html"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},"ADD_LIBRARY(renderer STATIC\n    renderer.cpp\n    )\n")),"\n",a.createElement(n.p,null,"dll"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},"ADD_LIBRARY(renderer SHARED\n    renderer.cpp\n    )\n")),"\n",a.createElement(n.p,null,"compile\ncompiler options\n全体"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},'SET(CMAKE_CXX_FLAGS "-Wall")\n')),"\n",a.createElement(n.p,null,"ターゲット指定"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},'TARGET_COMPILE_OPTIONS(foo PUBLIC "$<$<CONFIG:DEBUG>:${MY_DEBUG_OPTIONS}>")\nTARGET_COMPILE_OPTIONS(foo PUBLIC "$<$<CONFIG:RELEASE>:${MY_RELEASE_OPTIONS}>")\n')),"\n",a.createElement(n.p,null,"include path\n全体\n以降の ADD_XXX に対して有効になる"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"INCLUDE_DIRECTORIES(libpath/include)\n")),"\n",a.createElement(n.p,null,"ターゲット指定\nPUBLIC の部分はよくわからぬ。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"TARGET_INCLUDE_DIRECTORIES(HELLO PUBLIC\n\t${BOOST_DIR}\n\t)\n")),"\n",a.createElement(n.p,null,"define\n全体\n以降の ADD_XXX に対して有効になる"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"ADD_DEFINITIONS(-DWITH_OPENCV2)\n")),"\n",a.createElement(n.p,null,"ターゲット指定\nPUBLIC の部分はよくわからぬ。"),"\n",a.createElement(n.h1,null,"-D なし"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"TARGET_COMPILE_DEFINITIONS(TARGET PUBLIC\n    WITH_OPENCV2=1\n    )\n")),"\n",a.createElement(n.p,null,"link\nlink path"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"LINK_DIRECTORIES(libpath/lib)\n")),"\n",a.createElement(n.p,null,"x86 と x64 で違うパスにしたい時は？"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"LINK_LIBRARIES\nTARGET_LINK_LIBRARIES\nTARGET_LINK_LIBRARIES(MediaSessionPlaybackExample\n    Mf\n    Mfplat\n    Mfuuid\n    strmiids\n    )\n")),"\n",a.createElement(n.p,null,"Debug Release の切り分け"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"TARGET_LINK_LIBRARIES(Fuga\n    DEBUG hoge_d\n    OPTIMIZE hoge\n    )\n")),"\n",a.createElement(n.p,null,"変数\nソース"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"cmake -G CMAKE_SOURCE_DIR\nCMAKE_SOURCE_DIR\n")),"\n",a.createElement(n.p,null,"ビルドディレクトリ\ncmake -G CMAKE_SOURCE_DIR を実行したディレクトリ"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"CMAKE_BINARY_DIR\n")),"\n",a.createElement(n.p,null,"The path to the top level of the build tree"),"\n",a.createElement(n.p,null,"出力ディレクトリ\nexe と dll の出力先。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n")),"\n",a.createElement(n.p,null,"example\nCMakeLists.txt"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},'CMAKE_MINIMUM_REQUIRED(VERSION 2.8)\nPROJECT(hello) # hello.sln\nADD_EXECUTABLE(hello main.cpp) # hello.vcxproj\n\nset(CMAKE_CXX_FLAGS "/WD4096")\nset(CMAKE_C_FLAGS "/WD4096")\ninclude_directories(libpath/include)\nadd_definitions(\n    -DUNICODE\n    -D_UNICODE\n    )\n')))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?a.createElement(n,e,a.createElement(c,e)):c(e)}},1151:function(e,n,l){l.d(n,{ah:function(){return c}});var t=l(7294);const a=t.createContext({});function c(e){const n=t.useContext(a);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---content-posts-2017-05-cmake-compileoptions-md-d79498332492d7d875fd.js.map
{"version":3,"file":"component---content-posts-2017-05-hugo-layout-md-2ec28d20ee5f4f19fa41.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,MAAO,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yNAA0N,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,qHAAmH,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,KAAMI,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,6DAA8D,KAAMG,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,KAAMI,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,iCAAkC,KAAMG,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,KAAMI,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,+BAAgC,KAAMG,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,KAAMI,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,oEAAqE,KAAMG,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,oEAAqE,KAAMG,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,oEAAqE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,kBAAmB,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,2FAA4F,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,qCAAsC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wCAAyC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,qKAAsK,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,qCAAsC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gIAAiI,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yCAA0C,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mEAAoE,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,0HAC77E,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECmBO,MAAMY,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2017/05/hugo_layout.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"概要\"), \"\\n\", React.createElement(_components.p, null, \"hugoコマンド実行時に以下のタスクが実行される\\ncontentのmdファイルをsingle.htmlを使ってhtmlに変換する(1対1)\\ncontentのサブフォルダをsectionと呼ぶ。sectionのサブフォルダはsectionにならない\\nsectionのindex.htmlをlist.htmlで生成する\\ntopのindex.htmlをindex.htmlまたはlist.htmlで生成する(サイト全体で1)\"), \"\\n\", React.createElement(_components.p, null, \"+-------+\\n|layouts|\\n+-------+\\n|\\nv\\ncontent -----+-------> public / (index.html or list.html) -> index.html\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"post                    + post / (list.html) -> index.html\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"2017                    + 2017\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"05                      + 05\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"article1.md             + article1 / (single.html) -> index.html\"), \"\\n\", React.createElement(_components.li, null, \"article2.md             + article2 / (single.html) -> index.html\"), \"\\n\", React.createElement(_components.li, null, \"article3.md             + article3 / (single.html) -> index.html\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"contentフォルダの構成\"), \"\\n\", React.createElement(_components.p, null, \"https://gohugo.io/overview/source-directory/#content-for-home-page-and-other-list-pages\"), \"\\n\", React.createElement(_components.p, null, \"個別記事(single content)のmdをhtmlに変換する\"), \"\\n\", React.createElement(_components.p, null, \"https://gohugo.io/templates/content/\"), \"\\n\", React.createElement(_components.p, null, \"個々のページをhtmlに変換(render)するときにどのTemplateを選択するのかについての説明が上記にある。\\nデフォルトは /themes/THEME/layouts/_default/single.htmlが使われる。\\nセクション毎にセクション内の記事のリスト(list content)のhtmlを生成する\"), \"\\n\", React.createElement(_components.p, null, \"https://gohugo.io/templates/list/\"), \"\\n\", React.createElement(_components.p, null, \"セクションページのhtmlを生成するときにどのTemplateを選択するのかについての説明が上記にある。\\nデフォルトは/themes/THEME/layouts/_default/list.htmlが使われる。\\nサイトトップのhtmlを生成する\"), \"\\n\", React.createElement(_components.p, null, \"https://gohugo.io/templates/homepage/\"), \"\\n\", React.createElement(_components.p, null, \"サイトトップのhtmlを生成するときにどのTemplateを選択するのかについての説明が上記にある。\\n以下の順に選択される。\"), \"\\n\", React.createElement(_components.p, null, \"/themes/THEME/layouts/index.html\\n/themes/THEME/layouts/_default/list.html\\n/themes/THEME/layouts/_default/single.html\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","ul","li","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
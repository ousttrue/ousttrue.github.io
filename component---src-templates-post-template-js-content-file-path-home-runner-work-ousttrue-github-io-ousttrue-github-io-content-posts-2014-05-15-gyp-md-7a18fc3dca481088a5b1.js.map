{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2014-05-15-gyp-md-7a18fc3dca481088a5b1.js","mappings":"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","sources":["webpack:///./content/posts/2014/05/15/gyp.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    blockquote: \"blockquote\",\n    br: \"br\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"python製のビルドツールgypを使ってみる\\ngyp(Generate Your Projects) は、\\npythonで記述されたプロジェクト生成ツールで設定からVC向けプロジェクトや、GCC向けMakefileを生成するツールである。\\nchromeやnode.jsのビルドツールとして採用されているそうな。\\n機能的にはpremake4やcmakeと同じ範囲をカバーするがそれぞれ以下のような問題があった。\"), \"\\n\", React.createElement(_components.p, null, \"premake4はわりと気に入っているのだが布教困難。luaで宣言的に記述するのが分かりづらい\\ncmakeはcmake語が解読不能でちょっとしたプロジェクトのカスタマイズが困難すぎる(OpenCVとかのことだ)\"), \"\\n\", React.createElement(_components.p, null, \"そこで、python製のgypを試してみた。\\ngyp導入\\n環境は、Windows7 + python3。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"python setup.py install\\n:\\n中略\\n:\\nSyntaxError: invalid syntax\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"File \\\"c:\\\\python33\\\\lib\\\\site-packages\\\\gyp-0.1-py3.3.egg\\\\gyp\\\\generator\\\\ninja.py\\\",\\nline 475\\nprint \\\"Warning: Actions/rules writing object files don't work with \\\" \", React.createElement(_components.br), \"\\n\", \"^\\nSyntaxError: invalid syntax\"), \"\\n\", React.createElement(_components.p, null, \"File \\\"c:\\\\python33\\\\lib\\\\site-packages\\\\gyp-0.1-py3.3.egg\\\\gyp\\\\generator\\\\xcode.py\\\",\\nline 126\\nexcept OSError, e:\\n^\\nSyntaxError: invalid syntax\"), \"\\n\", React.createElement(_components.p, null, \"python3非対応だった。まぁpython2で。\\nとりあえずc++の”hello world”をビルドするところから\\nhello_gyp\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"main.cpp\"), \"\\n\", React.createElement(_components.li, null, \"projects.gyp\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"main.cpp\\nprojects.gyp\\nプロジェクト生成。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"gyp projects.gyp --depth .\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"これで、projects.slnとhello_gyp.vcxprojが生成された。\\nhello_gyp\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"main.cpp\"), \"\\n\", React.createElement(_components.li, null, \"projects.gyp\"), \"\\n\", React.createElement(_components.li, null, \"projects.sln(generated)\"), \"\\n\", React.createElement(_components.li, null, \"hello_gyp.vcxproj(generated)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"vc2010 express editionでprojects.slnを開いてビルドできた。\\nhello_gyp\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"main.cpp\"), \"\\n\", React.createElement(_components.li, null, \"projects.gyp\"), \"\\n\", React.createElement(_components.li, null, \"projects.sln\"), \"\\n\", React.createElement(_components.li, null, \"hello_gyp.vcxproj\"), \"\\n\", React.createElement(_components.li, null, \"Default/hello_gyp.exe(build)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"構成がDebug,\\nReleaseではなくDefault一本立てなのでカスタマイズの必要あり。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2014/05/15/gyp.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","blockquote","br","ul","li","_provideComponents","components","React","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9421],{2265:function(e,n,t){t.r(n),t.d(n,{default:function(){return s}});var c=t(1151),r=t(7294);function o(e){const n=Object.assign({p:"p",code:"code",pre:"pre"},(0,c.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.p,null,"msgpack-rpcのasio版を作成中\n連休から始めていたmsgpack-rpcのバックエンドをasioに置き換えてWindowsでも動くようにする試みがやっと目処が立った。"),"\n",r.createElement(n.p,null,"https://github.com/ousttrue/msgpack-asiorpc"),"\n",r.createElement(n.p,null,"改め"),"\n",r.createElement(n.p,null,"https://github.com/ousttrue/msgpack-rpc-asio"),"\n",r.createElement(n.p,null,"当初は ",r.createElement(n.code,null,"msgpack-rpc")," のバックエンドの ",r.createElement(n.code,null,"mpio")," に ",r.createElement(n.code,null,"asio")," の ",r.createElement(n.code,null,"kernel")," を追加することで乗り切ろうとしたのだが、わりとすぐに頓挫した。\n",r.createElement(n.code,null,"mpio")," のファイルディスクリプタでIOを管理するAPIがasioと合わないのですな。\n次に、 ",r.createElement(n.code,null,"msgpack-rpc")," の ",r.createElement(n.code,null,"mp::wavy::loop")," をasioをラップしたクラスで置き換える作戦で\n進めていたのだがだいぶ改造して構造が見えてきたところで、 ",r.createElement(n.code,null,"asio")," との設計の違いをラップするのがめんどくさく\nなってまた頓挫した。 http://dev.activebasic.com/egtra/2011/10/27/449/\nを見ると簡単そうに見えるのだが功夫が足らないようだ。\nで、上記の反省を踏まえて ",r.createElement(n.code,null,"asio")," で ",r.createElement(n.code,null,"msgpack-rpc")," を自由に実装することにした。\nバイナリデータと ",r.createElement(n.code,null,"msgpack-rpc")," の変換部分に ",r.createElement(n.code,null,"msgpack-rpc")," のコードを借用して、\nネットワーク通信部分は ",r.createElement(n.code,null,"asio")," で普通に作成した。\nだいたいこんな感じのAPIになる予定。"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-c++"},'static int server_method(int a, int b) { return a+b; }\n\nint main(int argc, char **argv) { \n    int port=18080;\n    // server\n    boost::io_service server_io;\n    msgpack::asiorpc::server s(server_io);\n    s.add_handler(&server_method, "add");\n    s.start(boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port));\n    boost::thread server_thread([&server_io](){ server_io.run(); }\n\n    // client\n    boost::io_service client_io;\n    msgpack::asiorpc::session c(server_io); \n    c.connect(boost::asio::ip::tcp::endpoint(boost::asio::ip::address::from_string("127.0.0.1"), port);\n    boost::thread client_thread([&client_io](){ client_io.run(); }\n\n    // request\n    auto request=c.call("add", 3, 4);\n\n    // blocking\n    int result;\n    request.convert(&result);\n    std::cout << resut << std::endl;\n\n    // finalize\n    client_io.stop();\n    client_thread.join();\n\n    server_io.stop();\n    server_thread.join();\n\n    return 0;\n}\n')),"\n",r.createElement(n.p,null,"原型はだいたいできて ",r.createElement(n.code,null,"Windows")," でも動いたので続きを作りこんで行きたい。\n今のうちに ",r.createElement(n.code,null,"msgpack::asiorpc")," のネームスペースを変えたいような気もするがどうしようかね。\n",r.createElement(n.code,null,"msgpack::rpc::asio")," とかか？うぅむ。\nあと、クラスを ",r.createElement(n.code,null,"UpperCamelCase")," で、関数を ",r.createElement(n.code,null,"lowerCamelCase")," に変えよう思っていたが\n",r.createElement(n.code,null,"boost")," 、 ",r.createElement(n.code,null,"msgpack")," と一緒に使うときの見栄えを考慮するとスケークケースも一理あるな。\nクラス名と同じ変数名(",r.createElement(n.code,null,"request"),"とか)を使いたいときに変数名をreq等に変えることを強いられることがあるのが\n気に入らないところではあるのだが。\nプロジェクト名を ",r.createElement(n.code,null,"msgpack-rpc-asio"),"\nに変えてネームスペースも ",r.createElement(n.code,null,"msgpack::rpc::asio")," に変えることに今決めた。"))}var l=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?r.createElement(n,e,r.createElement(o,e)):o(e)};t(8678);function a(e){let{data:n,children:t}=e;return r.createElement(r.Fragment,null,r.createElement("h1",null,n.mdx.frontmatter.title),r.createElement(c.Zo,null,t))}function s(e){return r.createElement(a,e,r.createElement(l,e))}},8678:function(e,n,t){t(7294)},1151:function(e,n,t){t.d(n,{Zo:function(){return a},ah:function(){return o}});var c=t(7294);const r=c.createContext({});function o(e){const n=c.useContext(r);return c.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const l={};function a({components:e,children:n,disableParentContext:t}){let a;return a=t?"function"==typeof e?e({}):e||l:o(e),c.createElement(r.Provider,{value:a},n)}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-05-14-msgpack-asio-md-ff63daada770383e0211.js.map
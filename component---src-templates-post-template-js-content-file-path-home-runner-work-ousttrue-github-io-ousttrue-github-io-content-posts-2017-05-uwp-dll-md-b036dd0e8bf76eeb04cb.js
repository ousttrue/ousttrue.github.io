"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3235],{5482:function(n,e,t){t.r(e),t.d(e,{default:function(){return u}});var l=t(1151),o=t(7294);function a(n){const e=Object.assign({span:"span"},(0,l.ah)(),n.components);return o.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">UWPでNativeのDLLを使うとどんな感じなのか試してみた。\n\nhttps://github.com/ousttrue/UwpNativeDllSample\n\nCMakeのCache機構のせいで挙動を勘違いした部分を書き直し。\n\n自前でビルドしたlibpng.dllでpngを表示するサンプル。\nデスクトップアプリとの違い\n\ndllのロードパスがカレントディレクトリと環境変数PATHに記述された場所ではなく、projectのトップレベルのみ\nデスクトップと公開されているAPIに差異がある\nprojectが違う。x86 vxprojとuwp32 vcxprojのdiffの抜粋。\n\n>     &lt;ApplicationType>Windows Store&lt;/ApplicationType>^M\n>     &lt;DefaultLanguage>en-US&lt;/DefaultLanguage>^M\n>     &lt;ApplicationTypeRevision>10.0&lt;/ApplicationTypeRevision>^M\n>     &lt;MinimumVisualStudioVersion>14.0&lt;/MinimumVisualStudioVersion>^M\n>     &lt;AppContainerApplication>true&lt;/AppContainerApplication>^M\n\n\nzlib-1.2.11を無修正でビルドできた。\nlibpng-1.6.29は_ExitProcessにリンクする段階でエラーになった\n\n修正方法が書いてあった。\n\nhttps://github.com/Microsoft/vcpkg/blob/master/docs/example-3-patch-libpng.md\n\nUWP向けビルドオプション/zw\n無くても動いた。UWP固有のAPIにアクセスするときもしくはC++/CXに必要？\n\nhttps://msdn.microsoft.com/ja-jp/library/hh561383.aspx\n\ncmakeでWindowsStore向けのprojectを生成する\nMicrosoft版のcmakeなら作れる。\nVS2017にも含まれていて以下のパスにあった。\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin\\cmake.exe\n本家のcmakeでもできるかもしれないが未確認。\nプロジェクトを生成するときに以下のオプションを指定する。\n\n-DCMAKE_SYSTEM_NAME=WindowsStore\n-DCMAKE_SYSTEM_VERSION=10.0\n\nこれだけだとCMAKE_SYSTEM_PROCESSORが空になってlibpngではエラーになる。追加で下記のオプションも指定した。\n\n-DCMAKE_SYSTEM_PROCESSOR=x86\n\nほかに/zwの指定など。\n\n-DCMAKE_C_FLAGS=/ZW /EHsc /DWIN32=1\n-DCMAKE_CXX_FLAGS=/ZW /EHsc /DWIN32=1\n\n例\nzlib-1.2.11/build> cmake.exe .. -G Visual Studio 15 2017 -DCMAKE_SYSTEM_PROCESSOR=x86 -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -DCMAKE_C_FLAGS=/ZW /EHsc /DWIN32=1 -DCMAKE_CXX_FLAGS=/ZW /EHsc /DWIN32=1\n\nC#からDllImport\nDesktopの時と記述方法は同じ。dllの配置場所は上記の通りprojectに放り込むだけ。\nデスクトップ向けにビルドしたdllは動くのか\n動いた。\n逆にUWP向けにビルドしたdllはデスクトップで動くのか\n動かなかった。ソース互換はある程度あるがバイナリ互換は無い。\n{"DLL \'libpng16\' を読み込めません:この操作はアプリ コンテナーのコンテキストでのみ有効です。 (HRESULT からの例外:0x8007109A)"}\n\nこのエラーがデスクトップでuwpのdllを呼び出したとき固有のエラーメッセージぽい。\nまとめ\nCMakeの場合はプロジェクト生成オプションさえわかれば、 デスクトップとそれほど使い勝手は変わらない。この煩雑な手順を記録しておくべく自動ビルドツール作成中。\n\nhttps://github.com/ousttrue/bldproc</code></pre></div>'}})}var i=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,l.ah)(),n.components);return e?o.createElement(e,n,o.createElement(a,n)):a(n)},c=t(8678),s=t(8838);const r={code:n=>{let{children:e,className:t}=n;return t?o.createElement(s.Z,{className:t},e):o.createElement("code",null,e)}};function p(n){let{data:e,children:t}=n;return o.createElement(c.Z,null,o.createElement("h1",null,e.mdx.frontmatter.title),o.createElement(l.Zo,{components:r},t))}function u(n){return o.createElement(p,n,o.createElement(i,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-05-uwp-dll-md-b036dd0e8bf76eeb04cb.js.map
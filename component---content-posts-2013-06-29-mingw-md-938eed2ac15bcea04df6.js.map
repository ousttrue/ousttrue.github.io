{"version":3,"file":"component---content-posts-2013-06-29-mingw-md-938eed2ac15bcea04df6.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,OACHC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,wXAAyX,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,uFAAwF,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,yUAA0U,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,gEAAiE,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAMI,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,4FAA6F,oEAC3vC,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECoBO,MAAMW,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2013/06/29/mingw.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"MinGW環境\\nIrrlichtで開発を進めるにあたって開発環境をVC2010ExpressEditionからMinGWに乗り換えることにした。\\n後々Linux上でもコンパイルが通るようにしておきたいのでこちらの方が都合がよい。\\n基本的にはVCでもビルドできる状態を維持する方針ではある。\\ntoolチェイン入手\\nMinGW本家ではなくTDM-GCCからgcc一式を入手する。\\nとりあえず32bit版を手に入れた。\\nbin/mingw32-make.exeをbin/make.exeにコピーしておいた。\\ncui整備\\ncygwinから使うとcygwinのincludeやlibを使われてややこしいのでDos窓ベースで開発する。\\n環境変数等をきっちり設定すればcygwin上でもできるのだけどやり方を忘れてしまったのでとりあえず。\"), \"\\n\", React.createElement(_components.p, null, \"http://www.nyaos.org/ Dos窓でcontrol-P,\\ncontrol-Nによる履歴検索やパスのデリミタに”/“を使えるようになって快適になる。\"), \"\\n\", React.createElement(_components.p, null, \"プロジェクト構成やソースの修正\\nスタティックリンクの順番の調整と、一部templateの仕様が違ってコンパイルが通らないところ、\\nboostのpragmaで自動リンクになっていたところを明示的に記述するなどを\\n地道に修正した。あとboostのMinGWビルドの生成。\\ngccの方がVCより制約が厳しい感触だった。typenameが必要な箇所とか、staticメンバ関数のラムダ内での呼び出しで\\nthisキャプチャが無いエラーが出るなど。\\n逆に、何故VCでコンパイルが通っていたのか判らないところもあったがとりあえず作業完了。\\nついでに、msgpack-rpc-asioの修正部分を更新。\\nあとでlibOVRのgcc作業をやる。\\n参考\"), \"\\n\", React.createElement(_components.p, null, \"http://anengineer.tumblr.com/post/13196592706/nyaos-bash-lua\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"nya “’ option histfilesize 3000 option savehistfile\\n%USERPROFILE%/.history bindkey CTRL\"), \"P vzlike-previous-history bindkey\\nCTRL_N vzlike-next-history “’\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","em","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
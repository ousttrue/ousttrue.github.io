{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-12-08-threejs-05-md-82741d1137f52e82d178.js","mappings":"8JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,sUAAuU,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAC3cI,wBAAyB,CACvBC,OAAQ,2pDAER,KAAMF,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,wEAAyE,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CACtKI,wBAAyB,CACvBC,OAAQ,yrYAGd,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCfA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBa,EAAAA,EAAQ,KAAMb,EAAAA,cAAoB,KAAM,KAAMY,EAAKE,IAAIC,YAAYC,OAAQhB,EAAAA,cAAoBiB,EAAAA,GAAa,CACrIlB,WAAYA,GACXQ,GACL,CACe,SAASW,EAAiB1B,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoBmB,EAAqB3B,GAC3F,C","sources":["webpack:///./content/posts/2015/12/08/threejs_05.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"骨入りモデルとかやってみようかと思ったのだけど、その前に Three.js のソースを見やすい状態で作業したい。\\n結合前の Three.js を自前ビルドしながら運用する方法を調べてみる。\\nbuild.py, or how to generate a compressed three.js file\\nと本家に書いてある。python 使うんか。gulp でやりてぇな。\\n全部 concat して uglify したらいいんじゃないか。\\nやってみよう。\\nとりあえず bower で導入した three.js 関連を削除。\\nthreejs.src フォルダを作って three.js ソースの src ディレクトリの中身を展開した。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">gulp.task('bowerjs', function () {\\n\\n    var files = [\\n        './bower_components/jquery/dist/jquery.js',\\n        './bower_components/highlightjs/highlight.pack.js',\\n        './bower_components/stats.js/build/stats.min.js',\\n        './lib/**/*.js', // &lt;-- 中にthree.jsのsrcをコピーした\\n    ];\\n    gulp.src(files)\\n        .pipe($.plumber({ errorHandler: $.notify.onError('&lt;%= error.message %>') }))\\n        .pipe($.debug({ title: 'bowerjs files:' }))\\n        .pipe($.sourcemaps.init())\\n        //.pipe($.uglify())\\n        .pipe($.concat('all.min.js'))\\n        .pipe($.sourcemaps.write('./', {\\n            sourceMappingURL: function (file) {\\n                return file.relative + '.map';\\n            }\\n        }))\\n        .pipe(gulp.dest('build/js'))\\n        .pipe(browser.reload({ stream: true }))\\n    ;\\n});\\n\\nこれで作ったall.min.jsではエラーが出てだめですね。\\n単にsrcをconcatするだけではだめだ。本家のドキュメントを読み始める。\\n/three.js/utils/build/\\n\\nでビルドできるよって書いてあります。python関係ないみたいだ。\\n> npm install\\n> node build.js --include common --include extras\\n\\nなるほどbuild.jsを見てみよう。\\nincludeってなんだろうと調べてみると\\n/three.js/utils/build/includes\\n\\nにjsonファイルがあり中にjsファイルがリストされている。\\nなるほど。src下を全部concatするのではなくここに書いてあるものを、書いてある順でconcatすればいいんでないか。\\n//\\ngulp.task('threejs:build', function(){\\n    var common=JSON.parse(fs.readFileSync('three.js/includes/common.json')).map(function(v, i){ return 'three.js/'+v; });\\n    gulp.src(common)\\n        .pipe($.concat('three.js'))\\n        .pipe(gulp.dest('./lib'))\\n        ;\\n});\\n\\ngulp.task('bowerjs', ['threejs:build'], function () {\\n    // 前と同じ\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"これで実行するとそれっぽい three.js が出てくるが、まだエラーが出る。\\nでエラー行に飛ぶと ifdef がある。なんだこれは。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"glsl\\\"><pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">ifdef</span> <span class=\\\"token expression\\\">USE_ALPHAMAP</span></span>\\n\\n    diffuseColor<span class=\\\"token punctuation\\\">.</span>a <span class=\\\"token operator\\\">*=</span> <span class=\\\"token function\\\">texture2D</span><span class=\\\"token punctuation\\\">(</span> alphaMap<span class=\\\"token punctuation\\\">,</span> vUv <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>g<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token macro property\\\"><span class=\\\"token directive-hash\\\">#</span><span class=\\\"token directive keyword\\\">endif</span></span>\\n\\nglslだ・・・。\\n確かに、build<span class=\\\"token punctuation\\\">.</span>js内で拡張子がglslのファイルだけ別処理になっている。\\n<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span> file<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token char\\\">'.glsl'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    contents <span class=\\\"token operator\\\">=</span> <span class=\\\"token char\\\">'THREE.ShaderChunk[ \\\\''</span> <span class=\\\"token operator\\\">+</span>\\n        path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">basename</span><span class=\\\"token punctuation\\\">(</span> file<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token char\\\">'.glsl'</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token char\\\">'\\\\' ] ='</span> <span class=\\\"token operator\\\">+</span>\\n        JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> contents <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token char\\\">';\\\\n'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nちょっとgulpのフィルタを作りますか。\\nthree<span class=\\\"token punctuation\\\">.</span>shaderchunk<span class=\\\"token punctuation\\\">.</span>js\\nvar through <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token char\\\">'through2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nvar gutil <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token char\\\">'gulp-util'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nvar fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token char\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nvar path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token char\\\">'path'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> through<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">obj</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">function</span> <span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">,</span> enc<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isStream</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span>new gutil<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">PluginError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token char\\\">'three.shadechunk'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token char\\\">'Streaming not supported'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">extname</span><span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token char\\\">'.glsl'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            var contents <span class=\\\"token operator\\\">=</span> <span class=\\\"token char\\\">'THREE.ShaderChunk[ \\\\''</span> <span class=\\\"token operator\\\">+</span>\\n                path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">basename</span><span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token char\\\">'.glsl'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token char\\\">'\\\\' ] ='</span> <span class=\\\"token operator\\\">+</span>\\n                JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">.</span>contents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token char\\\">';\\\\n'</span><span class=\\\"token punctuation\\\">;</span>\\n            file<span class=\\\"token punctuation\\\">.</span>contents <span class=\\\"token operator\\\">=</span> new <span class=\\\"token function\\\">Buffer</span><span class=\\\"token punctuation\\\">(</span>contents<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            file<span class=\\\"token punctuation\\\">.</span>path <span class=\\\"token operator\\\">=</span> file<span class=\\\"token punctuation\\\">.</span>path <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\".js\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>file<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\ngulpファイルの呼び出しの方。これでthree<span class=\\\"token punctuation\\\">.</span>js<span class=\\\"token operator\\\">/</span>srcからthree<span class=\\\"token punctuation\\\">.</span>jsを作成できた。\\nあとは、sourcemapが付くようにした。\\ngulpfile<span class=\\\"token punctuation\\\">.</span>js\\ngulp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">task</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token char\\\">'threejs:build'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    var <span class=\\\"token keyword\\\">common</span><span class=\\\"token operator\\\">=</span>JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token char\\\">'three.js/includes/common.json'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">function</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token char\\\">'three.js/'</span><span class=\\\"token operator\\\">+</span>v<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    var extras<span class=\\\"token operator\\\">=</span>JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token char\\\">'three.js/includes/extras.json'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">function</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token char\\\">'three.js/'</span><span class=\\\"token operator\\\">+</span>v<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    gulp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">src</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">common</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>extras<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">threeShaderchunk</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>$<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token char\\\">'three.js'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>gulp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token char\\\">'./lib'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nFireFoxでブレイクポイントを仕掛けてステップ実行できた。\\nこれで、Loaderの自作とかが捗るぞ。</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2015/12/08/threejs_05.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
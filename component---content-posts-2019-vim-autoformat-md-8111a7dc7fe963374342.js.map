{"version":3,"file":"component---content-posts-2019-vim-autoformat-md-8111a7dc7fe963374342.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,OACNC,GAAI,KACJC,IAAK,QACJC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,MAAOM,EAAAA,cAAoBT,EAAYI,KAAM,KAAM,UAAW,QAASK,EAAAA,cAAoBT,EAAYI,KAAM,KAAM,wBAAyB,qBAAsBK,EAAAA,cAAoBT,EAAYI,KAAM,KAAM,yBAA0B,aAAc,KAAMK,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,6CAA8C,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,8CAA+C,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAMM,EAAAA,cAAoBT,EAAYI,KAAM,KAAM,QAAS,KAAMK,EAAAA,cAAoBT,EAAYI,KAAM,KAAM,gBAAiB,aAAc,KAAMK,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,OAAQ,KAAMM,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,yBAA0B,KAAMI,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,gCAAiC,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,yCAA0C,KAAMM,EAAAA,cAAoBT,EAAYM,IAAK,KAAMG,EAAAA,cAAoBT,EAAYI,KAAM,CAC/jCM,UAAW,gBACV,wCAAyC,KAAMD,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,eAAgB,KAAMI,EAAAA,cAAoBT,EAAYM,IAAK,KAAMG,EAAAA,cAAoBT,EAAYI,KAAM,CACjMM,UAAW,gBACV,sGACL,CAKA,UAJA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWb,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECcO,MAAMc,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,C","sources":["webpack:///./content/posts/2019/vim-autoformat.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"当初 \", React.createElement(_components.code, null, \"python\"), \" 向けに \", React.createElement(_components.code, null, \"mindriot101/vim-yapf\"), \" を使っていたが、\\n全部まとめて \", React.createElement(_components.code, null, \"hiel92/vim-autoformat\"), \" で設定してみる。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/Chiel92/vim-autoformat\"), \"\\n\", React.createElement(_components.p, null, \"プラグインを設定したら特に個別に設定することなく、\\nシステムにインストール済みの、\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"yapf\"), \", \", React.createElement(_components.code, null, \"clang-format\"), \" が有効になった？\"), \"\\n\", React.createElement(_components.p, null, \"便利。\"), \"\\n\", React.createElement(_components.h2, null, \"Tomlのフォーマットがよろしくなかったり\"), \"\\n\", React.createElement(_components.p, null, \"dein.tomlのindentが悪くなってしまった😑\"), \"\\n\", React.createElement(_components.p, null, \"自動実行は、時期尚早。\\n大丈夫そうなやつから拡張子指定した方がよさそう。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-vim\"\n  }, \"autocmd BufWrite *.py :Autoformat\\n\")), \"\\n\", React.createElement(_components.h2, null, \"dのフォーマッターとか\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-vim\"\n  }, \"let g:formatdef_my_custom_d = '\\\"dub run -q dfmt -- -i\\\"'\\nlet g:formatters_d = ['my_custom_d']\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","h2","pre","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
{"version":3,"file":"component---content-posts-2013-10-27-rightvalue-md-9c33218829f507c7ad5a.js","mappings":"wHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,2SAA4S,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CAC3dI,UAAW,gBACV,42BAAy3B,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,cAAe,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CAC/gCI,UAAW,gBACV,kpHAAmpH,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yIAA0I,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,2IAA4I,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,8BAC3jI,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECeO,MAAMa,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,C","sources":["webpack:///./content/posts/2013/10/27/rightvalue.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"右辺値の理解\\nそろそろ右辺値を抑えておきたい気がしたのでテストコードを書きながら実験してみた(VC2010\\nExpress Edition)。\\nhttp://msdn.microsoft.com/ja-jp/library/vstudio/dd293665.aspx\\nを参考に右辺値実験クラス RightKun を書いた。\\nコピーコンストラクタと同じくシグニチャは決まったものがあって\\n右辺値代入演算のオーバーロードとペアになるらしい。\\n各関数の呼び出しでメッセージを表示するように仕込んだ。\\nhttps://gist.github.com/ousttrue/7178535\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"#include <memory>\\n#include <iostream>\\n\\n\\nclass RightKun\\n{\\npublic:\\n    RightKun()\\n    {\\n        std::cout << this << \\\":default constructor\\\" << std::endl;\\n    };\\n\\n    ~RightKun()\\n    {\\n        std::cout << this << \\\":destructor\\\" << std::endl;\\n    }\\n\\n    // 左辺値によるコピーコンストラクタ\\n    RightKun(const RightKun &src)\\n    {\\n        std::cout << this << \\\":copy constructor: \\\";\\n        *this=src;\\n    }\\n\\n    RightKun &operator=(const RightKun &src)\\n    {\\n        std::cout << \\\"left value operator= \\\" << &src << std::endl;\\n        return *this;\\n    }\\n\\n    // 右辺値によるムーブコンストラクタ\\n    RightKun(RightKun &&src)\\n    {\\n        std::cout << this << \\\":move constructor: \\\";\\n        *this=std::move(src);\\n    }\\n\\n    RightKun &operator=(RightKun &&src)\\n    {\\n        std::cout << \\\"right value operator= \\\" << &src << std::endl;\\n        return *this;\\n    }\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"とりあえず使ってみる\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"{\\n    // default\\n    RightKun r1;\\n\\n    // copy\\n    RightKun r2=r1;\\n}\\n\\n結果\\n0025FE33:default constructor\\n0025FE32:copy constructor: left value operator= 0025FE33\\n0025FE32:destructor\\n0025FE33:destructor\\n\\n問題ない。\\n通常の値返しの呼び出し\\nRightKun create()\\n{\\n    return RightKun();\\n}\\n\\n使う\\n{\\n    RightKun r=create();\\n}\\n\\n結果\\n0025FE2E:default constructor\\n0025FE2E:destructor\\n\\nおや、コピーコンストラクタが呼ばれない。\\nRVO\\n調べてみたらこれはコンパイラのRVO(Return Value Optimization)という機能で\\n返り値が変数に代入されていない場合(いわゆる右辺値)に代入を無しにできるというものらしい。\\nなるほど。\\nよくある\\nvec3 cross(const vec3 &lhs, const vec3 &rhs)\\n{\\n  // x, y, z...\\n  return vec3(x, y, z);\\n}\\n\\nvec3 out=cross(v1, v2);\\n\\n的なものを\\nvoid cross(vec3 *out, const vec3 *lhs, const vec3 *rhs)\\n{\\n  // x, y, z...\\n  out->x=x;\\n  out->y=y;\\n  out->z=z;\\n}\\n\\nvec3 out;\\ncross(&out, &v1, &v2);\\n\\nと書いても別にパフォーマンスが変わらんと言うことですな。\\n最近のコンパイラなら大丈夫というのは、RVOがたぶん効くということか。\\nむしろ適切なコンストラクタで初期化できるので前者の方がよろしいな。\\n後者だとデフォルトコンストラクタが0で初期化しないようにしたくなるし、\\nいろいろよろしくない。\\nRVOできないようにする\\n先ほどの関数をRVOが無効になるように改造してみる。\\nRightKun createNoRVO()\\n{\\n    RightKun r;\\n    return r;\\n}\\n\\n使う\\n{\\n    RightKun r=createNoRVO();\\n}\\n\\n結果\\n0025FDFB:default constructor\\n0025FE31:move constructor: right value operator= 0025FDFB\\n0025FDFB:destructor\\n0025FE31:destructor\\n\\n期せずしてムーブコンストラクタ呼び出しが発生した。\\nどういう条件で切り替わるんだこれは。\\n調べてみるとムーブコンストラクタはRVOが効かない時に使われる、という記述を見つけた。\\nhttp://msdn.microsoft.com/ja-jp/library/vstudio/dd293668.aspx\\n\\nコンパイラが戻り値の最適化 (RVO) または名前付き戻り値の最適化 (NRVO)\\nを使用できない場合に、移動セマンティクスが役立ちます。\\nこのような場合、型が移動コンストラクターを定義していれば、コンパイラはその移動コンストラクターを呼び出します\\n\\nほぅ。\\nNRVOというのはRVOの進化型で戻り値が変数に代入(名前付き)されていても有効になるものらしい。上記の例だと単純なのでNRVOできそうな気もするがコンパイルオプションとかですかね。\\nコンパイラが代入の右側を破棄してもよいと判断した場合にムーブコンストラクタが定義されていれば自動的にそっちを使うという暗黙的な仕組みのようだ。\\ng++(4.6)ではNRVOされた\\n右側を破棄できないようにしてみよう\\nRightKun createCanNotMove(const RightKun &src, bool hoge)\\n{\\n    if(hoge){\\n        return src;\\n    }\\n    return RightKun();\\n}\\n\\n使う\\n{\\n    RightKun r=createCanNotMove(RightKun(), true);\\n}\\n\\n結果\\n0025FE2C:default constructor\\n0025FE30:copy constructor: left value operator= 0025FE2C\\n0025FE2C:destructor\\n0025FE30:destructor\\n\\n予定通りコピーコンストラクタ呼び出し。問題ない。\\n引数をRightKun&&にしてみる\\nここでsrcの型をRightKun&&にすればムーブコンストラクタ呼び出しできるのではないか。\\nstatic RightKun rightValueArg(RightKun &&src, bool hoge)\\n{\\n    if(hoge){\\n        return src;\\n    }\\n    return RightKun();\\n}\\n\\n使う\\n{\\n    RightKun r=rightValueArg(RightKun(), true);\\n}\\n\\n結果\\n0025FE2C:default constructor\\n0025FE30:copy constructor: left value operator= 0025FE2C\\n0025FE2C:destructor\\n0025FE30:destructor\\n\\nところがぎっちょん、コピーの方。何故かというとrightValueArg内ではsrcはただの変数、左辺値として\\n扱われるのだ。RightKun&&は実引数の制限だ。\\n試しに以下のように呼び出すとエラーになる。\\n{\\n  RightKun leftvalue;\\n  RightKun r=rightValueArg(leftvalue, true);\\n}\\n\\nエラー\\nerror C2664: 'rightValueArg' : 1 番目の引数を 'RightKun' から 'RightKun &&' に変換できません。\\n\\nsrcが右辺値であることを明示する\\nプログラマはsrcが右辺値であることを明示できる。\\nstatic RightKun moveExplicit(RightKun &&src, bool hoge)\\n{\\n    if(hoge){\\n        return static_cast<RightKun&&>(src);\\n    }\\n    return RightKun();\\n}\\n\\n使う\\n{\\n    RightKun r=moveExplicit(RightKun(), true);\\n}\\n\\n結果\\n0025FE2B:default constructor\\n0025FE2F:move constructor: right value operator= 0025FE2B\\n0025FE2B:destructor\\n0025FE2F:destructor\\n\\n意図通りにムーブコンストラクタが呼ばれた。\\nで、このキャストをラップするのがstd::moveですよと。\\nただし、std::moveした変数をその後で使わないのはプログラマの責任と。\\nということで右辺値とムーブコンストラクタのなんたるかがなんとなく分かった。\\nムーブコンストラクタを呼ぶかどうかはコンパイラが判断するので\\n使うほうは気にしなくても、知らないうちにムーブコンストラクタが呼ばれてパフォーマンス上の恩恵を受けることができるということですな。\\n知っていればstd::moveによりムーブコンストラクタの呼び出しを増やせるかもしれない。\\nunique_ptrでstd::moveを要求されるのはコピーコンストラクタを無効にしつつ、\\nムーブコンストラクタを定義している故と類推できた。\\nだいたい分かった結果、\\n自分でムーブコンストラクタを定義するクラスを書くことはあまり無さそうな気がした。\\nだめな書き方\\n最後に右辺値を返す関数を書こうとして最初にはまった、だめなバージョンを書いておく\\nRightKun &&moveFail()\\n{\\n    return RightKun();\\n}\\n\\n使う\\n{\\n    RightKun r=moveFail();\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"結果\\n0025FE07:default constructor\\n0025FE07:destructor\\n0025FE2D:move constructor: right value operator= 0025FE07\\n0025FE2D:destructor\"), \"\\n\", React.createElement(_components.p, null, \"destructor が動いた後のポインタで、ムーブコンストラクタが呼び出される\\n大変危険なコードになった。 なんじゃこりゃー。\\ngcc でやってみたらわかりやすいエラーメッセージが出た。\\n警告: 一時オブジェクトへの参照を返そうとしています [デフォルトで有効]\"), \"\\n\", React.createElement(_components.p, null, \"関数返り値の宣言に&&を使ってはいけないということか\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
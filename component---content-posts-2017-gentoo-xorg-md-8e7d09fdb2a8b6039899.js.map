{"version":3,"file":"component---content-posts-2017-gentoo-xorg-md-8e7d09fdb2a8b6039899.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,IAAK,MACLC,KAAM,OACNC,GAAI,KACJC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,mBAAoB,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,gBAAiB,KAAMQ,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,eAAgB,KAAMQ,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,2CAA4C,KAAMQ,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,4EAAiF,KAAMM,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,+BAAgC,KAAMM,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,aAAc,KAAMK,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,CACvwBO,UAAW,kBACV,eAAgB,KAAMD,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,uCAAwC,KAAMQ,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,qCAAsC,KAAMM,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,aAAc,KAAMQ,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,WAAY,KAAMK,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,KAAMI,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,qDAAsD,KAAMG,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,2CAA4C,MAAO,KAAMG,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,wBAAyB,KAAMK,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,k3BAAm3B,KAAMM,EAAAA,cAAoBZ,EAAYI,EAAG,KAAMQ,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,iDAAkD,WAAY,KAAMM,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,0HAA2H,KAAMM,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,WAAY,KAAMK,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,iDAAkD,KAAMM,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,QAAS,KAAMK,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,gGAAiG,KAAMM,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,SAAU,KAAMK,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,6BAA8B,KAAMQ,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,4FAA6F,KAAMM,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,qBAAsB,KAAMK,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,KAAMI,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,4CAA6C,KAAMG,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,+CAAgD,MAAO,KAAMG,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,sBAAuB,KAAMQ,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,KAAMI,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,gDAAiD,MAAO,KAAMG,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,gBAAiB,KAAMK,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,OAAQ,KAAMQ,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,yCAA0C,KAAMQ,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,WAAY,KAAMK,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,gDAAiD,KAAMM,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,SAAU,KAAMK,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,uDAAwD,KAAMM,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,iBAAkB,KAAMQ,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,yFAA0F,KAAMM,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,QAAS,KAAMK,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,ibAAkb,KAAMM,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,mCAAoC,KAAMQ,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,oBAAqB,KAAMQ,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,kIAAqI,KAAMM,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,qCAAsC,KAAMM,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,WAAY,KAAMK,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,sBAAuB,KAAMQ,EAAAA,cAAoBZ,EAAYK,IAAK,KAAMO,EAAAA,cAAoBZ,EAAYM,KAAM,KAAM,2DAC34K,CAKA,UAJA,SAAoBP,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWhB,EAAOa,EAAAA,cAAoBd,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECaO,MAAMiB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,C","sources":["webpack:///./content/posts/2017/gentoo_xorg.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"GentooでX11を設定する\"), \"\\n\", React.createElement(_components.p, null, \"デスクトップの構築メモ。\"), \"\\n\", React.createElement(_components.p, null, \"xorg-server\"), \"\\n\", React.createElement(_components.p, null, \"https://wiki.gentoo.org/wiki/Xorg/Guide\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"/etc/portage/make.conf\\nINPUT_DEVICE=\\\"libinput\\\"\\nVIDEO_CARDS=\\\"radeon\\\"\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# emerge -av xorg-server\\n\")), \"\\n\", React.createElement(_components.h2, null, \"xのアプリを入れる\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"$ startx\\n\")), \"\\n\", React.createElement(_components.p, null, \"とすると何もないのですぐに終わってしまう。\\n古のアプリを入れてみる。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# emerge -av twm xclock xterm \\n\")), \"\\n\", React.createElement(_components.p, null, \"動作を確認できた。\"), \"\\n\", React.createElement(_components.h2, null, \"Plasma5\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://wiki.gentoo.org/wiki/KDE/Plasma_5_upgrade\"), \"\\n\", React.createElement(_components.li, null, \"https://wiki.gentoo.org/wiki/KDE#Plasma\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"eselect profile list\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Available profile symlink targets:\\n  [1]   default/linux/amd64/13.0 *\\n  [2]   default/linux/amd64/13.0/selinux\\n  [3]   default/linux/amd64/13.0/desktop\\n  [4]   default/linux/amd64/13.0/desktop/gnome\\n  [5]   default/linux/amd64/13.0/desktop/gnome/systemd\\n  [6]   default/linux/amd64/13.0/desktop/plasma\\n  [7]   default/linux/amd64/13.0/desktop/plasma/systemd\\n  [8]   default/linux/amd64/13.0/developer\\n  [9]   default/linux/amd64/13.0/no-multilib\\n  [10]  default/linux/amd64/13.0/systemd\\n  [11]  default/linux/amd64/13.0/x32\\n  [12]  hardened/linux/amd64\\n  [13]  hardened/linux/amd64/selinux\\n  [14]  hardened/linux/amd64/no-multilib\\n  [15]  hardened/linux/amd64/no-multilib/selinux\\n  [16]  hardened/linux/amd64/x32\\n  [17]  hardened/linux/musl/amd64\\n  [18]  hardened/linux/musl/amd64/x32\\n  [19]  default/linux/uclibc/amd64\\n  [20]  hardened/linux/uclibc/amd64\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"[6]   default/linux/amd64/13.0/desktop/plasma\"), \" を採用する。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# eselect profile set 6\\n# emerge --ask --changed-use --newrepo --deep world\\n# emerge --ask kde-plasma/plasma-meta\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Widgets\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# emerge --ask kde-plasma/kdeplasma-addons\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Apps\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# # 時間かかる\\n# emerge -av kde-apps/kdecore-meta\\n\\n# emerge -av kde-apps/kdemultimedia-meta\\n\")), \"\\n\", React.createElement(_components.h2, null, \"xdm設定\"), \"\\n\", React.createElement(_components.p, null, \"起動時に自動でXのログイン画面が起動するようにする\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# rc-update add xdm default\\n# vim /etc/conf.d/xdm\\nsddm\\n\\n# /etc/init.d/xdm restart\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Windows上にX-Server\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://sourceforge.net/projects/vcxsrv/\"), \"\\n\", React.createElement(_components.li, null, \"https://wiki.archlinuxjp.org/index.php/SDDM\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"SDDMはXDMCPサポートは無い？\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://wiki.gentoo.org/wiki/Display_manager\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"LightDMに乗り換え\"), \"\\n\", React.createElement(_components.p, null, \"VNC\"), \"\\n\", React.createElement(_components.p, null, \"https://wiki.gentoo.org/wiki/TigerVNC\"), \"\\n\", React.createElement(_components.h2, null, \"日本語フォント\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# emerge --ask noto\\n# emerge --ask Ricty\\n\")), \"\\n\", React.createElement(_components.h2, null, \"日本語入力\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# emerge -av fcitx-anthy\\n# emerge -av kcm-fcitx\\n\")), \"\\n\", React.createElement(_components.p, null, \".bash_profile\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"export GTK_IM_MODULE=fcitx\\nexport QT_IM_MODULE=fcitx\\nexport XMODIFIERS=@im=fcitx\\n\")), \"\\n\", React.createElement(_components.h2, null, \"alsa\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"$ aplay -l\\n**** List of PLAYBACK Hardware Devices ****\\ncard 0: HDMI [HDA ATI HDMI], device 3: HDMI 0 [HDMI 0]\\n  Subdevices: 1/1\\n  Subdevice #0: subdevice #0\\ncard 1: Generic [HD-Audio Generic], device 0: ALC887-VD Analog [ALC887-VD Analog]\\n  Subdevices: 1/1\\n  Subdevice #0: subdevice #0\\ncard 1: Generic [HD-Audio Generic], device 1: ALC887-VD Digital [ALC887-VD Digital]\\n  Subdevices: 1/1\\n  Subdevice #0: subdevice #0\\n\")), \"\\n\", React.createElement(_components.p, null, \"3番目のALC887-VD Digitalに出力するように設定\"), \"\\n\", React.createElement(_components.p, null, \"/etc/asound.conf\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"defaluts.pcm.card 1\\ndefaults.pcm.device 1\\ndefaults.ctl.card 1\\n\\npcm.!default {\\n    type plug\\n    slave.pcm \\\"hw:1,1\\\"\\n}\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# rc-update add alsasound boot\\n\")), \"\\n\", React.createElement(_components.h2, null, \"browser\"), \"\\n\", React.createElement(_components.p, null, \"ビルド時間長いのでバイナリを入れとく\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# emerge -av google-chrome\\n# emerge -av firefox-bin\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","pre","code","h2","ul","li","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
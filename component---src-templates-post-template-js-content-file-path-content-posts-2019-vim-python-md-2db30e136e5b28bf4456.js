"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[925],{7710:function(n,e,t){t.r(e),t.d(e,{default:function(){return i}});var a=t(1151),l=t(7294);function s(n){const e=Object.assign({p:"p",h2:"h2",span:"span",h3:"h3",code:"code"},(0,a.ah)(),n.components);return l.createElement(l.Fragment,null,l.createElement(e.p,null,"phthon2は使わないのでスルーで。"),"\n",l.createElement(e.h2,null,"vim組み込み"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> vim</code></pre></div>'}}),"\n",l.createElement(e.h3,null,l.createElement(e.code,null,"PLUGIN_ROOT/python3")," パス"),"\n",l.createElement(e.p,null,"モジュールとして自動で ",l.createElement(e.code,null,"import")," されるぽい。\nリロードは？\n開発不便なのでは。"),"\n",l.createElement(e.h3,null,"py3file コマンド"),"\n",l.createElement(e.p,null,l.createElement(e.code,null,"so%")," などを経由してリロードできる。"),"\n",l.createElement(e.h3,null,"py3 コマンド"),"\n",l.createElement(e.p,null,"インポート済みの関数呼び出しなど短い処理にとどめた方がよいと思う。"),"\n",l.createElement(e.h2,null,"リモートプラグイン"),"\n",l.createElement(e.p,null,l.createElement(e.code,null,"nvim")," の機能で ",l.createElement(e.code,null,"msgpack-rpc")," を通した別プロセスでの実行。"),"\n",l.createElement(e.p,null,"vim8 への移植版。 https://github.com/roxma/nvim-yarp"),"\n",l.createElement(e.h3,null,l.createElement(e.code,null,"PLUGIN_ROOT/rplugin/python3")),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> neovim <span class="token comment"># msgpack-rpc で vim と通信する</span>\n\n\n<span class="token decorator annotation punctuation">@neovim<span class="token punctuation">.</span>plugin</span>\n<span class="token keyword">class</span> <span class="token class-name">RemotePlugin</span><span class="token punctuation">:</span>\n\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nvim<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>nvim <span class="token operator">=</span> nvim\n\n    <span class="token decorator annotation punctuation">@neovim<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token string">\'HogeCommand\'</span><span class="token punctuation">)</span> <span class="token comment"># vimのコマンドとして実行可能になる</span>\n    <span class="token keyword">def</span> <span class="token function">hogee</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">pass</span></code></pre></div>'}}),"\n",l.createElement(e.h2,null,"比べてみると"),"\n",l.createElement(e.p,null,l.createElement(e.code,null,"vim")," もしくは ",l.createElement(e.code,null,"neovim")," とやり取りする部分は、単体実行ができないような。\nなるほど。"),"\n",l.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">GUIやVIM\n+--------+     これを単体で開発する\n|vim     |     +--------------+\n|もしくは|----\x3e|使うモジュール|\n|neovim  |     +--------------+\n|をimport|\n+--------+</code></pre></div>'}}),"\n",l.createElement(e.h2,null,"リモートプラグイン(GUI)"),"\n",l.createElement(e.p,null,"これは、",l.createElement(e.code,null,"msgpack-rpc")," を使うのだけど ",l.createElement(e.code,null,"GUI")," から ",l.createElement(e.code,null,"nvim")," を特定の作法で起動して ",l.createElement(e.code,null,"GUIイベントを受け取る")," というものでちょっと違う。"))}var c=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?l.createElement(e,n,l.createElement(s,n)):s(n)},o=t(8678),p=t(4160),r=t(8736);const u={code:n=>{let{children:e,className:t}=n;return t?l.createElement(r.Z,{className:t},e):l.createElement("code",null,e)}};function m(n){let{data:e,children:t}=n;const s=e.mdx.frontmatter;return l.createElement(o.Z,null,l.createElement("h1",null,s.title),l.createElement("div",{className:"tags-index"},s.tags&&s.tags.length>0&&s.tags.map((n=>l.createElement(p.rU,{to:"/tags/"+n+"/",itemProp:"url"},l.createElement("button",null,n))))),l.createElement(a.Zo,{components:u},t))}function i(n){return l.createElement(m,n,l.createElement(c,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2019-vim-python-md-2db30e136e5b28bf4456.js.map
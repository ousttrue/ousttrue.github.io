"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1803],{9101:function(n,e,t){t.r(e),t.d(e,{default:function(){return d}});var s=t(1151),a=t(7294);function r(n){const e=Object.assign({p:"p",span:"span"},(0,s.ah)(),n.components);return a.createElement(a.Fragment,null,a.createElement(e.p,null,'"W" translate | "E" rotate | "R" scale | "+" increase size | "-" decrease size\nPress "Q" to toggle world/local space, keep "Ctrl" down to snap to grid'),"\n",a.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">source\n今回は、本家サイトのサンプル\nhttp://threejs.org/examples/#misc_controls_transform\nをやってみよう。\nまず、TransformControlsのtypescriptインターフェースを用意する。\nというか書きながら作った。\nTransformControls.d.ts。モジュールの細かいところがよくわからん・・・\ndeclare module THREE {\n    export class TransformControls extends THREE.Mesh {\n        constructor(camera: THREE.Camera, element: Element);\n        update():void;\n        addEventListener(event: string, callback: Function): void;\n        attach(mesh: THREE.Mesh): void;\n\n        setSpace(space: string): void;\n        setTranslationSnap(snap: number): void;\n        setRotationSnap(radians: number): void;\n        setMode(mode: string): void;\n        setSize(size: number): void;\n\n        space: string;\n        size: number;\n    }\n}\n\nTransformControlsを初期化する。カメラとhtmlノードを渡して初期化する\nCreateTransformControl(mesh: THREE.Mesh) {\n    this.transform = new THREE.TransformControls(this.camera, this.renderer.domElement);\n    this.transform.addEventListener(\'change\', () => this.Render());\n    this.transform.attach(mesh);\n    this.scene.add(this.transform);\n\n    window.addEventListener(\'keydown\', (event: KeyboardEvent) => {\n\n        switch (event.keyCode) {\n\n            case 81: // Q\n                this.transform.setSpace(this.transform.space === "local" ? "world" : "local");\n                break;\n\n            case 17: // Ctrl\n                this.transform.setTranslationSnap(100);\n                this.transform.setRotationSnap(THREE.Math.degToRad(15));\n                break;\n\n            case 87: // W\n                this.transform.setMode("translate");\n                break;\n\n            case 69: // E\n                this.transform.setMode("rotate");\n                break;\n\n            case 82: // R\n                this.transform.setMode("scale");\n                break;\n\n            case 187:\n            case 107: // +, =, num+\n                this.transform.setSize(this.transform.size + 0.1);\n                break;\n\n            case 189:\n            case 109: // -, _, num-\n                this.transform.setSize(Math.max(this.transform.size - 0.1, 0.1));\n                break;\n\n        }\n    });\n\n    window.addEventListener(\'keyup\', (event: KeyboardEvent) => {\n\n        switch (event.keyCode) {\n\n            case 17: // Ctrl\n                this.transform.setTranslationSnap(null);\n                this.transform.setRotationSnap(null);\n                break;\n\n        }\n\n    });\n}</code></pre></div>'}}),"\n",a.createElement(e.p,null,"マウスイベントを監視する Html ノードと、マウスの動きをどのように解釈するかを知るためにカメラが必要ということですね。"))}var o=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?a.createElement(e,n,a.createElement(r,n)):r(n)},l=t(8678),c=t(8838);const i={code:n=>{let{children:e,className:t}=n;return t?a.createElement(c.Z,{className:t},e):a.createElement("code",null,e)}};function m(n){let{data:e,children:t}=n;return a.createElement(l.Z,null,a.createElement("h1",null,e.mdx.frontmatter.title),a.createElement(s.Zo,{components:i},t))}function d(n){return a.createElement(m,n,a.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-12-12-threejs-control-md-af0ce47a156c62c74172.js.map
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7904],{1676:function(n,e,a){a.r(e),a.d(e,{default:function(){return d}});var t=a(1151),s=a(7294);function l(n){const e=Object.assign({p:"p",span:"span",code:"code",ul:"ul",li:"li"},(0,t.ah)(),n.components);return s.createElement(s.Fragment,null,s.createElement(e.p,null,"C++/CX を置き換えるよさげなライブラリ C++WinRT を発見した。"),"\n",s.createElement(e.p,null,"C++/CX の機能を純粋な C++(C++17 とか新しめの)で実装したものらしく、WinRT の C++バインディングのような位置。\nC++/CX で"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">Windows::UI::Core::CoreWindow ^window;</code></pre></div>'}}),"\n",s.createElement(e.p,null,"のようなものを"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">#include &lt;winrt/Windows.UI.Core.h&gt;\nwinrt::Windows::UI::Core::Core window;</code></pre></div>'}}),"\n",s.createElement(e.p,null,"のように置き換える。",s.createElement(e.code,null,"-> "),"じゃなくて ",s.createElement(e.code,null,".")," を使うスマートポインタで実装されている。"),"\n",s.createElement(e.ul,null,"\n",s.createElement(e.li,null,"Migrating C++/CX source code to C++/WinRT"),"\n"),"\n",s.createElement(e.p,null,"C++/CX で async, await な非同期を実装する道具だった PPL もうまく置き換えているようだ。"),"\n",s.createElement(e.ul,null,"\n",s.createElement(e.li,null,"Using C++ co-routines with C++/WinRT asynchronous methods"),"\n"),"\n",s.createElement(e.p,null,"やってみる\nclone\nhttps://github.com/Microsoft/cppwinrtをcloneしてincludeできるようにしておく。\nC++WinRT はヘッダオンリーライブラリである。\nビルド確認"),"\n",s.createElement(e.p,null,"https://github.com/Microsoft/cppwinrt/tree/master/10.0.15063.0/Samples/CL"),"\n",s.createElement(e.p,null,"をベース。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">// main.cpp\n#pragma comment(lib, &quot;windowsapp&quot;)\n\n#include &lt;winrt/base.h&gt;\n\nint __stdcall wWinMain(HINSTANCE, HINSTANCE, PWSTR, int)\n{\n    winrt::init_apartment();\n\n    return 0;\n}</code></pre></div>'}}),"\n",s.createElement(e.p,null,"あえて CMake で。\nCMakeLists.txt"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cmake"><pre class="language-cmake"><code class="language-cmake"><span class="token variable">CMAKE_MINIMUM_REQUIRED</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.5</span><span class="token punctuation">)</span>\n<span class="token function">PROJECT</span><span class="token punctuation">(</span>RendererToolkit<span class="token punctuation">)</span> <span class="token comment"># .sln</span>\n\n<span class="token function">ADD_DEFINITIONS</span><span class="token punctuation">(</span>\n    -DWIN32=<span class="token number">1</span>\n    -DUNICODE=<span class="token number">1</span>\n    -D_UNICODE=<span class="token number">1</span>\n    <span class="token punctuation">)</span>\n\n<span class="token function">SET</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_FLAGS</span> <span class="token string">"/ZW /EHsc /await /std:c++latest"</span><span class="token punctuation">)</span>\n<span class="token function">SET</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_FLAGS</span> <span class="token punctuation">${</span><span class="token variable">CMAKE_C_FLAGS</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token property">INCLUDE_DIRECTORIES</span><span class="token punctuation">(</span>\n    <span class="token comment"># 適当にcloneしたパスを参照</span>\n    <span class="token punctuation">${</span><span class="token variable">CMAKE_CURRENT_LIST_DIR</span><span class="token punctuation">}</span>/cppwinrt/<span class="token number">10.0.15063.0</span>\n    <span class="token punctuation">)</span>\n\n<span class="token comment">##############################################################################</span>\n<span class="token comment"># project</span>\n<span class="token comment">##############################################################################</span>\n<span class="token function">SET</span><span class="token punctuation">(</span>PROJECTNAME _SampleCoreWindow<span class="token punctuation">)</span>\n\n<span class="token function">FILE</span><span class="token punctuation">(</span>GLOB SRCS *.cpp *.h<span class="token punctuation">)</span>\n\n<span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span><span class="token punctuation">${</span>PROJECTNAME<span class="token punctuation">}</span> <span class="token variable">WIN32</span> <span class="token punctuation">${</span>SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">TARGET_INCLUDE_DIRECTORIES</span><span class="token punctuation">(</span><span class="token punctuation">${</span>PROJECTNAME<span class="token punctuation">}</span> <span class="token namespace">PUBLIC</span>\n    <span class="token punctuation">${</span>SUBRENDERER_INCLUDE<span class="token punctuation">}</span>\n    <span class="token punctuation">)</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"UWP をターゲットにしたプロジェクトを生成する。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">> mkdir build\n> cd build\nbuild> cmake.exe -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -DCMAKE_C_FLAGS=/ZW /EHsc -G "Visual Studio 15 2017 Win64" ..</code></pre></div>'}}),"\n",s.createElement(e.p,null,"ビルドすると警告が出る。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">warning C4447: スレッド モデルのない \'main\' シグネチャが見つかりました。\'int main(Platform::Array&lt;Platform::String^>^ args)\' の使用を検討してください。</code></pre></div>'}}),"\n",s.createElement(e.p,null,"以下のように属性をつければ外せた。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">[Platform::MTAThread]\nint __stdcall wWinMain(HINSTANCE, HINSTANCE, PWSTR, int)</code></pre></div>'}}),"\n",s.createElement(e.p,null,"Debug - X64 - ローカルコンピューター でアプリが起動して、即終了することが確認できればよし。\nUWP の作法で空の App を作ってみる"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">#pragma comment(lib, &quot;windowsapp&quot;)\n\n#include &lt;winrt/Windows.ApplicationModel.Core.h&gt;\n#include &lt;winrt/Windows.UI.Core.h&gt;\n\n//\n// IFrameworkViewSourceとIFrameworkViewを一体化させるのは必要(ばらすとエラーになった)\n//\nstruct App : winrt::implements&lt;App\n    , winrt::Windows::ApplicationModel::Core::IFrameworkViewSource\n    , winrt::Windows::ApplicationModel::Core::IFrameworkView&gt;\n{\n    winrt::Windows::ApplicationModel::Core::IFrameworkView CreateView()\n    {\n        return *this;\n    }\n\n    void Initialize(winrt::Windows::ApplicationModel::Core::CoreApplicationView const&amp;)\n    {\n    }\n\n    void Load(winrt::hstring const&amp;)\n    {\n    }\n\n    void Uninitialize()\n    {\n    }\n\n    void Run()\n    {\n        auto window = winrt::Windows::UI::Core::CoreWindow::GetForCurrentThread();\n        window.Activate();\n\n        //\n\n        auto dispatcher = window.Dispatcher();\n        dispatcher.ProcessEvents(winrt::Windows::UI::Core::CoreProcessEventsOption::ProcessUntilQuit);\n    }\n\n    void SetWindow(winrt::Windows::UI::Core::CoreWindow const&amp;)\n    {\n\n    }\n};\n\n\nint __stdcall wWinMain(HINSTANCE, HINSTANCE, PWSTR, int)\n{\n    winrt::init_apartment();\n\n    winrt::Windows::ApplicationModel::Core::CoreApplication::Run(App());\n}</code></pre></div>'}}),"\n",s.createElement(e.p,null,"警告とは無関係に、実行に"),"\n",s.createElement(e.p,null,s.createElement(e.code,null,"[Platform::MTAThread]")," か ",s.createElement(e.code,null,"winrt::init_apartment();")," のどちらかが必要？"),"\n",s.createElement(e.p,null,"IUnknown*を得る\nwinrt::get_abi\nメモ"),"\n",s.createElement(e.p,null,"https://github.com/Kitware/CMake/blob/master/Tests/VSWinStorePhone/CMakeLists.txt"),"\n",s.createElement(e.p,null,"VisualStudio2017 の C++/CX Universal D3D11 のテンプレートを C++/WinRT バージョンに改造できた。間違ってもコンパイルが通って実行時エラーになるのに難儀したが、C++/CX よりはだいぶ使い勝手がよさげな感じ。"))}var c=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?s.createElement(e,n,s.createElement(l,n)):l(n)},o=a(8678),p=a(4160),i=a(8736);const r={code:n=>{let{children:e,className:a}=n;return a?s.createElement(i.Z,{className:a},e):s.createElement("code",null,e)}};function u(n){let{data:e,children:a}=n;const l=e.mdx.frontmatter;return s.createElement(o.Z,null,s.createElement("h1",null,l.title),s.createElement("div",{className:"tags-index"},l.tags&&l.tags.length>0&&l.tags.map((n=>s.createElement(p.rU,{to:"/tags/"+n+"/",itemProp:"url"},s.createElement("button",null,n))))),s.createElement(t.Zo,{components:r},a))}function d(n){return s.createElement(u,n,s.createElement(c,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2017-cppwinrt-uwp-md-83a52f324360da721b21.js.map
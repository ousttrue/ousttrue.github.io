{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-0204-zig-md-5332d7ac837034398271.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,EAAG,IACHC,KAAM,OACNC,GAAI,KACJC,WAAY,eACXC,EAAAA,EAAAA,MAAsBV,EAAMW,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBX,EAAYG,GAAI,KAAM,aAAc,KAAMQ,EAAAA,cAAoBX,EAAYI,EAAG,KAAM,WAAYO,EAAAA,cAAoBX,EAAYK,EAAG,CACrMO,KAAM,wBACL,OAAQ,YAAa,KAAMD,EAAAA,cAAoBX,EAAYI,EAAG,KAAM,uBAAwB,KAAMO,EAAAA,cAAoBX,EAAYI,EAAG,KAAM,mNAAoN,KAAMO,EAAAA,cAAoBX,EAAYI,EAAG,KAAMO,EAAAA,cAAoBX,EAAYM,KAAM,KAAM,MAAO,MAAOK,EAAAA,cAAoBX,EAAYM,KAAM,KAAM,KAAM,qBAAsBK,EAAAA,cAAoBX,EAAYM,KAAM,KAAM,OAAQ,YAAaK,EAAAA,cAAoBX,EAAYM,KAAM,KAAM,QAAS,oBAAqBK,EAAAA,cAAoBX,EAAYM,KAAM,KAAM,OAAQ,YAAa,KAAMK,EAAAA,cAAoBX,EAAYI,EAAG,KAAM,8CAA+C,KAAMO,EAAAA,cAAoBX,EAAYO,GAAI,KAAM,OAAQ,KAAMI,EAAAA,cAAoBX,EAAYI,EAAG,KAAM,mCAAoC,KAAMO,EAAAA,cAAoBX,EAAYQ,WAAY,KAAM,KAAMG,EAAAA,cAAoBX,EAAYI,EAAG,KAAM,mIAAoI,MACrrC,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOc,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGO,EAAAA,EAAAA,MAAsBV,EAAMW,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWf,EAAOY,EAAAA,cAAoBb,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCdA,SAASgB,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOL,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMM,EAAKE,IAAIC,YAAYC,OAAQV,EAAAA,cAAoBW,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBxB,GACvC,OAAOY,EAAAA,cAAoBI,EAAchB,EAAOY,EAAAA,cAAoBa,EAAqBzB,GAC3F,C,4HCuBO,MAAM0B,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBhB,GAC/B,MAAMiB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAff,EACFA,EAAWiB,GAGb,IAAIA,KAAsBjB,IAChC,CAACiB,EAAmBjB,GACzB,CAGA,MAAMkB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACZ,EAAU,SAAEQ,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfnB,EACHA,EAAW,CAAC,GACZA,GAAckB,EAEJF,EAAiBhB,GAG5B,gBACLe,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2022/0204-zig.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"zig やってみる\"), \"\\n\", React.createElement(_components.p, null, \"新しいめの言語 \", React.createElement(_components.a, {\n    href: \"https://ziglang.org/\"\n  }, \"zig\"), \" をやってみる。\"), \"\\n\", React.createElement(_components.p, null, \"少しさわってみたとろ以下のような感想。\"), \"\\n\", React.createElement(_components.p, null, \"|      | 言語仕様 | GC   |\\n|------|----------|------|\\n| zig  | 小       | no   |\\n| c    | 小       | no   |\\n| go   | 小       | 有り |\\n| rust | 大       | no   |\\n| d    | 大       | 有り |\\n| c++  | 特大     | no   |\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"go\"), \" が \", React.createElement(_components.code, null, \"C\"), \" の後継ポジションかと思っていたが \", React.createElement(_components.code, null, \"zig\"), \" かもしれぬ。\\n\", React.createElement(_components.code, null, \"rust\"), \" は身につかなかったので、今年は \", React.createElement(_components.code, null, \"zig\"), \" やってみよう。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/zig_note で実験中。\"), \"\\n\", React.createElement(_components.h2, null, \"zls\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/zigtools/zls\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Notable language features that are not currently implemented include @cImport as well as most forms of compile time evaluation.\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2022/0204-zig.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","a","code","h2","blockquote","_provideComponents","components","React","href","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
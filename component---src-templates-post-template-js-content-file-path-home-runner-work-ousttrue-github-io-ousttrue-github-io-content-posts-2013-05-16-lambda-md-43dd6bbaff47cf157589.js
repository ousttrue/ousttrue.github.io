"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6705],{2918:function(e,t,n){n.r(t),n.d(t,{default:function(){return m}});var a=n(1151),l=n(7294);function r(e){const t=Object.assign({p:"p",span:"span"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.p,null,"lambdaの引数の型を得たい\nmsgpack-rpcの関数登録の都合上、 lambda関数から引数の型を得たい。\n下記のような書き方をしたい。"),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">template \nvoid register_func(const std::stiring &amp;func_name, R(*handler)(A1, A2)) {\n// 関数登録 \n}\n\nint main() { \n    // errorになる \n    register_func(“add”, [](int a, int b)-&gt;int{ return a+b; });\n    return 0;\n} </code></pre></div>'}}),"\n",l.createElement(t.p,null,"上記の書き方では普通の関数ポインタを受けることはできるのだが、"),"\n",l.createElement(t.p,null,"std::functionとlambdaは受けられない。\nstd::functionを受けるには下記のようにすることでできた。"),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">c++ template&lt;typename R, typename A1, typename A2&gt; void register_func(const std::string &amp;func_name, std::function&lt;R(A1, A2) handler) {     // }</code></pre></div>'}}),"\n",l.createElement(t.p,null,"残り、lambdaを受けられる記述方法を知りたいのだがどうしたらよいものか。\n下記のような手はうまくいかなかった・・・"),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">c++ template&lt;typename F, typename R, typename A1, typename A2&gt; void add_handler(F handler, const std::string &amp;method) {     std::function&lt;R(A1, A2)&gt; f(handler);     //add_handler }</code></pre></div>'}}),"\n",l.createElement(t.p,null,"こちらのサイトから\nhttp://d.hatena.ne.jp/osyo-manga/20121205/1354674180\ndecltypeを使ったらなんかできそうな感じがしたので粘っていたのだが、\n目的そのものの記事を発見した。\nhttp://stackoverflow.com/questions/6512019/can-we-get-the-type-of-a-lambda-argument\n微妙にそのままではコンパイルが通らなかったので少し工夫したらうまくいった。"),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">// ret template Ret helper0(Ret (F::*)(Rest…));\ntemplate Ret helper0(Ret (F::*)(Rest…) const);\n// 1 template A1 helper1(Ret (F::*)(A1, Rest…));\ntemplate A1 helper1(Ret (F::*)(A1, Rest…) const);\n// 2 template A2 helper2(Ret (F::*)(A1, A2, Rest…));\ntemplate A2 helper2(Ret (F::*)(A1, A2, Rest…) const);\ntemplate void add_handler(F handler, const std::string &amp;method) {\ntypedef decltype(handler) functor; typedef\ndecltype(helper0(&amp;functor::operator())) R; typedef\ndecltype(helper1(&amp;functor::operator())) A1; typedef\ndecltype(helper2(&amp;functor::operator())) A2;\n// register function...\n} </code></pre></div>'}}),"\n",l.createElement(t.p,null,"F handlerで関数ポインタ、lambda、std::function等全部受けられるようになったらしくoverloadが不要になった。\ndecltypeなんかすごいな。"))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.ah)(),e.components);return t?l.createElement(t,e,l.createElement(r,e)):r(e)},s=(n(8678),n(8838));const d={code:e=>{let{children:t,className:n}=e;return n?l.createElement(s.Z,{className:n},t):l.createElement("code",null,t)}};function p(e){let{data:t,children:n}=e;return l.createElement(l.Fragment,null,l.createElement("h1",null,t.mdx.frontmatter.title),l.createElement(a.Zo,{components:d},n))}function m(e){return l.createElement(p,e,l.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-05-16-lambda-md-43dd6bbaff47cf157589.js.map
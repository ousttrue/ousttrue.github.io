{"version":3,"file":"component---content-posts-2015-12-06-threejs-01-md-e0b5070007d0ea07bf62.js","mappings":"wHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBP,EAAYG,IAAK,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,KAAM,o6GAChG,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECoBO,MAAMW,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2015/12/06/threejs_01.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\nsource\\nTypeScriptを学び始めた目的のひとつであるThree.jsをようやくはじめた。\\n「Node.jsとSocket.IOで連結してリアルタイムにシーンをアニメーションするっ」とか\\n遠大な構想だったのだが小さいところから始めよう。\\nhello world的な\\n本家のgetting started\\nhtmlにスクリプトを追加。\\n<script src=\\\"threejs_01.js\\\"></script>\\n\\nthreejs_01.js\\nvar scene = new THREE.Scene();\\nvar camera = new THREE.PerspectiveCamera(75\\n    , window.innerWidth / window.innerHeight\\n    , 0.1, 1000);\\n\\nvar renderer = new THREE.WebGLRenderer();\\nrenderer.setSize(window.innerWidth, window.innerHeight);\\ndocument.body.appendChild(renderer.domElement);\\n\\nvar geometry = new THREE.BoxGeometry(1, 1, 1);\\nvar material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\\nvar cube = new THREE.Mesh(geometry, material);\\nscene.add(cube);\\n\\ncamera.position.z = 5;\\n\\nvar render = function() {\\n    requestAnimationFrame(render);\\n\\n    cube.rotation.x += 0.1;\\n    cube.rotation.y += 0.1;\\n\\n    renderer.render(scene, camera);\\n};\\n\\nrender();\\n\\ntypescript化する。\\ngulpにタスクを仕込んだので拡張子をtsにして待つのみ。\\nerror TS2304: Cannot find name 'THREE'\\n\\nthree.jsの型定義が無いので追加。\\n> tsd query three -rosa install\\n\\ntsの先頭にtsdの参照を追加\\n/// <reference path='../../../../typings/tsd.d.ts' />\\n\\n無事typescript化に成功。\\ntsconfig.jsonはこんな感じ。\\n{\\n    \\\"compilerOptions\\\": {\\n        \\\"module\\\": \\\"commonjs\\\",\\n        \\\"target\\\": \\\"es5\\\",\\n        \\\"noImplicitAny\\\": true,\\n        \\\"outDir\\\": \\\".\\\",\\n        \\\"rootDir\\\": \\\".\\\",\\n        \\\"sourceMap\\\": false\\n    },\\n    \\\"exclude\\\": [\\n        \\\"node_modules\\\"\\n    ]\\n}\\n\\ncanvasの作成先を変える\\nrenderer.setSize(window.innerWidth, window.innerHeight);\\ndocument.body.appendChild(renderer.domElement);\\n\\nを変えよう。\\ndom操作等にjqueryを使う意向なのでjquery導入。\\n> tsd query jquery -rosa install\\n\\nhtmlにdivを追加して\\n<div id=\\\"renderer\\\" style=\\\"width:300px;height:200px;\\\"></div>\\n\\nレンダラのサイズと親を変える。\\nvar $container=$('div#renderer');\\nrenderer.setSize($container.width(), $container.height());\\n$container.append(renderer.domElement);\\n\\nカメラのアスペクト比も変える。\\nvar camera = new THREE.PerspectiveCamera(75\\n    , $container.width()/$container.height()\\n    , 0.1, 1000);\\n\\nTypeScript風に書き換えてみる\\nせっかくTypeScriptにしているのでフリーダムに書き換えてみる。\\n/// <reference path='../../../../typings/tsd.d.ts' />\\n\\n\\nclass Renderer {\\n    $container: JQuery;\\n    renderer: THREE.Renderer;\\n\\n    scene: THREE.Scene;\\n    camera: THREE.Camera;\\n    mesh: THREE.Mesh;\\n\\n    CreateRenderer($container: JQuery) {\\n        this.$container = $container;\\n\\n        this.renderer = new THREE.WebGLRenderer();\\n        this.renderer.setSize($container.width(), $container.height());\\n        $container.append(this.renderer.domElement);\\n    }\\n\\n    CreateScene() {\\n        this.scene = new THREE.Scene();\\n\\n        var geometry = new THREE.BoxGeometry(1, 1, 1);\\n        var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\\n        this.mesh = new THREE.Mesh(geometry, material);\\n        this.scene.add(this.mesh);\\n\\n        this.camera = new THREE.PerspectiveCamera(75\\n            , this.$container.width() / this.$container.height()\\n            , 0.1, 1000);\\n        this.camera.position.z = 5;\\n    }\\n\\n    Render(){\\n        requestAnimationFrame(this.Render.bind(this));\\n\\n        // update scene\\n        this.mesh.rotation.x += 0.1;\\n        this.mesh.rotation.y += 0.1;\\n\\n        // render\\n        this.renderer.render(this.scene, this.camera);\\n    }\\n}\\nvar renderer = new Renderer();\\n\\n\\n$(() => {\\n    var $container = $('div#renderer');\\n    renderer.CreateRenderer($container);\\n    renderer.CreateScene();\\n\\n    renderer.Render();\\n});\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","pre","code","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
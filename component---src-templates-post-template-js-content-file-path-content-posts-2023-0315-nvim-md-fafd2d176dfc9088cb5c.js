"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1381],{3494:function(n,a,e){e.r(a),e.d(a,{default:function(){return k}});var s=e(1151),t=e(7294);function l(n){const a=Object.assign({p:"p",code:"code",h1:"h1",ul:"ul",li:"li",h2:"h2",span:"span",ol:"ol"},(0,s.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"nvim 整備を再開。\n",t.createElement(a.code,null,"v0.9.0-dev")," ",t.createElement(a.code,null,"Windows10"),", ",t.createElement(a.code,null,"WSL")," 共用設定で運用。"),"\n",t.createElement(a.p,null,"LSP も含めて整ってきたので、久しぶりに ",t.createElement(a.code,null,"vscode")," から出られそうな予感。"),"\n",t.createElement(a.p,null,"ある程度の環境ができあがるまで、無限に寄り道を強いられるので\nなかなか本筋に集中できなくなるが、できあがると快適に。\n現状の環境に付いてメモをしておく。"),"\n",t.createElement(a.h1,null,"term + font"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"WslTty + HackGenNerd + tmux"),"\n",t.createElement(a.li,null,"WezTerm + HackGenNerd(tmux なし。wezterm を使う)"),"\n"),"\n",t.createElement(a.h1,null,"init.lua"),"\n",t.createElement(a.h2,null,"lua ファイルの配置"),"\n",t.createElement(a.p,null,t.createElement(a.code,null,"~/.config/nvim/lua")," が ",t.createElement(a.code,null,"LUA_PATH")," になるので\nのフォルダに普通の lua モジュール の流儀で配置して、\n",t.createElement(a.code,null,"reqiure")," できるようにする。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua"><span class="token comment">-- ~/.config/nvim/lua/dot.lua</span>\n<span class="token comment">-- module</span>\n<span class="token keyword">local</span> M<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nM<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span>\n\n<span class="token keyword">function</span> M<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">\'hello\'</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span>\n\n<span class="token keyword">return</span> M</code></pre></div>'}}),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua"><span class="token comment">-- use</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'dot\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h2,null,"keymap"),"\n",t.createElement(a.p,null,"nvim の場合いくつか指定方法があるのだが、 lua の ",t.createElement(a.code,null,"vim.keymap.set")," 関数がよい。 lua の関数を直接指定できるので快適。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua">vim<span class="token punctuation">.</span>keymap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">\'n\'</span><span class="token punctuation">,</span> <span class="token string">\'&lt;Space>a\'</span><span class="token punctuation">,</span> <span class="token string">\'&lt;cmd>LspInfo&lt;CR>\'</span><span class="token punctuation">)</span>\n<span class="token comment">-- lua の関数も書ける</span>\nvim<span class="token punctuation">.</span>keymap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">\'n\'</span><span class="token punctuation">,</span> <span class="token string">\'&lt;Space>a\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">\'hello lua\'</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h2,null,"Windows での border 手動設定"),"\n",t.createElement(a.p,null,"Windows では telescope とかの罫線が文字化けしてしまうのだが、\n文字列で指定すると問題が無いことがわかった。\nどうも、エスケープシーケンスで罫線出力したときに Windows の conpty で変換されて\n壊れるような気がしている。\nなので、設定で unicode などの文字で罫線を指定してやると綺麗に描画される様子。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua"><span class="token comment">-- border 指定。</span>\ndot<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">{</span> <span class="token string">"╭"</span><span class="token punctuation">,</span> <span class="token string">"FloatBorder"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token string">"─"</span><span class="token punctuation">,</span> <span class="token string">"FloatBorder"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token string">"╮"</span><span class="token punctuation">,</span> <span class="token string">"FloatBorder"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token string">"│"</span><span class="token punctuation">,</span> <span class="token string">"FloatBorder"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token string">"╯"</span><span class="token punctuation">,</span> <span class="token string">"FloatBorder"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token string">"─"</span><span class="token punctuation">,</span> <span class="token string">"FloatBorder"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token string">"╰"</span><span class="token punctuation">,</span> <span class="token string">"FloatBorder"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token string">"│"</span><span class="token punctuation">,</span> <span class="token string">"FloatBorder"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">-- plugin ごとにこまめに設定してやる</span>\n\n<span class="token comment">-- LspInfo など</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lspconfig.ui.windows"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default_options<span class="token punctuation">.</span>border <span class="token operator">=</span> dot<span class="token punctuation">.</span>border\n\n<span class="token comment">-- nvim-cmp</span>\n  cmp<span class="token punctuation">.</span><span class="token function">setup</span> <span class="token punctuation">{</span>\n    window <span class="token operator">=</span> <span class="token punctuation">{</span>\n      completion <span class="token operator">=</span> cmp<span class="token punctuation">.</span>config<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">bordered</span> <span class="token punctuation">{</span>\n        border <span class="token operator">=</span> dot<span class="token punctuation">.</span>border<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      documentation <span class="token operator">=</span> cmp<span class="token punctuation">.</span>config<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">bordered</span> <span class="token punctuation">{</span>\n        border <span class="token operator">=</span> dot<span class="token punctuation">.</span>border<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div>'}}),"\n",t.createElement(a.p,null,"で、罫線があると completion とか floating window の見栄えがよろしいのですな。"),"\n",t.createElement(a.p,null,"Windows はまだ描画が乱れる場合はあるのだけど、\n左サイドに NvimTree を出しっぱなしにするなどで、ある程度防御できる、ぽい。"),"\n",t.createElement(a.h1,null,"package manager"),"\n",t.createElement(a.p,null,"lazy"),"\n",t.createElement(a.h1,null,"comment"),"\n",t.createElement(a.h1,null,"telescope"),"\n",t.createElement(a.p,null,"packer から乗り換え。"),"\n",t.createElement(a.h1,null,"nvimtree"),"\n",t.createElement(a.p,null,"NerdTree から乗り換え。"),"\n",t.createElement(a.h1,null,"treesitter"),"\n",t.createElement(a.h1,null,"lspconfig"),"\n",t.createElement(a.p,null,"いろいろ設定項目があるので、少しずつやる。"),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,null,"lua_ls + neodev"),"\n",t.createElement(a.li,null,"formatter"),"\n",t.createElement(a.li,null,"diagnostics / hover"),"\n",t.createElement(a.li,null,"semantic symbol => aerial, syntax highlight"),"\n",t.createElement(a.li,null,"goto defintion => tjump"),"\n",t.createElement(a.li,null,"completion"),"\n"),"\n",t.createElement(a.h2,null,"languages"),"\n",t.createElement(a.p,null,"lua_ls, clangd, pyright, tsserver(gatsby 作業), omnisharp(Unity 作業), gopls, jsonls\nあたり快適に使えている。\n一部、 ",t.createElement(a.code,null,"~/.vscode-server/extensions")," のバイナリ使ってます。すいません。"),"\n",t.createElement(a.h2,null,"lua_ls"),"\n",t.createElement(a.p,null,t.createElement(a.code,null,"neodev")," で nvim の builtin 関数の情報を表示する。"),"\n",t.createElement(a.h2,null,"clangd"),"\n",t.createElement(a.p,null,"header / source 切りかえ。",t.createElement(a.code,null,"A.vim")," みたいなやつ。\n",t.createElement(a.code,null,"ClangdSwitchSourceHeader")),"\n",t.createElement(a.h1,null,"lualine"),"\n",t.createElement(a.h1,null,"aerial"),"\n",t.createElement(a.h1,null,"completion"),"\n",t.createElement(a.p,null,"cmp"),"\n",t.createElement(a.h1,null,"lsp 経由の formatter"),"\n",t.createElement(a.p,null,"だいたい、 LanguageServer に任せてしまえる。\nlua_ls と stylua を組みあわせたい場合など、別のフォーマッターを使いたい場合は\nlua_ls のフォーマッターを停止させつつ、 null-ls の stylua を使うことができた。"),"\n",t.createElement(a.h1,null,"git"),"\n",t.createElement(a.h1,null,"quickfix"),"\n",t.createElement(a.p,null,"タスクランナーを使うのをやめて、下記のサイトを参考にした\n",t.createElement(a.code,null,"async_make")," 的な lua 関数で運用中。\n必要に応じて ",t.createElement(a.code,null,"set makeprg=cmake\\ --build\\ build")," などする。"),"\n",t.createElement(a.p,null,"https://phelipetls.github.io/posts/async-make-in-nvim-with-lua/"),"\n",t.createElement(a.p,null,t.createElement(a.code,null,"Cfilter")," で件数を絞って\n",t.createElement(a.code,null,"<Tab>"),", ",t.createElement(a.code,null,"<S-Tab>")," で quickfix を巡回するように設定した。\nquickfix の新旧リスト切り替えを ",t.createElement(a.code,null,"<C-n>, <C-p>")," にわりあてて、\n使い捨ての quickfix を量産する感じに(c++)。"),"\n",t.createElement(a.h1,null,"floating term"),"\n",t.createElement(a.h1,null,"skk"),"\n",t.createElement(a.h1,null,"LuaSnip"),"\n",t.createElement(a.h1,null,"TODO:"),"\n",t.createElement(a.p,null,"LanguageServer は完全に実用になった。\nDebugAdapter は動くけど、快適でない感じがする。"))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,s.ah)(),n.components);return a?t.createElement(a,n,t.createElement(l,n)):l(n)},c=e(8678),o=e(4160),u=e(8736);const r={code:n=>{let{children:a,className:e}=n;return e?t.createElement(u.Z,{className:e},a):t.createElement("code",null,a)}};function i(n){let{data:a,children:e}=n;const l=a.mdx.frontmatter;return t.createElement(c.Z,null,t.createElement("h1",null,l.title),t.createElement("div",{className:"tags-index"},l.tags&&l.tags.length>0&&l.tags.map((n=>t.createElement(o.rU,{to:"/tags/"+n+"/",itemProp:"url"},t.createElement("button",null,n))))),t.createElement(s.Zo,{components:r},e))}function k(n){return t.createElement(i,n,t.createElement(p,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2023-0315-nvim-md-fafd2d176dfc9088cb5c.js.map
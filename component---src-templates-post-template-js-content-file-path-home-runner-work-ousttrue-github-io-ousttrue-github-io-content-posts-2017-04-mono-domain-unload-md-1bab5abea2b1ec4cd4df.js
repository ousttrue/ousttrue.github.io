"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6455],{5762:function(n,e,a){a.r(e),a.d(e,{default:function(){return i}});var t=a(1151),s=a(7294);function p(n){const e=Object.assign({p:"p",span:"span"},(0,t.ah)(),n.components);return s.createElement(s.Fragment,null,s.createElement(e.p,null,"何のことか分かりにくいが以下のコードで再現できる。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> m_count<span class="token punctuation">;</span>\n\n<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnRender</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> eventID<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    m_count<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> Marshal<span class="token punctuation">.</span><span class="token function">GetFunctionPointerForDelegate</span><span class="token punctuation">(</span>OnRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    GL<span class="token punctuation">.</span><span class="token function">IssuePluginEvent</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"SharpDX を Unity 上で使うべく GL.IssuePluginEvent に C#の Delegate を渡す実験をしていた。これをやると、Editor 終了時もしくは次回 play 時に UnityEditor が Freeze する(100%)。Unity5.5.3 と Unity2017.1.0beta1 で再現した。\n調べてみたところ、"),"\n",s.createElement(e.p,null,"https://forum.unity3d.com/threads/problem-with-callbacks.87513/"),"\n",s.createElement(e.p,null,"が該当しそうかと思ったがちょっと違う。新しいスレッドを起こしている訳では無いので。 ただ、条件は下記の通り"),"\n",s.createElement(e.p,null,"C#の delegate を関数ポインタとして C に渡す\nその関数ポインタが異なるスレッドから呼び出される"),"\n",s.createElement(e.p,null,"次に"),"\n",s.createElement(e.p,null,"https://blog.tedd.no/2016/10/09/investigating-unity-hang-on-second-run-multi-threading/"),"\n",s.createElement(e.p,null,"を当たった。ここで紹介している visualstudio の debug - window - 並列スタックで状況を確認する手法を使ってみたところ以下のようになっていた。"),"\n",s.createElement(e.p,null,"mono_domain_unload が固まっているような気がするぞ。"),"\n",s.createElement(e.p,null,"http://stackoverflow.com/questions/10138015/unloading-mono-domains-in-multithreaded-context"),"\n",s.createElement(e.p,null,"mono が delegate から関数ポインタを作るのに使っているらしい invoke wrappers の周りの回収に失敗しているのではないかというような気がする。"),"\n",s.createElement(e.p,null,"http://d.hatena.ne.jp/saiya_moebius/20090319/1237434037"),"\n",s.createElement(e.p,null,"Unity 上で打つ手は見つからなかった・・・"))}var l=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?s.createElement(e,n,s.createElement(p,n)):p(n)},c=a(8678),o=a(8838);const u={code:n=>{let{children:e,className:a}=n;return a?s.createElement(o.Z,{className:a},e):s.createElement("code",null,e)}};function r(n){let{data:e,children:a}=n;return s.createElement(c.Z,null,s.createElement("h1",null,e.mdx.frontmatter.title),s.createElement(t.Zo,{components:u},a))}function i(n){return s.createElement(r,n,s.createElement(l,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-04-mono-domain-unload-md-1bab5abea2b1ec4cd4df.js.map
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2019-vim-completion-md-a5ea8134e5d6bd1f8aa2.js","mappings":"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","sources":["webpack:///./content/posts/2019/vim_completion.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    span: \"span\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.code, null, \"omnicompletion\"), \" とかいろいろあるけどどう違うねん。ということで調べる。\\n\", React.createElement(_components.code, null, \"help ins-completion\"), \"\\n\", React.createElement(_components.code, null, \"help complete-functions\")), \"\\n\", React.createElement(_components.h2, null, \"いろいろな補完\"), \"\\n\", React.createElement(_components.h2, null, \"補完関数を定義\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"<C-X><C-U>\"), \" を \", React.createElement(_components.code, null, \"set completefunc\"), \" で、\\n\", React.createElement(_components.code, null, \"<C-X><C-O>\"), \" を \", React.createElement(_components.code, null, \"set omnifunc\"), \" でユーザー定義できる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"vim\\\"><pre class=\\\"language-vim\\\"><code class=\\\"language-vim\\\"><span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">!</span> s<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">my_omni_complete</span><span class=\\\"token punctuation\\\">(</span>findstart<span class=\\\"token punctuation\\\">,</span> base<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">if</span> a<span class=\\\"token punctuation\\\">:</span>findstart\\n        <span class=\\\"token comment\\\">\\\" 補完の開始列を返す</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">col</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">endif</span>\\n\\n    <span class=\\\"token comment\\\">\\\" 補完候補を返す</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token keyword\\\">l</span><span class=\\\"token punctuation\\\">:</span>matches <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"a\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"b\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"c\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'words'</span><span class=\\\"token punctuation\\\">:</span> matches<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'refresh'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'always'</span><span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">endfunction</span>\\n\\n<span class=\\\"token comment\\\">\\\"setlocal complefunc = </span>\\n<span class=\\\"token keyword\\\">setlocal</span> <span class=\\\"token builtin\\\">omnifunc</span> <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">:</span>my_omni_complete\\n<span class=\\\"token comment\\\">\\\" menuone</span>\\n<span class=\\\"token keyword\\\">setlocal</span> <span class=\\\"token builtin\\\">completeopt</span> <span class=\\\"token operator\\\">=</span> menu<span class=\\\"token punctuation\\\">,</span>preview<span class=\\\"token punctuation\\\">,</span>longest\\n<span class=\\\"token comment\\\">\\\" default</span>\\n<span class=\\\"token keyword\\\">setlocal</span> <span class=\\\"token builtin\\\">previewheight</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span>\\n<span class=\\\"token comment\\\">\\\"setlocal pumheight</span>\\n<span class=\\\"token keyword\\\">setlocal</span> pumwidth <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">15</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"のように定義する。\"), \"\\n\", React.createElement(_components.h3, null, \"最初の実行時\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"On the first invocation the arguments are:\\na:findstart  1\\na:base\\tempty\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"候補の取得\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"On the second invocation the arguments are:\\na:findstart  0\\na:base\\tthe text with which matches should match; the text that was\\nlocated in the first call (can be empty)\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"補完候補\"), \"\\n\", React.createElement(_components.p, null, \"単なる文字列か以下のdictionary\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">{\\n\\tword\\t\\tthe text that will be inserted, mandatory\\n\\tabbr\\t\\tabbreviation of \\\"word\\\"; when not empty it is used in\\n\\t\\t\\tthe menu instead of \\\"word\\\"\\n\\tmenu\\t\\textra text for the popup menu, displayed after \\\"word\\\"\\n\\t\\t\\tor \\\"abbr\\\"\\n\\tinfo\\t\\tmore information about the item, can be displayed in a\\n\\t\\t\\tpreview window\\n\\tkind\\t\\tsingle letter indicating the type of completion\\n\\n        v\\tvariable\\n        f\\tfunction or method\\n        m\\tmember of a struct or class\\n        t\\ttypedef\\n        d\\t#define or macro\\n\\n\\ticase\\t\\twhen non-zero case is to be ignored when comparing\\n\\t\\t\\titems to be equal; when omitted zero is used, thus\\n\\t\\t\\titems that only differ in case are added\\n\\tdup\\t\\twhen non-zero this match will be added even when an\\n\\t\\t\\titem with the same word is already present.\\n\\tempty\\t\\twhen non-zero this match will be added even when it is\\n\\t\\t\\tan empty string\\n\\tuser_data \\tcustom data which is associated with the item and\\n\\t\\t\\tavailable in |v:completed_item|\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, null, \"非同期で更新\"), \"\\n\", React.createElement(_components.h3, null, \"自動的にsuggest\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"deoplete\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"呼び出し例\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"vim\\\"><pre class=\\\"language-vim\\\"><code class=\\\"language-vim\\\">inoremap <span class=\\\"token operator\\\">&lt;</span>expr<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">.</span> <span class=\\\"token function\\\">MayComplete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nfunc <span class=\\\"token function\\\">MayComplete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>can <span class=\\\"token builtin\\\">complete</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\".\\\\&lt;C-X>\\\\&lt;C-O>\\\"</span>\\n    <span class=\\\"token keyword\\\">endif</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'.'</span>\\nendfunc</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, null, \"実装例\"), \"\\n\", React.createElement(_components.h4, null, \"vim-lsp\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"vim\\\"><pre class=\\\"language-vim\\\"><code class=\\\"language-vim\\\"><span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">!</span> <span class=\\\"token builtin\\\">lsp</span>#omni#<span class=\\\"token function\\\">complete</span><span class=\\\"token punctuation\\\">(</span>findstart<span class=\\\"token punctuation\\\">,</span> base<span class=\\\"token punctuation\\\">)</span> abort\\n    <span class=\\\"token keyword\\\">if</span> a<span class=\\\"token punctuation\\\">:</span>findstart\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">col</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">else</span>\\n        <span class=\\\"token comment\\\">\\\" language serverに補完候補ををリクエスト</span>\\n        <span class=\\\"token keyword\\\">call</span> s<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">send_completion_request</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">l</span><span class=\\\"token punctuation\\\">:</span>info<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token comment\\\">\\\" 空で抜ける</span>\\n        <span class=\\\"token keyword\\\">redraw</span>\\n        <span class=\\\"token keyword\\\">return</span> v<span class=\\\"token punctuation\\\">:</span>none\\n    <span class=\\\"token keyword\\\">endif</span>\\nendfunc</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"vim\\\"><pre class=\\\"language-vim\\\"><code class=\\\"language-vim\\\"><span class=\\\"token comment\\\">\\\" call s:send_completion_request(l:info) のコールバック</span>\\n<span class=\\\"token keyword\\\">call</span> <span class=\\\"token function\\\">complete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">col</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">l</span><span class=\\\"token punctuation\\\">:</span>matches<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2019/vim_completion.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","h2","span","h3","blockquote","ul","li","h4","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3658],{7731:function(e,n,t){t.r(n);var l=t(1151),o=t(7294);function r(e){const n=Object.assign({p:"p",a:"a",pre:"pre",code:"code",strong:"strong",h2:"h2"},(0,l.ah)(),e.components);return o.createElement(o.Fragment,null,o.createElement(n.p,null,"VSCodeのリモートデバッグを利用してBlenderのPythonにデバッガをアタッチする。"),"\n",o.createElement(n.p,null,o.createElement(n.a,{href:"https://pypi.python.org/pypi/ptvsd"},"PTVSD")),"\n",o.createElement(n.p,null,"VisualStudioのPTVS向けのリモートデバッグモジュール。VSCodeも対応しているらしい。\nリモート側でptvsdをimportして待ち受けて、VisualStudio側からtcp経由でアタッチする。"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-python"},"import ptvsd\nptvsd.enable_attach(secret = 'secret', ('0.0.0.0', 3000))\n\nif os != 'Windows':\n    ptvsd.wait_for_attach() # スクリプトが終わらないようにブロックする\n")),"\n",o.createElement(n.pre,null,o.createElement(n.code,null,"+--------------+\n|remoteのpython|\n|         ptvsd|tcp:3000 <-- VisualStudio attach\n+--------------+\n")),"\n",o.createElement(n.p,null,"dos窓"),"\n",o.createElement(n.pre,null,o.createElement(n.code,null,'> netstat -an | find "3000"\n  TCP         0.0.0.0:3000           0.0.0.0:0              LISTENING\n')),"\n",o.createElement(n.p,null,"確かに待っている。\nTCP経由なのでptvsd側が、LinuxやRasPi、Blenderの組み込みPythonなどなんであってもアタッチできる。\n素のPythonでやってみる"),"\n",o.createElement(n.p,null,"Windows10(64bit)\nPython-3.6\nPTVSD-3.0.0"),"\n",o.createElement(n.p,null,"PTVSDのバージョンが3.0.0でないと\nデバッグアダプタープロセスが予期せず終了しました。"),"\n",o.createElement(n.p,null,"等のエラーが出てうまくいかぬ。"),"\n",o.createElement(n.p,null,"https://github.com/DonJayamanne/pythonVSCode/issues/1039"),"\n",o.createElement(n.p,null,"ptvsdのインストール"),"\n",o.createElement(n.pre,null,o.createElement(n.code,null,"> py -3.6 -m pip install ptvsd==3.0.0\n")),"\n",o.createElement(n.p,null,"testプロジェクト"),"\n",o.createElement(n.pre,null,o.createElement(n.code,null,"> mkdir ptvsd_test\n")),"\n",o.createElement(n.p,null,"VSCodeでptvsd_testフォルダを開く。\ntestスクリプト\nptvsd_test/main.py"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-python"},"import time\n\n# PTVSDを準備する\nimport ptvsd\nlisten = ('0.0.0.0', 3000)\nptvsd.enable_attach('my_secret', listen)\n\nprint('wait_for_attach...', listen)\nptvsd.wait_for_attach() # リモートデバッガの接続を待つ\n\ntime.sleep(1) # 接続後少し待つ\nprint('connected')\n\n# デバッグするコード\ni = 0\nwhile True:\n    print(i)\n    i += 1\n    time.sleep(1)\n")),"\n",o.createElement(n.pre,null,o.createElement(n.code,null,">py -3.6 main.py\nwait_for_attach... ('0.0.0.0', 3000)\n")),"\n",o.createElement(n.p,null,"VSCodeから接続\nptvsd_test/main.pyを開いてデバッグ開始。構成の追加でpythonを選択する。"),"\n",o.createElement(n.p,null,"ptvsd_test/.vscode/launch.json"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-json"},'{\n    // IntelliSense を使用して利用可能な属性を学べます。\n    // 既存の属性の説明をホバーして表示します。\n    // 詳細情報は次を確認してください: https://go.microsoft.com/fwlink/?linkid=830387\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "name": "Python",\n            "type": "python",\n            "request": "launch",\n            "stopOnEntry": true,\n            "pythonPath": "${config:python.pythonPath}",\n            "program": "${file}",\n            "cwd": "${workspaceRoot}",\n            "env": {},\n            "envFile": "${workspaceRoot}/.env",\n            "debugOptions": [\n                "WaitOnAbnormalExit",\n                "WaitOnNormalExit",\n                "RedirectOutput"\n            ]\n        },\n        { // これ\n            "name": "Python: Attach",\n            "type": "python",\n            "request": "attach",\n            "localRoot": "${workspaceRoot}",\n            "remoteRoot": "${workspaceRoot}",\n            "port": 3000,\n            "secret": "my_secret",\n            "host": "localhost"\n        },\n\n        // 以降省略\n}\n')),"\n",o.createElement(n.p,null,"デバッグの選択メニューでPython:Attachを選択。改めて開始。\nうまく接続できればデバッグコンソールにprintした内容が表示される。\nbreakポイントもステップ実行も可能。素晴らしい。\nBlenderのAddOnでやってみる"),"\n",o.createElement(n.p,null,"https://github.com/Barbarbarbarian/Blender-VScode-Debugger"),"\n",o.createElement(n.p,null,"これ。\nBlenderのPythonにptvsdをインストールする\nBlenderを起動して以下のスクリプトを実行する。"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-python"},"import sys\nfor x in sys.path:\n    print(x)\n")),"\n",o.createElement(n.p,null,"適当なパスを選んでそこにptvsd-3.0.0をコピーする。\nptvsd-3.0.0.zipをダウンロード。\n解凍してptvsdフォルダをBlenderのsys.pathに含まれていたC:/Program Files/Blender Foundation/Blenderにコピーした。\nBlender-VScode-Debuggerをインストールする"),"\n",o.createElement(n.p,null,"File - UserPreferences - Add-ons と潜ってinstall Add-on from FileボタンからBlender_VScode_Debugger.pyを選択する。\nAdd-onsからDevelopment: Debugger for Visual Codeを選択してチェックボックスをOnにする\n三角を押してPreferencesを展開、Path of PTVSD module:にptvsdをインストールしたパスを設定する(うちではC:/Program Files/Blender Foundation/Blender)\nSave - User Settings"),"\n",o.createElement(n.p,null,"実行してみる\n3DViewでspaceを押してConnect to Visual Studio Code Debuggerを選択。\ndos窓"),"\n",o.createElement(n.pre,null,o.createElement(n.code,null,'> netstat -an | find "3000"\n  TCP         0.0.0.0:3000           0.0.0.0:0              LISTENING\n')),"\n",o.createElement(n.p,null,"待っている。\n試しにAddOnを作ってみる\n例えばWindows版のBlenderのAddOnパスは\nC:/Users/",o.createElement(n.strong,null,"USER_NAME"),"/AppData/Roaming/Blender Foundation/Blender/2.79/scripts/addons\nです。\nHello AddOnを作る。\nhello.pyとhello/",o.createElement(n.strong,null,"init"),".pyという選択肢があるが、後者で作る。\ngitやVSCodeを使うのだからフォルダが独立している方がよろしい。\nhelloフォルダを作って、VSCodeでフォルダを開いた。\nhello/",o.createElement(n.strong,null,"init"),".pyを作成。"),"\n",o.createElement(n.p,null,"https://docs.blender.org/manual/en/dev/advanced/scripting/addon_tutorial.html"),"\n",o.createElement(n.p,null,"を参考に。"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-python"},'bl_info = {\n    "name": "Move X Axis",\n    "category": "Object",\n}\n\nimport bpy\n\n\nclass ObjectMoveX(bpy.types.Operator):\n    """My Object Moving Script"""      # Use this as a tool-tip for menu items and buttons.\n    bl_idname = "object.move_x"        # Unique identifier for buttons and menu items to reference.\n    bl_label = "Move X by One"         # Display name in the interface.\n    bl_options = {\'REGISTER\', \'UNDO\'}  # Enable undo for the operator.\n\n    def execute(self, context):        # execute() is called when running the operator.\n\n        # The original script\n        scene = context.scene\n        for obj in scene.objects:\n            obj.location.x += 1.0\n\n        return {\'FINISHED\'}            # Lets Blender know the operator finished successfully.\n\ndef register():\n    bpy.utils.register_class(ObjectMoveX)\n\n\ndef unregister():\n    bpy.utils.unregister_class(ObjectMoveX)\n\n\n# This allows you to run the script directly from Blenders Text editor\n# to test the add-on without having to install it.\nif __name__ == "__main__":\n    register()\n')),"\n",o.createElement(n.p,null,"Blenderを再起動して、AddOnのチェックボックスを有効にする。\n3DViewでスペースを押してMove X by oneを実行してみる。\n動けば準備完了。\nAddOnをステップ実行してみる"),"\n",o.createElement(n.p,null,"3DViewでConnect to Visual Studio Code Debugger\nVSCodeで構成を追加してRemoteDebuggerでアタッチ"),"\n",o.createElement(n.p,null,"hello/.vscode/launch.json"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-json"},'        {\n            "name": "Python: Attach",\n            "type": "python",\n            "request": "attach",\n            "localRoot": "${workspaceRoot}",\n            "remoteRoot": "${workspaceRoot}",\n            "port": 3000,\n            "secret": "my_secret",\n            "host": "localhost"\n        },\n')),"\n",o.createElement(n.p,null,"VSCodeでexecute関数のscene=context.sceneにbreak pointをセットする\n3DViewでMove X by one"),"\n",o.createElement(n.p,null,"うまくいった。"),"\n",o.createElement(n.h2,null,"Memo"),"\n",o.createElement(n.p,null,"Blenderプロセスが生きていればいいのでptvsd.wait_for_attach()する必要はない\nPythonのターンになるまで接続が処理されないので、VSCodeからアタッチした後AddOnを実行するまでVSCodeは待ち状態になる"))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?o.createElement(n,e,o.createElement(r,e)):r(e)}},1151:function(e,n,t){t.d(n,{ah:function(){return r}});var l=t(7294);const o=l.createContext({});function r(e){const n=l.useContext(o);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---content-posts-2017-blender-addon-vscode-md-c7fd938431bb580a309e.js.map
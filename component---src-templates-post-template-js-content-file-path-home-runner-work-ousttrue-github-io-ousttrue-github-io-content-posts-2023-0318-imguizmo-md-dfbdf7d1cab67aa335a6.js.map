{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2023-0318-imguizmo-md-dfbdf7d1cab67aa335a6.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,IACHC,KAAM,OACNC,GAAI,OACHC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,CAC3HM,KAAM,+CACL,gDAAiD,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,wBAAyBM,EAAAA,cAAoBT,EAAYK,KAAM,CAChKM,wBAAyB,CACvBC,OAAQ,iDAER,SAAU,KAAMH,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,iCAAkC,KAAMG,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,2DAA4D,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,OAAQM,EAAAA,cAAoBT,EAAYK,KAAM,CACtSM,wBAAyB,CACvBC,OAAQ,6CAER,cAAeH,EAAAA,cAAoBT,EAAYK,KAAM,CACvDM,wBAAyB,CACvBC,OAAQ,8CAER,oCAAqCH,EAAAA,cAAoBT,EAAYK,KAAM,CAC7EM,wBAAyB,CACvBC,OAAQ,mDAER,KAAM,KAAMH,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,wCAAyC,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAMM,EAAAA,cAAoBT,EAAYK,KAAM,CACrLM,wBAAyB,CACvBC,OAAQ,sDAER,sCAAuC,KAAMH,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,iBAAkBM,EAAAA,cAAoBT,EAAYK,KAAM,CAChJM,wBAAyB,CACvBC,OAAQ,oFAEP,KAAMH,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,SAAU,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAMM,EAAAA,cAAoBT,EAAYK,KAAM,CACjJM,wBAAyB,CACvBC,OAAQ,2GAER,wFACN,CAKA,MAJA,SAAoBb,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOc,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOM,EAAYL,EAAAA,cAAoBK,EAAWf,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BCtCA,MAAMS,EAAa,CACjBO,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYT,EAAAA,cAAoBU,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYR,EAAAA,cAAoB,OAAQ,KAAMQ,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,MAAME,EAAcD,EAAKE,IAAID,YAC7B,OAAOd,EAAAA,cAAoBgB,EAAAA,EAAQ,KAAMhB,EAAAA,cAAoB,KAAM,KAAMc,EAAYG,OAAQjB,EAAAA,cAAoB,MAAO,CACtHS,UAAW,cACVK,EAAYI,MAAQJ,EAAYI,KAAKC,OAAS,GAAKL,EAAYI,KAAKE,KAAIC,GAClErB,EAAAA,cAAoBsB,EAAAA,GAAM,CAC/BC,GAAI,SAASF,EAAG,IAChBG,SAAU,OACTxB,EAAAA,cAAoB,SAAU,KAAMqB,OACpCrB,EAAAA,cAAoByB,EAAAA,GAAa,CACpC1B,WAAYA,GACXS,GACL,CACe,SAASkB,EAAiBpC,GACvC,OAAOU,EAAAA,cAAoBW,EAAcrB,EAAOU,EAAAA,cAAoB2B,EAAqBrC,GAC3F,C","sources":["webpack:///./content/posts/2023/0318-imguizmo.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    span: \"span\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/CedricGuillemet/ImGuizmo\"\n  }, \"https://github.com/CedricGuillemet/ImGuizmo\")), \"\\n\", React.createElement(_components.p, null, \"Gizmo ライブラリ選定。\\n今回は、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ImGuizmo</code>\"\n    }\n  }), \" を選択。\"), \"\\n\", React.createElement(_components.h1, null, \"ImApp => glfw + imgui backend\"), \"\\n\", React.createElement(_components.p, null, \"example は ImGui の backend を使わずに独自のバックエンド ImApp を使用している。\"), \"\\n\", React.createElement(_components.p, null, \"これを \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">glfw</code>\"\n    }\n  }), \" に置き換ええつつ、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">imgui</code>\"\n    }\n  }), \" を git の docking branch で置き換えてみた \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">1.89.5 WIP</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.p, null, \"Windows モードは問題ないが、フルスクリーンモードの描画がずれた。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">VIEWPORT_MODE</code>\"\n    }\n  }), \" の ImDrawList の座標系に仕様変更があることが原因ぽい。\"), \"\\n\", React.createElement(_components.p, null, \"Window の描画範囲が \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(0, 0, io.DisplaySize.x, io.DisplaySize.y)</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, \"だったのが\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(viewport.Pos.x, viewport.Pos.y, viewport.Size.x, viewport.Size.y)</code>\"\n    }\n  }), \"\\nに変わった。座標系は WindowLocal から Desktop 全体になった。\\n・・・マルチモニターだとどうなるんだろうと思ったが、使うときになおせばよいか。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2023/0318-imguizmo.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","span","h1","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
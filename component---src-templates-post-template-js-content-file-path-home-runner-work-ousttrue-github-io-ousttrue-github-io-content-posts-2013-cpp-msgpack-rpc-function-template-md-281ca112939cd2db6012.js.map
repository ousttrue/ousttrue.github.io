{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-cpp-msgpack-rpc-function-template-md-281ca112939cd2db6012.js","mappings":"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","sources":["webpack:///./content/posts/2013/cpp_msgpack-rpc_function_template.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"(記事復旧のついでに少し修正)\"), \"\\n\", React.createElement(_components.p, null, \"msgpack-rpcのリクエストは、によると\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[type, msgid, method, params]</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, \"という形式なのでmethod名をstd::stringとしてparamsをstd::tupleとして得られる。\\nこれをサーバ側で如何に呼び出すかについて。\"), \"\\n\", React.createElement(_components.p, null, \"単純な実装だと以下のようにメソッド名をキーにして分岐することになる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">int and(int, int);\\n\\nclass dispatcher {\\n\\n    void dispatch(int msgid, const std::string &amp;method, const msgpack::object &amp;params)\\n    {\\n        if(method==“add”){ // 引数展開\\n            std::tuple t; params.convert(&amp;t);\\n\\n            // 関数実行\\n            int result=add(std::get&lt;0&gt;(t), std::get&lt;1&gt;(t));\\n\\n            // 結果のパッキング\\n            // response [type, msgid, error, result]\\n            msgpack::sbuffer response;\\n            msgpack::packer&lt;msgpack::sbuffer&gt; pk(&amp;response);\\n            pk.pack_array(4)\\n            pk.pack(1);\\n            pk.pack(msgid);\\n            pk.pack_nil();\\n            pk.pack(result);\\n\\n            // responseを送り返す\\n        }\\n        else{\\n            throw “unknown func”;\\n        }\\n    }\\n\\n};</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"引数展開、関数呼び出し、結果のパッキングと一連の操作を定型処理として括りだすと下記のように書ける。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">// ２引数展開用\\nclass dispatcher {\\n    // 実行\\n    void dispatch(int msgid, const std::string &amp;method, const msgpack::object &amp;params)\\n    {\\n        if(method==“add”)\\n        {\\n            msgpack::sbuffer response=unpack_exec_pack(msgid, add, params);\\n\\n            // responseを送り返す\\n        }\\n        else{\\n            throw “unknown func”;\\n        }\\n    }\\n};\\n\\n// ヘルパー\\ntemplate msgpack::sbuffer unpack_exec_pack(\\n    int msgid, R(*f)(A1, A2), const msgpack::object &amp;params)\\n{\\n    // 引数展開\\n    std::tuple t; params.convert(&amp;t);\\n\\n    // 関数実行\\n    R result=add(std::get&lt;0&gt;(t), std::get&lt;1&gt;(t));\\n\\n    // 結果のパッキング\\n    // response [type, msgid, error, result]\\n    msgpack::sbuffer response;\\n    msgpack::packer&lt;msgpack::sbuffer&gt; pk(&amp;response);\\n    pk.pack_array(4)\\n    pk.pack(1);\\n    pk.pack(msgid);\\n    pk.pack_nil();\\n    pk.pack(result);\\n\\n    return response;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"１引数関数から９引数くらいまでと返り値void版を作ってやればだいたいの関数を登録することができる。\"), \"\\n\", React.createElement(_components.p, null, \"さらに 関数の登録と実行を分けるべく次のように拡張した。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">class dispatcher {\\n    std::map m_map;\\n\\n    // 実行\\n    void dispatch(int msgid, const std::string &amp;method, const msgpack::object &amp;params)\\n    {\\n        std::function f=m_map.find(method);\\n        if(f!=m_map.end()){\\n            // 関数実行\\n            msgpack::sbuffer resonse=f(msgid, params);\\n\\n            // responseを送り返す\\n        }\\n        else{\\n            throw “unknown func”;\\n        }\\n    }\\n\\n    // 登録\\n    template void add_handler(const std::string &amp;method, R(*f)(A1, A2))\\n    {\\n        m_map[method]=f-&gt;msgpack::sbuffer{\\n\\n            // 引数展開\\n            std::tuple&lt;A1, A2&gt; t;\\n            params.convert(&amp;t);\\n\\n            // 実行\\n            R result=f(std::get&lt;0&gt;(t), std::get&lt;1&gt;(t));\\n\\n            // 結果のパッキング\\n            // response [type, msgid, error, result]\\n            msgpack::sbuffer response;\\n            msgpack::packer&lt;msgpack::sbuffer&gt; pk(&amp;response);\\n            pk.pack_array(4)\\n            pk.pack(1);\\n            pk.pack(msgid);\\n            pk.pack_nil();\\n            pk.pack(result);\\n\\n            return response;\\n        };\\n    }\\n};</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">msgpack->引数展開->c++関数呼び出し->msgpack</code>\"\n    }\n  }), \" への一連の操作を 同一のシグネチャの\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">std::function</code>\"\n    }\n  }), \" に 封じ込めることができる。\"), \"\\n\", React.createElement(_components.p, null, \"次にこれを関数ポインタ以外に関数オブジェクトを受け付けるように拡張したい。 まず、std::functionから実装。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">// std::function用\\ntemplate&lt;typname R, typename A1, typename A2&gt;\\nvoid add_handler(contt std::string &amp;method, std::function&lt;R(A1, A2)&gt; f)\\n{\\n    // 中身同じ\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"呼び出し時に \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">std::function</code>\"\n    }\n  }), \" を経由するようにすればあらゆる関数呼び出しを登録できる。 例えば、ラムダ関数も以下のように登録できる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">// ラムダ登録\\ndispatcher d;\\nd.add_handler(&quot;add&quot;, std::function&lt;int(int, int)&gt;(\\n    [](int a, int b)-&gt;int{ return a+b; }\\n));</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"しかし、どうせなら\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">dispatcher d;\\nd.add_handler(&quot;add&quot;, [](int a, int b)-&gt;int{ return a+b; });</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"と書きたい。\"), \"\\n\", React.createElement(_components.p, null, \"となると下記のような登録関数を書かねばならぬが関数のシグネチャがわからないので中身を記述することができない。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">// ラムダの登録\\ntemplate&lt;typname F&gt;\\nvoid add_handler(const std::string &amp;method, F f)\\n{\\n    // 型がわからぬ\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"ここで関数オブジェクトのoperator()へのポインタを型推論することでFのシグネチャを得ることができる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">template\\nvoid add_handler(const std::string &amp;method, F f, R(C::*)(A1, A2)const) {\\n    // 中身同じ\\n}\\n// ラムダの登録\\n// std::functionも受けられる\\n// std::bindは無理だった\\n// operator()がひとつしかない関数オブジェクトを受け付けられる？\\n\\ntemplate void add_handler(const std::string &amp;method, F f)\\n{\\n   // 上の関数で型推論させる\\n   add_handler(method, f, &amp;F::operator());\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"これでめでたくラムダも直接登録できるようになった。\\nただし、operator()のオーバーロードが解決できないらしくstd::bindが登録できない。 std::bindに関しては、ラムダで代用できるしstd::functionでラップできるのでおいておくことにした。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/cpp_msgpack-rpc_function_template.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1314],{4798:function(n,s,e){e.r(s),e.d(s,{default:function(){return h}});var a=e(1151),t=e(7294);function p(n){const s=Object.assign({p:"p",span:"span"},(0,a.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(s.p,null,"mmdbridge のビルドで必要になった Boost.Python 周り。\nどうやら、OpenEXR 界隈では結構使われている様子。\nAlembic とか USD とか。\nしかし Windows 版の Boost.Python はリンク周りにはまり要素が多いので、記録しといた。"),"\n",t.createElement(s.p,null,"Python へのリンク\npython_d.lib にリンクする必要がない場合\nPython 自体のデバッグをするのでなければ python_d にリンクする必要はない。\npython_d へのリンクの必要性は、リンクするライブラリを Debug で統一する必要の有無なのだけど、\npyd を作っているときは必要ない。python.exe ではなく python_d.exe から実行して何もかもが、Debug を参照するようにするのはつらい。そうではなくて自分のアプリが Python を内臓する場合は、python_d にリンクした方がよい。Debug と Release の混在によるエラーが出る可能性があるので。で、mmdbridge は後者なので python_d をリンクすることに妥当性がある。\npython_d.lib へのリンクを防止する"),"\n",t.createElement(s.p,null,"https://stackoverflow.com/questions/16200997/why-doesnt-include-python-h-work"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_DEBUG</span></span>\n  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">_DEBUG</span></span>\n  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Python.h></span></span>\n  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_DEBUG</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>\n  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Python.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"これが、常套手段になるようで pyd の開発時には入れておくとよい。\nBoost.Python が python_d にリンクする"),"\n",t.createElement(s.p,null,"boost-1.64.0\npython-3.5.3"),"\n",t.createElement(s.p,null,"debug 版の boost をビルドしたのだが、よく見ると Release 版の python35.dll の方がリンクされていた。がんばって、DEBUG マクロの定義等を調べたのだがなかなかわからなかった。どうやらどこかで undef _DEBUG されているらしいと当たりがついた。"),"\n",t.createElement(s.p,null,"boost/python/detail/wrap_python.hpp"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_DEBUG</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ifndef</span> <span class="token expression">BOOST_DEBUG_PYTHON</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>  <span class="token directive keyword">ifdef</span> <span class="token expression">_MSC_VER</span></span>\n    <span class="token comment">// VC8.0 will complain if system headers are #included both with</span>\n    <span class="token comment">// and without _DEBUG defined, so we have to #include all the</span>\n    <span class="token comment">// system headers used by pyconfig.h right here.</span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;wchar.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;basetsd.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;io.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;limits.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;float.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>  <span class="token directive keyword">endif</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>  <span class="token directive keyword">undef</span> <span class="token expression">_DEBUG </span><span class="token comment">// Don\'t let Python force the debug library just because we\'re debugging.</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span>  <span class="token directive keyword">define</span> <span class="token macro-name">DEBUG_UNDEFINED_FROM_WRAP_PYTHON_H</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">endif</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"python_d.lib にリンクするには"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">b2 --with-python --debug-configuration python-debugging=on</code></pre></div>'}}),"\n",t.createElement(s.p,null,'として\nlibboost_python3-vc140-mt-gyd-1_64\nを作成する。gyd の y が python debug らしい。\nBoost.Python へのリンク\nboost はどうやってリンクするライブラリの名前を決めているのか\n#pragma comment(lib,"wsock32.lib")'),"\n",t.createElement(s.p,null,"どこかに#pragma が記述されているはずだが。"),"\n",t.createElement(s.p,null,"https://stackoverflow.com/questions/16200997/why-doesnt-include-python-h-work\nhttp://d.hatena.ne.jp/torutk/20121004/p1"),"\n",t.createElement(s.p,null,"autolink らしい。自動的に有効になる。"),"\n",t.createElement(s.p,null,"http://www.boost.org/doc/libs/1_48_0/boost/config/auto_link.hpp"),"\n",t.createElement(s.p,null,"pragma リンクの名前が一致しないんだけど"),"\n",t.createElement(s.p,null,"libboost_python3-vc140-mt-gd-1_64 にリンクしたいのだが libboost_python-vc140-mt-gd-1_64 にリンクしようとする\nboost_python3_vc140-mt-gd-1_64 にリンクしたいのいだが libboost_python-vc140-mt-gd-1_64 にリンクしようとする"),"\n",t.createElement(s.p,null,"BOOST_ALL_NO_LIB"),"\n",t.createElement(s.p,null,"を定義して autolink を阻止して自分でリンクする。\npython3 はどうやって決まるのか\nむしろ boost_python3 が BOOST_LIB_NAME から決まる。\nBOOST_LIB_NAME は、boost/python/detail/config.hpp で下記の記述がある。\nboost-1.61.0\n#define BOOST_LIB_NAME boost_python"),"\n",t.createElement(s.p,null,"boost_python3.dll と boost_python.dll は両方 Python3 にリンクされとった\nなんだってー。つまり、boost は複数の Python に対するビルド結果を共存させることは考慮されていないということだった。なるほど\nRelease ビルドと Debug ビルドは同じ Release の dll にリンクするべき\nDebug 版であっても、boost_python.dll も同じ Release 版にリンクされる。\nAutoLink に逆らわない方がよい。\nCMake の FIND_PACKAGE(BOOST)による Boost_LIBRARIES は使わない方がよいかもしれない。デバッグの方にリンクされてはまりうる。ていうか、はまった。\n結論として、AutoLink 邪魔だーから AutoLink に従えとなった。\npybind を使おう\nヘッダオンリーなので。リンク無いし。"),"\n",t.createElement(s.p,null,"https://github.com/pybind/pybind11"),"\n",t.createElement(s.p,null,"既存の Boost.Python を使ったコードでも、pybind は Boost.Python と似た API になっているので簡単に置き換えられる。"),"\n",t.createElement(s.p,null,"pybind11 で C++の関数を python から使う"))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,a.ah)(),n.components);return s?t.createElement(s,n,t.createElement(p,n)):p(n)},c=e(8678),l=e(4160),r=e(8736);const i={code:n=>{let{children:s,className:e}=n;return e?t.createElement(r.Z,{className:e},s):t.createElement("code",null,s)}};function d(n){let{data:s,children:e}=n;const p=s.mdx.frontmatter;return t.createElement(c.Z,null,t.createElement("h1",null,p.title),t.createElement("div",{className:"tags-index"},p.tags&&p.tags.length>0&&p.tags.map((n=>t.createElement(l.rU,{to:"/tags/"+n+"/",itemProp:"url"},t.createElement("button",null,n))))),t.createElement(a.Zo,{components:i},e))}function h(n){return t.createElement(d,n,t.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2017-04-boost-python-md-8f49687935eb2f02161c.js.map
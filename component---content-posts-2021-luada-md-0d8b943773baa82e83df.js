"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5463],{6842:function(e,n,t){t.r(n);var l=t(1151),a=t(7294);function u(e){const n=Object.assign({p:"p",code:"code",h1:"h1",h2:"h2",ul:"ul",li:"li",pre:"pre",h3:"h3",a:"a"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"vscode の lua デバッガーに"),"\n",a.createElement(n.p,null,"https://marketplace.visualstudio.com/items?itemName=tomblind.local-lua-debugger-vscode を使っていたのだが、"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"launch.json")," の ",a.createElement(n.code,null,"args")," に ",a.createElement(n.code,null,"\\\\")," が入るとエラーで起動できない。\nWindows で作業しているので、稀によくファイルパスの指定に ",a.createElement(n.code,null,"\\\\")," が入る。"),"\n",a.createElement(n.h1,null,"DebugAdapter を作っていたら、直し方がわかった"),"\n",a.createElement(n.p,null,"https://github.com/ousttrue/local-lua-debugger-vscode/commit/0f3974b73964b2e34f90a21de9757a57d6746eb4"),"\n",a.createElement(n.h2,null,"PR"),"\n",a.createElement(n.p,null,"https://github.com/tomblind/local-lua-debugger-vscode/pull/37"),"\n",a.createElement(n.p,null,"Linux では動かんかったらしく、別の方法で修正してくれた。"),"\n",a.createElement(n.p,null,"👍 ",a.createElement(n.code,null,"0.2.2")," https://github.com/tomblind/local-lua-debugger-vscode/blob/master/CHANGELOG.md"),"\n",a.createElement(n.h1,null,"自前で ",a.createElement(n.code,null,"DebugAdapter")," 作ってみることにした。"),"\n",a.createElement(n.p,null,"https://github.com/ousttrue/luada"),"\n",a.createElement(n.p,null,"途中まで実装したのだが、"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"luajit.exe + luada.lua"),"\n"),"\n",a.createElement(n.p,null,"という構成よりは、"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"luada.exe"),"\n"),"\n",a.createElement(n.p,null,"の方が取り回しがよくて、それなら lua 成分をもっと減らして JSON-RPC 制御も ",a.createElement(n.code,null,"c++")," なり ",a.createElement(n.code,null,"rust")," なりにして\nlua 埋め込み型の exe が作りやすそう。\n元々、 スタンドアロンの lua インタプリタと組み合わせて使う lua スクリプトという方向性で実装していたのだが、\n",a.createElement(n.code,null,"luajit-2.1.0-beta3")," 一辺倒になりつつあるので気分が変わってきたのであった。\nこれに関しては、今の構成でできるところまでやってみよう。"),"\n",a.createElement(n.h1,null,"VSCode の Extension を作る"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://code.visualstudio.com/api/get-started/your-first-extension"),"\n"),"\n",a.createElement(n.p,null,"手順通りに初期化した。npm は最新版に更新したほうがよいぽい。"),"\n",a.createElement(n.h1,null,"MockDebug"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://code.visualstudio.com/api/extension-guides/debugger-extension"),"\n"),"\n",a.createElement(n.p,null,"を読む。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/microsoft/vscode-mock-debug"),"\n"),"\n",a.createElement(n.p,null,"というサンプルがある。"),"\n",a.createElement(n.p,null,"いくつかの機能をまとめて提供する必要がありそう。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"launch.json の設定"),"\n",a.createElement(n.li,null,"DebugAdapter 本体"),"\n",a.createElement(n.li,null,"DebugAdapter を起動する"),"\n"),"\n",a.createElement(n.h1,null,"実装してみる"),"\n",a.createElement(n.h2,null,"Extension の activate"),"\n",a.createElement(n.p,null,"適当にイベントを登録して"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-json"},'    // package.json\n    "activationEvents": [\n        "onDebug",\n        "onDebugInitialConfigurations",\n        "onDebugDynamicConfigurations",\n        "onDebugResolve:lua",\n        "onLanguage:lua"\n    ],\n')),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"activate")," されることを確認"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ts"},"// src/extension.ts\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('activate luada');\n}\n")),"\n",a.createElement(n.h2,null,"Launch"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-json"},'    "contributes": {\n        "breakpoints": [\n            {\n                "language": "lua"\n            }\n        ],\n        "debuggers": [\n            {\n                "type": "luada",\n                "label": "LuaDA",\n                "languages": [\n                    "lua"\n                ],\n                // launch.json のテンプレート\n                "initialConfigurations": [\n                    {\n                        "type": "luada",\n                        "name": "launch luada",\n                        "request": "launch",\n                        "program": "${workspaceFolder}/main.lua",\n                        "args": []\n                    }\n                ],\n                // request: launch に対して可能な property の定義\n                "configurationAttributes": {\n                    "launch": {\n                        "properties": {\n                            "program": {\n                                "type": "string",\n                                "markdownDescription": "Lua program to debug - set this to the path of the script",\n                                "default": "${workspaceFolder}/main.lua"\n                            },                            \n                            "arg": {\n                                "type": "array",\n                                "markdownDescription": "Command line argument, arg[1] ... arg[n]",\n                                "default": []\n                            }                            \n                        }\n                    }\n                }\n            }\n        ]\n    },\n')),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"activate で DebugAdapterDescriptorFactory を登録"),"\n",a.createElement(n.li,null,"launch で createDebugAdapterDescriptor を実行する"),"\n"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"src/extensions.ts")),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ts"},"import * as vscode from 'vscode';\n\n\nfunction createDebugAdapterDescriptorFactory(context: vscode.ExtensionContext): vscode.DebugAdapterDescriptorFactory {\n    return {\n        createDebugAdapterDescriptor(\n            session: vscode.DebugSession,\n            executable: vscode.DebugAdapterExecutable | undefined\n        ): vscode.ProviderResult<vscode.DebugAdapterDescriptor> {\n            console.log('launch luada');\n            const runtime = \"exe\";\n            const runtimeArgs: string[] = [];\n            //\n            // デバッグアダプターを起動する\n            // 起動したアダプターと vscode は、標準入出力で JSON-RPC により DebugAdapterProtocol で通信する。\n            //\n            return new vscode.DebugAdapterExecutable(runtime, runtimeArgs);\n        }\n    };\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('activate luada');\n    context.subscriptions.push(vscode.debug.registerDebugAdapterDescriptorFactory('luada', createDebugAdapterDescriptorFactory(context)));\n}\n\nexport function deactivate() { }\n")),"\n",a.createElement(n.h2,null,"Debug Adapter の実装"),"\n",a.createElement(n.p,null,"https://microsoft.github.io/debug-adapter-protocol/specification"),"\n",a.createElement(n.p,null,"を見て粛々と実装する。"),"\n",a.createElement(n.h3,null,a.createElement(n.a,{href:"https://microsoft.github.io/debug-adapter-protocol/specification#Events_Output"},"Output Event")),"\n",a.createElement(n.p,null,"vscode の DebugConsole に出力されるので早期に作ると print debug の助けになる。"),"\n",a.createElement(n.h3,null,"Logger"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"DebugAdapterProtocol のやりとりすべてを記録する機能をアダプター側で作るべし。無いとデバッグ困難に。"),"\n"),"\n",a.createElement(n.p,null,"例"),"\n",a.createElement(n.p,null,"https://github.com/Microsoft/vscode-debugadapter-node/blob/main/adapter/src/loggingDebugSession.ts"),"\n",a.createElement(n.h2,null,"VSIX に出力"),"\n",a.createElement(n.p,null,"https://code.visualstudio.com/api/working-with-extensions/publishing-extension"),"\n",a.createElement(n.p,null,"vsce を使う。"),"\n",a.createElement(n.p,null,"package.json に追加。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-json"},'    "publisher": "ousttrue",\n    "repository": {\n        "type": "git",\n        "url": "https://github.com/ousttrue/luada.git"\n    },\n')),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"$ npx vsce package\n")),"\n",a.createElement(n.h1,null,"参考"),"\n",a.createElement(n.h2,null,"https://github.com/actboy168/lua-debug"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"vscode.DebugAdapterExecutable"),"\n"),"\n",a.createElement(n.h2,null,"https://github.com/tomblind/local-lua-debugger-vscode"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"vscode.DebugAdapterServer"),"\n",a.createElement(n.li,null,"TypeScript で vscode.DebugAdapterServer を new"),"\n",a.createElement(n.li,null,"vscode と DebugAdapterServer が DAP で通信"),"\n",a.createElement(n.li,null,"DebugAdapterServer が lua を spawn もしている"),"\n"))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(u,e)):u(e)}},1151:function(e,n,t){t.d(n,{ah:function(){return u}});var l=t(7294);const a=l.createContext({});function u(e){const n=l.useContext(a);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---content-posts-2021-luada-md-0d8b943773baa82e83df.js.map
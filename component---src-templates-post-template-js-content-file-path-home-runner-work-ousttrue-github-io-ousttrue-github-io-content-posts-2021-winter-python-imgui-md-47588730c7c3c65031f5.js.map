{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-winter-python-imgui-md-47588730c7c3c65031f5.js","mappings":"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","sources":["webpack:///./content/posts/2021/winter/python_imgui.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    span: \"span\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"名付けて cydeer\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/cydeer\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">python</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cython</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">dear imgui</code>\"\n    }\n  }), \" の組み合わせで名前を付けようと思ったのだが、既に先人がいっぱいいて名前が被るので適当に決めた。🦌\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/HankiDesign/awesome-dear-imgui#languages\"), \"\\n\", React.createElement(_components.p, null, \"最初、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">DearPyGui</code>\"\n    }\n  }), \" のサイトが強そうだったので試そうと思ったのだけど用途が違いそうだった。\\n次に、しばらく \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pyimgui</code>\"\n    }\n  }), \" を使っていい感じだったので、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">docking</code>\"\n    }\n  }), \" ブランチ対応を見たら開発ブランチならば動いたので、自前ビルドを改造して使っていた。\\nPR も送ってみたのだが、\\nどうせなら自分で作ろうという機運が高まったので、作った。\\ncydeer は pyOpenGL とともに使う \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">薄い</code>\"\n    }\n  }), \" ImGui ラッパーという路線である。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ctypes</code>\"\n    }\n  }), \" を併用することでポインタを直接扱う。 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">camel case</code>\"\n    }\n  }), \" と \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">snake case</code>\"\n    }\n  }), \" の変換を含めて何も変えない。\"), \"\\n\", React.createElement(_components.p, null, \"| lib               | binder                                           | imgui                | window & graphincs                       | コメント                                                              |\\n|-------------------|--------------------------------------------------|----------------------|------------------------------------------|-----------------------------------------------------------------------|\\n| (python)cydeer    | cython + ctypes(generate using libclang.cindex ) | imgui docking branch | glfw など + pyOpenGL でがんばる          | 可能な限りAPIの改変をしない。ポインタは ctypes で作る                 |\\n| (python)pyimgui   | cython                                           | imgui                | glfw など + pyOpenGL でがんばる          | ポインタ引数(p_openなど)による返り値を、tuple による複値で表現        |\\n| (python)DearPyGui | 未確認                                           | 未確認               | DirectX11。python からアクセスできない？ | imgui をラップして独自 API。python で OpenGL するという目的には使えぬ |\\n| (c)cimgui         | 未確認                                           | 未確認               |                                          | imgui を \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">extern C</code>\"\n    }\n  }), \" にラップしたもの。他言語バインド向け              |\\n| (rust)imgui-rs    | 未確認                                           | 未確認               |                                          | builder パターンで Default 引数を代替                                 |\"), \"\\n\", React.createElement(_components.p, null, \"imgui ラップには、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">関数オーバーロード</code>\"\n    }\n  }), \" , \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">デフォルト引数</code>\"\n    }\n  }), \" , \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">メンバー関数</code>\"\n    }\n  }), \" という難所がある。\\n要するに \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">c++</code>\"\n    }\n  }), \" 要素なのだけど、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">c++</code>\"\n    }\n  }), \" 要素含めての imgui の使い勝手なので。各言語バインディングで悩ましいところです。\\nたとえば、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">rust</code>\"\n    }\n  }), \" は関数オーバーロードやデフォルト引数が無いので API を変えてます。\"), \"\\n\", React.createElement(_components.p, null, \"C# とかでも、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">const ImVec2 pos&amp; = ImVec2(0, 0)</code>\"\n    }\n  }), \" のような引数を解決するのは手間がかかったりする。\\nDLLImport 定義に対するデフォルト引数では解決できないので、 C# 側で一時変数を作ってポインターを取得する必要がある。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">デフォルト引数</code>\"\n    }\n  }), \" は cython で普通に解決した。\\nclang.cindex から値を取れれば難しくない。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">メンバー関数</code>\"\n    }\n  }), \" は \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ctypes</code>\"\n    }\n  }), \" に \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cython</code>\"\n    }\n  }), \" のメソッドを定義して、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">self</code>\"\n    }\n  }), \" を \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this pointer</code>\"\n    }\n  }), \" に cast して呼び出すコードを作った(ImGuiFontAtlas)。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">関数オーバーロード</code>\"\n    }\n  }), \" は \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cython</code>\"\n    }\n  }), \" でディスパッチするのはつらいので、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MenuItem_2</code>\"\n    }\n  }), \" のような suffix をつけて人間が選ぶようにした。\"), \"\\n\", React.createElement(_components.p, null, \"忘れていたが、もっとも問題になるのが \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">構造体の値渡し・返し</code>\"\n    }\n  }), \" だった(C++に限らない？)。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">D言語</code>\"\n    }\n  }), \" , \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">rust</code>\"\n    }\n  }), \" ともにこれができない(vcのコンパイラと互換性がない？)ので注意が必要だった。コンパイルは通るが動作がおかしかったような。\\nImGui の ImVec2 を値返しする関数でヒットする。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cydeer</code>\"\n    }\n  }), \" は、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cython</code>\"\n    }\n  }), \" を採用したので、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cython</code>\"\n    }\n  }), \" 関数の出口で python 型に入れ替えるだけである。\"), \"\\n\", React.createElement(_components.p, null, \"あと、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cydeer</code>\"\n    }\n  }), \" は \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pyi</code>\"\n    }\n  }), \" 標準装備でいい感じである(一部実際のpython型と齟齬があるが・・・)。\"), \"\\n\", React.createElement(_components.h2, null, \"実装上の課題\"), \"\\n\", React.createElement(_components.p, null, \"cython の cimport の扱いがやっかいで、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">imgui</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">imgui.internal</code>\"\n    }\n  }), \" に分割しようとするとうまくいかなかった。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cydeer</code>\"\n    }\n  }), \" に関しては巨大な単一のモジュールで行くのが無難かもしれない。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">internal</code>\"\n    }\n  }), \" やノードエディターとか追加するときに分けたいのだけど。\"), \"\\n\", React.createElement(_components.p, null, \"現状、Windows + python-3.10 しか試していない。\\nWindows11 の wslg + wayland で動くようにしたい。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/winter/python_imgui.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","span","h2","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
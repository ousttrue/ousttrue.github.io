"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2034],{9629:function(n,e,u){u.r(e);var t=u(1151),c=u(7294);function o(n){const e=Object.assign({p:"p"},(0,t.ah)(),n.components);return c.createElement(e.p,null,"Oculus来たー\n6月10くらいにぽちってから２週間くらいで到着。いいタイミングに発注したらしい\nOculusことはじめ\noculus sdk downloadあたりで検索すると見つかるのでいただいてくる。\n特にログインとかアカウントとかは必要ない。\nSDKにはlibSDKとそれを使ったサンプルがvcプロジェクトで入っている。\noculusの組み込みには２段階あって、ひとつは両目向けに違うレンダリングをする作業、\n２つめはOculusのジャイロセンサの値を受け取ってカメラの方向を対応させる作業となっている。\nひとつめのステレオレンダリングに関しては、左目用と右目用にオフスクリーンレンダリングして\nそれを表示するときにシェーダーで歪ませるというものになる。 歪ませ方は、\nRenderTiny_D3D1X_Device.cpp や Oculus_SDK_Overview.pdfに書いてある。\nOpenCVとかのカメラ係数に似ているような気もするが同じものかは確認していない。\nふたつめの方は、LibOVRに任せると簡単でusbのHIDデバイスから値を随時取得して\nカメラ姿勢に適用するだけ。\nLibOVRはこのジャイロの値取得とDXUT的な3Dフレームワークが混合しているので\nジャイロの方だけを抽出して最小限にしたい。\nあと自分のコードに混ぜて公開していいのかライセンス的によくわからん。\nとりあえずglut化してみよう\nはじめに軽くTinyRoomをglutに移植しようと思ったらdxutみたいのがくっついていて途中で投げ出したｗ。\n手持ちで、OpenGLシェーダーとかオフスクリーンレンダリングを扱うシステムが無いので\nそこから作るのが少し時間がかかるので後回しに。\nIrrlichtのカメラをOculus化\n方向転換して、ベースにlibOVRを合体した。\ngithubのものはoculusのステレオレンダリングは実装済みなのでgyroを合成する件のみ。\nIrrlichtのカメラ行列の制御がよくわからぬが一応表示。\nあとでICameraSceneNodeを継承して作り直そう。\nmikuさんprprな感じになるにはもう少しかかるな・・・")}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?c.createElement(e,n,c.createElement(o,n)):o(n)}},1151:function(n,e,u){u.d(e,{ah:function(){return o}});var t=u(7294);const c=t.createContext({});function o(n){const e=t.useContext(c);return t.useMemo((()=>"function"==typeof n?n(e):{...e,...n}),[e,n])}}}]);
//# sourceMappingURL=component---content-posts-2013-06-24-oculus-kita-md-0bc886b35874ee82c31b.js.map
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-04-mmdbridge-md-3db6b2d569c86613e236.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,4BAA6B,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,yPAA0P,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,kEAAmE,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,0OAA2O,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,sQAAuQ,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,0QAA2Q,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,yCAA0C,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,qFAAsF,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,yEAA0E,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,UAAW,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,kOAAmO,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,kCAChnE,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCPA,SAASU,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOJ,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMK,EAAKE,IAAIC,YAAYC,OAAQT,EAAAA,cAAoBU,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBlB,GACvC,OAAOO,EAAAA,cAAoBG,EAAcV,EAAOO,EAAAA,cAAoBY,EAAqBnB,GAC3F,C,4HCuBO,MAAMoB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBf,GAC/B,MAAMgB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfd,EACFA,EAAWgB,GAGb,IAAIA,KAAsBhB,IAChC,CAACgB,EAAmBhB,GACzB,CAGA,MAAMiB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACX,EAAU,SAAEO,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAflB,EACHA,EAAW,CAAC,GACZA,GAAciB,EAEJF,EAAiBf,GAG5B,gBACLc,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2017/04/mmdbridge.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"MmdBridgeがよさげなのでビルドしてみる。\"), \"\\n\", React.createElement(_components.p, null, \"最初はプロジェクトと同じPython-3.4 + VS2010でがんばったのだが、 Windows10(64bit)でVS2010(64bit)環境を作るのが困難であることがわかった。ちょっと違うがPython-3.5 + VS2015でやってみる。\\nPython3.5のビルド(不要)\\nDebug版でもBoost.PythonがRelease版のPython.dllにリンクするとわかった。\\n普通のインストーラーでインストールするとデバッグ版が手に入らぬ。せっかくなので自前ビルド。\"), \"\\n\", React.createElement(_components.p, null, \"Windows上でPython3.5をビルドする\\nBoost.PythonのデバッグビルドがリンクするPython.dll\"), \"\\n\", React.createElement(_components.p, null, \"Boost.Python\\n手元のboost-1.61.0を使う。\\n$HOME/user-config.jam\\nusing python\\n: 3.5.3\\n: D:\\\\usr\\\\src\\\\Python-3.5.3\\\\PCBuild\\\\python # cmd-or-prefix\\n: D:\\\\usr\\\\src\\\\Python-3.5.3\\\\include\\n: D:\\\\usr\\\\src\\\\Python-3.5.3\\\\PCBuild\\\\amd64\\n;\"), \"\\n\", React.createElement(_components.p, null, \"memo: Jamroot.jam\\nboost_1_61_0> bootstrap.bat\\nboost_1_61_0> b2 -j2 --with-python3 address-model=64 toolset=msvc-14.0 threading=multi variant=debug,release link=static runtime-link=static,shared --stagedir=stage/x86_64 include=D:\\\\usr\\\\src\\\\Python-3.5.3\\\\PC\"), \"\\n\", React.createElement(_components.p, null, \"include=D:\\\\usr\\\\src\\\\Python-3.5.3\\\\PCはpyconfig.hの場所。user-config.jamに2個目のincludeパスを記述する方法がわからなかったのでコマンドライン投入。\\nDXSDK_Jun10のインストール\\nd3dx9のあるDirectXはダウンロードしてインストールする必要がある。 April 2006を使っているそうなのだけどネット上に見つからなかったので手に入ったバージョンを使った。ビルド時にエラーが出るので下記の記事に沿ってd3dx9core.hを修正する。\"), \"\\n\", React.createElement(_components.p, null, \"https://gist.github.com/t-mat/1540248\"), \"\\n\", React.createElement(_components.p, null, \"VS2015\\npremake5でVS2015向けにプロジェクトを作ってビルドしたところkンパイルエラーになった。VS2015固有の問題のようなのでコードを修正。\"), \"\\n\", React.createElement(_components.p, null, \"VS 2015 で std::codecvt_utf8 がリンクできない場合の対処法\\nsrc/umbase/UMStringUtil.h\"), \"\\n\", React.createElement(_components.p, null, \"動作確認する\"), \"\\n\", React.createElement(_components.p, null, \"Mmdを展開する\\nmmdBridgeのd3d9.dllとd3dx9_43.dllをMmdディレクトリにコピーする(ビルド結果)\\nmmdBridgeのpythonスクリプトをMmdディレクトリにコピーする(mmdbridge/Release/Win32フォルダにある)\\npython.dllをMmdディレクトリにコピーする。もしくはパスを通す(普通にインストールしたPython3でよい)\\nMmdディレクトリにoutディレクトリを作成する\"), \"\\n\", React.createElement(_components.p, null, \"以上で、mmdbridge_vmd.pyの動作を確認できた。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/04/mmdbridge.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
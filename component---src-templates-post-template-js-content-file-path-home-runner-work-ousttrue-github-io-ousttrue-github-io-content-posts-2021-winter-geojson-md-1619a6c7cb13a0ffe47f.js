"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9096],{5072:function(e,n,t){t.r(n),t.d(n,{default:function(){return i}});var l=t(1151),o=t(7294);function r(e){const n=Object.assign({h1:"h1",p:"p",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",code:"code",pre:"pre",h3:"h3",a:"a"},(0,l.ah)(),e.components);return o.createElement(o.Fragment,null,o.createElement(n.h1,null,"geojson"),"\n",o.createElement(n.p,null,"既存のライブラリが重厚長大なものが多いのだけど、\nOpenGL や SVG のような二次元のベクター描画で簡単に済ませたい。\nその方向で調査。"),"\n",o.createElement(n.h2,null,"format"),"\n",o.createElement(n.ul,null,"\n",o.createElement(n.li,null,"https://datatracker.ietf.org/doc/html/rfc7946"),"\n",o.createElement(n.li,null,"https://ja.wikipedia.org/wiki/GeoJSON","\n",o.createElement(n.ul,null,"\n",o.createElement(n.li,null,"https://en.wikipedia.org/wiki/GeoJSON"),"\n"),"\n"),"\n"),"\n",o.createElement(n.blockquote,null,"\n",o.createElement(n.p,null,"GeoJSON is a geospatial data"),"\n"),"\n",o.createElement(n.p,null,"以下のような様式。\n",o.createElement(n.code,null,"Feature")," の中に ",o.createElement(n.code,null,"Geometry")," が入っている。"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-json"},'{\n    "type": "FeatureCollection",\n    "features": [\n        {\n            "type": "Feature",\n            "properties": {},\n            "geometry": {}\n        }\n    ]\n}\n')),"\n",o.createElement(n.p,null,"| Geometry Object    |\n|--------------------|\n| Point              |\n| MultiPoint         |\n| LineString         |\n| MultiLineString    |\n| Polygon            |\n| MultiPolygon       |\n| GeometryCollection |"),"\n",o.createElement(n.h3,null,"Point"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-json"},'{\n    "type": "Point",\n    "coordinates": [100.0, 0.0]\n}\n')),"\n",o.createElement(n.h3,null,"Polygon"),"\n",o.createElement(n.p,null,"穴が空いている場合は、複数の頂点リストを保持する。"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-json"},'// No holes:\n\n{\n    "type": "Polygon",\n    "coordinates": [\n        [\n            [100.0, 0.0],\n            [101.0, 0.0],\n            [101.0, 1.0],\n            [100.0, 1.0],\n            [100.0, 0.0]\n        ]\n    ]\n}\n\n// with holes:\n\n{\n    "type": "Polygon",\n    "coordinates": [\n        [\n            [100.0, 0.0],\n            [101.0, 0.0],\n            [101.0, 1.0],\n            [100.0, 1.0],\n            [100.0, 0.0]\n        ],\n        [\n            [100.8, 0.8],\n            [100.8, 0.2],\n            [100.2, 0.2],\n            [100.2, 0.8],\n            [100.8, 0.8]\n        ]\n    ]\n}\n')),"\n",o.createElement(n.h2,null,"read"),"\n",o.createElement(n.p,null,"python で素直に読んでみた。"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-python"},'import pathlib\nimport json\n\n\ndef process_geometry(geometry: dict):\n    match geometry:\n        case {"type": "MultiPolygon", "coordinates": coordinates}:\n            print(f\'{len(coordinates)} polygon\')\n            for coord in coordinates:\n                print(f\'  {len(coord)} rings\')\n                for x in coord:\n                    print(f\'    {len(x)} points\')\n\n\ndef process_feature(feature: dict):\n    match feature:\n        case {"type": "Feature", "properties": props, "geometry": geometry}:\n            print(props)\n            process_geometry(geometry)\n\n        case _:\n            raise NotImplementedError()\n\n\ndef main(path: pathlib.Path):\n    data = json.loads(path.read_bytes())\n    match data:\n        case {"type": "FeatureCollection", "features": features}:\n            for feature in features:\n                process_feature(feature)\n\n\nif __name__ == \'__main__\':\n    main(pathlib.Path(\'japan.geo.json\'))\n')),"\n",o.createElement(n.p,null,o.createElement(n.code,null,"jpan.geo.json")," は、 https://github.com/dataofjapan/land です。\n実行結果。"),"\n",o.createElement(n.pre,null,o.createElement(n.code,null,"{'nam': 'Kyoto Fu', 'nam_ja': '京都府', 'id': 26}\n4 polygon\n  1 rings\n    1235 points\n  1 rings\n    6 points\n  1 rings\n    8 points\n  1 rings\n    6 points\n")),"\n",o.createElement(n.p,null,"なるほど。"),"\n",o.createElement(n.h2,null,"GL_LINE_LOOP"),"\n",o.createElement(n.p,null,"単純に ",o.createElement(n.code,null,"GL_LINE_LOOP")," で描画できそうとわかった。"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-python"},'def process_geometry(geometry: dict) -> Polygon:\n    match geometry:\n        case {"type": "Polygon", "coordinates": polygon}:\n            assert len(polygon) == 1\n            array = (float2 * len(polygon[0]))()\n            for i, (x, y) in enumerate(polygon[0]):\n                array[i] = float2(x, y)\n            return Polygon(array, [SubMesh(0, len(array))])\n\n        case {"type": "MultiPolygon", "coordinates": polygons}:\n            array = (float2 * sum(len(polygon[0]) for polygon in polygons))()\n            i = 0\n            submeshes = []\n            for polygon in polygons:\n                assert len(polygon) == 1\n                submeshes.append(SubMesh(i, len(polygon[0])))\n                for (x, y) in polygon[0]:\n                    array[i] = float2(x, y)\n                    i += 1\n            return Polygon(array, submeshes)\n\n        case _:\n            raise NotImplementedError()\n')),"\n",o.createElement(n.p,null,o.createElement(n.code,null,"orthogonal")," の方で適当にビューポートを ",o.createElement(n.code,null,"(140, 35)")," というような適当な経度緯度に調整してやればよさそう。"),"\n",o.createElement(n.h2,null,"data"),"\n",o.createElement(n.ul,null,"\n",o.createElement(n.li,null,"https://github.com/dataofjapan/land"),"\n",o.createElement(n.li,null,"http://geojson.io/"),"\n"),"\n",o.createElement(n.h2,null,"参考"),"\n",o.createElement(n.ul,null,"\n",o.createElement(n.li,null,o.createElement(n.a,{href:"https://qiita.com/kkdd/items/416b955fb2d3e1327edc"},"GeoJSON (RFC7946) 仕様の注意点など")),"\n",o.createElement(n.li,null,"https://github.com/jeremyfromearth/cinder-geojson-experiments"),"\n",o.createElement(n.li,null,"https://github.com/soolmaz-mk/Atlasi"),"\n"))}var a=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?o.createElement(n,e,o.createElement(r,e)):r(e)};t(8678);function c(e){let{data:n,children:t}=e;return o.createElement(o.Fragment,null,o.createElement("h1",null,n.mdx.frontmatter.title),o.createElement(l.Zo,null,t))}function i(e){return o.createElement(c,e,o.createElement(a,e))}},8678:function(e,n,t){t(7294)},1151:function(e,n,t){t.d(n,{Zo:function(){return c},ah:function(){return r}});var l=t(7294);const o=l.createContext({});function r(e){const n=l.useContext(o);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const a={};function c({components:e,children:n,disableParentContext:t}){let c;return c=t?"function"==typeof e?e({}):e||a:r(e),l.createElement(o.Provider,{value:c},n)}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-winter-geojson-md-1619a6c7cb13a0ffe47f.js.map
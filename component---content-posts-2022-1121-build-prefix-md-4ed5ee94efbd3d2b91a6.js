"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3349],{2448:function(e,n,t){t.r(n);var l=t(1151),c=t(7294);function o(e){const n=Object.assign({p:"p",code:"code",pre:"pre"},(0,l.ah)(),e.components);return c.createElement(c.Fragment,null,c.createElement(n.p,null,"GStreamer をビルドする過程で ",c.createElement(n.code,null,"meson")," を調べたら、存外に良かった。\npython なので、CMake と比べてデバッガをアタッチできるのが圧倒的に楽。\nCMake はステップ実行とかできないからね。"),"\n",c.createElement(n.p,null,"成り行きで GStreamer に続いて、 Gtk4, PyGObject とかをビルドしていたら、\nGtk4 もわりと面白そうなことがわかった。\n昔、Windows では扱いが面倒だった GLArea がさくっと動いた。\nさらに Gtk4 で新しくできた Gsk 層が 2D の SceneGraph ぽくて、\nPyOpenGL と連携して遊べるかもしれない。\nNodeEditor とか Timeline(KeyFrame) Editor 作れないかなぁ。\nPyGObject まわりは、gir(xml) から Python の型ヒント(pyi stub) を生成することで、\nLanguageServer のインテリセンスをそれなりに効かせることができた。\n最近の python では、 ",c.createElement(n.code,null,"Qt")," とか ",c.createElement(n.code,null,"bpy")," といった ",c.createElement(n.code,null,"native extension")," の方が、\n素の python モジュールより型情報が無くなるという逆転現象が起きているのだが、\nPyGObject はほぼ gir(xml) そのままなので、わりといい感じになる。"),"\n",c.createElement(n.p,null,"Gtk のビルドが短時間でできることがわかったので、\nGUI 層は自前ビルドでいけそうな気がしてきた。\nつまり、Linux と Windows 両方を gtk4 でなるべく同じツールを使ってみる。\nGentoo をクリーンインストールして下の層だけ ",c.createElement(n.code,null,"emerge")," で入れた。\nGentoo は USE フラグで ",c.createElement(n.code,null,"-gtk -glib -qt")," などとすることで、依存が連鎖することを止めることができる。"),"\n",c.createElement(n.p,null,"ついでに ",c.createElement(n.code,null,"wayland")," に手を出したところ、",c.createElement(n.code,null,"wayland")," 界隈もビルドツールに\n",c.createElement(n.code,null,"meson")," が導入されているのを発見。\n",c.createElement(n.code,null,"download/clone")," => ",c.createElement(n.code,null,"meson")," を自動化する python スクリプトの作成に着手した。"),"\n",c.createElement(n.p,null,"https://github.com/ousttrue/toprefix"),"\n",c.createElement(n.p,null,"プロトタイプとしてはまぁまぁの使い勝手。\n",c.createElement(n.code,null,"gentoo")," と ",c.createElement(n.code,null,"Windows")," 共用で ",c.createElement(n.code,null,"gtk4")," などをさくっと展開できるようになる。予定。"),"\n",c.createElement(n.p,null,"さらに ",c.createElement(n.code,null,"dotfiles")," の管理でやっている ",c.createElement(n.code,null,"neovim")," のビルドも合流。\ngo 系の ",c.createElement(n.code,null,"ghq"),", ",c.createElement(n.code,null,"fzf")," などの展開や、\nrust 系の ",c.createElement(n.code,null,"wezterm"),", ",c.createElement(n.code,null,"stylua"),", ",c.createElement(n.code,null,"ripgrep")," の展開もこっちに移そうかなと。\nわりと処理のパターンは決まっていて次のうちのどれかになる事が多い。"),"\n",c.createElement(n.pre,null,c.createElement(n.code,null,"download => extract => build => install: tar ball\ndownload => extract          => install: ビルド済み tar ball\n              clone => build => install: repository\n")),"\n",c.createElement(n.p,null,"これにパッチ当てが追加になることがある。"),"\n",c.createElement(n.p,null,"ついでに、\n以前作った ",c.createElement(n.code,null,"blender")," の ",c.createElement(n.code,null,"bpy")," モジュール生成スクリプトなんかも合流することを画策。\n",c.createElement(n.code,null,"svn")," なしで ",c.createElement(n.code,null,"blender")," ビルドできんかね。\nとなると ",c.createElement(n.code,null,"pixar usd")," も ",c.createElement(n.code,null,"llvm")," もビルドしたいわね。\n",c.createElement(n.code,null,"pyxar usd")," は ",c.createElement(n.code,null,"boost")," の除去したいけどね。\nTUI と Desktop のツール系は自前ビルドで遊べるようにしていく。"))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?c.createElement(n,e,c.createElement(o,e)):o(e)}},1151:function(e,n,t){t.d(n,{ah:function(){return o}});var l=t(7294);const c=l.createContext({});function o(e){const n=l.useContext(c);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---content-posts-2022-1121-build-prefix-md-4ed5ee94efbd3d2b91a6.js.map
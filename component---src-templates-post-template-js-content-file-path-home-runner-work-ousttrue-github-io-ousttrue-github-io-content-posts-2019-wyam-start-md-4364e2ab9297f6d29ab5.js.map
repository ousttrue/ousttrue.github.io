{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2019-wyam-start-md-4364e2ab9297f6d29ab5.js","mappings":"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","sources":["webpack:///./content/posts/2019/wyam-start.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"ソースの方のリポジトリがハードディスククラッシュで失われて\\n更新できなくなっていたので、サイトを作りなおし。\\n\", React.createElement(_components.a, {\n    href: \"https://wyam.io/\"\n  }, \"wyam\"), \"を使ってみる。\"), \"\\n\", React.createElement(_components.h2, null, \"インストール\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ dotnet tool install -g Wyam.Tool</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"初期化する\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ mkdir site\\n$ cd site\\n$ wyam new --recipe blog</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"config.wyam(siteの設定)\"), \"\\n\", React.createElement(_components.li, null, \"input(記事置き場)\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"about.md\"), \"\\n\", React.createElement(_components.li, null, \"posts\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"first-post.md\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"設定ファイル\"), \"\\n\", React.createElement(_components.p, null, \"config.wyam がそれで、C# を Roslyn で処理するらしい。\\nおもしろい。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">// config.wyam\\n#recipe Blog\\n#theme Phantom\\n\\n// Customize your settings and add new ones here\\nSettings[Keys.Host] = \\\"ousttrue.github.io\\\";\\nSettings[BlogKeys.Title] = \\\"三次元日誌\\\";\\nSettings[BlogKeys.Description] = \\\"programming とか\\\";\\n\\n// Add any pipeline customizations here</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">#recipe Blog</code>\"\n    }\n  }), \" がパイプライン設定で、 input フォルダの構成と処理を設定している。\\n設定ファイルに展開したものを記述することもできるみたい。\"), \"\\n\", React.createElement(_components.h3, null, \"gitignore\"), \"\\n\", React.createElement(_components.p, null, \"https://wyam.io/docs/advanced/what_to_exclude_from_source_control\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">#.gitignore\\n.vs/\\noutput/\\nconfig.wyam.hash\\nconfig.wyam.dll\\nconfig.wyam.packages.xml</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"生成する\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ wyam</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"output\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"index.html\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">$ wyam --watch --preview</code>\"\n    }\n  }), \" で更新を監視して livereload できる。\"), \"\\n\", React.createElement(_components.h3, null, \"動作\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"input/posts/ 配下の markdown が /posts/ 下にhtml化される\"), \"\\n\", React.createElement(_components.li, null, \"input/posts/**/hoge.md が /posts/hoge.html のように階層は無くなる\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"テーマを変えてみる\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://wyam.io/recipes/blog/themes/\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"コマンドラインに、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">--theme THEME_NAME</code>\"\n    }\n  }), \" とするか config.wyam に\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">// config.wyam\\n#theme THEME_NAME</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"とすれば OK。\"), \"\\n\", React.createElement(_components.h2, null, \"appveyor で GitHub-Pages に展開\"), \"\\n\", React.createElement(_components.p, null, \"https://wyam.io/docs/deployment/appveyor\"), \"\\n\", React.createElement(_components.p, null, \"CIよくわかってないので難航したが動くようになった。\"), \"\\n\", React.createElement(_components.p, null, \"GitHub-pages のユーザー頁を使ったので、\\nソースのリポジトリと、html置き場のリポジトリを分けた。\"), \"\\n\", React.createElement(_components.p, null, \"ソースのリポジトリに AppVeyor を仕掛けて、\\npush したときにビルドして、html置き場に push する。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yaml\\\"><pre class=\\\"language-yaml\\\"><code class=\\\"language-yaml\\\"><span class=\\\"token key atrule\\\">branches</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">only</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">-</span> master\\n    \\n<span class=\\\"token key atrule\\\">environment</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">access_token</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token comment\\\"># EDIT the encrypted version of your GitHub access token</span>\\n    <span class=\\\"token comment\\\"># https://www.appveyor.com/docs/deployment/github/</span>\\n    <span class=\\\"token key atrule\\\">secure</span><span class=\\\"token punctuation\\\">:</span> E+wmFkBHvRVLnVcg9mIBXP7iTXKIqJyi/DewA+0SEtkpWmtiNFKKhYzD4bs0nw2L\\n\\n<span class=\\\"token key atrule\\\">install</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> mkdir ..\\\\Wyam\\n  <span class=\\\"token punctuation\\\">-</span> mkdir ..\\\\output\\n  <span class=\\\"token comment\\\"># Fetch the latest version of Wyam </span>\\n  <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token string\\\">\\\"curl -s https://raw.githubusercontent.com/Wyamio/Wyam/master/RELEASE -o ..\\\\\\\\Wyam\\\\\\\\wyamversion.txt\\\"</span>\\n  <span class=\\\"token punctuation\\\">-</span> set /P WYAMVERSION=&lt; ..\\\\Wyam\\\\wyamversion.txt\\n  <span class=\\\"token punctuation\\\">-</span> echo %WYAMVERSION%\\n  <span class=\\\"token comment\\\"># Get and unzip the latest version of Wyam</span>\\n  <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">ps</span><span class=\\\"token punctuation\\\">:</span> Start<span class=\\\"token punctuation\\\">-</span>FileDownload \\\"https<span class=\\\"token punctuation\\\">:</span>//github.com/Wyamio/Wyam/releases/download/$env<span class=\\\"token punctuation\\\">:</span>WYAMVERSION/Wyam<span class=\\\"token punctuation\\\">-</span>$env<span class=\\\"token punctuation\\\">:</span>WYAMVERSION.zip\\\" <span class=\\\"token punctuation\\\">-</span>FileName \\\"..\\\\Wyam\\\\Wyam.zip\\\"\\n  <span class=\\\"token punctuation\\\">-</span> 7z x ..\\\\Wyam\\\\Wyam.zip <span class=\\\"token punctuation\\\">-</span>o..\\\\Wyam <span class=\\\"token punctuation\\\">-</span>r\\n\\n<span class=\\\"token key atrule\\\">build_script</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token punctuation\\\">-</span> dotnet ..\\\\Wyam\\\\Wyam.dll <span class=\\\"token punctuation\\\">-</span><span class=\\\"token punctuation\\\">-</span>output ..\\\\output\\n\\n<span class=\\\"token key atrule\\\">on_success</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token comment\\\"># Switch branches to gh-pages, clean the folder, copy everything in from the Wyam output, and commit/push</span>\\n  <span class=\\\"token comment\\\"># See http://www.appveyor.com/docs/how-to/git-push for more info</span>\\n  <span class=\\\"token punctuation\\\">-</span> git config <span class=\\\"token punctuation\\\">-</span><span class=\\\"token punctuation\\\">-</span>global credential.helper store\\n  <span class=\\\"token comment\\\"># EDIT your Git email and name</span>\\n  <span class=\\\"token punctuation\\\">-</span> git config <span class=\\\"token punctuation\\\">-</span><span class=\\\"token punctuation\\\">-</span>global user.email ousttrue@gmail.com\\n  <span class=\\\"token punctuation\\\">-</span> git config <span class=\\\"token punctuation\\\">-</span><span class=\\\"token punctuation\\\">-</span>global user.name ousttrue\\n  <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">ps</span><span class=\\\"token punctuation\\\">:</span> Add<span class=\\\"token punctuation\\\">-</span>Content \\\"$env<span class=\\\"token punctuation\\\">:</span>USERPROFILE\\\\.git<span class=\\\"token punctuation\\\">-</span>credentials\\\" \\\"https<span class=\\\"token punctuation\\\">:</span>//$($env<span class=\\\"token punctuation\\\">:</span>access_token)<span class=\\\"token punctuation\\\">:</span>x<span class=\\\"token punctuation\\\">-</span>oauth<span class=\\\"token punctuation\\\">-</span>basic@github.com`n\\\"\\n  <span class=\\\"token punctuation\\\">-</span> git checkout gh<span class=\\\"token punctuation\\\">-</span>pages\\n  <span class=\\\"token punctuation\\\">-</span> git rm <span class=\\\"token punctuation\\\">-</span>rf .\\n  <span class=\\\"token punctuation\\\">-</span> xcopy ..\\\\output . /E\\n  <span class=\\\"token comment\\\"># EDIT your domain name or remove if not using a custom domain</span>\\n  <span class=\\\"token comment\\\"># - echo wyam.io > CNAME</span>\\n  <span class=\\\"token comment\\\"># EDIT the origin of your repository - have to reset it here because AppVeyor pulls from SSH, but GitHub won't accept SSH pushes</span>\\n\\n  <span class=\\\"token comment\\\"># 送り先(push できるように environment access token をセットしている)</span>\\n  <span class=\\\"token punctuation\\\">-</span> git remote set<span class=\\\"token punctuation\\\">-</span>url origin https<span class=\\\"token punctuation\\\">:</span>//github.com/ousttrue/ousttrue.github.io.git\\n  <span class=\\\"token comment\\\"># 空の gh-pages ブランチに変更を追加</span>\\n  <span class=\\\"token punctuation\\\">-</span> git add <span class=\\\"token punctuation\\\">-</span>A\\n  <span class=\\\"token punctuation\\\">-</span> git commit <span class=\\\"token punctuation\\\">-</span>a <span class=\\\"token punctuation\\\">-</span>m \\\"Commit from AppVeyor\\\"\\n  <span class=\\\"token comment\\\"># gh-pages ブランチから origin の master に送る(use の GitHubPages を使っているので master ブランチ運用)</span>\\n  <span class=\\\"token punctuation\\\">-</span> git push <span class=\\\"token punctuation\\\">-</span>f origin gh<span class=\\\"token punctuation\\\">-</span>pages<span class=\\\"token punctuation\\\">:</span>master</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"vscode で編集する\"), \"\\n\", React.createElement(_components.p, null, \"watch タスクを作成してバックグランドで \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">input</code>\"\n    }\n  }), \" の変更を監視。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tasks.json\\\"><pre class=\\\"language-tasks.json\\\"><code class=\\\"language-tasks.json\\\">{\\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\\n    // for the documentation about the tasks.json format\\n    &quot;version&quot;: &quot;2.0.0&quot;,\\n    &quot;tasks&quot;: [\\n        {\\n            &quot;label&quot;: &quot;watch&quot;,\\n            &quot;type&quot;: &quot;shell&quot;,\\n            &quot;command&quot;: &quot;wyam&quot;,\\n            &quot;args&quot;: [\\n                &quot;--watch&quot;, &quot;--preview&quot;,\\n            ],\\n            &quot;problemMatcher&quot;: [\\n            ],\\n            &quot;isBackground&quot;: true\\n        },\\n    ]\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"launch.json を作成して F5 でブラウザを開く。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"launch.json\\\"><pre class=\\\"language-launch.json\\\"><code class=\\\"language-launch.json\\\">{\\n    // IntelliSense を使用して利用可能な属性を学べます。\\n    // 既存の属性の説明をホバーして表示します。\\n    // 詳細情報は次を確認してください: https://go.microsoft.com/fwlink/?linkid=830387\\n    &quot;version&quot;: &quot;0.2.0&quot;,\\n    &quot;configurations&quot;: [\\n        {\\n            &quot;type&quot;: &quot;chrome&quot;,\\n            &quot;request&quot;: &quot;launch&quot;,\\n            &quot;name&quot;: &quot;Launch Chrome against localhost&quot;,\\n            &quot;url&quot;: &quot;http://localhost:5080&quot;,\\n            &quot;webRoot&quot;: &quot;${workspaceFolder}&quot;\\n        }\\n    ]\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"自動でリロードがかかるので快適。\"), \"\\n\", React.createElement(_components.h2, null, \"参考\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"https://www.staticgen.com/wyam\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://wyam.io/docs/resources/built-with-wyam\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://qiita.com/MeilCli/items/425a5436aced08ba7062\"\n  }, \"静的サイトジェネレーターでC#を使いたかったからWyamを試したら最高だった\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"日本語で wyam に言及しているサイトはこれしかなかった。\\nマイナーでござる。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2019/wyam-start.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","h2","span","ul","li","h3","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
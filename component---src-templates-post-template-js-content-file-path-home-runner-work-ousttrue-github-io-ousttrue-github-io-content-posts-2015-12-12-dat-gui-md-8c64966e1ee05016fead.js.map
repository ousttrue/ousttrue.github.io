{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-12-12-dat-gui-md-8c64966e1ee05016fead.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,KAAM,SACLC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBN,EAAYG,KAAM,CAC3CI,wBAAyB,CACvBC,OAAQ,4+DAGd,CAKA,MAJA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWX,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCVA,MAAMM,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBa,EAAAA,EAAQ,KAAMb,EAAAA,cAAoB,KAAM,KAAMY,EAAKE,IAAIC,YAAYC,OAAQhB,EAAAA,cAAoBiB,EAAAA,GAAa,CACrIlB,WAAYA,GACXQ,GACL,CACe,SAASW,EAAiBzB,GACvC,OAAOO,EAAAA,cAAoBU,EAAcjB,EAAOO,EAAAA,cAAoBmB,EAAqB1B,GAC3F,C","sources":["webpack:///./content/posts/2015/12/12/dat_gui.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">view typescript\\nview javascript\\n\\nたまにthree.jsのデモと連動して使われているGUIライブラリdat-guiを試してみる。\\n\\nhttps://code.google.com/p/dat-gui/\\nhttp://workshop.chromeexperiments.com/examples/gui/#1--Basic-Usage\\nhttps://stemkoski.github.io/Three.js/#gui\\n\\nライブラリを導入\\n> bower install dat.gui\\n> tsd query dat-gui -rosa install\\n\\ndat.GuiControllerのnameプロパティがtypings/dat-gui/dat-gui.d.tsで未定義だった。\\nbower_components/dat.gui/dat.gui.jsでは定義されていた。\\n    /**\\n    * The name of &lt;code>GUI&lt;/code>. Used for folders. i.e\\n    * a folder's name\\n    * @type String\\n    */\\n    name: {\\n    get: function() {\\n        return params.name;\\n    },\\n    set: function(v) {\\n        // TODO Check for collisions among sibling folders\\n        params.name = v;\\n        if (title_row_name) {\\n        title_row_name.innerHTML = params.name;\\n        }\\n    }\\n    },\\n\\n既存のd.tsにプロパティを追加する(C# partial class的な)方法があるかどうかわからないので、\\ndat-gui.d.tsを改造することにした。\\ndat-gui.d.tsにnameプロパティを追加\\ndeclare module dat {\\n\\n    // 省略\\n\\n    export class Controller { // &lt;- dat.gui.jsに合わせて名前変えてみた\\n        destroy(): void;\\n        fire(): Controller;\\n        getValue(): any;\\n        isModified(): boolean;\\n        listen(): Controller;\\n        min(n: number): Controller;\\n        remove(target: Controller): void;\\n        setValue(value: any): Controller;\\n        step(n: number): Controller;\\n        updateDisplay(): void;\\n        name(newName?: string): string; // &lt;- これ追加した\\n        onChange: (value?: any) => void;\\n        onFinishChange: (value?: any) => void;\\n    }\\n}\\n\\nサンプルコードを元にtypescript化してみる\\nhttps://stemkoski.github.io/Three.js/GUI-Controller.html\\nをベースにした。\\njavscriptのコードをまるっとtsファイルにコピーして淡々と型を指定していく。\\ndat.guiの場所調整の件\\n\\nhttp://stackoverflow.com/questions/25653639/how-do-i-change-the-location-of-the-dat-gui-dropdown\\n\\nautoPlace: falseがポインツ。そのうえでdomにposition:abusolute\\nvar  gui = new dat.GUI( { autoPlace: false } );</code></pre></div>\"\n    }\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2015/12/12/dat_gui.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
{"version":3,"file":"component---content-posts-2014-05-17-cygwin-md-e73ba85f419af237fadd.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,8OAA+O,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,KAAMI,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,iBAAkB,KAAMG,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,yCAA0C,KAAMG,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,QAAS,MAAO,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wTAAyT,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,sVAAuV,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yLAA0L,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,iFAAkF,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,2HAA4H,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wHAAyH,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gUAAiU,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,oFACj6E,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECmBO,MAAMY,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2014/05/17/cygwin.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"cygwinの導入とgit最新版のビルドまで\\nしばらくWindows上のメインのshellをmsysgitのbashにしていたのだが、\\n久しぶりにcygwinに回帰した。\\n知らない間に環境が良くなっているじゃないの、ということで初期導入手順メモ。\\n既存のcygwinを掃除\\n“C:/cygwin”にインストール済みだが、\\ndownload済みのパッケージくらいは置いておこうということで以下のファイル/ディレクトリ\\n以外を削除した。\\nc:/cygwin\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"setup-x86.exe\"), \"\\n\", React.createElement(_components.li, null, \"http%3a%2f%2f... (パッケージのダウンロードディレクトリ)\"), \"\\n\", React.createElement(_components.li, null, \"etc/\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"あとetc/setupも削除。 これでクリーンな状態になるっぽい。\\n以降、 http://tar.blogru.me/entry/2014/03/20/004156\\nの通りにgitのビルドまで遂行。\\ncygwinセットアップ\\nsetup-x86.exeを実行。wgetとgitを追加インストール。\\napt-cyg導入\\n$ mkdir -p /usr/local/src\\n$ cd /usr/local/src\\n$ git clone https://github.com/transcode-open/apt-cyg.git\\n$ cp apt-cyg/apt-cyg /usr/local/bin/\"), \"\\n\", React.createElement(_components.p, null, \"最新版gitのビルド\\nビルドに必要なもの\\ninstall.sh\\nset -x\\napt-cyg install gcc-core\\napt-cyg install make patch vim\\napt-cyg install libncurses-devel openssl-devel readline libsqlite3-devel libxml2-devel libxslt-devel\\napt-cyg install autoconf zlib zlib-devel libiconv python openssh tcl\\napt-cyg install gettext-devel\\napt-cyg install curl libcurl-devel\"), \"\\n\", React.createElement(_components.p, null, \"ビルド\\n$ cd /usr/local/src\\n$ git clone git://github.com/git/git.git\\n$ cd git\\n$ make configure\\n$ ./configure --prefix=/usr/local --with-curl --with-expat\\n$ make all & make install\"), \"\\n\", React.createElement(_components.p, null, \"トラブルシューティング\\n“make install”で\\nmake: execvp: install: Permission denied cygwin\"), \"\\n\", React.createElement(_components.p, null, \"というエラーが出てはまる。どうやらgitに含まれるINSTALLがmake\\ninstallのターゲットに 誤認されるという現象っぽい。\\nINSTALLを撤去したらうまく動いた。\\n$ rm INSTALL gitweb/INSTALL\"), \"\\n\", React.createElement(_components.p, null, \"別のマシンでは起きなかったのだがなんだこれは。\\nトラブルシューティング2\\nWindows8固有の問題のようだがmake中のforkに失敗する件について。\\n対策は、”rebaseall”ではなく\\n$ export LANG=C\"), \"\\n\", React.createElement(_components.p, null, \"とすることだった。\\nwindows8-上で-cygwin-版の-git-で-pullpushfetch-に失敗するhttp://kamiyn.wordpress.com/2012/10/18/windows8-%E4%B8%8A%E3%81%A7-cygwin-%E7%89%88%E3%81%AE-git-%E3%81%A7-pullpushfetch-%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%99%E3%82%8B/\\nのコメントに書いてあった。\\nかくして、gitが最新版になった。\\n$ git --version\\ngit version 2.0.0.rc3.4.g6308767.dirty\"), \"\\n\", React.createElement(_components.p, null, \"思えば、cygwinをやめたのはgitがうまく動かなかったのを解決できなかったのが原因だった\\nような気がするので、最新版がさくっとビルドできるのはありがたい。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","ul","li","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
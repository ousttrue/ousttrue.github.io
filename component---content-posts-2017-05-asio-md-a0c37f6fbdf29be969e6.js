"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2054],{4801:function(n,t,e){e.r(t);var o=e(1151),s=e(7294);function c(n){const t=Object.assign({p:"p"},(0,o.ah)(),n.components);return s.createElement(s.Fragment,null,s.createElement(t.p,null,"vcpkgを眺めていたらnot boostなasioを発見した。"),"\n",s.createElement(t.p,null,"asioをBoostに含まれているオフィシャル感のあるクロスプラットフォームな通信ライブラリととらえていたのだけど、c++11でboostのよく使う部分がc++にかなり取り込まれて肥大化する一方のboostを避ける気持ちが生まれていた。"),"\n",s.createElement(t.p,null,"http://think-async.com/Asio/AsioAndBoostAsio"),"\n",s.createElement(t.p,null,"読んでみるとついにヘッダオンリー化を果たしたらしい。boostの外に出ないとヘッダオンリー化が難しそうではある。たしか、asioはsocket周りじゃなくてerror周りのクラスがコンパイル対象なのに引きずられてasioを使うにはコンパイルを強いられるということがあった。技術的にはだいぶ前からヘッダオンリー化は可能であったのだろうがついにやってくれたか。素晴らしい。解凍するとギガ単位になる最近のboostはいかがなものかと思ってた。\n稀に使われているぽい、拙作のmsgpack-asioもヘッダオンリーのasioを使って近代化したいなぁ。あと、msgpackの実装も\nhttps://github.com/nlohmann/json\nに切り替えたい。\nc++11以降、c++界隈が活性化しているような気がするな。"))}t.default=function(n){void 0===n&&(n={});const{wrapper:t}=Object.assign({},(0,o.ah)(),n.components);return t?s.createElement(t,n,s.createElement(c,n)):c(n)}},1151:function(n,t,e){e.d(t,{ah:function(){return c}});var o=e(7294);const s=o.createContext({});function c(n){const t=o.useContext(s);return o.useMemo((()=>"function"==typeof n?n(t):{...t,...n}),[t,n])}}}]);
//# sourceMappingURL=component---content-posts-2017-05-asio-md-a0c37f6fbdf29be969e6.js.map
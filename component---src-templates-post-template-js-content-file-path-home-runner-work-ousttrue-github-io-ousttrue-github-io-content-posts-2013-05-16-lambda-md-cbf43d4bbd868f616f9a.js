"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6705],{2918:function(n,a,s){s.r(a),s.d(a,{default:function(){return i}});var t=s(1151),p=s(7294);function e(n){const a=Object.assign({p:"p",span:"span",a:"a"},(0,t.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(a.p,null,"(記事復旧のついでに少し修正)"),"\n",p.createElement(a.p,null,"msgpack-rpc の関数登録の都合上、 lambda 関数から引数の型を得たい。 下記のような書き方をしたい。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">A1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">A2</span><span class="token operator">></span>\n<span class="token keyword">void</span> <span class="token function">register_func</span> <span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>func_name<span class="token punctuation">,</span> <span class="token function">R</span><span class="token punctuation">(</span><span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">(</span>A1<span class="token punctuation">,</span> A2<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// 関数登録</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// 関数ポインタは受けれる</span>\n    <span class="token function">register_func</span><span class="token punctuation">(</span>“add”<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Add<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// lambdaを受けることはできない</span>\n    <span class="token function">register_func</span><span class="token punctuation">(</span>“add”<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>  <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">-></span><span class="token keyword">int</span><span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>'}}),"\n",p.createElement(a.p,null,"上記の書き方では普通の関数ポインタを受けることはできるのだが、"),"\n",p.createElement(a.p,null,"std::function と lambda は受けられない。\nstd::function を受けるには下記のようにすることでできた。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">A1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">A2</span><span class="token operator">></span> \n<span class="token keyword">void</span> <span class="token function">register_func</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>func_name<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token function">R</span><span class="token punctuation">(</span>A1<span class="token punctuation">,</span> A2<span class="token punctuation">)</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>     \n<span class="token comment">// </span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"残り、lambda を受けられる記述方法を知りたいのだがどうしたらよいものか。 下記のような手はうまくいかなかった・・・"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">A1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">A2</span><span class="token operator">></span>\n<span class="token keyword">void</span> <span class="token function">add_handler</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>method<span class="token punctuation">,</span> F handler<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token function">R</span><span class="token punctuation">(</span>A1<span class="token punctuation">,</span> A2<span class="token punctuation">)</span><span class="token operator">></span> <span class="token function">f</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//add_handler</span>\n<span class="token punctuation">}</span>\n</code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.a,{href:"http://d.hatena.ne.jp/osyo-manga/20121205/1354674180"},"lambda expression を 関数ポインタ型へと変換する")," こちらのサイトから decltype を使ったらなんかできそうな感じがしたので粘っていたのだが、"),"\n",p.createElement(a.p,null,"目的そのものの記事を発見した。 ",p.createElement(a.a,{href:"http://stackoverflow.com/questions/6512019/can-we-get-the-type-of-a-lambda-argument"},"http://stackoverflow.com/questions/6512019/can-we-get-the-type-of-a-lambda-argument")),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token comment">// 2019/08 元記事のコードがよくわからなかったので書き直し。</span>\n\n<span class="token comment">// decltypeから得たメンバ関数へのポインタを触媒にして型を得る</span>\n<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">A1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">A2</span><span class="token operator">></span>\n<span class="token keyword">void</span> <span class="token function">_register_func</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>func_name<span class="token punctuation">,</span> <span class="token function">R</span><span class="token punctuation">(</span>C<span class="token double-colon punctuation">::</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">(</span>A1 a1<span class="token punctuation">,</span> A2 a2<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">)</span> <span class="token comment">// constに注意</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// R: 返り値の型</span>\n    <span class="token comment">// A1, A2: 引数の型</span>\n    <span class="token comment">// C: lambdaオブジェクトの型を受ける</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// まずあらゆる引数を受け付けられるtemplateでlambdaオブジェクトを受ける(functor)</span>\n<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">F</span><span class="token operator">></span>\n<span class="token keyword">void</span> <span class="token function">register_func</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>func_name<span class="token punctuation">,</span> F f<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">_register_func</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>func_name<span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">)</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"F で関数ポインタ、lambda、std::function 等を受けられるようになった。 decltype なんかすごいな。"),"\n",p.createElement(a.p,null,"関連して、",p.createElement(a.a,{href:"https://qiita.com/ousttrue/items/6b207e1d431cf20e04d9"},"cpp でメンバー関数を、this を第１引数にとる関数ポインタに変換する"),"。\nメンバ関数へのポインタは意外と使い道がある。"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?p.createElement(a,n,p.createElement(e,n)):e(n)},c=s(8678),l=s(1883),u=s(8838);const k={code:n=>{let{children:a,className:s}=n;return s?p.createElement(u.Z,{className:s},a):p.createElement("code",null,a)}};function r(n){let{data:a,children:s}=n;const e=a.mdx.frontmatter;return p.createElement(c.Z,null,p.createElement("h1",null,e.title),p.createElement("div",{className:"tags-index"},e.tags&&e.tags.length>0&&e.tags.map((n=>p.createElement(l.rU,{to:"/tags/"+n+"/",itemProp:"url"},p.createElement("button",null,n))))),p.createElement(t.Zo,{components:k},s))}function i(n){return p.createElement(r,n,p.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-05-16-lambda-md-cbf43d4bbd868f616f9a.js.map
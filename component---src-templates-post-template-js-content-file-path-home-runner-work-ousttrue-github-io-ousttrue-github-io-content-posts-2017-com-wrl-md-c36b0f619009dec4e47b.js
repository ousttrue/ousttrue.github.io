"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2913],{1691:function(n,s,a){a.r(s),a.d(s,{default:function(){return r}});var p=a(1151),t=a(7294);function o(n){const s=Object.assign({p:"p",h2:"h2",span:"span"},(0,p.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(s.p,null,"古のATLのWindows8以降？版のWRLを使ってみる。"),"\n",t.createElement(s.h2,null,"IXMLHTTPRequest2を使うサンプルコードをベースにWRL化してみる。"),"\n",t.createElement(s.p,null,"ComPtr\n何はともあれComPtrを取り入れる。\nBefore"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Msxml6.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"msxml6.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SAFERELEASE</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token operator">-></span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">CoInitializeEx</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> COINITBASE_MULTITHREADED<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    IXMLHTTPRequest2 <span class="token operator">*</span>pXHR<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>\n    <span class="token keyword">auto</span> hr <span class="token operator">=</span> <span class="token function">CoCreateInstance</span><span class="token punctuation">(</span>CLSID_FreeThreadedXMLHTTP60<span class="token punctuation">,</span>\n            <span class="token constant">NULL</span><span class="token punctuation">,</span>\n            CLSCTX_INPROC_SERVER<span class="token punctuation">,</span>\n            <span class="token function">IID_PPV_ARGS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pXHR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">FAILED</span><span class="token punctuation">(</span>hr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\nEXIT<span class="token operator">:</span>\n    <span class="token function">SAFERELEASE</span><span class="token punctuation">(</span>pXHR<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">CoUninitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">FAILED</span><span class="token punctuation">(</span>hr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.h2,null,"SAFERELEASEとgoto"),"\n",t.createElement(s.p,null,"ComPtrを取り入れてSAFERELEASEとgotoを除去しよう。\nAfter\nRAIIを取り入れて積極的にEarly Outできる(後始末が自動になったので)。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Msxml6.h></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"msxml6.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;wrl/client.h></span></span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">ComInitializer</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token function">ComInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">CoInitializeEx</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> COINITBASE_MULTITHREADED<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token operator">~</span><span class="token function">ComInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">CoUninitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    ComInitializer co<span class="token punctuation">;</span>\n\n    Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span>ComPtr<span class="token operator">&lt;</span>IXMLHTTPRequest2<span class="token operator">></span> pXHR<span class="token punctuation">;</span>\n    <span class="token keyword">auto</span> hr <span class="token operator">=</span> <span class="token function">CoCreateInstance</span><span class="token punctuation">(</span>CLSID_FreeThreadedXMLHTTP60<span class="token punctuation">,</span>\n            <span class="token constant">NULL</span><span class="token punctuation">,</span>\n            CLSCTX_INPROC_SERVER<span class="token punctuation">,</span>\n            <span class="token function">IID_PPV_ARGS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pXHR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">FAILED</span><span class="token punctuation">(</span>hr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.h2,null,"IUnknown実装とComPtr初期化"),"\n",t.createElement(s.p,null,"Callbackの定義等で自らComオブジェクトを定義する場合がある。\nIXMLHTTPRequest2Callbackを実装する例。\nBefore"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CCallback</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IXMLHTTPRequest2Callback</span></span>\n<span class="token punctuation">{</span>\n    ULONG m_cRef<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token function">CCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token operator">~</span><span class="token function">CCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// IUnknown</span>\n    <span class="token function">STDMETHODIMP_</span><span class="token punctuation">(</span>ULONG<span class="token punctuation">)</span> <span class="token function">AddRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">override</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">InterlockedIncrement</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m_cRef<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> m_cRef<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">STDMETHODIMP_</span><span class="token punctuation">(</span>ULONG<span class="token punctuation">)</span> <span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">override</span>\n    <span class="token punctuation">{</span>\n        ULONG ulRefCount <span class="token operator">=</span> <span class="token function">InterlockedDecrement</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m_cRef<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> m_cRef<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> ulRefCount<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    STDMETHODIMP <span class="token function">QueryInterface</span> <span class="token punctuation">(</span>REFIID riid<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>ppvObj<span class="token punctuation">)</span><span class="token keyword">override</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// Always set out parameter to NULL, validating it first.</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ppvObj<span class="token punctuation">)</span> <span class="token keyword">return</span> E_INVALIDARG<span class="token punctuation">;</span>\n\n        <span class="token operator">*</span>ppvObj <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>riid <span class="token operator">==</span> IID_IUnknown \n                <span class="token operator">||</span> riid <span class="token operator">==</span> IID_IXMLHTTPRequest2Callback \n           <span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// Increment the reference count and return the pointer.</span>\n            <span class="token operator">*</span>ppvObj <span class="token operator">=</span> <span class="token punctuation">(</span>LPVOID<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">;</span>\n            <span class="token function">AddRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> NOERROR<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> E_NOINTERFACE<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// IXMLHTTPRequest2Callback</span>\n    STDMETHODIMP <span class="token function">OnRedirect</span><span class="token punctuation">(</span>\n        __RPC__in_opt IXMLHTTPRequest2 <span class="token operator">*</span>pXHR<span class="token punctuation">,</span>\n        __RPC__in_string <span class="token keyword">const</span> WCHAR <span class="token operator">*</span>pwszRedirectUrl<span class="token punctuation">)</span><span class="token keyword">override</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> E_NOTIMPL<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    STDMETHODIMP\n        <span class="token function">OnHeadersAvailable</span><span class="token punctuation">(</span>\n            __RPC__in_opt IXMLHTTPRequest2 <span class="token operator">*</span>pXHR<span class="token punctuation">,</span>\n            DWORD dwStatus<span class="token punctuation">,</span>\n            __RPC__in_string <span class="token keyword">const</span> WCHAR <span class="token operator">*</span>pwszStatus\n        <span class="token punctuation">)</span><span class="token keyword">override</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> E_NOTIMPL<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    STDMETHODIMP\n        <span class="token function">OnDataAvailable</span><span class="token punctuation">(</span>\n            __RPC__in_opt IXMLHTTPRequest2 <span class="token operator">*</span>pXHR<span class="token punctuation">,</span>\n            __RPC__in_opt ISequentialStream <span class="token operator">*</span>pResponseStream\n        <span class="token punctuation">)</span><span class="token keyword">override</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> E_NOTIMPL<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    STDMETHODIMP\n        <span class="token function">OnResponseReceived</span><span class="token punctuation">(</span>\n            __RPC__in_opt IXMLHTTPRequest2 <span class="token operator">*</span>pXHR<span class="token punctuation">,</span>\n            __RPC__in_opt ISequentialStream <span class="token operator">*</span>pResponseStream\n        <span class="token punctuation">)</span><span class="token keyword">override</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> E_NOTIMPL<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    STDMETHODIMP\n        <span class="token function">OnError</span><span class="token punctuation">(</span>\n            __RPC__in_opt IXMLHTTPRequest2 <span class="token operator">*</span>pXHR<span class="token punctuation">,</span>\n            HRESULT hrError\n        <span class="token punctuation">)</span><span class="token keyword">override</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> E_NOTIMPL<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"IUnknownの実装(AddRef, Release, QueryInterface)が定型コードである"),"\n",t.createElement(s.p,null,"newしたときにリファレンスカウントが1であること、AddRef, Releaseを正しく実装する\nQueryInterfaceを正しく実装する(あとでインタフェースを増減させたときに更新を忘れたりする)"),"\n",t.createElement(s.p,null,"ComPtrの初期化が不穏"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp">Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span>ComPtr<span class="token operator">&lt;</span>CCallback<span class="token operator">></span> pCallback<span class="token punctuation">;</span>\n<span class="token comment">// RefCount=1のインスタンスを内部ポインタ(&amp;演算子)に渡す</span>\n<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CCallback<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pCallback<span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">CCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></div>'}}),"\n",t.createElement(s.p,null,"または、"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp">Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span>ComPtr<span class="token operator">&lt;</span>CCallback<span class="token operator">></span> <span class="token function">pCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> CCallback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1+1はRefCount=2</span>\npCallback<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1に減らす</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"のようなあからさまに不穏なコードを書かなければならない。\n間違いの元である。\nAfter"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;wrl/implements.h></span></span>\n<span class="token keyword">class</span> <span class="token class-name">CCallback</span> <span class="token operator">:</span>\n    <span class="token base-clause"><span class="token keyword">public</span> Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span><span class="token class-name">RuntimeClass</span><span class="token operator">&lt;</span>\n    Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span><span class="token class-name">RuntimeClassFlags</span><span class="token operator">&lt;</span>Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span><span class="token class-name">ClassicCom</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token class-name">IXMLHTTPRequest2Callback</span><span class="token operator">></span></span>\n<span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span> \n    <span class="token function">CCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token operator">~</span><span class="token function">CCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// IXMLHTTPRequest2Callback</span>\n    <span class="token comment">// 省略</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"とすることでIUnknownの実装をWRL::RuntimeClassに任せることができる。\nまた、newによる初期化を禁止されるので、newではなくWRL::Makeを使う。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">error C2248: \'Microsoft::WRL::Details::DontUseNewUseMake::operator new\': private メンバー (クラス \'Microsoft::WRL::Details::DontUseNewUseMake\' で宣言されている) にアクセスできません。</code></pre></div>'}}),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp">Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span>ComPtr<span class="token operator">&lt;</span>CCallback<span class="token operator">></span> pCallback<span class="token operator">=</span>Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">Make</span><span class="token generic class-name"><span class="token operator">&lt;</span>CCallback<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.h2,null,"MakeAndInitialize 初期化メソッド"),"\n",t.createElement(s.p,null,"Makeよりこっちの方がCom風。\nRuntimeClassInitializeという名前のメンバ関数で初期化する。失敗した場合はS_OK以外を返す。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CCallback</span> <span class="token operator">:</span>\n    <span class="token base-clause"><span class="token keyword">public</span> Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span><span class="token class-name">RuntimeClass</span><span class="token operator">&lt;</span>\n    Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span><span class="token class-name">RuntimeClassFlags</span><span class="token operator">&lt;</span>Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span><span class="token class-name">ClassicCom</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token class-name">IXMLHTTPRequest2Callback</span><span class="token operator">></span></span>\n<span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span> \n\n    STDMETHODIMP <span class="token function">RuntimeClassInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> S_OK<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nMicrosoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span>ComPtr<span class="token operator">&lt;</span>CCallback<span class="token operator">></span> pCallback<span class="token punctuation">;</span>\nhr<span class="token operator">=</span>Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">MakeAndInitialize</span><span class="token generic class-name"><span class="token operator">&lt;</span>CCallback<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">FAILED</span><span class="token punctuation">(</span>hr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"MakeAndInitialize 初期化メソッド(引数)\n9つまでいける。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp">    STDMETHODIMP <span class="token function">RuntimeClassInitialize</span><span class="token punctuation">(</span>DWORD value<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> S_OK<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    DWORD value <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>\n    Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span>ComPtr<span class="token operator">&lt;</span>CCallback<span class="token operator">></span> pCallback<span class="token punctuation">;</span>\n    hr<span class="token operator">=</span>Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">MakeAndInitialize</span><span class="token generic class-name"><span class="token operator">&lt;</span>CCallback<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pCallback<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">FAILED</span><span class="token punctuation">(</span>hr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre></div>'}}))}var e=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,p.ah)(),n.components);return s?t.createElement(s,n,t.createElement(o,n)):o(n)},c=a(8678),l=a(1883),u=a(8838);const k={code:n=>{let{children:s,className:a}=n;return a?t.createElement(u.Z,{className:a},s):t.createElement("code",null,s)}};function i(n){let{data:s,children:a}=n;const o=s.mdx.frontmatter;return t.createElement(c.Z,null,t.createElement("h1",null,o.title),t.createElement("div",{className:"tags-index"},o.tags&&o.tags.length>0&&o.tags.map((n=>t.createElement(l.rU,{to:"/tags/"+n+"/",itemProp:"url"},t.createElement("button",null,n))))),t.createElement(p.Zo,{components:k},a))}function r(n){return t.createElement(i,n,t.createElement(e,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-com-wrl-md-c36b0f619009dec4e47b.js.map
{"version":3,"file":"component---content-posts-2013-05-26-gentoo-eth-0-md-f18d0039e2672d2eed77.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,uCAAwC,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,0/CACjO,CAKA,UAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECmBO,MAAMY,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2013/05/26/gentoo-eth0.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Gentoo でネットワークインターフェースが eth0 にならない件\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"最近インストールしたAMDのオンボードEtherと、MacBookAirのUsb\\nEtherが共にeth0にならなかった。\\nAMD機では、/etc/init.d/net.eth0 startが失敗するのでなんでかと思ったら違う名前になっていた。\\n# ifconfig -a\\nenp3s0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\\n\\neth0ではないので/etc/init.d/net.eth0ではなく/etc/init.d/net.enp3s0とする必要があった。\\n/etc/conf.d/netも書き換え。\\nMacBookAirでも違う名前になっていた。\\n# ifconfig -a\\nenp0s29f7u1u1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\\n\\nとりあえずシンボリックリンク/etc/init.d/net.enp0s29f7u1u1を作って接続することはできたがちょっと調べてみることにした。\\nudevinfo\\nなんかudevinfoが見つからぬ。\\nhttp://www.gossamer-threads.com/lists/gentoo/user/174113\\nによるとudevadmになったらしい。\\n# udevadm info -a /sys/class/net/enp3s0\\n\\nで情報をとれた。\\n参考:http://www.ice.is.kit.ac.jp/~umehara/misc/comp/20060408.html\\ngentooのudev設定\\nhttp://www.gentoo.gr.jp/transdocs/udevrules/udevrules.html#example-iface\\n/etc/udev/rules.d/myether\\nSUBSYTEM=\\\"net\\\", ATTR{address}==\\\"XX:XX:XX:XX:XX:XX\\\", NAME=\\\"eth0\\\"\\n\\n書いてみた。最近のudevではSYSFSはATTRになったぽい。\\ntest\\n# udevadm test /sys/class/net/enp3s0\\n\\nうまくいかぬ・・・\\n# cd /etc/udev/rules.d\\n# mv myether 50-ether.rules\\n\\n有効なファイル名が決まっていた。\\ntest\\n# udevadm test /sys/class/net/enp3s0\\nunknown key 'SUBSYTEM' in /etc/udev/rules.d/50-ether.rules:1\\ninvalid rule '/etc/udev/rules.d/50-ether.rules:1'\\n\\n書き方がよろしくないらしい\\nSUBSYSTEM==\\\"net\\\", ATTR{address}==\\\"XX:XX:XX:XX:XX:XX\\\", NAME=\\\"eth0\\\"\\n\\nタイポを修正\\nchanging net interface name from 'enp3s0' to 'eth0'\\n\\nうまくいった。\\n反映\\n# cd /etc/int.d\\n# rc-update delete net.enp3s0\\n# mv net.enp3s0 net.eth0\\n# rc-update add net.eth0 defalt\\n# vim /etc/conf.d/net\\n\\n# reboot\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
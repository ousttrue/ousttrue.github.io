{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-cppwinrt-uwp-md-13cef06643baed2d72e6.js","mappings":"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","sources":["webpack:///./content/posts/2017/cppwinrt_uwp.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"C++/CX を置き換えるよさげなライブラリ C++WinRT を発見した。\"), \"\\n\", React.createElement(_components.p, null, \"C++/CX の機能を純粋な C++(C++17 とか新しめの)で実装したものらしく、WinRT の C++バインディングのような位置。\\nC++/CX で\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">Windows::UI::Core::CoreWindow ^window;</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"のようなものを\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">#include &lt;winrt/Windows.UI.Core.h&gt;\\nwinrt::Windows::UI::Core::Core window;</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"のように置き換える。\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-> </code>\"\n    }\n  }), \"じゃなくて \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.</code>\"\n    }\n  }), \" を使うスマートポインタで実装されている。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Migrating C++/CX source code to C++/WinRT\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"C++/CX で async, await な非同期を実装する道具だった PPL もうまく置き換えているようだ。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Using C++ co-routines with C++/WinRT asynchronous methods\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"やってみる\\nclone\\nhttps://github.com/Microsoft/cppwinrtをcloneしてincludeできるようにしておく。\\nC++WinRT はヘッダオンリーライブラリである。\\nビルド確認\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/Microsoft/cppwinrt/tree/master/10.0.15063.0/Samples/CL\"), \"\\n\", React.createElement(_components.p, null, \"をベース。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">// main.cpp\\n#pragma comment(lib, &quot;windowsapp&quot;)\\n\\n#include &lt;winrt/base.h&gt;\\n\\nint __stdcall wWinMain(HINSTANCE, HINSTANCE, PWSTR, int)\\n{\\n    winrt::init_apartment();\\n\\n    return 0;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"あえて CMake で。\\nCMakeLists.txt\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cmake\\\"><pre class=\\\"language-cmake\\\"><code class=\\\"language-cmake\\\"><span class=\\\"token variable\\\">CMAKE_MINIMUM_REQUIRED</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token property\\\">VERSION</span> <span class=\\\"token number\\\">3.5</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">PROJECT</span><span class=\\\"token punctuation\\\">(</span>RendererToolkit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># .sln</span>\\n\\n<span class=\\\"token function\\\">ADD_DEFINITIONS</span><span class=\\\"token punctuation\\\">(</span>\\n    -DWIN32=<span class=\\\"token number\\\">1</span>\\n    -DUNICODE=<span class=\\\"token number\\\">1</span>\\n    -D_UNICODE=<span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">SET</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">CMAKE_C_FLAGS</span> <span class=\\\"token string\\\">\\\"/ZW /EHsc /await /std:c++latest\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">SET</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">CMAKE_CXX_FLAGS</span> <span class=\\\"token punctuation\\\">${</span><span class=\\\"token variable\\\">CMAKE_C_FLAGS</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token property\\\">INCLUDE_DIRECTORIES</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token comment\\\"># 適当にcloneしたパスを参照</span>\\n    <span class=\\\"token punctuation\\\">${</span><span class=\\\"token variable\\\">CMAKE_CURRENT_LIST_DIR</span><span class=\\\"token punctuation\\\">}</span>/cppwinrt/<span class=\\\"token number\\\">10.0.15063.0</span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">##############################################################################</span>\\n<span class=\\\"token comment\\\"># project</span>\\n<span class=\\\"token comment\\\">##############################################################################</span>\\n<span class=\\\"token function\\\">SET</span><span class=\\\"token punctuation\\\">(</span>PROJECTNAME _SampleCoreWindow<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">FILE</span><span class=\\\"token punctuation\\\">(</span>GLOB SRCS *.cpp *.h<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">ADD_EXECUTABLE</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">${</span>PROJECTNAME<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token variable\\\">WIN32</span> <span class=\\\"token punctuation\\\">${</span>SRCS<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">TARGET_INCLUDE_DIRECTORIES</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">${</span>PROJECTNAME<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token namespace\\\">PUBLIC</span>\\n    <span class=\\\"token punctuation\\\">${</span>SUBRENDERER_INCLUDE<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"UWP をターゲットにしたプロジェクトを生成する。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">> mkdir build\\n> cd build\\nbuild> cmake.exe -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -DCMAKE_C_FLAGS=/ZW /EHsc -G \\\"Visual Studio 15 2017 Win64\\\" ..</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"ビルドすると警告が出る。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">warning C4447: スレッド モデルのない 'main' シグネチャが見つかりました。'int main(Platform::Array&lt;Platform::String^>^ args)' の使用を検討してください。</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"以下のように属性をつければ外せた。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">[Platform::MTAThread]\\nint __stdcall wWinMain(HINSTANCE, HINSTANCE, PWSTR, int)</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Debug - X64 - ローカルコンピューター でアプリが起動して、即終了することが確認できればよし。\\nUWP の作法で空の App を作ってみる\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">#pragma comment(lib, &quot;windowsapp&quot;)\\n\\n#include &lt;winrt/Windows.ApplicationModel.Core.h&gt;\\n#include &lt;winrt/Windows.UI.Core.h&gt;\\n\\n//\\n// IFrameworkViewSourceとIFrameworkViewを一体化させるのは必要(ばらすとエラーになった)\\n//\\nstruct App : winrt::implements&lt;App\\n    , winrt::Windows::ApplicationModel::Core::IFrameworkViewSource\\n    , winrt::Windows::ApplicationModel::Core::IFrameworkView&gt;\\n{\\n    winrt::Windows::ApplicationModel::Core::IFrameworkView CreateView()\\n    {\\n        return *this;\\n    }\\n\\n    void Initialize(winrt::Windows::ApplicationModel::Core::CoreApplicationView const&amp;)\\n    {\\n    }\\n\\n    void Load(winrt::hstring const&amp;)\\n    {\\n    }\\n\\n    void Uninitialize()\\n    {\\n    }\\n\\n    void Run()\\n    {\\n        auto window = winrt::Windows::UI::Core::CoreWindow::GetForCurrentThread();\\n        window.Activate();\\n\\n        //\\n\\n        auto dispatcher = window.Dispatcher();\\n        dispatcher.ProcessEvents(winrt::Windows::UI::Core::CoreProcessEventsOption::ProcessUntilQuit);\\n    }\\n\\n    void SetWindow(winrt::Windows::UI::Core::CoreWindow const&amp;)\\n    {\\n\\n    }\\n};\\n\\n\\nint __stdcall wWinMain(HINSTANCE, HINSTANCE, PWSTR, int)\\n{\\n    winrt::init_apartment();\\n\\n    winrt::Windows::ApplicationModel::Core::CoreApplication::Run(App());\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"警告とは無関係に、実行に\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[Platform::MTAThread]</code>\"\n    }\n  }), \" か \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">winrt::init_apartment();</code>\"\n    }\n  }), \" のどちらかが必要？\"), \"\\n\", React.createElement(_components.p, null, \"IUnknown*を得る\\nwinrt::get_abi\\nメモ\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/Kitware/CMake/blob/master/Tests/VSWinStorePhone/CMakeLists.txt\"), \"\\n\", React.createElement(_components.p, null, \"VisualStudio2017 の C++/CX Universal D3D11 のテンプレートを C++/WinRT バージョンに改造できた。間違ってもコンパイルが通って実行時エラーになるのに難儀したが、C++/CX よりはだいぶ使い勝手がよさげな感じ。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/cppwinrt_uwp.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","ul","li","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
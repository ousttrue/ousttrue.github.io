{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-07-hololens-cpp-md-f12d0009f27b4c27849f.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,2CAA4C,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gGAAiG,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,8CAA+C,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mBAAoB,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,kBAAmB,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,0JAA2J,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CACt0BI,UAAW,gBACV,uuJAAwuJ,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,uTAAwT,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,2IAA4I,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,oIAAqI,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,+BAAgC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gBAAiB,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wBAAyB,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6CAA8C,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,0BAA2B,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mHAAoH,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,oOAAqO,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yBACr1M,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCXA,SAASa,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOL,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMM,EAAKE,IAAIC,YAAYC,OAAQV,EAAAA,cAAoBW,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBrB,GACvC,OAAOS,EAAAA,cAAoBI,EAAcb,EAAOS,EAAAA,cAAoBa,EAAqBtB,GAC3F,C,4HCuBO,MAAMuB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBhB,GAC/B,MAAMiB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAff,EACFA,EAAWiB,GAGb,IAAIA,KAAsBjB,IAChC,CAACiB,EAAmBjB,GACzB,CAGA,MAAMkB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACZ,EAAU,SAAEQ,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfnB,EACHA,EAAW,CAAC,GACZA,GAAckB,EAEJF,EAAiBhB,GAG5B,gBACLe,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2017/07/hololens_cpp.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"SharpDX で Hololens が頓挫したので、C++でまいりましょう。\"), \"\\n\", React.createElement(_components.p, null, \"VisualStudio2015update3 しか Univsersal cpp HolographicApp template が含まれないので github にコピーしておいた。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/HolographicApp\"), \"\\n\", React.createElement(_components.p, null, \"エミュレーターで描画が乱れる件\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \">>(tools)から\\n\")), \"\\n\", React.createElement(_components.p, null, \"check を外したらなおった。\\n実機\\n問題ない。\\nHololens 特有の部分\\n通常の DirectX と HolographicApp の違いを調べていたのだけれど、\\n両目レンダリングを効率よくするために、複数のレンダーターゲットに対して\\nまとめてパイプラインを実行する関連のようだ。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"VPAndRTArrayIndexFromAnyShaderFeedingRasterizer\\nVPAndRTArrayIndexFromAnyShaderFeedingRasterizerないとき(エミュレーター)\\n// A constant buffer that stores the model transform.\\ncbuffer ModelConstantBuffer : register(b0)\\n{\\n    float4x4 model;\\n};\\n\\n// A constant buffer that stores each set of view and projection matrices in column-major format.\\ncbuffer ViewProjectionConstantBuffer : register(b1)\\n{\\n    float4x4 viewProjection[2];\\n};\\n\\n// Per-vertex data used as input to the vertex shader.\\nstruct VertexShaderInput\\n{\\n    min16float3 pos     : POSITION;\\n    min16float3 color   : COLOR0;\\n    uint        instId  : SV_InstanceID;\\n};\\n\\n// Per-vertex data passed to the geometry shader.\\n// Note that the render target array index will be set by the geometry shader\\n// using the value of viewId.\\nstruct VertexShaderOutput\\n{\\n    min16float4 pos     : SV_POSITION;\\n    min16float3 color   : COLOR0;\\n    uint        viewId  : TEXCOORD0;  // SV_InstanceID % 2\\n};\\n\\n// Simple shader to do vertex processing on the GPU.\\nVertexShaderOutput main(VertexShaderInput input)\\n{\\n    VertexShaderOutput output;\\n    float4 pos = float4(input.pos, 1.0f);\\n\\n    // Note which view this vertex has been sent to. Used for matrix lookup.\\n    // Taking the modulo of the instance ID allows geometry instancing to be used\\n    // along with stereo instanced drawing; in that case, two copies of each\\n    // instance would be drawn, one for left and one for right.\\n    int idx = input.instId % 2;\\n\\n    // Transform the vertex position into world space.\\n    pos = mul(pos, model);\\n\\n    // Correct for perspective and project the vertex position onto the screen.\\n    pos = mul(pos, viewProjection[idx]);\\n    output.pos = (min16float4)pos;\\n\\n    // Pass the color through without modification.\\n    output.color = input.color;\\n\\n    // Set the instance ID. The pass-through geometry shader will set the\\n    // render target array index to whatever value is set here.\\n    output.viewId = idx;\\n\\n    return output;\\n}\\n\\n\\n// Per-vertex data from the vertex shader.\\nstruct GeometryShaderInput\\n{\\n    min16float4 pos     : SV_POSITION;\\n    min16float3 color   : COLOR0;\\n    uint        instId  : TEXCOORD0;\\n};\\n\\n// Per-vertex data passed to the rasterizer.\\nstruct GeometryShaderOutput\\n{\\n    min16float4 pos     : SV_POSITION;\\n    min16float3 color   : COLOR0;\\n    uint        rtvId   : SV_RenderTargetArrayIndex; // <- RTVテクスチャアレイのindex\\n};\\n\\n// This geometry shader is a pass-through that leaves the geometry unmodified\\n// and sets the render target array index.\\n[maxvertexcount(3)]\\nvoid main(triangle GeometryShaderInput input[3], inout TriangleStream<GeometryShaderOutput> outStream)\\n{\\n    GeometryShaderOutput output;\\n    [unroll(3)]\\n    for (int i = 0; i < 3; ++i)\\n    {\\n        output.pos   = input[i].pos;\\n        output.color = input[i].color;\\n        output.rtvId = input[i].instId;\\n        outStream.Append(output);\\n    }\\n}\\n\\nVPAndRTArrayIndexFromAnyShaderFeedingRasterizerあるとき\\n// A constant buffer that stores the model transform.\\ncbuffer ModelConstantBuffer : register(b0)\\n{\\n    float4x4 model;\\n};\\n\\n// A constant buffer that stores each set of view and projection matrices in column-major format.\\ncbuffer ViewProjectionConstantBuffer : register(b1)\\n{\\n    float4x4 viewProjection[2];\\n};\\n\\n// Per-vertex data used as input to the vertex shader.\\nstruct VertexShaderInput\\n{\\n    min16float3 pos     : POSITION;\\n    min16float3 color   : COLOR0;\\n    uint        instId  : SV_InstanceID;\\n};\\n\\n// Per-vertex data passed to the geometry shader.\\n// Note that the render target array index is set here in the vertex shader.\\nstruct VertexShaderOutput\\n{\\n    min16float4 pos     : SV_POSITION;\\n    min16float3 color   : COLOR0;\\n    uint        rtvId   : SV_RenderTargetArrayIndex; // SV_InstanceID % 2 // <- RTVテクスチャアレイのindex\\n};\\n\\n// Simple shader to do vertex processing on the GPU.\\nVertexShaderOutput main(VertexShaderInput input)\\n{\\n    VertexShaderOutput output;\\n    float4 pos = float4(input.pos, 1.0f);\\n\\n    // Note which view this vertex has been sent to. Used for matrix lookup.\\n    // Taking the modulo of the instance ID allows geometry instancing to be used\\n    // along with stereo instanced drawing; in that case, two copies of each\\n    // instance would be drawn, one for left and one for right.\\n    int idx = input.instId % 2;\\n\\n    // Transform the vertex position into world space.\\n    pos = mul(pos, model);\\n\\n    // Correct for perspective and project the vertex position onto the screen.\\n    pos = mul(pos, viewProjection[idx]);\\n    output.pos = (min16float4)pos;\\n\\n    // Pass the color through without modification.\\n    output.color = input.color;\\n\\n    // Set the render target array index.\\n    output.rtvId = idx;\\n\\n    return output;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"どう違うのか\\n見比べてみたところ、\\nVPAndRTArrayIndexFromAnyShaderFeedingRasterizer=true の場合\\nVertexShader で SV_RenderTargetArrayIndex を使うことが可能で、\\nそうでない場合は VertexShader で使うことができないが GeometryShader で SV_RenderTargetArrayIndex を使うことが可能ということらしい。\\nデバッガで確認したところ、実機・エミュレーター共に\\nbackbuffer は D3D11_TEXTURE2D_DESC.ArraySize=2 となっていた。\"), \"\\n\", React.createElement(_components.p, null, \"https://developer.microsoft.com/en-us/windows/mixed-reality/rendering_in_directx#important_note_about_rendering_on_non-hololens_devices\"), \"\\n\", React.createElement(_components.p, null, \"実機では VPAndRTArrayIndexFromAnyShaderFeedingRasterizer=true、エミュレーターで false で gometryshader 版になることがわかった。\\nSV_RenderTargetArrayIndex\"), \"\\n\", React.createElement(_components.p, null, \"VR のためのステレオレンダリングを高速化するアイデア\"), \"\\n\", React.createElement(_components.p, null, \"なんとなくわかってきた。\"), \"\\n\", React.createElement(_components.p, null, \"ジオメトリシェーダを使用した複数画面描画\"), \"\\n\", React.createElement(_components.p, null, \"SV_ViewportArrayIndex というのもあるらしい。\\nなるほどー。\"), \"\\n\", React.createElement(_components.p, null, \"セマンティクス (DirectX HLSL)\"), \"\\n\", React.createElement(_components.p, null, \"まとめ\\nD3D11 専用のレンダラを作ってみる。\\nHololens と UWP 兼用のプロジェクトにできそうな気がする。\\nHololens の初期化に失敗したら通常の UWP にフォールバックすればよいのではないか。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"HoloApp\\n    Backbuffer\\n    CameraUpdate\\n    Input\\n        |\\n        v\\n    +----------+\\n    |SceneGraph|\\n    |Renderer  |\\n    +----------+\\n        ^\\n        |\\n    Input\\n    CameraUpdate\\n    Backbuffer\\nUwpApp\\n\")), \"\\n\", React.createElement(_components.p, null, \"こんな感じのプロジェクトを模索してみよう。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/07/hololens_cpp.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
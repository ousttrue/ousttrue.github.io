"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6283],{8964:function(n,a,s){s.r(a),s.d(a,{default:function(){return i}});var t=s(1151),e=s(7294);function p(n){const a=Object.assign({p:"p",a:"a",span:"span",h1:"h1",h2:"h2"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,"Pythonのロガーの設定をどうすればいいのか。"),"\n",e.createElement(a.p,null,e.createElement(a.a,{href:"https://qiita.com/amedama/items/b856b2f30c2f38665701"},"ログ出力のための print と import logging はやめてほしい")),"\n",e.createElement(a.p,null,"を元に模索してみた。\n今使っている設定\nすべてのファイルの先頭にはこれだけ書いておく。\nいわばログ入力の設定。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">from</span> logging <span class="token keyword">import</span> getLogger\nlogger <span class="token operator">=</span> getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"これとは別に、ログ出力の設定を一か所だけ記述する。\nメインの始まるところがいいんでないか。\n他のライブラリをimportするより前に書きたいということもあるだろうからその辺はお好みで。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">\'__main__\'</span><span class="token punctuation">:</span>\n    <span class="token comment"># defaultのlogレベルではdebug出ないよ</span>\n    logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">\'before\'</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">from</span> logging <span class="token keyword">import</span> basicConfig<span class="token punctuation">,</span> DEBUG\n    basicConfig<span class="token punctuation">(</span>\n        level<span class="token operator">=</span>DEBUG<span class="token punctuation">,</span>\n        datefmt<span class="token operator">=</span><span class="token string">\'%H:%M:%S\'</span><span class="token punctuation">,</span>\n        <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">\'%(asctime)s[%(levelname)s][%(name)s.%(funcName)s] %(message)s\'</span>\n    <span class="token punctuation">)</span>\n\n    <span class="token comment"># 以降出る</span>\n    logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">\'after\'</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"以上で、デフォルトのログ設定を使ってログが画面に出力される。\nデフォルトのログ設定とは\n上記のプログラムでは以下のようにログが流れる。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">logger.debug(\'message\')\n  |\n  v            propagate(親にメッセージが伝搬する)\nlogger(__name__) -> logger(\'\')\n  handlers[           handlers[\n  ]                     Streamhandler -> コンソール画面\n                      ]</code></pre></div>'}}),"\n",e.createElement(a.p,null,"pythonのロガーは木構造\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">getLogger(__name__)</code>'}})," で得たロガーは ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__name__</code>'}})," という名前になり、",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">''</code>"}})," という名のロガーが親になる。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>getLogger<span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;</span>RootLogger root <span class="token punctuation">(</span>WARNING<span class="token punctuation">)</span><span class="token operator">></span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"というように ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">''</code>"}})," ロガーはルートロガーである。\nどういう基準で親子が決まるかというと名前ベースで ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">''</code>"}})," がすべての親、その子 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">'hoge'</code>"}})," 、さらにその子 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">'hoge.fuga'</code>"}})," というように ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.</code>'}})," をセパレータとしたパス名で決めているぽい。 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">getLogger(__name__)</code>'}})," という風にロガーを得れば、とりあえず ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">getLogger('')</code>"}})," の子孫になる。"),"\n",e.createElement(a.p,null,"https://docs.python.org/2/library/logging.html#logger-objects"),"\n",e.createElement(a.p,null,"さらにログは木構造を親に向かって遡りながら、通り道にあったhandlerに出力される。\nなのですべての親になるルートロガーにひとつだけhandlerをセットしておけばよい。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span>\n<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre></div>'}}),"\n",e.createElement(a.h1,null,"ルートロガーにはデフォルトでStreamHandlerがセットされている"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>getLogger<span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>handlers<span class="token punctuation">)</span>\n<span class="token punctuation">[</span><span class="token operator">&lt;</span>StreamHandler <span class="token operator">&lt;</span>stderr<span class="token operator">></span> <span class="token punctuation">(</span>NOTSET<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">]</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"親に向かって流すかどうかを設定するには以下のようにする。"),"\n",e.createElement(a.h1,null,"親に流さない"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py">logger<span class="token punctuation">.</span>propagate<span class="token operator">=</span><span class="token boolean">False</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"前知識としてこれくらいあればカスタマイズできる。\n出力のカスタマイズ\n基本的に、ルートロガーに好みのフォーマットやハンドラを設定することになると思う。\nデフォルトのStreamHandlerを削除する"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py">getLogger<span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.h2,null,"Formatを変えよう"),"\n",e.createElement(a.p,null,"サーバー風の時刻付きのフォーマットとか。"),"\n",e.createElement(a.h2,null,"デフォルトのハンドラを得る"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py">handler<span class="token operator">=</span>getLogger<span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre></div>'}}),"\n",e.createElement(a.h2,null,"もしくは自前で作る"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">from</span> logging <span class="token keyword">import</span> StreamHandler\nhandler<span class="token operator">=</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>\ngetLogger<span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>\n\n<span class="token keyword">from</span> logging <span class="token keyword">import</span> Formatter\nformatter<span class="token operator">=</span>Formatter<span class="token punctuation">(</span><span class="token string">\'%(name)s => %(asctime)s [%(levelname)s] %(message)s\'</span><span class="token punctuation">)</span>\nhandler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"使える変数は、LogRecord attributesらしい。"),"\n",e.createElement(a.p,null,"https://docs.python.org/2/library/logging.html#logrecord-attributes"),"\n",e.createElement(a.p,null,"日付のカスタマイズは？"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py">basicConfig<span class="token punctuation">(</span>\n       datefmt<span class="token operator">=</span><span class="token string">\'%H:%M:%S\'</span><span class="token punctuation">,</span>\n       <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">\'%(asctime)s[%(levelname)s] %(name)s.%(funcName)s => %(message)s\'</span><span class="token punctuation">)</span>\n       <span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.h2,null,"色付きにしよう"),"\n",e.createElement(a.p,null,"おされなコンソール"),"\n",e.createElement(a.p,null,"Pythonで色つきログを - rainbow_logging_handler をPyPIにリリースしました"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">from</span> rainbow_logging_handler <span class="token keyword">import</span> RainbowLoggingHandler\nhandler <span class="token operator">=</span> RainbowLoggingHandler<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>\ngetLogger<span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>handler<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"QtのWidgetに出力する\nStackOverflowとかで見つけた気がするがとりあえず。"),"\n",e.createElement(a.p,null,"https://github.com/buha/gpibcs/blob/master/qplaintexteditlogger.py"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">class</span> <span class="token class-name">QPlainTextEditLogger</span><span class="token punctuation">(</span>logging<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">\'\'\'\n    Logger\n    \'\'\'</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>widget<span class="token operator">=</span><span class="token boolean">None</span>\n\n    <span class="token keyword">def</span> <span class="token function">set_widget</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>widget <span class="token operator">=</span> widget\n        self<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>setReadOnly<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">def</span> <span class="token function">emit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n        msg <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>widget<span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n\n        <span class="token keyword">if</span> <span class="token keyword">not</span> msg<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"\\n"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            msg<span class="token operator">+=</span><span class="token string">"\\n"</span>\n        self<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>textCursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>movePosition<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QTextCursor<span class="token punctuation">.</span>Start<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>textCursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>insertText<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n        <span class="token comment">#self.widget.insertPlainText(msg)</span>\n\n    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">pass</span>\n\nhandler<span class="token operator">=</span>QPlainTextEditLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>\ngetLogger<span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>handler<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"ログレベル別に色を付けてみる"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py">    <span class="token keyword">def</span> <span class="token function">emit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        msg <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>widget<span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n\n        <span class="token keyword">if</span> record<span class="token punctuation">.</span>levelno <span class="token operator">==</span> DEBUG<span class="token punctuation">:</span>\n            msg <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f\'&lt;font color="gray"></span><span class="token interpolation"><span class="token punctuation">{</span>msg<span class="token punctuation">}</span></span><span class="token string">&lt;/font>&lt;br>\'</span></span>\n        <span class="token keyword">elif</span> record<span class="token punctuation">.</span>levelno <span class="token operator">==</span> WARNING<span class="token punctuation">:</span>\n            msg <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f\'&lt;font color="orange"></span><span class="token interpolation"><span class="token punctuation">{</span>msg<span class="token punctuation">}</span></span><span class="token string">&lt;/font>&lt;br>\'</span></span>\n        <span class="token keyword">elif</span> record<span class="token punctuation">.</span>levelno <span class="token operator">==</span> ERROR<span class="token punctuation">:</span>\n            msg <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f\'&lt;font color="red"></span><span class="token interpolation"><span class="token punctuation">{</span>msg<span class="token punctuation">}</span></span><span class="token string">&lt;/font>&lt;br>\'</span></span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            msg <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f\'</span><span class="token interpolation"><span class="token punctuation">{</span>msg<span class="token punctuation">}</span></span><span class="token string">&lt;br>\'</span></span>\n\n        self<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>textCursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>movePosition<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QTextCursor<span class="token punctuation">.</span>Start<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>textCursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>insertHtml<span class="token punctuation">(</span>msg<span class="token punctuation">)</span></code></pre></div>'}}))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)},l=s(8678),c=s(8838);const u={code:n=>{let{children:a,className:s}=n;return s?e.createElement(c.Z,{className:s},a):e.createElement("code",null,a)}};function r(n){let{data:a,children:s}=n;return e.createElement(l.Z,null,e.createElement("h1",null,a.mdx.frontmatter.title),e.createElement(t.Zo,{components:u},s))}function i(n){return e.createElement(r,n,e.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-python-logger-md-fbaae326ae1f9506e9a4.js.map
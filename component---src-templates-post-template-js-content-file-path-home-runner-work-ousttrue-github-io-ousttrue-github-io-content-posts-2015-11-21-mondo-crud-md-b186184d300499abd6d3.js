"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6146],{3584:function(n,e,t){t.r(e),t.d(e,{default:function(){return c}});var r=t(1151),o=t(7294);function s(n){const e=Object.assign({span:"span"},(0,r.ah)(),n.components);return o.createElement(e.span,{dangerouslySetInnerHTML:{__html:"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">“シングルページWebアプリケーション”に説明されている\nmongodbをバックエンドに、node.js + expressをフロントエンドにする構成のおさらい。\nMongoDB &lt;-> node.js Express &lt;-> Browser\n\nグローバルなnpmパッケージ\n> npm install -g gulp typescript tsd bower\n\nWindowsの場合、\n%USERPROFILE%\\AppData\\Roaming\\npm\n\nにインストールされるのでパスを通しておく。\nExpressの準備\napp.js\n> mkdir mongocrud\n> cd mongocrud\nmongocrud> npm init -y\nmongocrud> npm install express --save\n\n// app.js\nvar http=require('http');\nvar express=require('express');\n\nvar port=process.env.port || 3000;\nvar app=express();\nvar server=http.createServer(app);\n\napp.get('/', function(request, response){\n    response.send('Hello Express');\n});\n\nserver.listen(port);\n\n起動\n> node app.js\n\nhttp://localhost:3000\nで動作を確認する。\nloggerや静的ファイル提供などのミドルウェアを追加\nmongocrud> npm install body-parser method-override connect-logger errorhandler serve-static --save\n\n// app.js\n// app.getの前\nvar bodyparser=require('body-parser');\nvar methodoverride = require('method-override');\nvar logger = require('connect-logger');\nvar errorhandler = require('errorhandler');\nvar servestatic = require('serve-static');\nvar serve_dir=__dirname + \"/client\";\nconsole.log(\"serve %s\", serve_dir);\napp\n.use(bodyparser())\n.use(methodoverride())\n.use(logger())\n.use(errorhandler({\n    dumpExceptioons: true,\n    showStack: true\n}));\n.use(servestatic(serve_dir))\n\ngulpで静的なファイルを’./build/client’下にコピーするタスクを定義する\n# gulpfile.coffeeにタスクを追加\n\n#\n# client\n#\ngulp.task 'client', ->\n    gulp.src config.src_client\n        .pipe gulp.dest config.dst_client\n        .pipe browserSync.stream()\n\n# tasks\ngulp.task 'watch', ->\n    gulp.watch config.src_ts, ['ts']\n    gulp.watch config.src_client, ['client']\n\ngulpでサーバー起動とブラウザの自動オープンタスクを定義する\nいろいろ入用になるのでgulpを準備する。\nまずは、nodemonとbrowser-syncを導入して\napp.js起動と起動したアプリをブラウザで自動で開くタスクを定義する。\nmongocrud> npm install gulp gulp-load-plugins gulp-nodemon browser-sync -D\n\n// gulpfile.js\nvar gulp = require('gulp');\nvar $ = require(\"gulp-load-plugins\")();\nvar browserSync = require(\"browser-sync\").create();\nvar port = 5000;\n\ngulp.task('serve', function () {\n    $.nodemon({\n        script: 'app.js',\n        exp: 'js',\n        ignore: [],\n        env: {\n            port: port\n        }\n    })\n    .on('restart', function () { browserSync.reload(); });\n});\n\ngulp.task('browser-sync', ['serve'], function () {\n    browserSync.init({\n        proxy: \"localhost:\" + port\n    });\n});\n\ngulp.task('default', ['browser-sync']);\n\n\nBrowserSyncのReloadが動くには出力がhtmlである必要がある(bodyタグの中に細工をするため)。\n// app.jsの修正\napp.get('/', function(request, response){\n    response.setHeader('content-type', 'text/html');\n    response.send('&lt;html>&lt;head>&lt;/head>&lt;body>Hello html&lt;/body>&lt;/html>');\n});\n\nmongocrud> gulp\n\nでnodemonが起動してブラウザが自動で開始される。\napp.jsの内容を変えるとブラウザがリロードされる。\nが、リロードが速すぎて内容が更新されないことが判明。\nリロードを遅延させる策を講じる。\n// app.jsの最後尾に追加\nconsole.log('start %d', port);\n\napp.jsからのコンソール出力を監視する。\n// gulpfile.jsの修正\n\n    $.nodemon({\n        script: config.app_entry,\n        exp: 'js',\n        ignore: [],\n        env: {\n            port: config.app_port\n        },\n        stdout: false // &lt;- 必要\n    })\n    //.on('restart', function () { browserSync.reload(); });\n    .on('readable', function(){\n        this.stdout.on('data', function(chunk){\n            if (/^start /.test(chunk)){\n                console.log('reloading...');\n                browserSync.reload();\n            }\n            process.stdout.write(chunk);\n        });\n    });\n\ngulpfile.jsをgulpfile.coffeeにする\ngulpcrud> npm install coffee-script -D\n\ngulpfile.jsを書き換える。gulp-3.9.0では既にcoffee script対応が成されているようで、\ngulpfile.jsの拡張子を変えてgulpfile.coffeeとリネームして中身を書き換えてから\nmongocrud> gulp\n\nとしたら特にオプション等を指定することなくgulpはgulpfile.coffeeを見つけてくれて動いた。\n# gulpfile.coffee\ngulp = require('gulp');\n$ = require(\"gulp-load-plugins\")();\nbrowserSync = require(\"browser-sync\").create();\nport = 5000;\n\ngulp.task 'serve', ->\n    $.nodemon({\n        script: 'app.js',\n        exp: 'js',\n        ignore: [],\n        env: {\n            port: port\n        }\n    })\n    .on 'readable', ->\n        this.stdout.on 'data', (chunk) ->\n            if (/^start /.test(chunk))\n                console.log('reloading...')\n                browserSync.reload()\n            process.stdout.write(chunk);\n\ngulp.task 'browser-sync', ['serve'], ->\n    browserSync.init({\n        proxy: \"localhost:\" + port\n    })\n\ngulp.task('default', ['browser-sync']);\n\nTypeScriptにする\napp.jsをsrc/app.tsに移動する。\n// src/app.ts\ndeclare function require(name: string):any;\ndeclare var process;\n\nvar http=require('http');\nvar express=require('express');\n\nvar port=process.env.port || 3000;\nvar app=express();\nvar server=http.createServer(app);\n\napp.get('/', function(request, response){\n    response.setHeader('content-type', 'text/html');\n    response.send('&lt;html>&lt;head>&lt;/head>&lt;body>Hello&lt;/body>&lt;/html>');\n});\n\nserver.listen(port);\nconsole.log('start %d', port);\n\nコンパイルが通るようにアンビエント宣言を追加した。\ngulpにコンパイルタスクを定義する。\nserveタスクの前にtsタスクを実行し、\ntsファイルの更新をwatchしてtsタスクを起動するように調整した。\n# gulpfile.coffee\ngulp = require('gulp');\n$ = require(\"gulp-load-plugins\")();\nbrowserSync = require(\"browser-sync\").create();\n\nconfig = {\n    src_ts: './src/**/*.ts',\n    dst_js_dir: './build/js',\n    dst_watch: './build/**/*.js',\n    app_entry: './build/js/app.js',\n    app_port: 5000\n}\n\n\n#\n# compile typescript\n#\ngulp.task 'ts', ->\n  gulp.src config.src_ts\n    .pipe $.typescript({\n      target: 'ES6'\n      removeComments: true\n    }).js\n    .pipe gulp.dest config.dst_js_dir\n\n\n#\n# start js app\n#\ngulp.task 'serve', ['ts'], ->\n    $.nodemon({\n        script: config.app_entry,\n        exp: 'js',\n        ignore: [],\n        env: {\n            port: config.app_port\n        },\n        stdout: false\n    })\n    #.on 'restart', ->\n    #    browserSync.reload();\n    .on 'readable', ->\n        this.stdout.on 'data', (chunk) ->\n            if (/^start /.test(chunk))\n                console.log('reloading...')\n                browserSync.reload()\n            process.stdout.write(chunk);\n\n#\n# start browser-sync\n#\ngulp.task 'browser-sync', ['serve'], ->\n    browserSync.init({\n        proxy: \"http://localhost:\" + config.app_port\n    })\n\n# tasks\ngulp.task 'watch', ->\n    gulp.watch config.src_ts, ['ts']\n\ngulp.task('default', ['watch', 'browser-sync']);\n\ntypescriptを型安全にする\nコンパイラオプションを定義するtsconfig.jsonを生成する(要tsc-1.6以上)。\nmongocrud> tsc --init\n\n手で作ってもよし\ntsconfig.json\n{\n    \"compilerOptions\": {\n        \"module\": \"commonjs\",\n        \"target\": \"es5\",\n        \"noImplicitAny\": true,\n        \"outDir\": \"build\",\n        \"rootDir\": \".\",\n        \"sourceMap\": false\n    },\n    \"filesGlob\": [\n        \"./typings/**/*.d.ts\",\n        \"./src/**/*.ts\"\n    ]\n}\n\nVSCodeの場合、tsconfig.jsonを変えたらVSCodeを再起動するべし。\nfilesGlobは必要で、無いとインテリセンスが遅くなる(Loading…)。\ntsタスクがtsconfig.jsonを使うようにする。\n# gulpfile.coffee\ngulp.task 'ts', ->\n  tsconfig = require('tsconfig.json')\n  gulp.src config.src_ts\n    .pipe $.typescript(tsconfig.compilerOptions).js\n    .pipe gulp.dest config.dst_js_dir\n\ntsdを初期化して、node.jsとexpressのtypescript定義を取得する。\nmongocrud> tsd init\nmongocrud> tsd query node express -rosa install\n\nsrc/app.ts\n/// &lt;reference path=\"../typings/tsd.d.ts\" />\nimport http = require('http');\nimport express=require('express');\n\nvar port=process.env.port || 3000;\nvar app=express();\nvar server=http.createServer(app);\n\napp.get('/', (request, response) => {\n    response.setHeader('content-type', 'text/html');\n    response.send('&lt;html>&lt;head>&lt;/head>&lt;body>Hello ts&lt;/body>&lt;/html>');\n});\n\nserver.listen(port);\nconsole.log('start %d', port);\n\nMongoDBのCRUDを定義する\nmongodbをインストールする。\nWindowsの場合、MongoDBがデフォルトの”Program Files”にインストールされるとパスにスペースが入って\ngulpからの起動時にエスケープと戦う必要が生じるので、\nC:\\MongoDB\n\nにインストールした。\ngulpでmongodbを起動する\nmongocrud> npm i sprintf-js -D\n\n# gulpfile.coffee\nMONGO_EXE = 'C:/MongoDB/bin/mongod.exe';\n\n#\n# Running mongo\n#\n# http://stackoverflow.com/a/28048696/46810\nsprintf = require('sprintf-js').sprintf;\nfs = require('fs');\nexec = require('child_process').exec;\ngulp.task 'mongodb:start', (cb)->\n    command=sprintf('%s --dbpath %s'\n        , MONGO_EXE, config.mongo_data);\n    if(!fs.existsSync(config.mongo_data))\n        fs.mkdirSync(config.mongo_data);\n    exec command, (err, stdout, stderr) ->\n        console.log(stdout);\n        console.log(stderr);\n    cb();\n\napp.tsからmongodbにアクセスする\nmongocrud> npm install mongodb --save\nmongocrud> tsd query mongodb -rosa install\n\nsrc/app.ts\n/// &lt;reference path=\"../typings/tsd.d.ts\" />\n\n// mongodb\nimport mongodb = require('mongodb');\nlet mongoServer = new mongodb.Server(\n    'localhost', 27017\n);\nlet dbHandle = new mongodb.Db(\n    'crud', mongoServer, {w: 1}\n);\ndbHandle.open(()=>{\n   console.log(\"connected to mongoDB\");\n});\n\n// http\nimport http = require('http');\nimport express = require('express');\nlet port = process.env.port || 3000;\nlet app = express();\nlet server = http.createServer(app);\napp.get('/', (request, response) => {\n    response.setHeader('content-type', 'text/html');\n    response.send('&lt;html>&lt;head>&lt;/head>&lt;body>Hello ts&lt;/body>&lt;/html>');\n});\n\nserver.listen(port);\nconsole.log('start %d', port);\n\nCRUDを定義する\nCreating a REST API using Node.js, Express, and MongoDB\nを参考に実装。\nsrc/app.tsのデータにアクセスする部分をsrc/mongodb.tsに分離した。\nsrc/app.ts\n/// &lt;reference path=\"../typings/tsd.d.ts\" />\nimport mongocrud = require('./mongocrud');\n\n//\n// Express\n//\nimport http = require('http');\nimport express = require('express');\n\nlet port = process.env.port || 3000;\nlet app = express();\nlet server = http.createServer(app);\n\nlet bodyparser=require('body-parser');\nlet methodoverride = require('method-override');\nlet logger = require('connect-logger');\nlet errorhandler = require('errorhandler');\napp\n.use(bodyparser())\n.use(methodoverride())\n.use(logger())\n.use(errorhandler({\n    dumpExceptioons: true,\n    showStack: true\n}));\n\napp.get('/', (request, response) => {\n    response.setHeader('content-type', 'text/html');\n    response.send('&lt;html>&lt;head>&lt;/head>&lt;body>Hello ts&lt;/body>&lt;/html>');\n});\nserver.listen(port);\n\n// restful\napp.all('/api/:obj_type/*', (req, res, next)=>{\n   res.contentType('json');\n   next();\n});\napp.get('/api/:obj_type', mongocrud.findAll);\napp.get('/api/:obj_type/:id', mongocrud.findById);\napp.post('/api/:obj_type', mongocrud.add);\napp.put('/api/:obj_type/:id', mongocrud.update);\napp.delete('/api/:obj_type/:id', mongocrud.del);\n\n// launchded\nconsole.log('start %d', port);\n\nsrc/mongocrud.ts\n/// &lt;reference path=\"../typings/tsd.d.ts\" />\n//\n// MongoDB\n//\nimport mongodb = require('mongodb');\nlet mongoServer = new mongodb.Server(\n    'localhost', 27017\n);\nlet db = new mongodb.Db(\n    'crud', mongoServer, { w: 1 }\n);\ndb.open(() => {\n    console.log(\"connected to mongoDB\");\n    populateDB();\n});\n\n//\n// CRUD\n//\nimport express = require('express');\nexport var findById = (req: express.Request, res: express.Response) => {\n    let obj_type = req.params.obj_type;\n    let id = req.params.id;\n    console.log('Retrieving %s: %s', obj_type, id);\n    db.collection(obj_type, (err, collection) => {\n        collection.findOne({ '_id': new mongodb.ObjectID(id) }, (err, item) => {\n            res.send(item);\n        });\n    });\n};\n\nexport var findAll = (req: express.Request, res: express.Response) => {\n    let obj_type = req.params.obj_type;\n    db.collection(obj_type, (err, collection) => {\n        collection.find().toArray((err, items) => {\n            res.send(items);\n        });\n    });\n};\n\nexport var add = (req: express.Request, res: express.Response) => {\n    let obj_type = req.params.obj_type;\n    let body = req.body;\n    console.log('Adding %s: %s', obj_type, JSON.stringify(body));\n    db.collection(obj_type, (err, collection) => {\n        collection.insert(body, { safe: true }, (err, result) => {\n            if (err) {\n                res.send({ 'error': 'An error has occurred' });\n            } else {\n                console.log('Success: ' + JSON.stringify(result[0]));\n                res.send(result[0]);\n            }\n        });\n    });\n}\n\nexport var update = (req: express.Request, res: express.Response) => {\n    let obj_type = req.params.obj_type;\n    let id = req.params.id;\n    let body = req.body;\n    console.log('Updating %s: %s', obj_type, id);\n    console.log(JSON.stringify(body));\n    db.collection('wines', (err, collection) => {\n        collection.update({ '_id': new mongodb.ObjectID(id) },\n            body, { safe: true }, (err, result) => {\n                if (err) {\n                    console.log('Error updating wine: ' + err);\n                    res.send({ 'error': 'An error has occurred' });\n                } else {\n                    console.log('%s document(s) updated', result);\n                    res.send(body);\n                }\n            });\n    });\n}\n\nexport function del(req: express.Request, res: express.Response){\n    let obj_type = req.params.obj_type;\n    var id = req.params.id;\n    console.log('Deleting %s: %s', obj_type, id);\n    db.collection(obj_type, (err, collection) => {\n        collection.remove({ '_id': new mongodb.ObjectID(id) },\n            { safe: true }, (err, result) => {\n                if (err) {\n                    res.send({ 'error': 'An error has occurred - ' + err });\n                } else {\n                    console.log('%s document(s) deleted', result);\n                    res.send(req.body);\n                }\n            });\n    });\n}\n\n// Populate database with sample data -- Only used once: the first time the application is started.\n// You'd typically not find this code in a real-life app, since the database would already exist.\nfunction populateDB() {\n    console.log('populateDB...');\n\n    var wines = [\n        {\n            name: \"CHATEAU DE SAINT COSME\",\n            year: \"2009\",\n            grapes: \"Grenache / Syrah\",\n            country: \"France\",\n            region: \"Southern Rhone\",\n            description: \"The aromas of fruit and spice...\",\n            picture: \"saint_cosme.jpg\"\n        },\n        {\n            name: \"LAN RIOJA CRIANZA\",\n            year: \"2006\",\n            grapes: \"Tempranillo\",\n            country: \"Spain\",\n            region: \"Rioja\",\n            description: \"A resurgence of interest in boutique vineyards...\",\n            picture: \"lan_rioja.jpg\"\n        }];\n\n    db.collection('wines', (err, collection) => {\n        collection.find().toArray((err, items) => {\n            if(items.length==0){\n                // if empty\n                console.log('insert wines: ' + JSON.stringify(wines));\n                db.collection('wines', function(err, collection) {\n                    collection.insert(wines, { safe: true }, function(err, result) { });\n                });\n            }\n        });\n    });\n};\n\nブラウザ向けのGUIを作る\nざっくりレイアウト\n&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n&lt;head>\n    &lt;meta charset=\"UTF-8\">\n    &lt;title>Document&lt;/title>\n    &lt;link rel=\"stylesheet\" href=\"css/style.css\">\n    &lt;script src=\"js/client.js\">&lt;/script>\n&lt;/head>\n&lt;body>\n&lt;div class=\"header\">\n    &lt;form action=\"select\">\n        &lt;span class=\"label\">collection name&lt;/span>\n        &lt;input type=\"text\">\n        &lt;button>Select&lt;/button>\n    &lt;/form>\n&lt;/div>\n&lt;div class=\"body\">\n    &lt;div class=\"left\">\n        &lt;div class=\"list\">\n\n        &lt;/div>\n        &lt;form action=\"add\">\n            &lt;button>Add&lt;/button>\n        &lt;/form>\n    &lt;/div>\n    &lt;div class=\"right\">\n        &lt;form>\n            &lt;textarea name=\"detail\">\n            &lt;/textarea>\n            &lt;button>Load&lt;/button>\n            &lt;button>Save&lt;/button>\n        &lt;/form>\n    &lt;/div>\n&lt;/div>\n&lt;div class=\"footer\">\n    &lt;ul class=\"log\">\n    &lt;/ul>\n&lt;/div>\n&lt;/body>\n&lt;/html>\n\n* {\nmargin: 0;\npadding: 0;\n}\n\nhtml{\n    font-size: 62.5%;\n}\n\n*, *::before, *::after {\n    box-sizing: border-box;\n}\n\n.header{\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 64px;\n    background-color: #faa;\n}\n.body{\n    position: absolute;\n    top: 64px;\n    left: 0;\n    right: 0;\n    bottom: 128px;\n    background-color: #afa;\n}\n.body .left {\n    position: absolute;\n    left: 0;\n    width: 200px;\n    top: 0;\n    bottom: 0;\n    background-color: #282;\n}\n.body .right {\n    position: absolute;\n    left: 200px;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    background-color: #828;\n}\n.footer{\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: 128px;\n    background-color: #aaf;\n}\n\nalert('hello');\n\njqueryを追加\nmongocrud> cd client\nmongocrud/client> bower init\nmongocrud/client> bower install jquery --save\n\nまとまりが無くなってきた。\n別のページに整理しなおそう。\nあとから、coffee-scriptやtypescritpを導入すると手順としては冗長になりすぎるな。\n最初から、NoDemon, Express, BrowserSyync, gulpfile.coffee, typescript, scssの構成にしよう。</code></pre></div>"}})}var l=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?o.createElement(e,n,o.createElement(s,n)):s(n)},p=(t(8678),t(8838));const a={code:n=>{let{children:e,className:t}=n;return t?o.createElement(p.Z,{className:t},e):o.createElement("code",null,e)}};function i(n){let{data:e,children:t}=n;return o.createElement(o.Fragment,null,o.createElement("h1",null,e.mdx.frontmatter.title),o.createElement(r.Zo,{components:a},t))}function c(n){return o.createElement(i,n,o.createElement(l,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-11-21-mondo-crud-md-b186184d300499abd6d3.js.map
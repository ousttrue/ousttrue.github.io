{"version":3,"file":"component---content-posts-2021-luajitffi-md-1e0d977a1c80337d4089.js","mappings":"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","sources":["webpack:///./content/posts/2021/luajitffi.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"lua による imgui 計画の準備として、 \", React.createElement(_components.code, null, \"libclang\"), \" によるバインディング生成器を \", React.createElement(_components.code, null, \"luajit\"), \" に移植してみた。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/luajitffi\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"libclang\"), \" に対してはだいだい動くようになって、自身で生成した \", React.createElement(_components.code, null, \"FFI\"), \" で動作するところまでできた。\\nまた、 \", React.createElement(_components.code, null, \"EmmyLua Annotation\"), \" もある程度付与できた。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/luajitffi/blob/master/clang/mod.lua\"), \"\\n\", React.createElement(_components.p, null, \"こいつで、 \", React.createElement(_components.code, null, \"imgui.h\"), \" から luajit FFI を生成する。\"), \"\\n\", React.createElement(_components.h2, null, \"libclang\"), \"\\n\", React.createElement(_components.p, null, \"c(c++)ヘッダーを \", React.createElement(_components.code, null, \"clang_visitChildren\"), \" により、カーソルのTree としてパースする。\\n今回は、 \", React.createElement(_components.code, null, \"CXChildVisit_Recurse\"), \" で全部のカーソルをパースすることにした。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"同じカーソルが複数個所に現れうる\"), \"\\n\", React.createElement(_components.li, null, \"循環しうる(Link List ？)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"がありうることを考慮しておく。\\n\", React.createElement(_components.code, null, \"clang-c/Index.h\"), \" は 6000 カーソルくらいなので問題ないが、 \", React.createElement(_components.code, null, \"Windows.h\"), \" とかは 150000 カーソルとか爆発する。\"), \"\\n\", React.createElement(_components.h2, null, \"わりと色んなところで型がネストしていてつらい\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"struct の中は namespace なので何でもあり\"), \"\\n\", React.createElement(_components.li, null, \"anonymous な union や struct のその場定義\"), \"\\n\", React.createElement(_components.li, null, \"typedef struct などのその場定義\"), \"\\n\", React.createElement(_components.li, null, \"関数ポインタのその場定義\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"要するに、Cのコードの書き方によってどのようなカーソル構造になるかのパターンを知っている必要があって、\\nパターン毎に分岐して情報を収集する必要がある。\\nある型のメンバーの情報を集めていると、ネストした別の型情報が現れる場合があるので切り分ける。\"), \"\\n\", React.createElement(_components.h2, null, \"基本的なパターン\"), \"\\n\", React.createElement(_components.p, null, \"FFI では、対象となる関数を起点にその関数が使用するすべての型の定義を取り込む。\\nカーソルはCのTranslationUnitの木構造をあらわしていて、型をあらわしていない。\\nカーソルから頑張って型を得る。\\n型を得られるカーソルは決まっていて、\", React.createElement(_components.code, null, \"CXCursorType\"), \" が宣言Declの系列となる。\"), \"\\n\", React.createElement(_components.p, null, \"TODO\"), \"\\n\", React.createElement(_components.h3, null, \"カーソル FunctionDecl\"), \"\\n\", React.createElement(_components.h3, null, \"カーソル EnumDecl\"), \"\\n\", React.createElement(_components.h3, null, \"カーソル TypedefDecl\"), \"\\n\", React.createElement(_components.h3, null, \"カーソル StructDecl\"), \"\\n\", React.createElement(_components.h3, null, \"Type Pointer\"), \"\\n\", React.createElement(_components.h3, null, \"Type Array\"), \"\\n\", React.createElement(_components.h3, null, \"Type Elaborated\"), \"\\n\", React.createElement(_components.h3, null, \"Type Record\"), \"\\n\", React.createElement(_components.h3, null, \"Type FunctionProto 関数ポインタ pointer => functionproto\"), \"\\n\", React.createElement(_components.h3, null, \"union\"), \"\\n\", React.createElement(_components.h3, null, \"typedef struct\"), \"\\n\", React.createElement(_components.h3, null, \"c++ name mangling\"), \"\\n\", React.createElement(_components.h3, null, \"マクロとの戦い\"), \"\\n\", React.createElement(_components.h2, null, \"luajit ffi\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"ffi.cdef\"), \" に素直に定義すればいいので、他の言語の FFI に比べて簡単。\"), \"\\n\", React.createElement(_components.p, null, \"はまり。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"ffi.load\"), \" の返り値が GC されると関数ポインタが死ぬ\"), \"\\n\", React.createElement(_components.li, null, \"pointer は \", React.createElement(_components.code, null, \"ffi.new('TYPE[1]')\"), \" のようにサイズ１の array で運用する\"), \"\\n\", React.createElement(_components.li, null, \"tostring と ffi.string は違う\"), \"\\n\", React.createElement(_components.li, null, \"nullptr は nil ?\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"だいたいよきに計らってくれるので、 \", React.createElement(_components.code, null, \"rust\"), \" の FFI に比べて簡単なのであった。\"), \"\\n\", React.createElement(_components.p, null, \"ひとつだけはまりがあって、 \", React.createElement(_components.code, null, \"struct\"), \" の値渡しができない場合がある。\"), \"\\n\", React.createElement(_components.p, null, \"http://wiki.luajit.org/FFI-Callbacks-with-pass-by-value-structs\"), \"\\n\", React.createElement(_components.p, null, \"そういえば、 \", React.createElement(_components.code, null, \"rust\"), \" でも \", React.createElement(_components.code, null, \"struct\"), \" の値渡しではまった記憶が。\"), \"\\n\", React.createElement(_components.p, null, \"https://forum.dlang.org/thread/dkamxcamwttszxwwxttv@forum.dlang.org\"), \"\\n\", React.createElement(_components.p, null, \"rust の場合は、 \", React.createElement(_components.code, null, \"struct\"), \" の値返しが動かなかった。\\nこれ、C の方で pointer 経由で値を返すラッパーを定義する必要があって回避方法はなかった。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"ImVec2 ImGui::GetContentRegionAvail()\")), \"\\n\", React.createElement(_components.p, null, \"luajit ffi でもできるか注意が必要だな。\"), \"\\n\", React.createElement(_components.h2, null, \"lfs への依存を FFI した Windows API で置き換える\"), \"\\n\", React.createElement(_components.p, null, \"現状、ファイル操作 \", React.createElement(_components.code, null, \"isExists\"), \", \", React.createElement(_components.code, null, \"mkDir\"), \" のために lfs を使っているのだけど、\\nFFI で Windows API にアクセスできるようにしたら lfs 無しにできそう。\\nとなれば luarocks も無しにできるので、 必要なのは luajit.exe だけになる。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","h2","ul","li","h3","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
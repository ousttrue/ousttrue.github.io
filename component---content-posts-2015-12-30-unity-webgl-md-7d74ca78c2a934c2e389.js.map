{"version":3,"file":"component---content-posts-2015-12-30-unity-webgl-md-7d74ca78c2a934c2e389.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,IAAK,MACLC,KAAM,OACNC,EAAG,MACFC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,IAAK,KAAMK,EAAAA,cAAoBR,EAAYI,KAAM,CAChIK,UAAW,uBACV,yTAA4T,KAAMD,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,kDAAmD,KAAMG,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,+IAAgJ,KAAMG,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,kDAAmD,KAAMG,EAAAA,cAAoBR,EAAYG,IAAK,KAAMK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,6UAA8U,KAAMI,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,kCAAmC,KAAMG,EAAAA,cAAoBR,EAAYG,IAAK,KAAMK,EAAAA,cAAoBR,EAAYI,KAAM,CACpxCK,UAAW,iBACV,krDAAgvD,KAAMD,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,qXAAsX,KAAMG,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,yDAA0D,KAAMG,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,sGAClzE,CAKA,UAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECeO,MAAMa,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,C","sources":["webpack:///./content/posts/2015/12/30/unity_webgl.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"var Module = {\\n  TOTAL_MEMORY: 268435456,\\n  errorhandler: null, // arguments: err, url, line. This function must return 'true' if the error is handled, otherwise 'false'\\n  compatibilitycheck: null,\\n  dataUrl: \\\"Release/WebGL.data\\\",\\n  codeUrl: \\\"Release/WebGL.js\\\",\\n  memUrl: \\\"Release/WebGL.mem\\\",\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"こっちが未加工の index.html。\\nUnity5.3 の WebGL を試してみる。\"), \"\\n\", React.createElement(_components.p, null, \"http://blogs.unity3d.com/jp/2015/12/07/unity-5-3-webgl-updates/\\nhttp://docs.unity3d.com/530/Documentation/Manual/webgl-gettingstarted.html\"), \"\\n\", React.createElement(_components.p, null, \"とりあえず build して動かしてみた。\\n下記のようなディレクトリ構造で出力されていた。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"│  index.html\\n│\\n├─Release\\n│      .htaccess\\n│      UnityLoader.js\\n│      WebGL.datagz\\n│      WebGL.jsgz\\n│      WebGL.memgz\\n│\\n└─TemplateData\\n        favicon.ico\\n        fullbar.png\\n        fullscreen.png\\n        loadingbar.png\\n        logo.png\\n        progresslogo.png\\n        style.css\\n        UnityProgress.js\\n\")), \"\\n\", React.createElement(_components.p, null, \"index.html は下記の通り。\\nindex.html\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<!DOCTYPE html>\\n<html lang=\\\"en-us\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=utf-8\\\" />\\n    <title>Unity WebGL Player | UnityProject</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"TemplateData/style.css\\\" />\\n    <link rel=\\\"shortcut icon\\\" href=\\\"TemplateData/favicon.ico\\\" />\\n    <script src=\\\"TemplateData/UnityProgress.js\\\"></script>\\n  </head>\\n  <body class=\\\"template\\\">\\n    <p class=\\\"header\\\"><span>Unity WebGL Player | </span>UnityProject</p>\\n    <div class=\\\"template-wrap clear\\\">\\n      <canvas\\n        class=\\\"emscripten\\\"\\n        id=\\\"canvas\\\"\\n        oncontextmenu=\\\"event.preventDefault()\\\"\\n        height=\\\"600px\\\"\\n        width=\\\"960px\\\"\\n      ></canvas>\\n      <br />\\n      <div class=\\\"logo\\\"></div>\\n      <div class=\\\"fullscreen\\\">\\n        <img\\n          src=\\\"TemplateData/fullscreen.png\\\"\\n          width=\\\"38\\\"\\n          height=\\\"38\\\"\\n          alt=\\\"Fullscreen\\\"\\n          title=\\\"Fullscreen\\\"\\n          onclick=\\\"SetFullscreen(1);\\\"\\n        />\\n      </div>\\n      <div class=\\\"title\\\">UnityProject</div>\\n    </div>\\n    <p class=\\\"footer\\\">\\n      &laquo; created with\\n      <a href=\\\"http://unity3d.com/\\\" title=\\\"Go to unity3d.com\\\">Unity</a> &raquo;\\n    </p>\\n    <script type=\\\"text/javascript\\\">\\n      var Module = {\\n        TOTAL_MEMORY: 268435456,\\n        errorhandler: null, // arguments: err, url, line. This function must return 'true' if the error is handled, otherwise 'false'\\n        compatibilitycheck: null,\\n        dataUrl: \\\"Release/WebGL.data\\\",\\n        codeUrl: \\\"Release/WebGL.js\\\",\\n        memUrl: \\\"Release/WebGL.mem\\\",\\n      };\\n    </script>\\n    <script src=\\\"Release/UnityLoader.js\\\"></script>\\n  </body>\\n</html>\\n\")), \"\\n\", React.createElement(_components.p, null, \"上記から適当に html を切り出して埋め込んでみた。特に問題なく動作。\\nちなみに、コンパイル時間は非常に長い。\\nIL2CPP で C#を c++化して、emscripten で C++を Javascript(asm.js)化するそうだ。\\nシーンだけじゃなくてシステムもすべて都度ビルドしてそうな感じなので今回のような微小なシーンしか含んでいなくてもコンパイルが結構長い。\\nうちのマシンではパワー不足。\\nあと、github にこのページを push する時に容量制限にひっかかってしまった。\\n一回のコミットが大きすぎるという件。\\nファイル容量をチェックした結果 WebGL.jsgz が 3M あるのでこれだ。\\nWebGL.jsgz とそれ以外にコミットを分けたら push はできた。\\n現状、以下の 2 点がネック。\"), \"\\n\", React.createElement(_components.p, null, \"コンパイルが長い\\ngithub でホストする場合容量制限にひっかっかって push できない可能性がある\"), \"\\n\", React.createElement(_components.p, null, \"そのうちこの辺りは改善されるだろうけど。\\nthree.js のサンプルを乗っける手軽さというわけにはいかない。\\nわりとポテンシャルを感じるので、サイトに埋め込んで遊べる方法を模索したいところ。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","pre","code","p","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4789],{7924:function(e,n,t){t.r(n),t.d(n,{default:function(){return s}});var l=t(1151),r=t(7294);function a(e){const n=Object.assign({p:"p",a:"a",code:"code",ul:"ul",li:"li",h2:"h2",pre:"pre"},(0,l.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.p,null,r.createElement(n.a,{href:"https://github.com/mfussenegger/nvim-dap"},"nvim-dap")," で rust をデバッグするべく悪戦苦闘中。\nnvim-dap というのは、来たる nvim-0.5 で動くようになる、 ",r.createElement(n.code,null,"vscode")," のデバッグアダプターを動作させる機能。"),"\n",r.createElement(n.p,null,"rust(Windows) は native debugger をアタッチすればいいので、いくつか選択肢があって"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools"),"\n",r.createElement(n.li,null,"https://marketplace.visualstudio.com/items?itemName=lanza.lldb-vscode"),"\n",r.createElement(n.li,null,"https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb"),"\n"),"\n",r.createElement(n.p,null,"最後の、",r.createElement(n.code,null,"vscode-lldb(codelldb)")," https://github.com/vadimcn/vscode-lldb が使いたい。"),"\n",r.createElement(n.h2,null,"codelldb の起動"),"\n",r.createElement(n.p,null,"nvim-dap から ",r.createElement(n.code,null,"codelldb.exe")," プロセスは起動している様子。通信がうまくいってないように見える。"),"\n",r.createElement(n.pre,null,r.createElement(n.code,null,"> .\\.cache\\dein\\repos\\github.com\\puremourning\\vimspector\\gadgets\\windows\\CodeLLDB\\adapter\\codelldb.exe\nListening on port 55201\n")),"\n",r.createElement(n.p,null,"標準入出力を使うモードになっていないのでは？"),"\n",r.createElement(n.p,null,r.createElement(n.code,null,"adapter/src/lib.rs")),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-rust"},'async fn run_debug_server(\n    addr: net::SocketAddr,\n    adapter_settings: debug_protocol::AdapterSettings,\n    multi_session: bool,\n) {\n    let listener = TcpListener::bind(&addr).await.unwrap();\n\n    println!("Listening on port {}", listener.local_addr().unwrap().port());\n')),"\n",r.createElement(n.p,null,"遡る。 ",r.createElement(n.code,null,"main -> debug_server -> entry -> run_debug_server")),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-rust"},'fn main() -> Result<(), Error> {\n    env_logger::Builder::from_default_env().init();\n\n    let matches = App::new("codelldb")\n        .arg(Arg::with_name("port").long("port").takes_value(true))\n        .arg(Arg::with_name("multi-session").long("multi-session"))\n        .arg(Arg::with_name("preload").long("preload").multiple(true).takes_value(true))\n        .arg(Arg::with_name("liblldb").long("liblldb").takes_value(true))\n        .arg(Arg::with_name("params").long("params").takes_value(true))\n        .subcommand(SubCommand::with_name("terminal-agent").arg(Arg::with_name("port").long("port").takes_value(true)))\n        .get_matches();\n\n    if let Some(matches) = matches.subcommand_matches("terminal-agent") {\n        terminal_agent::terminal_agent(&matches)\n    } else {\n        debug_server(&matches)\n    }\n}\n')),"\n",r.createElement(n.p,null,"どうやら、 ",r.createElement(n.code,null,"executable")," かつ ",r.createElement(n.code,null,"stdio ではなく tcp")," 通信というタイプで nvim-dap では未対応ということでよさそう。？"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"起動"),"\n",r.createElement(n.li,null,r.createElement(n.code,null,"Listening on port XXXXX")," メッセージから port を得る"),"\n",r.createElement(n.li,null,"そのポートに対して TCP 接続という手順が必要"),"\n"),"\n",r.createElement(n.p,null,"https://code.visualstudio.com/api/extension-guides/debugger-extension#alternative-approach-to-develop-a-debugger-extension"),"\n",r.createElement(n.p,null,"の ",r.createElement(n.code,null,"DebugAdapterServer")," タイプにあたる。"),"\n",r.createElement(n.h2,null,"nvim-dap の改造を試みる"),"\n",r.createElement(n.p,null,"adapter.type ",r.createElement(n.code,null,"executable"),", ",r.createElement(n.code,null,"server")," に加えて、第3の ",r.createElement(n.code,null,"executable_server")," を作れるか。"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-lua"},"local function run_adapter(adapter, configuration, opts)\n  local name = configuration.name or '[no name]'\n  local options = adapter.options or {}\n  opts = vim.tbl_extend('keep', opts, {\n    cwd = options.cwd,\n    env = options.env\n  })\n  if adapter.type == 'executable' then\n    lazy.progress.report('Running: ' .. name)\n    M.launch(adapter, configuration, opts)\n  elseif adapter.type == 'server' then\n    lazy.progress.report('Running: ' .. name)\n    M.attach(adapter.host, adapter.port, configuration, opts)\n  elseif adapter.type == 'executable_server' then -- 👈これを追加した\n    lazy.progress.report('Running: ' .. name)\n    -- local session = M.launch(adapter, configuration, opts)\n    local stdin, stdout, stderr = executable_server(adapter, opts)\n    -- `Error executing luv callback: vimL function must not be called in a lua loop callback`\n    vim.loop.read_start(stdout, vim.schedule_wrap(function(err, data)\n      -- codelldb の出力から port を得る\n      -- Lisening on port xxxxx\n      local port = string.match(data , \"Listening on port (%d+)\" )\n      M.attach(nil, port, configuration, opts)\n    end))\n  else\n    print(string.format('Invalid adapter type %s, expected `executable` or `server`', adapter.type))\n  end\nend\n\nfunction executable_server(adapter, opts)\n  local uv = vim.loop\n  local stdin = uv.new_pipe(false)\n  local stdout = uv.new_pipe(false)\n  local stderr = uv.new_pipe(false)\n  local handle\n  local function onexit()\n    stdin:close()\n    stdout:close()\n    stderr:close()\n    handle:close()\n  end\n  local options = adapter.options or {}\n  local pid_or_err\n  handle, pid_or_err = uv.spawn(adapter.command, {\n    args = adapter.args;\n    stdio = {stdin, stdout, stderr};\n    cwd = options.cwd;\n    env = options.env;\n    detached = true;\n  }, onexit)\n  assert(handle, 'Error running ' .. adapter.command .. ': ' .. pid_or_err)\n\n  return stdin, stdout, stderr\nend\n\nfunction M.attach(host, port, config, opts)\n  if session then\n    session:close()\n  end\n  if not config.request then\n    print('config needs the `request` property which must be one of `attach` or `launch`')\n    return\n  end\n  -- initialize が早すぎるので config を connect 引数に\n  session = require('dap.session'):connect(host, port, opts, config)\n  return session\nend\n\nfunction Session:connect(host, port, opts, config)\n  local session = session_defaults(opts or {})\n  setmetatable(session, self)\n  self.__index = self\n\n  local client = uv.new_tcp()\n  session.client = {\n    write = function(line) \n        client:write(line) \n    end;\n    close = function()\n      client:shutdown()\n      client:close()\n    end;\n  }\n  client:connect(host or '127.0.0.1', tonumber(port), function(err)\n    if (err) then print(err) end\n    client:read_start(rpc.create_read_loop(function(body)\n      session:handle_body(body)\n    end))\n\n    -- connect が成立してから initialize を送る\n    session:initialize(config)\n\n  end)\n  return session\nend\n")),"\n",r.createElement(n.p,null,"動いた。 PR 作ろう。"))}var o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?r.createElement(n,e,r.createElement(a,e)):a(e)};t(8678);function c(e){let{data:n,children:t}=e;return r.createElement(r.Fragment,null,r.createElement("h1",null,n.mdx.frontmatter.title),r.createElement(l.Zo,null,t))}function s(e){return r.createElement(c,e,r.createElement(o,e))}},8678:function(e,n,t){t(7294)},1151:function(e,n,t){t.d(n,{Zo:function(){return c},ah:function(){return a}});var l=t(7294);const r=l.createContext({});function a(e){const n=l.useContext(r);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const o={};function c({components:e,children:n,disableParentContext:t}){let c;return c=t?"function"==typeof e?e({}):e||o:a(e),l.createElement(r.Provider,{value:c},n)}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-nvim-dap-codelldb-md-bf635af49838517d20ba.js.map
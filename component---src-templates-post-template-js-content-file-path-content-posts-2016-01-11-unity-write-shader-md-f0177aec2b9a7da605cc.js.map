{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2016-01-11-unity-write-shader-md-f0177aec2b9a7da605cc.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,qCAAsC,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,WAAY,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CACrOI,wBAAyB,CACvBC,OAAQ,yuZAGd,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BCVA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,MAAME,EAAcD,EAAKE,IAAID,YAC7B,OAAOb,EAAAA,cAAoBe,EAAAA,EAAQ,KAAMf,EAAAA,cAAoB,KAAM,KAAMa,EAAYG,OAAQhB,EAAAA,cAAoB,MAAO,CACtHQ,UAAW,cACVK,EAAYI,MAAQJ,EAAYI,KAAKC,OAAS,GAAKL,EAAYI,KAAKE,KAAIC,GAClEpB,EAAAA,cAAoBqB,EAAAA,GAAM,CAC/BC,GAAI,SAASF,EAAG,IAChBG,SAAU,OACTvB,EAAAA,cAAoB,SAAU,KAAMoB,OACpCpB,EAAAA,cAAoBwB,EAAAA,GAAa,CACpCzB,WAAYA,GACXQ,GACL,CACe,SAASkB,EAAiBjC,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoB0B,EAAqBlC,GAC3F,C","sources":["webpack:///./content/posts/2016/01/11/unity_write_shader.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"アルファブレンディング\\nシャドウキャスター\\nシャドウレシーバー\"), \"\\n\", React.createElement(_components.p, null, \"なシェーダー。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">基本\\n新規作成\\nCreate -> Shader -> UnLitShader\\nCustomShader\\n\\nShader \\\"CustomShader\\\"\\n{\\n    Properties\\n    {\\n        _MainTex (\\\"Texture\\\", 2D) = \\\"white\\\" {}\\n    }\\n    SubShader\\n    {\\n        Tags { \\\"RenderType\\\"=\\\"Opaque\\\" }\\n        LOD 100\\n\\n        Pass\\n        {\\n            CGPROGRAM\\n            #pragma vertex vert\\n            #pragma fragment frag\\n            // make fog work\\n            #pragma multi_compile_fog\\n\\n            #include \\\"UnityCG.cginc\\\"\\n\\n            struct appdata\\n            {\\n                float4 vertex : POSITION;\\n                float2 uv : TEXCOORD0;\\n            };\\n\\n            struct v2f\\n            {\\n                float2 uv : TEXCOORD0;\\n                UNITY_FOG_COORDS(1)\\n                float4 vertex : SV_POSITION;\\n            };\\n\\n            sampler2D _MainTex;\\n            float4 _MainTex_ST;\\n\\n            v2f vert (appdata v)\\n            {\\n                v2f o;\\n                o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);\\n                o.uv = TRANSFORM_TEX(v.uv, _MainTex);\\n                UNITY_TRANSFER_FOG(o,o.vertex);\\n                return o;\\n            }\\n\\n            fixed4 frag (v2f i) : SV_Target\\n            {\\n                // sample the texture\\n                fixed4 col = tex2D(_MainTex, i.uv);\\n                // apply fog\\n                UNITY_APPLY_FOG(i.fogCoord, col);\\n                return col;\\n            }\\n            ENDCG\\n        }\\n    }\\n}\\n\\nこの時点でテクスチャが表示できるけど一度無にしよう\\nShader \\\"CustomShader\\\"\\n{\\n    SubShader\\n    {\\n        Tags { \\\"RenderType\\\"=\\\"Opaque\\\" }\\n        LOD 100\\n        Pass\\n        {\\n            CGPROGRAM\\n            #pragma vertex vert\\n            #pragma fragment frag\\n            float4 vert(float4 v:POSITION) : SV_POSITION{\\n                return mul(UNITY_MATRIX_MVP, v);\\n            }\\n            fixed4 frag() : COLOR{\\n                return fixed4(1.0,0.0,0.0,1.0);\\n            }\\n            ENDCG\\n        }\\n    }\\n}\\n\\n\\n頂点変形だけを適用して赤一色。\\nColor\\nべたにマテリアル色が出る。\\nShader \\\"CustomShader\\\"\\n{\\n    Properties\\n    {\\n        _Color(\\\"Color\\\", Color) = (1,1,1,1)\\n    }\\n    SubShader\\n    {\\n    Tags{ \\\"RenderType\\\" = \\\"Opaque\\\" }\\n    LOD 100\\n\\n    Pass\\n    {\\n        CGPROGRAM\\n#pragma target 3.0\\n#pragma vertex vert\\n#pragma fragment frag\\n\\n        uniform float4 _Color;\\n\\n        float4 vert(float4 v:POSITION) : SV_POSITION{\\n            return mul(UNITY_MATRIX_MVP, v);\\n        }\\n        fixed4 frag() : COLOR{\\n            return _Color;\\n        }\\n        ENDCG\\n    }\\n\\n    } // SurShader\\n}\\n\\n_Colorプロパティを定義して、uniform変数_Colorを宣言し使う。\\nTexture\\nテクスチャ色を乗算\\nShader \\\"CustomShader\\\"\\n{\\n    Properties\\n    {\\n        _Color(\\\"Color\\\", Color) = (1,1,1,1)\\n        _MainTex(\\\"Base (RGB) Trans (A)\\\", 2D) = \\\"white\\\" {}\\n    }\\n    SubShader\\n    {\\n    Tags{ \\\"RenderType\\\" = \\\"Opaque\\\" }\\n    LOD 100\\n\\n    Pass\\n    {\\n        CGPROGRAM\\n#pragma target 3.0\\n#pragma vertex vert\\n#pragma fragment frag\\n\\n        struct appdata\\n        {\\n            float4 vertex : POSITION;\\n            float2 uv : TEXCOORD0;\\n        };\\n        struct v2f\\n        {\\n            float2 uv : TEXCOORD0;\\n            float4 vertex : SV_POSITION;\\n        };\\n\\n        uniform float4 _Color;\\n        uniform sampler2D _MainTex;\\n\\n        v2f vert(appdata v){\\n            v2f o;\\n            o.vertex= mul(UNITY_MATRIX_MVP, v.vertex);\\n            o.uv = v.uv;\\n            return o;\\n        }\\n        fixed4 frag(v2f i) : COLOR{\\n            fixed4 tex = tex2D(_MainTex, i.uv);\\n            return _Color * tex;\\n        }\\n        ENDCG\\n    }\\n\\n    } // SurShader\\n}\\n\\n\\nシェーダーの入力に位置とUV、出力に変換済みの位置とUVが必要になったので構造体appdataとv2fを導入\\n_MainTexプロパティを導入し、サンプラー_MainTexを宣言してtex2D関数で使う\\n\\nAlphaBlending\\n追加分\\nShader \\\"CustomShader\\\"\\n{\\n    SubShader\\n    {\\n    // 背景を含む不透明なものの後で描画する\\n    Tags{ \\\"Queue\\\" = \\\"Transparent\\\" }\\n\\n    Pass\\n    {\\n        Blend SrcAlpha OneMinusSrcAlpha\\n    }\\n\\n    } // SurShader\\n}\\n\\n\\nここまでで照明の無い基本的なシェーダーができる。\\nUnityCG.cgincを使う\\n最初に新規作成したShaderにAplhaBlendingを追加した感じ。\\nuniform変数のuniformは省略できる。\\nShader \\\"CustomShader\\\"\\n{\\n    Properties\\n    {\\n        _Color(\\\"Color\\\", Color) = (1,1,1,1)\\n        _MainTex(\\\"Base (RGB) Trans (A)\\\", 2D) = \\\"white\\\" {}\\n    }\\n    SubShader\\n    {\\n        Tags{ \\\"Queue\\\" = \\\"Transparent\\\" }\\n        LOD 100\\n\\n    Pass\\n    {\\n        Blend SrcAlpha OneMinusSrcAlpha\\n\\n        CGPROGRAM\\n        #pragma target 3.0\\n        #pragma vertex vert\\n        #pragma fragment frag\\n\\n        // make fog work\\n        #pragma multi_compile_fog\\n\\n        #include \\\"UnityCG.cginc\\\"\\n\\n        struct appdata\\n        {\\n            float4 vertex : POSITION;\\n            float2 uv : TEXCOORD0;\\n        };\\n\\n        struct v2f\\n        {\\n            float2 uv : TEXCOORD0;\\n            UNITY_FOG_COORDS(1)\\n            float4 vertex : SV_POSITION;\\n        };\\n\\n        float4 _Color;\\n        sampler2D _MainTex;\\n        float4 _MainTex_ST;\\n\\n        v2f vert(appdata v)\\n        {\\n            v2f o;\\n            o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);\\n            o.uv = TRANSFORM_TEX(v.uv, _MainTex);\\n            UNITY_TRANSFER_FOG(o,o.vertex);\\n            return o;\\n        }\\n\\n        fixed4 frag(v2f i) : SV_Target\\n        {\\n            // sample the texture\\n            fixed4 col = tex2D(_MainTex, i.uv);\\n            // apply fog\\n            UNITY_APPLY_FOG(i.fogCoord, col);\\n            return col * _Color;\\n        }\\n        ENDCG\\n    }\\n\\n    } // SurShader\\n}\\n\\nLighting導入\\nVertex and Fragment Shader Examplesの後半Calculating Lighting\\nを参考にライティングをやってみる。\\nforward rendringを使うことで\\n\\nDirectionalLight\\nambient\\nlightmap\\nreflections\\n\\nを扱える。\\nTags {\\\"LightMode\\\"=\\\"ForwardBase\\\"}\\n\\nを定義することでUnityの組み込み変数を通じて上記のシーンのライティング情報を得ることができるようになる。\\n頂点ライティングによるDiffuse &amp; Ambient\\n\\nDirectionalLightによるDiffuse計算\\nappdata_base導入(UnityCG.cgincで定義)\\nv2fにdiffuse追加\\nvertでdiffuse計算\\n\\nShader \\\"CustomShader\\\"\\n{\\n    Properties\\n    {\\n        _Color(\\\"Color\\\", Color) = (1,1,1,1)\\n        _MainTex(\\\"Base (RGB) Trans (A)\\\", 2D) = \\\"white\\\" {}\\n    }\\n    SubShader\\n    {\\n        Tags{ \\\"Queue\\\" = \\\"Transparent\\\" }\\n        LOD 100\\n\\n    Pass\\n    {\\n        Tags{ \\\"LightMode\\\" = \\\"ForwardBase\\\" }\\n\\n        Blend SrcAlpha OneMinusSrcAlpha\\n\\n        CGPROGRAM\\n        #pragma target 3.0\\n        #pragma vertex vert\\n        #pragma fragment frag\\n\\n        // make fog work\\n        #pragma multi_compile_fog\\n\\n        #include \\\"UnityCG.cginc\\\"\\n        #include \\\"UnityLightingCommon.cginc\\\" // for _LightColor0\\n\\n        struct v2f\\n        {\\n            float2 uv : TEXCOORD0;\\n            fixed4 diffuse : COLOR0; // diffuse lighting color\\n            float4 vertex : SV_POSITION;\\n            UNITY_FOG_COORDS(1)\\n        };\\n\\n        uniform float4 _Color;\\n        uniform sampler2D _MainTex;\\n        float4 _MainTex_ST;\\n\\n        v2f vert(appdata_base v)\\n        {\\n            v2f o;\\n            o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);\\n            o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);\\n\\n            // get vertex normal in world space\\n            half3 worldNormal = UnityObjectToWorldNormal(v.normal);\\n            // dot product between normal and light direction for\\n            // standard diffuse (Lambert) lighting\\n            half nl = max(0, dot(worldNormal, _WorldSpaceLightPos0.xyz));\\n            // factor in the light color\\n            o.diffuse = nl * _LightColor0;\\n\\n            // the only difference from previous shader:\\n            // in addition to the diffuse lighting from the main light,\\n            // add illumination from ambient or light probes\\n            // ShadeSH9 function from UnityCG.cginc evaluates it,\\n            // using world space normal\\n            o.diffuse.rgb += ShadeSH9(half4(worldNormal,1));\\n\\n            UNITY_TRANSFER_FOG(o,o.vertex);\\n            return o;\\n        }\\n\\n        fixed4 frag(v2f i) : SV_Target\\n        {\\n            // sample the texture\\n            fixed4 col = tex2D(_MainTex, i.uv) * _Color;\\n            // apply fog\\n            UNITY_APPLY_FOG(i.fogCoord, col);\\n            col.rgb *= i.diffuse;\\n            return col;\\n        }\\n        ENDCG\\n    }\\n\\n    } // SurShader\\n}\\n\\nShadowキャスティング\\nShadowMapに深度を描画するPassを追加する。\\n簡単なのは下記。\\n// pull in shadow caster from VertexLit built-in shader\\nUsePass \\\"Legacy Shaders/VertexLit/SHADOWCASTER\\\"\\n\\n手作りもできる。\\n\\npragma multi_compile_shadowcasterがポイント\\n\\n    // shadow caster rendering pass, implemented manually\\n    // using macros from UnityCG.cginc\\n    Pass\\n    {\\n        Tags{ \\\"LightMode\\\" = \\\"ShadowCaster\\\" }\\n\\n        CGPROGRAM\\n        #pragma vertex vert\\n        #pragma fragment frag\\n        #pragma multi_compile_shadowcaster\\n        #include \\\"UnityCG.cginc\\\"\\n\\n        struct v2f {\\n            V2F_SHADOW_CASTER;\\n        };\\n\\n        v2f vert(appdata_base v)\\n        {\\n            v2f o;\\n            TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)\\n                return o;\\n        }\\n\\n        float4 frag(v2f i) : SV_Target\\n        {\\n            SHADOW_CASTER_FRAGMENT(i)\\n        }\\n        ENDCG\\n    }\\n\\nShadowReceiveing\\n\\npragma multi_compile_fwdbaseがポイント\\n\\nShader \\\"CustomShader\\\"\\n{\\n    Properties\\n    {\\n        _Color(\\\"Color\\\", Color) = (1,1,1,1)\\n        _MainTex(\\\"Base (RGB) Trans (A)\\\", 2D) = \\\"white\\\" {}\\n    }\\n    SubShader\\n    {\\n    Tags{ \\\"Queue\\\" = \\\"Geometry\\\" }\\n    LOD 100\\n\\n    Pass\\n    {\\n        Tags{ \\\"LightMode\\\" = \\\"ForwardBase\\\" \\\"IgnoreProjector\\\" = \\\"True\\\" \\\"PerformanceChecks\\\" = \\\"False\\\" }\\n        ZWrite On\\n        Blend SrcAlpha OneMinusSrcAlpha\\n\\n        CGPROGRAM\\n        #pragma target 3.0\\n        #pragma vertex vert\\n        #pragma fragment frag\\n\\n        // make fog work\\n        #pragma multi_compile_fog\\n\\n        #include \\\"UnityCG.cginc\\\"\\n        #include \\\"UnityLightingCommon.cginc\\\" // for _LightColor0\\n\\n        // compile shader into multiple variants, with and without shadows\\n        // (we don't care about any lightmaps yet, so skip these variants)\\n        #pragma multi_compile_fwdbase nolightmap nodirlightmap nodynlightmap novertexlight\\n        // shadow helper functions and macros\\n        #include \\\"AutoLight.cginc\\\"\\n\\n        struct v2f\\n        {\\n            float2 uv : TEXCOORD0;\\n            float4 pos : SV_POSITION;\\n            fixed4 diff : COLOR0; // diffuse lighting color\\n            fixed3 ambient : COLOR1;\\n            SHADOW_COORDS(1) // put shadows data into TEXCOORD1\\n            UNITY_FOG_COORDS(1)\\n        };\\n\\n        uniform float4 _Color;\\n        uniform sampler2D _MainTex;\\n        float4 _MainTex_ST;\\n\\n        v2f vert(appdata_base v)\\n        {\\n            v2f o;\\n            o.pos = mul(UNITY_MATRIX_MVP, v.vertex);\\n            o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);\\n\\n            // get vertex normal in world space\\n            half3 worldNormal = UnityObjectToWorldNormal(v.normal);\\n            // dot product between normal and light direction for\\n            // standard diffuse (Lambert) lighting\\n            half nl = max(0, dot(worldNormal, _WorldSpaceLightPos0.xyz));\\n            // factor in the light color\\n            o.diff = nl * _LightColor0;\\n\\n            // the only difference from previous shader:\\n            // in addition to the diffuse lighting from the main light,\\n            // add illumination from ambient or light probes\\n            // ShadeSH9 function from UnityCG.cginc evaluates it,\\n            // using world space normal\\n            o.ambient = ShadeSH9(half4(worldNormal, 1));\\n\\n            // compute shadows data\\n            TRANSFER_SHADOW(o)\\n\\n            UNITY_TRANSFER_FOG(o,o.vertex);\\n            return o;\\n        }\\n\\n        fixed4 frag(v2f i) : SV_Target\\n        {\\n            // sample the texture\\n            fixed4 col = tex2D(_MainTex, i.uv) * _Color;\\n\\n            fixed shadow = SHADOW_ATTENUATION(i);\\n\\n            // darken light's illumination with shadow, keep ambient intact\\n            fixed3 lighting = i.diff * shadow + i.ambient;\\n            col.rgb *= lighting;\\n\\n            // apply fog\\n            UNITY_APPLY_FOG(i.fogCoord, col);\\n\\n            return col;\\n        }\\n        ENDCG\\n    }\\n\\n    // shadow caster rendering pass, implemented manually\\n    // using macros from UnityCG.cginc\\n    Pass\\n    {\\n        Tags{ \\\"LightMode\\\" = \\\"ShadowCaster\\\" }\\n\\n        CGPROGRAM\\n        #pragma vertex vert\\n        #pragma fragment frag\\n        #pragma multi_compile_shadowcaster\\n        #include \\\"UnityCG.cginc\\\"\\n\\n        struct v2f {\\n            V2F_SHADOW_CASTER;\\n        };\\n\\n        v2f vert(appdata_base v)\\n        {\\n            v2f o;\\n            TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)\\n                return o;\\n        }\\n\\n        float4 frag(v2f i) : SV_Target\\n        {\\n            SHADOW_CASTER_FRAGMENT(i)\\n        }\\n        ENDCG\\n    }\\n\\n    } // SurShader\\n\\n    Fallback \\\"Transparent/VertexLit\\\"\\n}</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2016/01/11/unity_write_shader.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
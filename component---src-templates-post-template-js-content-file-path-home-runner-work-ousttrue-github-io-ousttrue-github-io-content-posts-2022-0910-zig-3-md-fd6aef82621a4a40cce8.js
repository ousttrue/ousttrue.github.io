"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2707],{2017:function(e,t,n){n.r(t),n.d(t,{default:function(){return o}});var l=n(1151),a=n(7294);function c(e){const t=Object.assign({h1:"h1",p:"p",span:"span",a:"a",h2:"h2",ul:"ul",li:"li"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.h1,null,"zig その3"),"\n",a.createElement(t.p,null,"ここのところ ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">zig</code>'}})," の練習を進めているのだが、だいぶ良い。"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://github.com/ousttrue/yazls"},"zls の改造")," や, ",a.createElement(t.a,{href:"https://github.com/ousttrue/zig-opengl-wasm"},"wasm の実験"),", ",a.createElement(t.a,{href:"https://github.com/ousttrue/microui"},"microui の移植")," あたりをこなして、\nだいぶ慣れた。"),"\n",a.createElement(t.p,null,"C/C++ と連携させる、zig から C を呼ぶ、C から zig を呼ぶ、の双方ともに\nかなり高いレベルの使いやすさがある。"),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">zig-0.10</code>'}})," の開発状況が SelfHosting コンパイラに注力しているところ。\nこれは重要なのだが、外見えの機能が良くなったりするところではない。\nむしろ、一時的にバグが出たり、機能が後退したり(async が未実装だったり)する。\nその次くらいから、また良くなるんでないか。"),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">std</code>'}})," にある ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">async</code>'}})," とか ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">eventloop</code>'}})," の痕跡を見ると、\nそのうちに標準にライブラリに ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">libuv</code>'}})," 的なものが入りそうな感じがする。"),"\n",a.createElement(t.p,null,"zig は、型アノテーションを付けた ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">python</code>'}})," と ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++</code>'}})," の間くらいの記述量でコードを書けるので\n記述する速度と、実行速度のバランスがよい。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">wasm</code>'}})," に関しては使えると判断できた。"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://qiita.com/ousttrue/items/4802b61ba340dd7d89f3"},"zig で OpenGL、そして wasm")),"\n",a.createElement(t.p,null,"敢えて ",a.createElement(t.a,{href:"https://zellij.dev/"},"zellij")," のプラグインを ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">zig</code>'}})," で書くスタイルが良いかもしれぬ。"),"\n",a.createElement(t.h2,null,"TODO:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"zig 自前ビルド。llvm の準備から。 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">glibc-2.34</code>'}})," 縛りを回避できるか知りたい"),"\n",a.createElement(t.li,null,"arm へのクロスコンパイル。 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Android NDK</code>'}})," を zig でやる"),"\n"))}var r=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.ah)(),e.components);return t?a.createElement(t,e,a.createElement(c,e)):c(e)},s=(n(8678),n(8838));const u={code:e=>{let{children:t,className:n}=e;return n?a.createElement(s.Z,{className:n},t):a.createElement("code",null,t)}};function m(e){let{data:t,children:n}=e;return a.createElement(a.Fragment,null,a.createElement("h1",null,t.mdx.frontmatter.title),a.createElement(l.Zo,{components:u},n))}function o(e){return a.createElement(m,e,a.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-0910-zig-3-md-fd6aef82621a4a40cce8.js.map
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[769],{6074:function(e,n,t){t.r(n),t.d(n,{default:function(){return o}});var l=t(1151),a=t(7294);function c(e){const n=Object.assign({h1:"h1",p:"p",h2:"h2",span:"span",ul:"ul",li:"li",h3:"h3"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h1,null,"w3m改造に再突入"),"\n",a.createElement(n.p,null,"なんとなく最初からやり直し。"),"\n",a.createElement(n.h2,null,"マクロカッター"),"\n",a.createElement(n.p,null,"今回は、 ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">python</code>'}})," でマクロカッターを作って前処理してみた。"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">#ifdef USE_UNICODE\n// hogehoge\n#endif</code></pre></div>'}}),"\n",a.createElement(n.p,null,"みたいな ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#ifdef</code>'}})," 事前に解決しえカットしていくツールである。\nめんどくさいので ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">if defined(HOGE)</code>'}})," などは実装していない。\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">true</code>'}}),", ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">false</code>'}}),", ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">none</code>'}})," の3値で判断。\ntrue であれば ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#if</code>'}})," を削除。\nfalse であれば ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#if</code>'}})," ブロックをコードごと削除し。\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">none</code>'}})," であれば保持するというロジック。\nわりとうまくいって、コードがかなり簡単になった。"),"\n",a.createElement(n.h2,null,"いつも通り C++ 化"),"\n",a.createElement(n.p,null,"C++ 化しないとCの暗黙の型変換が緩すぎてコンパイルエラー追うのが難しくなるので、\n次の一手はこれ。"),"\n",a.createElement(n.p,null,a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++</code>'}})," できたら、 ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">typdef struct Some {} Some;</code>'}})," を ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">struct Some;</code>'}})," に書き換える。\nこれでストレスをかなり低減できる。"),"\n",a.createElement(n.p,null,"局所性の高い関数をメンバー関数にする。\nなるべくメンバーを private にして、名前も ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_</code>'}})," などの prefix を付ける。\n大きい struct は分割する。\nコンストラクタ、デストラクタ、コピーコンストラクタは避ける。",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">GC</code>'}})," や ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">setmem(0)</code>'}})," で死ぬ。\n同様に、 std::vector, std::string は慎重に導入する。"),"\n",a.createElement(n.h2,null,"macro 減らす"),"\n",a.createElement(n.p,null,"macro 関数を",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">inline 関数</code>'}})," に置き換えたり、\nmacro 定数を ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">enum</code>'}})," に置き換える。int, char などを enum に置き換える。\n使えれば ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">bitfield</code>'}})," とかも駆使。"),"\n",a.createElement(n.h2,null,"fm.h, proto.h, file.c の分配"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.c</code>'}})," と ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.h</code>'}})," をペアにして関数を一致させる"),"\n",a.createElement(n.li,null,a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">struct</code>'}})," 毎にヘッダを分ける。"),"\n",a.createElement(n.li,null,a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">global</code>'}})," 変数を散らす"),"\n",a.createElement(n.li,null,a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">const char*</code>'}})," との戦い。順次"),"\n"),"\n",a.createElement(n.p,null,"膨大な global 変数があるので、使わないもの思い切って削除する。"),"\n",a.createElement(n.h3,null,"file.c"),"\n",a.createElement(n.p,null,a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">file.c</code>'}})," が 7000 行とかあってすごい。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"html のロードが 4500 くらい。 ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">table.c</code>'}}),", ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">frame.c</code>'}})," も関連？"),"\n",a.createElement(n.li,null,"http を操作が 500 くらい"),"\n"),"\n",a.createElement(n.p,null,"http アクセスや、html パース、ローカルCGI とか Buffer 操作が色々入っている。"),"\n",a.createElement(n.h2,null,"libuv"),"\n",a.createElement(n.h3,null,"mainloop"),"\n",a.createElement(n.p,null,"あっさりできてしまった。"),"\n",a.createElement(n.p,null,a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tty input</code>'}}),", ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">resize signal</code>'}})," で ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">idle</code>'}})," のときに描画などという方針でよさそう。\nraw モード切り替えなども ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">libuv</code>'}})," 移行できそう。"),"\n",a.createElement(n.h3,null,"入力ストリーム"),"\n",a.createElement(n.p,null,"tcp, fd, FILE*, Str と圧縮 decoder のランタイム polymorphism.\nc++ の継承に置き換えて、 ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">void*</code>'}})," の cast より、型チェックの聞く状態にできる。"),"\n",a.createElement(n.p,null,"TODO: libuv を使う"),"\n",a.createElement(n.h3,null,"linein / readline"),"\n",a.createElement(n.h3,null,"出力"),"\n",a.createElement(n.h3,null,"signal"),"\n",a.createElement(n.p,null,"読み込みを ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ctrl-c</code>'}})," で中断するなど。"),"\n",a.createElement(n.h2,null,"使わない機能を削る"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"backend, dump など"),"\n",a.createElement(n.li,null,"pager 系の機能"),"\n",a.createElement(n.li,null,"news, gopher など使わないプロトコル"),"\n",a.createElement(n.li,null,"mouse 系の機能"),"\n",a.createElement(n.li,null,"search_header 系の機能"),"\n"),"\n",a.createElement(n.h2,null,"wtf-8 とは？"),"\n",a.createElement(n.p,null,"謎の文字コード ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">wtf-8</code>'}})," について、再調査。"),"\n",a.createElement(n.p,null,"https://badsector.pullup.net/?p=70"),"\n",a.createElement(n.p,null,"👇"),"\n",a.createElement(n.p,null,"https://simonsapin.github.io/wtf-8/"),"\n",a.createElement(n.h2,null,"vt100 分離"),"\n",a.createElement(n.p,null,a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Buffer = Screen => tty_out</code>'}})," という流れに統一する。\n各所からローレベルの描画機能を呼ばない。"),"\n",a.createElement(n.p,null,"メッセージ表示も抽象化して、text を push するだけに。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"カーソル移動"),"\n",a.createElement(n.li,null,"out"),"\n",a.createElement(n.li,null,"flush"),"\n",a.createElement(n.li,null,"カーソル復帰"),"\n"),"\n",a.createElement(n.p,null,"とかしない。"),"\n",a.createElement(n.h2,null,"TODO: logger 導入"),"\n",a.createElement(n.h2,null,"UIとデータ構造の分離"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">+----+\n|DATA| TabBuffer, Buffer, Anchor, Form, Image...\n+----+\n  A\n  |\n+----+\n| UI | mainloop... tty, key dispatch\n+----+</code></pre></div>'}}),"\n",a.createElement(n.p,null,a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">TabBuffer, Buffer, Anchor, FormList</code>'}})," と ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mainloop keydispatch</code>'}})," あたりを分離する。\n片方向の参照。"),"\n",a.createElement(n.p,null,"バッファーローダーからグローバル変数を除去して、再入可能にする。\ntab を平行動作可能にする。"),"\n",a.createElement(n.h3,null,"TODO: lua 導入"),"\n",a.createElement(n.p,null,"DEFUN を lua で記述したい。\nrc も？"),"\n",a.createElement(n.h2,null,"TODO: libgc 減らす。止める"),"\n",a.createElement(n.h2,null,"TODO: zig に移植"),"\n",a.createElement(n.p,null,a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">zig cc</code>'}})," でビルドはできた。\nじゃなくて、ソースを ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">zig</code>'}})," にしたい。"),"\n",a.createElement(n.h2,null,"TODO"),"\n",a.createElement(n.p,null,"Windows ネイティブで動くようにしたい。\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">libuv</code>'}})," + ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">conpty</code>'}})," できそうな気がするのだけど、まだまだ。"))}var r=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(c,e)):c(e)},s=(t(8678),t(8838));const u={code:e=>{let{children:n,className:t}=e;return t?a.createElement(s.Z,{className:t},n):a.createElement("code",null,n)}};function m(e){let{data:n,children:t}=e;return a.createElement(a.Fragment,null,a.createElement("h1",null,n.mdx.frontmatter.title),a.createElement(l.Zo,{components:u},t))}function o(e){return a.createElement(m,e,a.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-0918-w-3-m-mod-md-4ee524242f685a3a0952.js.map
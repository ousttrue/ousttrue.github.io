{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2013-05-16-lambda-md-7a873a5fd1a9beb738c6.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,OACNC,EAAG,MACFC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mBAAoB,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,8DAA+D,KAAMK,EAAAA,cAAoBR,EAAYI,KAAM,CACtQK,wBAAyB,CACvBC,OAAQ,g3GAER,KAAMF,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mCAAoC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wEAAyE,KAAMK,EAAAA,cAAoBR,EAAYI,KAAM,CACzPK,wBAAyB,CACvBC,OAAQ,w0CAER,KAAMF,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gEAAiE,KAAMK,EAAAA,cAAoBR,EAAYI,KAAM,CAC9JK,wBAAyB,CACvBC,OAAQ,2pDAER,KAAMF,EAAAA,cAAoBR,EAAYG,EAAG,KAAMK,EAAAA,cAAoBR,EAAYK,EAAG,CACpFM,KAAM,wDACL,qCAAsC,qDAAsD,KAAMH,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,uGAAwG,KAAMK,EAAAA,cAAoBR,EAAYI,KAAM,CAChSK,wBAAyB,CACvBC,OAAQ,u6GAER,KAAMF,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mEAAoE,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,QAASK,EAAAA,cAAoBR,EAAYK,EAAG,CAChNM,KAAM,yDACL,yCAA0C,6BAC/C,CAKA,MAJA,SAAoBZ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOM,EAAYL,EAAAA,cAAoBK,EAAWd,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BC3BA,MAAMQ,EAAa,CACjBO,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYT,EAAAA,cAAoBU,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYR,EAAAA,cAAoB,OAAQ,KAAMQ,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,MAAME,EAAcD,EAAKE,IAAID,YAC7B,OAAOd,EAAAA,cAAoBgB,EAAAA,EAAQ,KAAMhB,EAAAA,cAAoB,KAAM,KAAMc,EAAYG,OAAQjB,EAAAA,cAAoB,MAAO,CACtHS,UAAW,cACVK,EAAYI,MAAQJ,EAAYI,KAAKC,OAAS,GAAKL,EAAYI,KAAKE,KAAIC,GAClErB,EAAAA,cAAoBsB,EAAAA,GAAM,CAC/BC,GAAI,SAASF,EAAG,IAChBG,SAAU,OACTxB,EAAAA,cAAoB,SAAU,KAAMqB,OACpCrB,EAAAA,cAAoByB,EAAAA,GAAa,CACpC1B,WAAYA,GACXS,GACL,CACe,SAASkB,EAAiBnC,GACvC,OAAOS,EAAAA,cAAoBW,EAAcpB,EAAOS,EAAAA,cAAoB2B,EAAqBpC,GAC3F,C","sources":["webpack:///./content/posts/2013/05/16/lambda.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"(記事復旧のついでに少し修正)\"), \"\\n\", React.createElement(_components.p, null, \"msgpack-rpc の関数登録の都合上、 lambda 関数から引数の型を得たい。 下記のような書き方をしたい。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token keyword\\\">template</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">A1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">A2</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">register_func</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>func_name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">R</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>handler<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>A1<span class=\\\"token punctuation\\\">,</span> A2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 関数登録</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token operator\\\">+</span>b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 関数ポインタは受けれる</span>\\n    <span class=\\\"token function\\\">register_func</span><span class=\\\"token punctuation\\\">(</span>“add”<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">&amp;</span>Add<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// lambdaを受けることはできない</span>\\n    <span class=\\\"token function\\\">register_func</span><span class=\\\"token punctuation\\\">(</span>“add”<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-></span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token operator\\\">+</span>b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上記の書き方では普通の関数ポインタを受けることはできるのだが、\"), \"\\n\", React.createElement(_components.p, null, \"std::function と lambda は受けられない。\\nstd::function を受けるには下記のようにすることでできた。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token keyword\\\">template</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">A1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">A2</span><span class=\\\"token operator\\\">></span> \\n<span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">register_func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>func_name<span class=\\\"token punctuation\\\">,</span> std<span class=\\\"token double-colon punctuation\\\">::</span>function<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token function\\\">R</span><span class=\\\"token punctuation\\\">(</span>A1<span class=\\\"token punctuation\\\">,</span> A2<span class=\\\"token punctuation\\\">)</span> handler<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>     \\n<span class=\\\"token comment\\\">// </span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"残り、lambda を受けられる記述方法を知りたいのだがどうしたらよいものか。 下記のような手はうまくいかなかった・・・\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token keyword\\\">template</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">F</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">A1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">A2</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">add_handler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>method<span class=\\\"token punctuation\\\">,</span> F handler<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    std<span class=\\\"token double-colon punctuation\\\">::</span>function<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token function\\\">R</span><span class=\\\"token punctuation\\\">(</span>A1<span class=\\\"token punctuation\\\">,</span> A2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>handler<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">//add_handler</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"http://d.hatena.ne.jp/osyo-manga/20121205/1354674180\"\n  }, \"lambda expression を 関数ポインタ型へと変換する\"), \" こちらのサイトから decltype を使ったらなんかできそうな感じがしたので粘っていたのだが、\"), \"\\n\", React.createElement(_components.p, null, \"目的そのものの記事を発見した。 http://stackoverflow.com/questions/6512019/can-we-get-the-type-of-a-lambda-argument\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token comment\\\">// 2019/08 元記事のコードがよくわからなかったので書き直し。</span>\\n\\n<span class=\\\"token comment\\\">// decltypeから得たメンバ関数へのポインタを触媒にして型を得る</span>\\n<span class=\\\"token keyword\\\">template</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">F</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">C</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">A1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">A2</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">_register_func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>func_name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">R</span><span class=\\\"token punctuation\\\">(</span>C<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token operator\\\">*</span>m<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>A1 a1<span class=\\\"token punctuation\\\">,</span> A2 a2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">const</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// constに注意</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// R: 返り値の型</span>\\n    <span class=\\\"token comment\\\">// A1, A2: 引数の型</span>\\n    <span class=\\\"token comment\\\">// C: lambdaオブジェクトの型を受ける</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// まずあらゆる引数を受け付けられるtemplateでlambdaオブジェクトを受ける(functor)</span>\\n<span class=\\\"token keyword\\\">template</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">F</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">register_func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>func_name<span class=\\\"token punctuation\\\">,</span> F f<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">_register_func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>func_name<span class=\\\"token punctuation\\\">,</span> f<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">decltype</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token punctuation\\\">)</span><span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token keyword\\\">operator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"F で関数ポインタ、lambda、std::function 等を受けられるようになった。 decltype なんかすごいな。\"), \"\\n\", React.createElement(_components.p, null, \"関連して、\", React.createElement(_components.a, {\n    href: \"https://qiita.com/ousttrue/items/6b207e1d431cf20e04d9\"\n  }, \"cpp でメンバー関数を、this を第１引数にとる関数ポインタに変換する\"), \"。\\nメンバ関数へのポインタは意外と使い道がある。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/05/16/lambda.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","a","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3139],{4900:function(n,a,s){s.r(a),s.d(a,{default:function(){return i}});var t=s(1151),e=s(7294);function p(n){const a=Object.assign({p:"p",span:"span",code:"code"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,"引数付きのdecorator"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> func<span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">\'さん\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> wrapper\n\n<span class="token decorator annotation punctuation">@decorator</span>\n<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f\'hello </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">\'</span></span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">witharg</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> func<span class="token punctuation">(</span>name <span class="token operator">+</span> suffix<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> wrapper\n    <span class="token keyword">return</span> decorator\n\n<span class="token decorator annotation punctuation">@witharg</span><span class="token punctuation">(</span><span class="token string">\'殿\'</span><span class="token punctuation">)</span>\n<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f\'hello </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">\'</span></span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"みたいなことができる。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># デフォルト引数で兼用したいのだが・・・</span>\n<span class="token keyword">def</span> <span class="token function">witharg</span><span class="token punctuation">(</span>suffix <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> func<span class="token punctuation">(</span>name <span class="token operator">+</span> suffix<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> wrapper\n    <span class="token keyword">return</span> decorator\n\n<span class="token decorator annotation punctuation">@witharg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># カッコが要るのに注意</span>\n<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f\'hello </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">\'</span></span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"デフォルト引数で省略すると嵌るので注意。\n外側を ",e.createElement(a.code,null,"func")," 引数で呼び出してしまう。\ndecorator に引数が定義されていると挙動が変わるのではなく、\n使う時 ",e.createElement(a.code,null,"@")," にカッコがあるときに挙動が変わる。"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)},c=s(8678),l=s(4160),u=s(8736);const r={code:n=>{let{children:a,className:s}=n;return s?e.createElement(u.Z,{className:s},a):e.createElement("code",null,a)}};function k(n){let{data:a,children:s}=n;const p=a.mdx.frontmatter;return e.createElement(c.Z,null,e.createElement("h1",null,p.title),e.createElement("div",{className:"tags-index"},p.tags&&p.tags.length>0&&p.tags.map((n=>e.createElement(l.rU,{to:"/tags/"+n+"/",itemProp:"url"},e.createElement("button",null,n))))),e.createElement(t.Zo,{components:r},s))}function i(n){return e.createElement(k,n,e.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2019-decorator-md-500663c13cb8d580415d.js.map
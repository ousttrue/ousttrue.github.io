{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-summer-update-asio-md-e2eb1b83869e7db1d65c.js","mappings":"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","sources":["webpack:///./content/posts/2021/summer/update_asio.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\",\n    pre: \"pre\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"非同期ライブラリ ASIO\"), \"\\n\", React.createElement(_components.p, null, \"http://think-async.com/Asio/index.html\"), \"\\n\", React.createElement(_components.p, null, \"の知識を \", React.createElement(_components.code, null, \"c++20\"), \" 時代にアップデート。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://github.com/chriskohlhoff/talking-async\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"に動画と動画のサンプルコードが有る。\"), \"\\n\", React.createElement(_components.h1, null, \"compiler を最新にする\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"ASIO_HAS_CO_AWAIT\"), \" が必要でこれが有効になるには新しいコンパイラが必要。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"// asio/detail/config.hpp`\\n\\n// Support the co_await keyword on compilers known to allow it.\\n#if !defined(ASIO_HAS_CO_AWAIT)\\n# if !defined(ASIO_DISABLE_CO_AWAIT)\\n#  if defined(ASIO_MSVC)\\n#   if (_MSC_VER >= 1928) && (_MSVC_LANG >= 201705) && !defined(__clang__)\\n#    define ASIO_HAS_CO_AWAIT 1\\n#   elif (_MSC_FULL_VER >= 190023506)\\n#    if defined(_RESUMABLE_FUNCTIONS_SUPPORTED)\\n#     define ASIO_HAS_CO_AWAIT 1\\n#    endif // defined(_RESUMABLE_FUNCTIONS_SUPPORTED)\\n#   endif // (_MSC_FULL_VER >= 190023506)\\n#  elif defined(__clang__)\\n#   if (__cplusplus >= 201703) && (__cpp_coroutines >= 201703)\\n#    if __has_include(<experimental/coroutine>)\\n#     define ASIO_HAS_CO_AWAIT 1\\n#    endif // __has_include(<experimental/coroutine>)\\n#   endif // (__cplusplus >= 201703) && (__cpp_coroutines >= 201703)\\n#  elif defined(__GNUC__)\\n#   if (__cplusplus >= 201709) && (__cpp_impl_coroutine >= 201902)\\n#    if __has_include(<coroutine>)\\n#     define ASIO_HAS_CO_AWAIT 1\\n#    endif // __has_include(<coroutine>)\\n#   endif // (__cplusplus >= 201709) && (__cpp_impl_coroutine >= 201902)\\n#  endif // defined(__GNUC__)\\n# endif // !defined(ASIO_DISABLE_CO_AWAIT)\\n#endif // !defined(ASIO_HAS_CO_AWAIT)\\n\")), \"\\n\", React.createElement(_components.h2, null, \"VC2019(20210818最新版いける)\"), \"\\n\", React.createElement(_components.p, null, \"https://devblogs.microsoft.com/cppblog/c-coroutines-in-visual-studio-2019-version-16-8/\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"C++20 coroutines in Visual Studio 2019 version 16.8.\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"16.7.3\"), \" だめ\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"16.11.1\"), \" 動いた。\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# CMakeListx.txt\\nset(TARGET_NAME pingpong)\\nadd_executable(${TARGET_NAME} main.cpp)\\ntarget_link_libraries(${TARGET_NAME} PRIVATE asio)\\nset_property(TARGET ${TARGET_NAME} PROPERTY CXX_STANDARD 20) # 必要\\ntarget_compile_options(${TARGET_NAME} PUBLIC $<$<C_COMPILER_ID:MSVC>:/await>) # 必要\\ntarget_compile_definitions(asio INTERFACE ASIO_DISABLE_STD_COROUTINE) # 必要\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"#if defined(ASIO_HAS_STD_COROUTINE)\\n# include <coroutine>\\n#else // defined(ASIO_HAS_STD_COROUTINE)\\n# include <experimental/coroutine>\\n#endif // defined(ASIO_HAS_STD_COROUTINE)\\n\")), \"\\n\", React.createElement(_components.h2, null, \"LLVM-12(うまくいかず。追加のコマンドライン引数か)\"), \"\\n\", React.createElement(_components.p, null, \"https://clang.llvm.org/cxx_status.html\"), \"\\n\", React.createElement(_components.p, null, \"LLVM-12 だと、\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \" 'C:\\\\Program Files\\\\LLVM\\\\bin\\\\clang.exe' -v\\nclang version 12.0.1\\nTarget: x86_64-pc-windows-msvc\\nThread model: posix\\nInstalledDir: C:\\\\Program Files\\\\LLVM\\\\bin\\n\")), \"\\n\", React.createElement(_components.p, null, \"わからん。\"), \"\\n\", React.createElement(_components.h1, null, \"コード\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"#include <asio/awaitable.hpp>\\n#include <asio/co_spawn.hpp>\\n#include <asio/detached.hpp>\\n#include <asio/experimental/as_tuple.hpp>\\n#include <asio/io_context.hpp>\\n#include <asio/ip/tcp.hpp>\\n#include <asio/read.hpp>\\n#include <asio/streambuf.hpp>\\n#include <asio/system_timer.hpp>\\n#include <asio/use_awaitable.hpp>\\n#include <asio/use_future.hpp>\\n#include <asio/write.hpp>\\n\")), \"\\n\", React.createElement(_components.h2, null, \"co_spawn で awaitable を起動する\"), \"\\n\", React.createElement(_components.p, null, \"coroutine は 戻り値の型が \", React.createElement(_components.code, null, \"asio::awaitable<T>\"), \" である必要がある。この関数の中で \", React.createElement(_components.code, null, \"co_await\"), \", \", React.createElement(_components.code, null, \"co_yield\"), \", \", React.createElement(_components.code, null, \"co_return\"), \" が使える。\\ncoroutine は lambda でもよいので、下記のようにできる。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"  auto co = []() -> asio::awaitable<std::string> {\\n    co_return \\\"result\\\";\\n  };\\n  auto result =\\n      asio::co_spawn(client_context.get_executor(), co, asio::use_future); // coroutine 登録\\n  client_context.run(); // ループを回す\\n  auto pong = result.get(); // future から結果を得る\\n  std::cout << \\\"pong: \\\" << pong << std::endl;\\n\")), \"\\n\", React.createElement(_components.p, null, \"asio::use_future を使うことで返り値 \", React.createElement(_components.code, null, \"std::future\"), \" になるので \", React.createElement(_components.code, null, \"co_return\"), \" の値を得ることも可能。\\n結果に興味がないときは、\", React.createElement(_components.code, null, \"asio::detached\"), \" でよい。\\nCompletion Handler というコールバックなので、 promise に set_value する関数を自前で書いたりしてもよい様子。\\n\", React.createElement(_components.code, null, \"asio::use_awaitable\"), \" で \", React.createElement(_components.code, null, \"co_await\"), \" するのも可能。\"), \"\\n\", React.createElement(_components.p, null, \"返り値が \", React.createElement(_components.code, null, \"std::tuple<asio::error_code, RESULT>\"), \" になるハンドラ。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"constexpr auto use_nothrow_awaitable =\\n    asio::experimental::as_tuple(asio::use_awaitable);\\n\")), \"\\n\", React.createElement(_components.h2, null, \"client side\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"timer\"), \"\\n\", React.createElement(_components.li, null, \"connect\"), \"\\n\", React.createElement(_components.li, null, \"send(ping)\"), \"\\n\", React.createElement(_components.li, null, \"receive(pong)\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"  auto co = [&context = client_context, ep]() -> asio::awaitable<std::string> {\\n    std::cout << \\\"[client]wait 1000ms...\\\" << std::endl;\\n    asio::system_timer timer(context);\\n    timer.expires_from_now(1000ms);\\n    co_await timer.async_wait(asio::use_awaitable);\\n\\n    std::cout << \\\"[client]connect: \\\" << ep << \\\"...\\\" << std::endl;\\n    asio::ip::tcp::socket socket(context);\\n    co_await socket.async_connect(ep, asio::use_awaitable);\\n    std::cout << \\\"[client]connected\\\" << std::endl;\\n\\n    std::cout << \\\"[client]ping...\\\" << std::endl;\\n    std::string ping(\\\"ping\\\");\\n    auto write_size = co_await asio::async_write(socket, asio::buffer(ping),\\n                                                 asio::use_awaitable);\\n    assert(write_size == 4);\\n\\n    std::cout << \\\"[client]read...\\\" << std::endl;\\n    asio::streambuf buf;\\n    auto read_size = co_await asio::async_read(\\n        socket, buf, asio::transfer_at_least(1), asio::use_awaitable);\\n    co_return to_string(buf);\\n  };\\n\")), \"\\n\", React.createElement(_components.h2, null, \"server side\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"class server {\\n\\n  asio::io_context &_context;\\n  asio::ip::tcp::acceptor _acceptor;\\n\\npublic:\\n  server(asio::io_context &context) : _context(context), _acceptor(context) {}\\n  ~server() {}\\n\\n  void listen(const asio::ip::tcp::endpoint &ep) {\\n    std::cout << \\\"[server]listen: \\\" << ep << \\\"...\\\" << std::endl;\\n    _acceptor.open(ep.protocol());\\n    _acceptor.bind(ep);\\n    _acceptor.listen();\\n\\n    // coroutineを起動する\\n    auto ex = _context.get_executor();\\n    asio::co_spawn(ex, accept_loop(), asio::detached);\\n  }\\n\\n  asio::awaitable<void> accept_loop() {\\n\\n    // 単なるループになって再起が不要に\\n    while (true) {\\n\\n      auto [e, socket] = co_await _acceptor.async_accept(use_nothrow_awaitable);\\n      if (e) {\\n        std::cout << \\\"[server]accept error: \\\" << e << std::endl;\\n        break;\\n      }\\n      std::cout << \\\"[server]accepted\\\" << std::endl;\\n\\n      // coroutineを起動する\\n      auto ex = _context.get_executor();\\n      asio::co_spawn(ex, session(std::move(socket)), asio::detached);\\n    }\\n  }\\n\\n  asio::awaitable<void> session(asio::ip::tcp::socket socket) {\\n\\n    // echo server ぽい ping pong\\n    asio::streambuf buf;\\n    auto [e1, read_size] = co_await asio::async_read(\\n        socket, buf, asio::transfer_at_least(1), use_nothrow_awaitable);\\n\\n    auto pong = to_string(buf);\\n    std::cout << \\\"[server]ping: \\\" << pong << std::endl;\\n    pong += \\\"pong\\\";\\n    auto [e2, write_size] = co_await asio::async_write(\\n        socket, asio::buffer(pong), use_nothrow_awaitable);\\n    std::cout << \\\"[server]pong: \\\" << write_size << std::endl;\\n  }\\n};\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"  auto ep = asio::ip::tcp::endpoint(asio::ip::address::from_string(\\\"127.0.0.1\\\"),\\n                                    PORT);\\n\\n  // server\\n  asio::io_context server_context;\\n  server server(server_context);\\n  server.listen(ep);\\n  std::thread server_thread([&server_context]() { server_context.run(); }); // thread でループを回す。\\n\")), \"\\n\", React.createElement(_components.p, null, \"ループ(io_context)が隠蔽されていないのが良いですね。\"), \"\\n\", React.createElement(_components.h1, null, \"asio api\"), \"\\n\", React.createElement(_components.h2, null, \"io_context\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"c++23\"), \" の \", React.createElement(_components.code, null, \"Networking TS\"), \" に向けた変更？\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://amedama1x1.hatenablog.com/entry/2016/04/05/205340\"\n  }, \"Networking TS の Boost.Asio からの変更点 - その 1: Associated allocator\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://amedama1x1.hatenablog.com/entry/2016/08/20/222326\"\n  }, \"Networking TS の Boost.Asio からの変更点 - その 3: Executor\")), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"io_service は Executor と ExecutionContext という概念に分割されたことで, io_context に名前が変わりました\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Boost 1.66\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://amedama1x1.hatenablog.com/entry/2017/12/09/102405\"\n  }, \"Networking TS の Boost.Asio からの変更点 - その 4: Associated Executor\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"単純に io_service を io_context に追きかえるだけで動いた。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"#include <asio.hpp>\\n\\nio_context context;\\n\\n// 全てのタスクが消化されるまでブロックする。\\ncontext.run();\\n\\n// スレッド上で実行する例\\nstd::thread run_thread([&context](){ context.run(); });\\n\\n// 止める\\ncontext.stop();\\nrun_thread.join();\\n\")), \"\\n\", React.createElement(_components.h2, null, \"endpoint\"), \"\\n\", React.createElement(_components.p, null, \"ipaddress + port\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"asip::ip::tcp::endpoint ep(asio::ip::address::from_string(\\\"127.0.0.1\\\"), 1234);\\n\")), \"\\n\", React.createElement(_components.h2, null, \"tcp connect\"), \"\\n\", React.createElement(_components.p, null, \"socket\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"io_context context;\\nasio::ip::tcp::socket socket(coontext);\\n\")), \"\\n\", React.createElement(_components.p, null, \"basic\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"void connect(asio::ip::tcp::socket socket, const asio::ip::tcp::endpoint &ep)\\n{\\n  auto on_connect = [](const asio::error_code &ec)\\n  {\\n    if(ec)\\n    {\\n      std::cout << \\\"error: \\\" << ec << std::endl;\\n    }\\n    else{\\n      std::cout << \\\"connected\\\" << std::endl;\\n    }\\n  };\\n  socket.async_connect(ep, on_connect);\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"c++11 future\")), \"\\n\", React.createElement(_components.p, null, \"std::future に対して \", React.createElement(_components.code, null, \"continue_with\"), \" する手段を用意しないと、これ単体では使いづらい\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"std::future<void> connect_future(asio::ip::tcp::socket socket, const asio::ip::tcp::endpoint &ep)\\n{\\n  // move するのが大変な場合があるので手抜き\\n  auto p = std::make_shared<std::promise<void>>();\\n  auto f = p->get_future();\\n\\n  socket.async_connect(ep, [p](asio::error_code ec){\\n    if(ec)\\n    {\\n    }\\n    else{\\n      // future value\\n      p->set_value();\\n    }\\n  });\\n\\n  return f;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"c++20 coroutine\")), \"\\n\", React.createElement(_components.p, null, \"有望\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"asio::awaitable<void> co(asio::io_context &context, const asio::ip::tcp::endpoint &ep)\\n{\\n  asio::ip::tcp::socket socket(coontext);\\n  co_await socket.async_connect(ep, asio::use_awaitable);\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"tcp listen\"), \"\\n\", React.createElement(_components.h2, null, \"raed_async\"), \"\\n\", React.createElement(_components.h2, null, \"write_async\"), \"\\n\", React.createElement(_components.h1, null, \"coroutine 詳細\"), \"\\n\", React.createElement(_components.p, null, \"asio の coroutine を学んでいたらできないことが出てきた。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"auto result = co_await rpc_call(\\\"add\\\", 1, 2);\\n\")), \"\\n\", React.createElement(_components.h1, null, \"自前の Awaiter が必要？\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"template<typename R, typename ...AS>\\nasio::awaitable<R> rpc_call(const std::string &method, AS... as)\\n{\\n  asio::io_context context;\\n  asio::ip::tcp::socket socket(context);\\n\\n  asio::ip::tcp::endpoint ep;\\n\\n  co_await socket.connect_async(ep, asio::use_awaitable);\\n\\n  // msgpack-rpc\\n  std::vector<uint8_t> request = make_request(method, as...);\\n  co_await asio::write_async(socket, request, asio::use_awaitable); \\n\\n  // ここで実行の流れが切れる\\n\\n  // ?\\n  std::promise<R> p;\\n  return p.get_future();\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"co_await std::future\"), \" できるぽいが, \", React.createElement(_components.code, null, \"asio\"), \" と混ぜてうまくいくのだろうか。\"), \"\\n\", React.createElement(_components.h1, null, \"c++20 coroutine\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://cpprefjp.github.io/lang/cpp20/coroutines.html\"), \"\\n\", React.createElement(_components.li, null, \"https://www.scs.stanford.edu/~dm/blog/c++-coroutines.html\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://qiita.com/tan-y/items/ae54153ec3eb42f80638\"\n  }, \"C++ でコルーチン (async/await 準備編)\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://qiita.com/tan-y/items/6033ab9e7298999bf214#await_ready\"\n  }, \"C++ で async/await をする\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"内部で \", React.createElement(_components.code, null, \"co_await\"), \", \", React.createElement(_components.code, null, \"co_yield\"), \", \", React.createElement(_components.code, null, \"co_return\"), \" の何れかを使う関数は coroutine になる。\\n返り値の型から promise_type を得られるようにする必要がある。\"), \"\\n\", React.createElement(_components.p, null, \"初期化は \", React.createElement(_components.code, null, \"promise_type::get_return_object\"), \" から始まるぽい。\"), \"\\n\", React.createElement(_components.h2, null, \"generator の例\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"struct generator {\\n  struct promise_type;\\n  using handle = std::coroutine_handle<promise_type>;  \\n  struct promise_type {\\n    auto get_return_object() { return generator{handle::from_promise(*this)}; }\\n  };\\n  using handle = std::coroutine_handle<promise_type>;\\nprivate:\\n  handle coro;\\n  generator(handle h) : coro(h) {}\\n};\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"promise_type promise;\\n\\n// 戻り値型オブジェクトの初期化\\nauto result = promise.get_return_object();\\n\")), \"\\n\", React.createElement(_components.h1, null, \"Asio の実装\"), \"\\n\", React.createElement(_components.h2, null, \"asio::awaitable\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"asio::awaitable<T>\"), \" が CoroutineTrait の実装。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"include/asio/awaitable.hpp\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"template <typename T, typename Executor = any_io_executor>\\nclass ASIO_NODISCARD awaitable\\n{\\npublic:\\n  /// The type of the awaited value.\\n  typedef T value_type;\\n\\n  /// The executor type that will be used for the coroutine.\\n  typedef Executor executor_type;\\n\\n  /// Default constructor.\\n  constexpr awaitable() noexcept\\n    : frame_(nullptr)\\n  {\\n  }\\n\\n  /// Move constructor.\\n  awaitable(awaitable&& other) noexcept\\n    : frame_(std::exchange(other.frame_, nullptr))\\n  {\\n  }\\n\\n  /// Destructor\\n  ~awaitable()\\n  {\\n    if (frame_)\\n      frame_->destroy();\\n  }\\n\\n  /// Checks if the awaitable refers to a future result.\\n  bool valid() const noexcept\\n  {\\n    return !!frame_;\\n  }\\n\\n#if !defined(GENERATING_DOCUMENTATION)\\n\\n  // Support for co_await keyword.\\n  bool await_ready() const noexcept\\n  {\\n    return false;\\n  }\\n\\n  // Support for co_await keyword.\\n  template <class U>\\n  void await_suspend(\\n      detail::coroutine_handle<detail::awaitable_frame<U, Executor>> h)\\n  {\\n    frame_->push_frame(&h.promise());\\n  }\\n\\n  // Support for co_await keyword.\\n  T await_resume()\\n  {\\n    return awaitable(static_cast<awaitable&&>(*this)).frame_->get();\\n  }\\n\\n#endif // !defined(GENERATING_DOCUMENTATION)\\n\\nprivate:\\n  template <typename> friend class detail::awaitable_thread;\\n  template <typename, typename> friend class detail::awaitable_frame;\\n\\n  // Not copy constructible or copy assignable.\\n  awaitable(const awaitable&) = delete;\\n  awaitable& operator=(const awaitable&) = delete;\\n\\n  // Construct the awaitable from a coroutine's frame object.\\n  explicit awaitable(detail::awaitable_frame<T, Executor>* a)\\n    : frame_(a)\\n  {\\n  }\\n\\n  detail::awaitable_frame<T, Executor>* frame_;\\n};\\n\")), \"\\n\", React.createElement(_components.h2, null, \"promise_type\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"include/asio/impl/awaitable.hpp\")), \"\\n\", React.createElement(_components.p, null, \"// promise_type\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"# if defined(ASIO_HAS_STD_COROUTINE)\\n\\nnamespace std {\\n\\ntemplate <typename T, typename Executor, typename... Args>\\nstruct coroutine_traits<asio::awaitable<T, Executor>, Args...>\\n{\\n  typedef asio::detail::awaitable_frame<T, Executor> promise_type;\\n};\\n\\n} // namespace std\\n\\n# else // defined(ASIO_HAS_STD_COROUTINE)\\n\\nnamespace std { namespace experimental {\\n\\ntemplate <typename T, typename Executor, typename... Args>\\nstruct coroutine_traits<asio::awaitable<T, Executor>, Args...>\\n{\\n  typedef asio::detail::awaitable_frame<T, Executor> promise_type;\\n};\\n\\n}} // namespace std::experimental\\n\\n# endif // defined(ASIO_HAS_STD_COROUTINE)\\n\")), \"\\n\", React.createElement(_components.h2, null, \"asio::detail::awaitable_frame\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"template <typename Executor>\\nclass awaitable_frame<void, Executor>\\n  : public awaitable_frame_base<Executor>\\n{\\npublic:\\n  awaitable<void, Executor> get_return_object()\\n  {\\n    this->coro_ = coroutine_handle<awaitable_frame>::from_promise(*this);\\n    return awaitable<void, Executor>(this);\\n  };\\n\\n  void return_void()\\n  {\\n  }\\n\\n  void get()\\n  {\\n    this->caller_ = nullptr;\\n    this->rethrow_exception();\\n  }\\n};\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/summer/update_asio.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","ul","li","h1","pre","h2","blockquote","a","_provideComponents","components","React","className","href","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
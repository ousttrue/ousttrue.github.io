{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-winter-geojson-md-1619a6c7cb13a0ffe47f.js","mappings":"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","sources":["webpack:///./content/posts/2021/winter/geojson.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"geojson\"), \"\\n\", React.createElement(_components.p, null, \"既存のライブラリが重厚長大なものが多いのだけど、\\nOpenGL や SVG のような二次元のベクター描画で簡単に済ませたい。\\nその方向で調査。\"), \"\\n\", React.createElement(_components.h2, null, \"format\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://datatracker.ietf.org/doc/html/rfc7946\"), \"\\n\", React.createElement(_components.li, null, \"https://ja.wikipedia.org/wiki/GeoJSON\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://en.wikipedia.org/wiki/GeoJSON\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"GeoJSON is a geospatial data\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"以下のような様式。\\n\", React.createElement(_components.code, null, \"Feature\"), \" の中に \", React.createElement(_components.code, null, \"Geometry\"), \" が入っている。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\"\n  }, \"{\\n    \\\"type\\\": \\\"FeatureCollection\\\",\\n    \\\"features\\\": [\\n        {\\n            \\\"type\\\": \\\"Feature\\\",\\n            \\\"properties\\\": {},\\n            \\\"geometry\\\": {}\\n        }\\n    ]\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"| Geometry Object    |\\n|--------------------|\\n| Point              |\\n| MultiPoint         |\\n| LineString         |\\n| MultiLineString    |\\n| Polygon            |\\n| MultiPolygon       |\\n| GeometryCollection |\"), \"\\n\", React.createElement(_components.h3, null, \"Point\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\"\n  }, \"{\\n    \\\"type\\\": \\\"Point\\\",\\n    \\\"coordinates\\\": [100.0, 0.0]\\n}\\n\")), \"\\n\", React.createElement(_components.h3, null, \"Polygon\"), \"\\n\", React.createElement(_components.p, null, \"穴が空いている場合は、複数の頂点リストを保持する。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\"\n  }, \"// No holes:\\n\\n{\\n    \\\"type\\\": \\\"Polygon\\\",\\n    \\\"coordinates\\\": [\\n        [\\n            [100.0, 0.0],\\n            [101.0, 0.0],\\n            [101.0, 1.0],\\n            [100.0, 1.0],\\n            [100.0, 0.0]\\n        ]\\n    ]\\n}\\n\\n// with holes:\\n\\n{\\n    \\\"type\\\": \\\"Polygon\\\",\\n    \\\"coordinates\\\": [\\n        [\\n            [100.0, 0.0],\\n            [101.0, 0.0],\\n            [101.0, 1.0],\\n            [100.0, 1.0],\\n            [100.0, 0.0]\\n        ],\\n        [\\n            [100.8, 0.8],\\n            [100.8, 0.2],\\n            [100.2, 0.2],\\n            [100.2, 0.8],\\n            [100.8, 0.8]\\n        ]\\n    ]\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"read\"), \"\\n\", React.createElement(_components.p, null, \"python で素直に読んでみた。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import pathlib\\nimport json\\n\\n\\ndef process_geometry(geometry: dict):\\n    match geometry:\\n        case {\\\"type\\\": \\\"MultiPolygon\\\", \\\"coordinates\\\": coordinates}:\\n            print(f'{len(coordinates)} polygon')\\n            for coord in coordinates:\\n                print(f'  {len(coord)} rings')\\n                for x in coord:\\n                    print(f'    {len(x)} points')\\n\\n\\ndef process_feature(feature: dict):\\n    match feature:\\n        case {\\\"type\\\": \\\"Feature\\\", \\\"properties\\\": props, \\\"geometry\\\": geometry}:\\n            print(props)\\n            process_geometry(geometry)\\n\\n        case _:\\n            raise NotImplementedError()\\n\\n\\ndef main(path: pathlib.Path):\\n    data = json.loads(path.read_bytes())\\n    match data:\\n        case {\\\"type\\\": \\\"FeatureCollection\\\", \\\"features\\\": features}:\\n            for feature in features:\\n                process_feature(feature)\\n\\n\\nif __name__ == '__main__':\\n    main(pathlib.Path('japan.geo.json'))\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"jpan.geo.json\"), \" は、 https://github.com/dataofjapan/land です。\\n実行結果。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"{'nam': 'Kyoto Fu', 'nam_ja': '京都府', 'id': 26}\\n4 polygon\\n  1 rings\\n    1235 points\\n  1 rings\\n    6 points\\n  1 rings\\n    8 points\\n  1 rings\\n    6 points\\n\")), \"\\n\", React.createElement(_components.p, null, \"なるほど。\"), \"\\n\", React.createElement(_components.h2, null, \"GL_LINE_LOOP\"), \"\\n\", React.createElement(_components.p, null, \"単純に \", React.createElement(_components.code, null, \"GL_LINE_LOOP\"), \" で描画できそうとわかった。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"def process_geometry(geometry: dict) -> Polygon:\\n    match geometry:\\n        case {\\\"type\\\": \\\"Polygon\\\", \\\"coordinates\\\": polygon}:\\n            assert len(polygon) == 1\\n            array = (float2 * len(polygon[0]))()\\n            for i, (x, y) in enumerate(polygon[0]):\\n                array[i] = float2(x, y)\\n            return Polygon(array, [SubMesh(0, len(array))])\\n\\n        case {\\\"type\\\": \\\"MultiPolygon\\\", \\\"coordinates\\\": polygons}:\\n            array = (float2 * sum(len(polygon[0]) for polygon in polygons))()\\n            i = 0\\n            submeshes = []\\n            for polygon in polygons:\\n                assert len(polygon) == 1\\n                submeshes.append(SubMesh(i, len(polygon[0])))\\n                for (x, y) in polygon[0]:\\n                    array[i] = float2(x, y)\\n                    i += 1\\n            return Polygon(array, submeshes)\\n\\n        case _:\\n            raise NotImplementedError()\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"orthogonal\"), \" の方で適当にビューポートを \", React.createElement(_components.code, null, \"(140, 35)\"), \" というような適当な経度緯度に調整してやればよさそう。\"), \"\\n\", React.createElement(_components.h2, null, \"data\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://github.com/dataofjapan/land\"), \"\\n\", React.createElement(_components.li, null, \"http://geojson.io/\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"参考\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://qiita.com/kkdd/items/416b955fb2d3e1327edc\"\n  }, \"GeoJSON (RFC7946) 仕様の注意点など\")), \"\\n\", React.createElement(_components.li, null, \"https://github.com/jeremyfromearth/cinder-geojson-experiments\"), \"\\n\", React.createElement(_components.li, null, \"https://github.com/soolmaz-mk/Atlasi\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/winter/geojson.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","h2","ul","li","blockquote","code","pre","h3","a","_provideComponents","components","React","className","href","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
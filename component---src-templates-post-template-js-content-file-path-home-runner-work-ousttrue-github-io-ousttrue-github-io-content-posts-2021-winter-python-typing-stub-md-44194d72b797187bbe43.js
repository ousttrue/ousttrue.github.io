"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8391],{6226:function(e,n,t){t.r(n),t.d(n,{default:function(){return d}});var l=t(1151),a=t(7294);function c(e){const n=Object.assign({h1:"h1",ul:"ul",li:"li",a:"a",h2:"h2",p:"p",span:"span"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h1,null,"python typing"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"https://docs.python.org/3/library/typing.html"},"https://docs.python.org/3/library/typing.html")),"\n"),"\n",a.createElement(n.h2,null,"生成する"),"\n",a.createElement(n.p,null,"既存のライブラリ、特に拡張ライブラリに型ヒントを付与したいことがある。\nこれらは、元が ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c/c++</code>'}})," なのでその型情報から ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pyi</code>'}})," を生成してやる。\n型情報は、 ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">clang.cindex</code>'}})," を使って ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c/c++</code>'}})," のヘッダーから得るとよい。"),"\n",a.createElement(n.h2,null,"vscode + pylance(pyright)"),"\n",a.createElement(n.p,null,"プロジェクトローカルでいい場合は、 ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">${workspaceFolder}/typings</code>'}})," に配置すると処理してくれる。\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">clang.cindex</code>'}})," に ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">enum</code>'}})," の情報を追加してみた。"),"\n",a.createElement(n.h2,null,"ctypes"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"clang.cindex"),"\n"),"\n",a.createElement(n.p,null,"もとのモジュールと構造が同じ ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pyi</code>'}})," を用意してやる。\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ctypes</code>'}})," の ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Structure</code>'}})," や関数ポインタに直接型ヒントを付与うまい方法は無さそう？"),"\n",a.createElement(n.h2,null,"拡張モジュール"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"bpy"),"\n",a.createElement(n.li,null,"imgui のバインディング"),"\n"),"\n",a.createElement(n.p,null,"拡張モジュールに型ヒントを埋め込む方法がまだ無いっぽい。\n埋め込む方法ができれば、 ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cython</code>'}})," や ",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pybind</code>'}})," で作った拡張モジュールには自動で型ヒントが付きそうな気がするのだが。"),"\n",a.createElement(n.h2,null,"imgui で作ってみた。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://github.com/ousttrue/cydeer"},"https://github.com/ousttrue/cydeer")),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://blog.ymyzk.com/2018/09/creating-packages-using-pep-561/"},"PEP 561 に準拠した型ヒントを含むパッケージの作り方")),"\n"),"\n"),"\n",a.createElement(n.p,null,"を参考に作ってみた。"))}var r=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(c,e)):c(e)},s=t(8678),u=t(1883),m=t(8838);const o={code:e=>{let{children:n,className:t}=e;return t?a.createElement(m.Z,{className:t},n):a.createElement("code",null,n)}};function g(e){let{data:n,children:t}=e;const c=n.mdx.frontmatter;return a.createElement(s.Z,null,a.createElement("h1",null,c.title),a.createElement("div",{className:"tags-index"},c.tags&&c.tags.length>0&&c.tags.map((e=>a.createElement(u.rU,{to:"/tags/"+e+"/",itemProp:"url"},a.createElement("button",null,e))))),a.createElement(l.Zo,{components:o},t))}function d(e){return a.createElement(g,e,a.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-winter-python-typing-stub-md-44194d72b797187bbe43.js.map
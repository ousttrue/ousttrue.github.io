"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9511],{6906:function(e,l,t){t.r(l);var n=t(1151),r=t(7294);function c(e){const l=Object.assign({h1:"h1",h2:"h2",p:"p",code:"code",h3:"h3",ul:"ul",li:"li",a:"a"},(0,n.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(l.h1,null,"term周りの更新"),"\n",r.createElement(l.h2,null,"terminal emulator を選定・・・"),"\n",r.createElement(l.p,null,"主に3つの動作環境、",r.createElement(l.code,null,"Windows"),", ",r.createElement(l.code,null,"Windows wsl"),", ",r.createElement(l.code,null,"Ubuntu-20.04")," があってtoolや設定をある程度共通にしたいということで試行錯誤していた。\n他に ",r.createElement(l.code,null,"ssh経由"),", ",r.createElement(l.code,null,"Windows wslg")," もあるよ。"),"\n",r.createElement(l.h3,null,"wezterm"),"\n",r.createElement(l.p,null,r.createElement(l.code,null,"wezterm")," が有望であることがわかった"),"\n",r.createElement(l.p,null,"|                 | font fallback | multiplexer | emoji | nerdfnt | graphics escape      |\n|-----------------|---------------|-------------|-------|---------|----------------------|\n| wezterm windows | ✅            | ✅          | color | ✅      | conpty issue         |\n| wezterm wsl     | ✅            | ✅          | color | ✅      | conpty issue         |\n| wezterm ssh     | ✅            | ✅          | color | ✅      | sixel, kitty, iterm2 |\n| wezterm linux   | ✅            | ✅          | color | ✅      | sixel, kitty, iterm2 |"),"\n",r.createElement(l.p,null,"conpty を通すときに escape sequence が加工されるとかで、",r.createElement(l.code,null,"sixel"),", ",r.createElement(l.code,null,"kitty"),", ",r.createElement(l.code,null,"iterm2")," いずれのプロトコルもうまくうごかなかった。",r.createElement(l.code,null,"iterm2")," は絵はでるのだけど場所がずれるという惜しい挙動・・・。"),"\n",r.createElement(l.p,null,"https://github.com/wez/wezterm/issues/1236"),"\n",r.createElement(l.p,null,"SSH 経由で WSL することで対処する。"),"\n",r.createElement(l.h3,null,"wslg(xtermなど)"),"\n",r.createElement(l.p,null,r.createElement(l.code,null,"xterm")," は軽快できれいに表示できるので良かった。フォントのフォールバックができないぽいのが弱点。\n",r.createElement(l.code,null,"urxvt")," は、",r.createElement(l.code,null,"NerdFonts")," がうまくでなかった。\n",r.createElement(l.code,null,"st")," (simple term) もフォントまわりでつまづきだったかな。"),"\n",r.createElement(l.p,null,"|             | font fallback | multiplexer | emoji | nerdfnt | graphics escape |\n|-------------|---------------|-------------|-------|---------|-----------------|\n| xterm wslg  |               |             | mono  | ✅      | sixel           |\n| mlterm wslg | ✅            | mlterm-con  | color | ✅      | sixel           |"),"\n",r.createElement(l.p,null,"mlterm はフォント周りの設定が強力でよかった。\n文字セットごとにフォントを個別に指定できるので、フォントを合成せずともばらのままでよい。"),"\n",r.createElement(l.p,null,r.createElement(l.code,null,"mlterm-con")," という multiplexer があり sixel support があるらしい。\n自前ビルドが必要そう(apt には含まれていないぽい)。"),"\n",r.createElement(l.p,null,"wslgは、頻繁にキーボードが押しっぱなしになったり不安定なような・・・\nhttps://github.com/microsoft/wslg/issues/207\nなおっているけ、リリースに時間がかかりそう？"),"\n",r.createElement(l.h3,null,"libvte"),"\n",r.createElement(l.p,null,r.createElement(l.code,null,"libvte")," 系のterm。\n",r.createElement(l.code,null,"gnome-terminal"),", ",r.createElement(l.code,null,"xfce4-term")," など。"),"\n",r.createElement(l.h3,null,"gpu rendering"),"\n",r.createElement(l.p,null,"GPUレンダリングで ",r.createElement(l.code,null,"araclitty"),", ",r.createElement(l.code,null,"kitty")," そして ",r.createElement(l.code,null,"wezterm")," がある。\n",r.createElement(l.code,null,"wezterm")," が ",r.createElement(l.code,null,"Windows")," をサポートしていて、フォントのレンダリング、タブのサポートと総合的に良い。"),"\n",r.createElement(l.h3,null,"その他"),"\n",r.createElement(l.ul,null,"\n",r.createElement(l.li,null,"tabby"),"\n",r.createElement(l.li,null,"RLogin"),"\n",r.createElement(l.li,null,"ConEmu"),"\n"),"\n",r.createElement(l.p,null,"など。"),"\n",r.createElement(l.h2,null,"要件"),"\n",r.createElement(l.h3,null,"日本語、中文、絵文字, NerdFonts を同時にいい感じに表示したい"),"\n",r.createElement(l.p,null,"となるとすべてを含むひとつのフォントより、主になるフォントを設定してそれにグリフが含まれなかったら、他のフォントにフォールバックする挙動をしてもらう方が便利。\nいくつかのフォントを試してみたのだけど、 ",r.createElement(l.code,null,"HackGenNerd Console")," が良かった。\nで、中文の足りない漢字を ",r.createElement(l.code,null,"更紗ゴシックフォント")," にフォールバックするという組み合わせ。\nがんばって完璧な合成フォントを自作すればいいのだけど、よくわからないので、 複数フォントのフォールバック機能が必要。"),"\n",r.createElement(l.p,null,"かつて w3m で表示が乱れることで苦労した ",r.createElement(l.code,null,"ambigous width")," 問題はあまり気にならなくなっていた。\nなんか、表示は２カラム使うが、データ上は1カラムと見なすような扱いになっていて、\n",r.createElement(l.code,null,"X")," につづいて ",r.createElement(l.code,null," ")," で隙間を開けることで正しく表示できるようだ。\nNerdFonts や 絵文字 はそのようになっている？"),"\n",r.createElement(l.h3,null,"エスケープシーケンスで画像を表示したい"),"\n",r.createElement(l.p,null,r.createElement(l.code,null,"sixel")," とか ",r.createElement(l.code,null,"kitty")," とか ",r.createElement(l.code,null,"iterm2")," による画像表示。"),"\n",r.createElement(l.p,null,"|                        | graphics            |\n|------------------------|---------------------|\n| Windows Native(conpty) |                     |\n| wsltty                 | sixel               |\n| xterm wslg             | sixel               |\n| wezterm linux          | sixel, kityt ,iterm2 |"),"\n",r.createElement(l.p,null,"という感じになった。",r.createElement(l.code,null,"wsltty")," は ",r.createElement(l.code,null,"conpty")," ではなくて ",r.createElement(l.code,null,"winpty")," なので例外的に ",r.createElement(l.code,null,"sixel")," が通過できるらしい。\n動く環境でも ",r.createElement(l.code,null,"tmux")," を挟むと動かなくなる。\n代わりに terminal emulator の方で multiplexer(タブ機能) する必要が発生。"),"\n",r.createElement(l.h2,null,"まとめ"),"\n",r.createElement(l.p,null,"総合力で wezterm が強い。"),"\n",r.createElement(l.ul,null,"\n",r.createElement(l.li,null,"あまり頑張らなくてもフォントがうまく設定できる(cjk, NerdFonts, 絵文字)"),"\n",r.createElement(l.li,null,"multiplexer 機能あり"),"\n",r.createElement(l.li,null,"sixel, kitty, iterm2 プロトコルで画像を表示できる"),"\n",r.createElement(l.li,null,"Windows でも動く"),"\n"),"\n",r.createElement(l.h2,null,"参考"),"\n",r.createElement(l.ul,null,"\n",r.createElement(l.li,null,r.createElement(l.a,{href:"https://zenn.dev/yutakatay/articles/wezterm-intro"},"alacritty+tmuxもいいけど、weztermがすごい件")),"\n",r.createElement(l.li,null,r.createElement(l.a,{href:"https://wezfurlong.org/wezterm/"},"wezterm")),"\n",r.createElement(l.li,null,"https://sw.kovidgoyal.net/kitty/graphics-protocol/"),"\n",r.createElement(l.li,null,"OSC1337 https://iterm2.com/documentation-images.html"),"\n",r.createElement(l.li,null,r.createElement(l.a,{href:"https://unrealman.hatenablog.com/entry/tty-mintty-winpty"},"【Git for Windows】tty/mintty/winptyとは何なのか？【Gitbash】")),"\n"))}l.default=function(e){void 0===e&&(e={});const{wrapper:l}=Object.assign({},(0,n.ah)(),e.components);return l?r.createElement(l,e,r.createElement(c,e)):c(e)}},1151:function(e,l,t){t.d(l,{ah:function(){return c}});var n=t(7294);const r=n.createContext({});function c(e){const l=n.useContext(r);return n.useMemo((()=>"function"==typeof e?e(l):{...l,...e}),[l,e])}}}]);
//# sourceMappingURL=component---content-posts-2022-0331-term-md-ff409eac2020de9fb614.js.map
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2380],{8471:function(e,t,n){n.r(t),n.d(t,{default:function(){return d}});var l=n(1151),a=n(7294);function o(e){const t=Object.assign({h1:"h1",h2:"h2",p:"p",span:"span",a:"a",ul:"ul",li:"li"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.h1,null,"prompt-toolkit の fullscreen アプリケーション"),"\n",a.createElement(t.h2,null,"Buffer"),"\n",a.createElement(t.p,null,"しばらく試行錯誤していたのだがやっと使い方が分かってきた。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Window</code>'}})," + ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">BufferControl</code>'}})," が基本形で edit する場合向け。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Window</code>'}})," + ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FormatedTextControl</code>'}})," が readonly の装飾済みのテキストに向いていそう。"),"\n",a.createElement(t.p,null,"Lexer で基本的な装飾を施して、Preprocess でフォーカスやホバーのUI的な装飾をするという使い分けがよさそう。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FormattedTextControl</code>'}})," の場合は初期化時にスタイル適用済みのテキストを渡してしまう。"),"\n",a.createElement(t.h2,null,"example"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://github.com/prompt-toolkit"},"https://github.com/prompt-toolkit")," の、"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/prompt-toolkit/pyvim"},"https://github.com/prompt-toolkit/pyvim")),"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/prompt-toolkit/pymux"},"https://github.com/prompt-toolkit/pymux")),"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/prompt-toolkit/pyterm"},"https://github.com/prompt-toolkit/pyterm")),"\n"),"\n",a.createElement(t.p,null,"が ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">prompt-toolkit2</code>'}})," のままになっているのだが、\nちょっと手直しすることで、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">prompt-toolkit3</code>'}})," で動作させることができた。"),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ptterm</code>'}})," の ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">prompt-toolkit3</code>'}})," 化に PR を送ってみた。\n主に ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pipe</code>'}})," 周りの非同期入力を ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asyncio</code>'}})," に適合させてやることで動く。\n",a.createElement(t.a,{href:"https://github.com/prompt-toolkit/ptterm/pull/9"},"https://github.com/prompt-toolkit/ptterm/pull/9")),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pymux</code>'}})," も ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fork</code>'}})," しない ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">standalone</code>'}})," 引き数付きならば ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Windows</code>'}})," + ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">prompt-toolkit3</code>'}})," でも動かすことができた。"),"\n",a.createElement(t.p,null,"prompt-toolkit3 では積極的に ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asyncio</code>'}})," を活用していくのがよさそう。"),"\n",a.createElement(t.h2,null,"prompt-toolkit で任意のエスケープシーケンスを入れる"),"\n",a.createElement(t.p,null,"prompt-toolkit で ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sixel</code>'}})," 画像を表示させたい。\nUIControl が UIContent を生成していて、このとき styled text のデータ構造に対して特殊なスタイル ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">[ZeroWidthEscape]</code>'}})," を指定することでエスケープシーケンスを直接出力できることがわかった。諸々の調整が必要になるが、ここに ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sixel</code>'}})," のシーケンスを入れることで表示できる。\n処理順の癖に対応するために、\n画像の高さ分の改行を ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sixel</code>'}})," のエスケープシーケンスに先行させる必要があった。\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">prompt-toolkit</code>'}})," + ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">wezterm</code>'}})," 固有の問題かもしれない。"),"\n",a.createElement(t.h2,null,"Windows/Linux 共用で console アプリを動かす"),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">prompt-toolkit3</code>'}})," でかなりできそう。\nフレームワークの構成を理解するまでとっつきが悪いのだが、\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pypager</code>'}}),", ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pyvim</code>'}}),", ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ptterm</code>'}}),", ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pymux</code>'}})," を研究してやっとわかってきた。"),"\n",a.createElement(t.p,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nerdfont</code>'}})," で賑やかしを入れて、 ",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sixel</code>'}})," で画像表示ができるおもちゃを企画している。"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"vim ぽい lsp/dap の実験アプリ"),"\n",a.createElement(t.li,null,"w3m ぽい ブラウザ"),"\n",a.createElement(t.li,null,"tmux ぽいやつ"),"\n",a.createElement(t.li,null,"ranger ぽいやつ"),"\n"))}var r=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.ah)(),e.components);return t?a.createElement(t,e,a.createElement(o,e)):o(e)},c=n(8678),s=n(1883),m=n(8838);const u={code:e=>{let{children:t,className:n}=e;return n?a.createElement(m.Z,{className:n},t):a.createElement("code",null,t)}};function p(e){let{data:t,children:n}=e;const o=t.mdx.frontmatter;return a.createElement(c.Z,null,a.createElement("h1",null,o.title),a.createElement("div",{className:"tags-index"},o.tags&&o.tags.length>0&&o.tags.map((e=>a.createElement(s.rU,{to:"/tags/"+e+"/",itemProp:"url"},a.createElement("button",null,e))))),a.createElement(l.Zo,{components:u},n))}function d(e){return a.createElement(p,e,a.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-0404-prompt-toolkit-md-f570d2ebbb7337bba15f.js.map
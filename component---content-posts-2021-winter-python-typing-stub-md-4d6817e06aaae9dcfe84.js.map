{"version":3,"file":"component---content-posts-2021-winter-python-typing-stub-md-4d6817e06aaae9dcfe84.js","mappings":"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","sources":["webpack:///./content/posts/2021/winter/python_typing_stub.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"python typing\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://docs.python.org/3/library/typing.html\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"生成する\"), \"\\n\", React.createElement(_components.p, null, \"既存のライブラリ、特に拡張ライブラリに型ヒントを付与したいことがある。\\nこれらは、元が \", React.createElement(_components.code, null, \"c/c++\"), \" なのでその型情報から \", React.createElement(_components.code, null, \"pyi\"), \" を生成してやる。\\n型情報は、 \", React.createElement(_components.code, null, \"clang.cindex\"), \" を使って \", React.createElement(_components.code, null, \"c/c++\"), \" のヘッダーから得るとよい。\"), \"\\n\", React.createElement(_components.h2, null, \"vscode + pylance(pyright)\"), \"\\n\", React.createElement(_components.p, null, \"プロジェクトローカルでいい場合は、 \", React.createElement(_components.code, null, \"${workspaceFolder}/typings\"), \" に配置すると処理してくれる。\\n\", React.createElement(_components.code, null, \"clang.cindex\"), \" に \", React.createElement(_components.code, null, \"enum\"), \" の情報を追加してみた。\"), \"\\n\", React.createElement(_components.h2, null, \"ctypes\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"clang.cindex\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"もとのモジュールと構造が同じ \", React.createElement(_components.code, null, \"pyi\"), \" を用意してやる。\\n\", React.createElement(_components.code, null, \"ctypes\"), \" の \", React.createElement(_components.code, null, \"Structure\"), \" や関数ポインタに直接型ヒントを付与うまい方法は無さそう？\"), \"\\n\", React.createElement(_components.h2, null, \"拡張モジュール\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"bpy\"), \"\\n\", React.createElement(_components.li, null, \"imgui のバインディング\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"拡張モジュールに型ヒントを埋め込む方法がまだ無いっぽい。\\n埋め込む方法ができれば、 \", React.createElement(_components.code, null, \"cython\"), \" や \", React.createElement(_components.code, null, \"pybind\"), \" で作った拡張モジュールには自動で型ヒントが付きそうな気がするのだが。\"), \"\\n\", React.createElement(_components.h2, null, \"imgui で作ってみた。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/cydeer\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://blog.ymyzk.com/2018/09/creating-packages-using-pep-561/\"\n  }, \"PEP 561 に準拠した型ヒントを含むパッケージの作り方\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"を参考に作ってみた。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","ul","li","h2","p","code","a","_provideComponents","components","React","href","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
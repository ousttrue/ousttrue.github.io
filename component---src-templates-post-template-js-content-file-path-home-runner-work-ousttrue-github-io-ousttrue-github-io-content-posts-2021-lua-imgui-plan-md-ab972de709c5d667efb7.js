"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9311],{1607:function(e,l,n){n.r(l),n.d(l,{default:function(){return m}});var t=n(1151),u=n(7294);function a(e){const l=Object.assign({h2:"h2",p:"p",code:"code",ul:"ul",li:"li",a:"a",pre:"pre",h3:"h3",h4:"h4"},(0,t.ah)(),e.components);return u.createElement(u.Fragment,null,u.createElement(l.h2,null,"rust で D3D11 レンダラを進めてきたが・・・"),"\n",u.createElement(l.p,null,"当初 ",u.createElement(l.code,null,"rust")," で ",u.createElement(l.code,null,"d3d11")," のレンダラーを作ろうとして作業を進めていた。\n",u.createElement(l.code,null,"imgui")," を組み込んで、 ",u.createElement(l.code,null,"glTF")," をロードして ",u.createElement(l.code,null,"unlit")," で描画するところまで作ったが、\n",u.createElement(l.code,null,"GUI")," の作りこみが大変そうな感じだった。\n",u.createElement(l.code,null,"rust")," は関数オーバーロードが無いので　",u.createElement(l.code,null,"imgui")," のラッパーの使い勝手が ",u.createElement(l.code,null,"c++")," より落ちるなど。\nポインターを渡せるのは素敵なのだが。"),"\n",u.createElement(l.h2,null,"nvim-0.5 はおもしろい"),"\n",u.createElement(l.p,null,"ここで寄り道して、 ",u.createElement(l.code,null,"nvim")," をいじり始めた。\nちょうどバージョン ",u.createElement(l.code,null,"0.5")," がリリースされるタイミングで、",u.createElement(l.code,null,"0.5")," になると lua サポートが強化されて、設定が lua で書けるとのこと。"),"\n",u.createElement(l.ul,null,"\n",u.createElement(l.li,null,u.createElement(l.a,{href:"https://zenn.dev/hituzi_no_sippo/articles/871c06cdbc45b53181e3"},"NeovimとLua")),"\n"),"\n",u.createElement(l.p,null,"ということで Windows 向けのソースからのビルドシステムを作って ",u.createElement(l.code,null,"nvim")," 環境を整備してみた。\nlua で記述された plugin をなるべく採用。"),"\n",u.createElement(l.p,null,"https://github.com/ousttrue/my_nvim"),"\n",u.createElement(l.p,null,"最近常用していた、 ",u.createElement(l.code,null,"vscode")," の便利さにどこまで追いつけるか。"),"\n",u.createElement(l.ul,null,"\n",u.createElement(l.li,null,"Language Server Protocol。nvim-0.5 から nvim-lsp (luaで書いてある) がある。組み込み"),"\n",u.createElement(l.li,null,"Debug Adapter Protocol。nvim-0.5 から nvim-dap (lulで書いてある) がある。https://github.com/mfussenegger/nvim-dap"),"\n"),"\n",u.createElement(l.p,null,"vscode から ",u.createElement(l.code,null,"lsp")," と ",u.createElement(l.code,null,"dap")," という重要な資産を持ってこれるので慣れればいけそうである。\n調べたところ下記のようだった。"),"\n",u.createElement(l.ul,null,"\n",u.createElement(l.li,null,"codelldb(native debugger c++ や rust) は nvim-dap を改造すれば使えた https://github.com/ousttrue/nvim-dap"),"\n",u.createElement(l.li,null,"rust-analyzer 動いた"),"\n",u.createElement(l.li,null,"python: lsp, dap ともに動きそう"),"\n",u.createElement(l.li,null,"lua: lsp, dap ともに動きそう"),"\n",u.createElement(l.li,null,"csharp: lsp, dap ともに動きそう(Unityはうまくいかず)"),"\n"),"\n",u.createElement(l.p,null,"nvim-lsp も nvim-dap も lua で簡単に記述されているので、コードを読めば、たぶんわかる。\nあとは、タスクランナーを整備すれば開発環境に使えそう。"),"\n",u.createElement(l.h2,null,"luarocks の Windows 運用"),"\n",u.createElement(l.p,null,"lua で記述された nvim のパッケージマネージャー https://github.com/wbthomason/packer.nvim を採用したのだが、\nWindows で luarocks 機能が動かなかった。https://luarocks.org/ は ",u.createElement(l.code,null,"lua")," のパッケージマネージャー。\nちょっと、古め(vc2017より前)の vc でないとだめぽい。\n改造した。"),"\n",u.createElement(l.ul,null,"\n",u.createElement(l.li,null,"https://github.com/ousttrue/packer.nvim"),"\n",u.createElement(l.li,null,"https://github.com/ousttrue/hererocks"),"\n"),"\n",u.createElement(l.p,null,"hererocks は、luarocks のインストーラー。\n",u.createElement(l.code,null,"LUA_PATH")," ",u.createElement(l.code,null,"package.path")," を理解した。"),"\n",u.createElement(l.h2,null,"スタンドアロンの lua インタプリタによるプロジェクト"),"\n",u.createElement(l.p,null,"luarocks が無事に Windows で運用できるようになったので、プロジェクトローカルに必要なライブラリをインストールして、\nスタンドアロンの lua インタープリターを起点にしたアプリ開発ができないか探ってみた。\nlua インタプリタがアプリ組み込みだと dap の運用がしづらい(port 開けて attach とかになる)のでスタンドアロンの lua インタープリターを推す。"),"\n",u.createElement(l.pre,null,u.createElement(l.code,null,"# フォルダ構成\nproject_root\n  + lua(.gitignore) # hererocks でローカルビルドする\n  + main.lua\n")),"\n",u.createElement(l.p,null,"これで、 ",u.createElement(l.code,null,"lsp")," と ",u.createElement(l.code,null,"dap")," が利用できれば快適になるのではないか。"),"\n",u.createElement(l.h3,null,"lua の LanguageServer"),"\n",u.createElement(l.ul,null,"\n",u.createElement(l.li,null,"https://marketplace.visualstudio.com/items?itemName=sumneko.lua","\n",u.createElement(l.ul,null,"\n",u.createElement(l.li,null,"https://github.com/sumneko/lua-language-server"),"\n"),"\n"),"\n"),"\n",u.createElement(l.p,null,"がしっかり動き、",u.createElement(l.code,null,"EmmyLua")," の型ヒントを活用できることが分かった。"),"\n",u.createElement(l.p,null,"https://github.com/neovim/nvim-lspconfig/blob/a21a509417aa530fb7b54020f590fa5ccc67de77/CONFIG.md#sumneko_lua に例があって、"),"\n",u.createElement(l.pre,null,u.createElement(l.code,{className:"language-lua"},"require'lspconfig'.sumneko_lua.setup {\n  settings = {\n    Lua = {\n      workspace = {\n        -- Make the server aware of Neovim runtime files\n        library = {\n          [vim.fn.expand('$VIMRUNTIME/lua')] = true, -- lua標準の型定義がある\n          [vim.fn.expand('$VIMRUNTIME/lua/vim/lsp')] = true, -- Vimの型定義がある\n        },\n      },\n    },\n  },\n}\n")),"\n",u.createElement(l.p,null,"インテリセンスが効くし、組み込み関数の型ヒントも追加できる。"),"\n",u.createElement(l.h3,null,"lua の DebugAdapter"),"\n",u.createElement(l.p,null,"DebugAdapter も問題なく動いた。\nluajit の場合は対応しているものを使うべし。"),"\n",u.createElement(l.h4,null,"Lua Debug"),"\n",u.createElement(l.ul,null,"\n",u.createElement(l.li,null,"https://marketplace.visualstudio.com/items?itemName=actboy168.lua-debug","\n",u.createElement(l.ul,null,"\n",u.createElement(l.li,null,"https://github.com/actboy168/lua-debug"),"\n"),"\n"),"\n"),"\n",u.createElement(l.p,null,"https://github.com/actboy168/bee.lua の"),"\n",u.createElement(l.ul,null,"\n",u.createElement(l.li,null,"Add error hook (for debugger)"),"\n",u.createElement(l.li,null,"Add resume/yield hook (for debugger)"),"\n"),"\n",u.createElement(l.p,null,"謎の機能で実装されているぽい。"),"\n",u.createElement(l.h4,null,"Local Lua Debugger"),"\n",u.createElement(l.ul,null,"\n",u.createElement(l.li,null,"\n",u.createElement(l.p,null,"https://marketplace.visualstudio.com/items?itemName=tomblind.local-lua-debugger-vscode"),"\n",u.createElement(l.ul,null,"\n",u.createElement(l.li,null,"https://github.com/tomblind/local-lua-debugger-vscode"),"\n"),"\n"),"\n",u.createElement(l.li,null,"\n",u.createElement(l.p,null,"luajit でも動く"),"\n"),"\n",u.createElement(l.li,null,"\n",u.createElement(l.p,null,"TypeScriptToLua で書かれている"),"\n"),"\n"),"\n",u.createElement(l.h2,null,"lua で 3D"),"\n",u.createElement(l.p,null,"ちょっと試したところ、 luajit の ",u.createElement(l.a,{href:"https://luajit.org/ext_ffi.html"},"FFI")," を使うのが有望そうという感触を得た。\nd3d は lua でやっている人があまりいなかった。"),"\n",u.createElement(l.ul,null,"\n",u.createElement(l.li,null,"https://github.com/sonoro1234/LuaJIT-GLFW"),"\n",u.createElement(l.li,null,"https://github.com/sonoro1234/LuaJIT-ImGui"),"\n"),"\n",u.createElement(l.p,null,"最新の luajit-2.1.0-beta3(lua-5.1仕様) でいく。"),"\n",u.createElement(l.h2,null,"imgui の ffi"),"\n",u.createElement(l.p,null,u.createElement(l.code,null,"cimgui")," ではなく 素の ",u.createElement(l.code,null,"imgui")," の luajit ffi できるか実験した。"),"\n",u.createElement(l.p,null,"https://stackoverflow.com/questions/6691651/is-it-possible-to-use-functions-from-c-namespaces-with-luajit-ffi"),"\n",u.createElement(l.pre,null,u.createElement(l.code,{className:"language-lua"},'ffi.cdef[[\nvoid Test1_Method1(void) asm("_ZN5Test17Method1Ev");\n]]\n')),"\n",u.createElement(l.p,null,"のように mangling に対応すればできそう。"),"\n",u.createElement(l.h2,null,"libclang による コード生成"),"\n",u.createElement(l.p,null,"ということで、 ",u.createElement(l.code,null,"luajit")," + ",u.createElement(l.code,null,"FFI")," を中心に ",u.createElement(l.code,null,"imgui")," ラッパーを作ってレンダラーというか 3D ツールのインフラとなる、\n簡単なレンダラーと ",u.createElement(l.code,null,"Gizmo")," に対応したツールキットを作るという方向になってきた。"),"\n",u.createElement(l.p,null,u.createElement(l.code,null,"imgui")," の ",u.createElement(l.code,null,"luajit")," ",u.createElement(l.code,null,"FFI")," の使い勝手が重要。"),"\n",u.createElement(l.p,null,"https://github.com/ousttrue/limgui"),"\n",u.createElement(l.ul,null,"\n",u.createElement(l.li,null,"[ ] libclang で ",u.createElement(l.code,null,"imgui.h")," をパースして、luajit FFI 生成と ",u.createElement(l.code,null,"lsp")," への EmmyLua アノテーション生成を同時にやるツール。"),"\n"))}var c=function(e){void 0===e&&(e={});const{wrapper:l}=Object.assign({},(0,t.ah)(),e.components);return l?u.createElement(l,e,u.createElement(a,e)):a(e)};n(8678);function r(e){let{data:l,children:n}=e;return u.createElement(u.Fragment,null,u.createElement("h1",null,l.mdx.frontmatter.title),u.createElement(t.Zo,null,n))}function m(e){return u.createElement(r,e,u.createElement(c,e))}},8678:function(e,l,n){n(7294)},1151:function(e,l,n){n.d(l,{Zo:function(){return r},ah:function(){return a}});var t=n(7294);const u=t.createContext({});function a(e){const l=t.useContext(u);return t.useMemo((()=>"function"==typeof e?e(l):{...l,...e}),[l,e])}const c={};function r({components:e,children:l,disableParentContext:n}){let r;return r=n?"function"==typeof e?e({}):e||c:a(e),t.createElement(u.Provider,{value:r},l)}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-lua-imgui-plan-md-ab972de709c5d667efb7.js.map
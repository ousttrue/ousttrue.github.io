{"version":3,"file":"component---content-posts-2013-05-27-gentoo-bluetooth-md-129963a9013e7c7c0d73.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,+CAAgD,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yCAA0C,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,o1DAClU,CAKA,UAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECmBO,MAAMY,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2013/05/27/gentoo-bluetooth.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Gentoo で Bluetooth\\nGentoo で bluetooth を使う。\"), \"\\n\", React.createElement(_components.p, null, \"http://wiki.gentoo.org/wiki/Bluetooth\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"dmesg\\n[22782.149236] Bluetooth: Core ver 2.16\\n[22782.149244] NET: Registered protocol family 31\\n[22782.149245] Bluetooth: HCI device and connection manager initialized\\n[22782.149252] Bluetooth: HCI socket layer initialized\\n[22782.149254] Bluetooth: L2CAP socket layer initialized\\n[22782.149255] Bluetooth: SCO socket layer initialized\\n[22782.151467] Bluetooth: BNEP (Ethernet Emulation) ver 1.3\\n[22782.151469] Bluetooth: BNEP filters: protocol multicast\\n[22782.151475] Bluetooth: BNEP socket layer initialized\\n\\nkernel\\nHCI USB driver (btusb) を有効にする。\\nUSE設定とツール\\n/etc/portage/make.conf\\nUSEにbluetoothを追加\\n\\n/etc/portage/package.use\\nnet-wireless/bluez test-programs # simple-agentに必要\\n\\nインストール\\n# emerge --ask --changed-use --deep @world\\n# /etc/init.d/bluetooth start\\n# rc-update add bluetooth default\\n\\nPairing\\n$ hcitools scan\\n        XX:XX:XX:XX:XX:XX       M-NV1BR Series\\n\\n$ simple-agent XX:XX:XX:XX:XX:XX\\nTraceback (most recent call last):\\n  File \\\"/usr/bin/simple-agent\\\", line 115, in <module>\\n    path = manager.FindAdapter(args[0])\\n  File \\\"/usr/lib64/python2.7/site-packages/dbus/proxies.py\\\", line 70, in __call__\\n    return self._proxy_method(*args, **keywords)\\n  File \\\"/usr/lib64/python2.7/site-packages/dbus/proxies.py\\\", line 145, in __call__\\n    **keywords)\\n  File \\\"/usr/lib64/python2.7/site-packages/dbus/connection.py\\\", line 651, in call_blocking\\n    message, timeout)\\ndbus.exceptions.DBusException: org.bluez.Error.NoSuchAdapter: No such adapter\\n\\nここで頓挫。どうも埒が明かぬ。\\nと思ったらsimple-agentの引数が足りなかった。\\nbluetooth deviceのコネクトボタンを押す\\n\\n$ simple-agent hci0 XX:XX:XX:XX:XX:XX\\n$ bluez-test-device trusted XX:XX:XX:XX:XX:XX yes\\n$ bluez-test-input connect XX:XX:XX:XX:XX:XX\\n\\nとりあえず接続はできた。\\n複数接続登録タイプのキーボードとマウスを買ってきたのでそれを有効にしたいのだが、\\n今のところ切り替え時に毎回コネクトボタンを押さされている。\\n一瞬だけコネクトボタンなしでの切り替えができた時期があったのでなんか方法があるはずなのだが。\\nutility\\n# emerge -av blueman\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
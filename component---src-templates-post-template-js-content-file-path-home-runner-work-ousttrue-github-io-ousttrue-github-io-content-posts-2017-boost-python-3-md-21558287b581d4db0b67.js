"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9566],{3001:function(n,s,a){a.r(s),a.d(s,{default:function(){return k}});var t=a(1151),e=a(7294);function p(n){const s=Object.assign({p:"p",span:"span",h1:"h1"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(s.p,null,"ちょっと気になったので確認。"),"\n",e.createElement(s.p,null,"Windows10(64bit) VisualStudio2017 + Python3.6"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">#define BOOST_PYTHON_STATIC_LIB  \n#include &lt;boost/python.hpp&gt;\n\nstd::string g_bytes;\nstd::string get_bytes()\n{\n    return g_bytes;\n}\nvoid set_bytes(const std::string &amp;bytes)\n{\n    g_bytes = bytes;\n}\n\nstd::wstring g_unicode;\nstd::wstring get_unicode()\n{\n    return g_unicode;\n}\nvoid set_unicode(const std::wstring &amp;unicode)\n{\n    g_unicode = unicode;\n}\n\n\nBOOST_PYTHON_MODULE(StringSample)\n{\n    using namespace boost::python;\n\n    def(&quot;add&quot;, &amp;add);\n    def(&quot;get_bytes&quot;, &amp;get_bytes);\n    def(&quot;set_bytes&quot;, &amp;set_bytes);\n    def(&quot;get_unicode&quot;, &amp;get_unicode);\n    def(&quot;set_unicode&quot;, &amp;set_unicode);\n}</code></pre></div>'}}),"\n",e.createElement(s.h1,null,"coding: utf-8"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> StringSample\n\nStringSample<span class="token punctuation">.</span>set_bytes<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>StringSample<span class="token punctuation">.</span>get_bytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nStringSample<span class="token punctuation">.</span>set_bytes<span class="token punctuation">(</span><span class="token string">b"ascii"</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>StringSample<span class="token punctuation">.</span>get_bytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nStringSample<span class="token punctuation">.</span>set_unicode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>StringSample<span class="token punctuation">.</span>get_unicode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nStringSample<span class="token punctuation">.</span>set_unicode<span class="token punctuation">(</span><span class="token string">b"ascii"</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>StringSample<span class="token punctuation">.</span>get_unicode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">#</span>\nStringSample<span class="token punctuation">.</span>set_bytes<span class="token punctuation">(</span><span class="token string">"日本語"</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>StringSample<span class="token punctuation">.</span>get_bytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nStringSample<span class="token punctuation">.</span>set_bytes<span class="token punctuation">(</span><span class="token string">"日本語"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">\'utf-8\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>StringSample<span class="token punctuation">.</span>get_bytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nStringSample<span class="token punctuation">.</span>set_unicode<span class="token punctuation">(</span><span class="token string">"日本語"</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>StringSample<span class="token punctuation">.</span>get_unicode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nStringSample<span class="token punctuation">.</span>set_unicode<span class="token punctuation">(</span><span class="token string">"日本語"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">\'utf-8\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>StringSample<span class="token punctuation">.</span>get_unicode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">ascii\nascii\nascii\nascii\n日本語\n日本語\n日本語\n日本語\n続行するには何かキーを押してください . . .</code></pre></div>'}}),"\n",e.createElement(s.p,null,"bytesはutf-8のバイト列と見なされるようだ。"))}var c=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?e.createElement(s,n,e.createElement(p,n)):p(n)},o=a(8678),u=a(1883),l=a(8838);const i={code:n=>{let{children:s,className:a}=n;return a?e.createElement(l.Z,{className:a},s):e.createElement("code",null,s)}};function r(n){let{data:s,children:a}=n;const p=s.mdx.frontmatter;return e.createElement(o.Z,null,e.createElement("h1",null,p.title),e.createElement("div",{className:"tags-index"},p.tags&&p.tags.length>0&&p.tags.map((n=>e.createElement(u.rU,{to:"/tags/"+n+"/",itemProp:"url"},e.createElement("button",null,n))))),e.createElement(t.Zo,{components:i},a))}function k(n){return e.createElement(r,n,e.createElement(c,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-boost-python-3-md-21558287b581d4db0b67.js.map
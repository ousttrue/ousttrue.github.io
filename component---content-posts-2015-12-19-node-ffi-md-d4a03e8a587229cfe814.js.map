{"version":3,"file":"component---content-posts-2015-12-19-node-ffi-md-d4a03e8a587229cfe814.js","mappings":"wHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gIAAiI,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,4hHAC1T,CAKA,UAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECmBO,MAAMY,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2015/12/19/node_ffi.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Windows 上で node-ffi で dll から関数を呼びだしていたのだが、\\ndll にコールバックを登録した呼び出しを繰り返していると死ぬという現象に遭遇。\\n調べ始めた。\\nnode-v5.3.0-x64.msi(Windows10)\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"node-ffiはstdcallに対応してない\\n2014/01/25\\n\\nhttp://stackoverflow.com/questions/21357502/calling-delphi-stdcall-function-with-panischar-from-node-js\\n\\nnode-ffiはstdcall対応してないで。\\nそうなのかー。\\ngithub見るとIssueがあるけど解決されなかったぽい。\\n2012/01/13\\n* https://github.com/node-ffi/node-ffi/issues/34\\n残念。\\nついで。node-ffiはffiにパッケージ名を改めたらしい。\\n\\nhttps://github.com/node-ffi/node-ffi/wiki/API-changes-from-v0.x-to-v1.x\\n\\nnode-ffiを改造できないか模索する\\nnode-ffiはlibffiのラッパーとわかる。\\nFFI_DEFAULT_ABI\\nというのがcdeclになる様子でnode-ffiはそれしか対応していないのが問題。\\nで、調べていくと\\nnode_modules/ffi/deps/libffi/src/x86/ffitarget.h\\ntypedef enum ffi_abi {\\n  FFI_FIRST_ABI = 0,\\n\\n  /* ---- Intel x86 Win32 ---------- */\\n#ifdef X86_WIN32\\n  FFI_SYSV,\\n  FFI_STDCALL,\\n  FFI_THISCALL,\\n  FFI_FASTCALL,\\n  FFI_MS_CDECL,\\n  FFI_LAST_ABI,\\n#ifdef _MSC_VER\\n  FFI_DEFAULT_ABI = FFI_MS_CDECL\\n#else\\n  FFI_DEFAULT_ABI = FFI_SYSV\\n#endif\\n\\n#elif defined(X86_WIN64)\\n  FFI_WIN64,\\n  FFI_LAST_ABI,\\n  FFI_DEFAULT_ABI = FFI_WIN64\\n\\n#else\\n  /* ---- Intel x86 and AMD x86-64 - */\\n  FFI_SYSV,\\n  FFI_UNIX64,   /* Unix variants all use the same ABI for x86-64  */\\n  FFI_LAST_ABI,\\n#if defined(__i386__) || defined(__i386)\\n  FFI_DEFAULT_ABI = FFI_SYSV\\n#else\\n  FFI_DEFAULT_ABI = FFI_UNIX64\\n#endif\\n#endif\\n} ffi_abi;\\n\\nSTDCALL発見・・・。しかし、この書き方だと64bitビルドで消滅するのではないか？\\nFFI_WIN64って何？\\nX86_WIN64って何だろう。何故、STD_CALLが無いのか。もしかして、IA64のことなのか。\\nどうやら、そのよう定義済みプリプロセッサー・シンボルの使用。\\nうちはamd64なのでnot IA64。\\nnode-ffiのどこでX86_WIN64が定義されているのか\\nnode_modules/ffi/deps/libffi/config/win/x64\\n/* Specify which architecture libffi is configured for. */\\n#ifndef X86_WIN64\\n#define X86_WIN64\\n#endif\\n\\nとりあえず書き換えて、\\n#ifndef X86_WIN32\\n#define X86_WI32\\n#endif\\n\\n> cd node_modules/ffi\\n> npm install\\n> node-gyp rebuild\\n\\nlibffi.lib(ffi.obj) : error LNK2001: 外部シンボル \\\"ffi_closure_raw_THISCALL\\\" は未解決です。 [D:\\\\dev\\\\_web\\\\neuron.\\njs\\\\node_modules\\\\ffi\\\\build\\\\ffi_bindings.vcxproj]\\nlibffi.lib(ffi.obj) : error LNK2001: 外部シンボル \\\"ffi_closure_SYSV\\\" は未解決です。 [D:\\\\dev\\\\_web\\\\neuron.js\\\\node_\\nmodules\\\\ffi\\\\build\\\\ffi_bindings.vcxproj]\\nlibffi.lib(ffi.obj) : error LNK2001: 外部シンボル \\\"ffi_closure_STDCALL\\\" は未解決です。 [D:\\\\dev\\\\_web\\\\neuron.js\\\\no\\nde_modules\\\\ffi\\\\build\\\\ffi_bindings.vcxproj]\\nlibffi.lib(ffi.obj) : error LNK2001: 外部シンボル \\\"ffi_closure_THISCALL\\\" は未解決です。 [D:\\\\dev\\\\_web\\\\neuron.js\\\\n\\node_modules\\\\ffi\\\\build\\\\ffi_bindings.vcxproj]\\nlibffi.lib(ffi.obj) : error LNK2001: 外部シンボル \\\"ffi_closure_raw_SYSV\\\" は未解決です。 [D:\\\\dev\\\\_web\\\\neuron.js\\\\n\\node_modules\\\\ffi\\\\build\\\\ffi_bindings.vcxproj]\\nlibffi.lib(ffi.obj) : error LNK2001: 外部シンボル \\\"ffi_call_win32\\\" は未解決です。 [D:\\\\dev\\\\_web\\\\neuron.js\\\\node_mo\\ndules\\\\ffi\\\\build\\\\ffi_bindings.vcxproj]\\n\\n頓挫・・・。\\n上記関数の実体がwin32.asmの中にあるが64bitでコンパイルすると失敗する・・・。\\nlibffiを64bitビルドしてstdcallするところから出直さねばならない。\\n32bit版のnode.jsに妥協\\nFFI_STDCALLで関数登録\\n// stdcallのabi番号。Windowsの32bit版Node.js専用\\nconst FFI_STDCALL=2;\\n// callbackをFFI_STDCALLに設定\\nconst CallbackType = FFI.Function(ref.types.void\\n    , [ref.refType(ref.types.void)], FFI_STDCALL);\\n\\n// 関数定義をFFI_STDCALLに設定\\nconst DllLib = FFI.Library(\\\"hoge.dll\\\", {\\n    RegisterCallback: [ref.types.void, [ref.refType(ref.types.void), CallbackType, {abi: FFI_STDCALL}],\\n}\\n\\n上記の記述でWindowsの32bit版Node.jsではFFI登録にSTDCALLを設定できたっぽい。\\nでも、プログラムが死ぬ。\\nどうやらJavascript層より下で死んでいるようでエラーを吐かずに突然死する。ううむ。\\nこりゃ、Cのデバッガをアタッチせねばなるまい。\\n0x016E0008 で例外がスローされました (node.exe 内): 0xC0000005: 場所 0x00000588 の読み取り中にアクセス違反が発生しました\\n\\nこの例外のハンドラーがある場合は、プログラムを安全に続行できます。\\n\\nuncaughtException\\nこんなの発見した。\\n東京Node学園#8 Let It Crash!?\\nさっそくやってみる\\nprocess.on('uncaughtException', function (err) {\\n  console.log('Caught exception: ' + err);\\n});\\n\\nひっかからないな・・・\\n自前ビルドしてどう死んでいるか確かめるか。\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-1121-build-prefix-md-7899e24ea6aca1220e53.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,OACNC,IAAK,QACJC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,uBAAwBK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,SAAU,uFAAwF,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,sWAAuWK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,MAAO,OAAQI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,OAAQ,SAAUI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,oBAAqB,iGAAkG,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mIAAoIK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,UAAW,6BAA8BI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,kBAAmB,kCAAmC,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,QAASK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,WAAY,cAAeI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,WAAY,gBAAiBI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,SAAU,mBAAoBI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,kBAAmB,OAAQI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,SAAU,iCAAkC,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wCAAyC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yBAA0BK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,UAAW,MAAOI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,WAAY,QAASI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,QAAS,0BAA2B,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,OAAQK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,YAAa,cAAeI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,UAAW,oBAAqBI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,OAAQ,KAAMI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,OAAQ,qBAAsBI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,WAAY,KAAMI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,UAAW,KAAMI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,WAAY,uDAAwD,KAAMI,EAAAA,cAAoBR,EAAYK,IAAK,KAAMG,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,sKAAuK,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wBAAyB,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gBAAiBK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,WAAY,MAAOI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,OAAQ,gCAAiCI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,OAAQ,QAASI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,WAAY,oBAAqBI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,aAAc,MAAOI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,QAAS,gBAAiBI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,aAAc,MAAOI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,SAAU,sDACjiH,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCTA,SAASY,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOJ,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMK,EAAKE,IAAIC,YAAYC,OAAQT,EAAAA,cAAoBU,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBpB,GACvC,OAAOS,EAAAA,cAAoBG,EAAcZ,EAAOS,EAAAA,cAAoBY,EAAqBrB,GAC3F,C,4HCuBO,MAAMsB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBf,GAC/B,MAAMgB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfd,EACFA,EAAWgB,GAGb,IAAIA,KAAsBhB,IAChC,CAACgB,EAAmBhB,GACzB,CAGA,MAAMiB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACX,EAAU,SAAEO,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAflB,EACHA,EAAW,CAAC,GACZA,GAAciB,EAEJF,EAAiBf,GAG5B,gBACLc,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2022/1121-build-prefix.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"GStreamer をビルドする過程で \", React.createElement(_components.code, null, \"meson\"), \" を調べたら、存外に良かった。\\npython なので、CMake と比べてデバッガをアタッチできるのが圧倒的に楽。\\nCMake はステップ実行とかできないからね。\"), \"\\n\", React.createElement(_components.p, null, \"成り行きで GStreamer に続いて、 Gtk4, PyGObject とかをビルドしていたら、\\nGtk4 もわりと面白そうなことがわかった。\\n昔、Windows では扱いが面倒だった GLArea がさくっと動いた。\\nさらに Gtk4 で新しくできた Gsk 層が 2D の SceneGraph ぽくて、\\nPyOpenGL と連携して遊べるかもしれない。\\nNodeEditor とか Timeline(KeyFrame) Editor 作れないかなぁ。\\nPyGObject まわりは、gir(xml) から Python の型ヒント(pyi stub) を生成することで、\\nLanguageServer のインテリセンスをそれなりに効かせることができた。\\n最近の python では、 \", React.createElement(_components.code, null, \"Qt\"), \" とか \", React.createElement(_components.code, null, \"bpy\"), \" といった \", React.createElement(_components.code, null, \"native extension\"), \" の方が、\\n素の python モジュールより型情報が無くなるという逆転現象が起きているのだが、\\nPyGObject はほぼ gir(xml) そのままなので、わりといい感じになる。\"), \"\\n\", React.createElement(_components.p, null, \"Gtk のビルドが短時間でできることがわかったので、\\nGUI 層は自前ビルドでいけそうな気がしてきた。\\nつまり、Linux と Windows 両方を gtk4 でなるべく同じツールを使ってみる。\\nGentoo をクリーンインストールして下の層だけ \", React.createElement(_components.code, null, \"emerge\"), \" で入れた。\\nGentoo は USE フラグで \", React.createElement(_components.code, null, \"-gtk -glib -qt\"), \" などとすることで、依存が連鎖することを止めることができる。\"), \"\\n\", React.createElement(_components.p, null, \"ついでに \", React.createElement(_components.code, null, \"wayland\"), \" に手を出したところ、\", React.createElement(_components.code, null, \"wayland\"), \" 界隈もビルドツールに\\n\", React.createElement(_components.code, null, \"meson\"), \" が導入されているのを発見。\\n\", React.createElement(_components.code, null, \"download/clone\"), \" => \", React.createElement(_components.code, null, \"meson\"), \" を自動化する python スクリプトの作成に着手した。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/toprefix\"), \"\\n\", React.createElement(_components.p, null, \"プロトタイプとしてはまぁまぁの使い勝手。\\n\", React.createElement(_components.code, null, \"gentoo\"), \" と \", React.createElement(_components.code, null, \"Windows\"), \" 共用で \", React.createElement(_components.code, null, \"gtk4\"), \" などをさくっと展開できるようになる。予定。\"), \"\\n\", React.createElement(_components.p, null, \"さらに \", React.createElement(_components.code, null, \"dotfiles\"), \" の管理でやっている \", React.createElement(_components.code, null, \"neovim\"), \" のビルドも合流。\\ngo 系の \", React.createElement(_components.code, null, \"ghq\"), \", \", React.createElement(_components.code, null, \"fzf\"), \" などの展開や、\\nrust 系の \", React.createElement(_components.code, null, \"wezterm\"), \", \", React.createElement(_components.code, null, \"stylua\"), \", \", React.createElement(_components.code, null, \"ripgrep\"), \" の展開もこっちに移そうかなと。\\nわりと処理のパターンは決まっていて次のうちのどれかになる事が多い。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"download => extract => build => install: tar ball\\ndownload => extract          => install: ビルド済み tar ball\\n              clone => build => install: repository\\n\")), \"\\n\", React.createElement(_components.p, null, \"これにパッチ当てが追加になることがある。\"), \"\\n\", React.createElement(_components.p, null, \"ついでに、\\n以前作った \", React.createElement(_components.code, null, \"blender\"), \" の \", React.createElement(_components.code, null, \"bpy\"), \" モジュール生成スクリプトなんかも合流することを画策。\\n\", React.createElement(_components.code, null, \"svn\"), \" なしで \", React.createElement(_components.code, null, \"blender\"), \" ビルドできんかね。\\nとなると \", React.createElement(_components.code, null, \"pixar usd\"), \" も \", React.createElement(_components.code, null, \"llvm\"), \" もビルドしたいわね。\\n\", React.createElement(_components.code, null, \"pyxar usd\"), \" は \", React.createElement(_components.code, null, \"boost\"), \" の除去したいけどね。\\nTUI と Desktop のツール系は自前ビルドで遊べるようにしていく。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2022/1121-build-prefix.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","pre","_provideComponents","components","React","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
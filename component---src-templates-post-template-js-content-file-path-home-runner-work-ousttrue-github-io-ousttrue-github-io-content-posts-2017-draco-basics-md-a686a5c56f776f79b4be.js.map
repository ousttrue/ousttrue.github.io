{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-draco-basics-md-a686a5c56f776f79b4be.js","mappings":"8JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,OACNC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,oCAAqC,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,mCAAoC,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,gBAAiBM,EAAAA,cAAoBT,EAAYI,KAAM,CACtTM,wBAAyB,CACvBC,OAAQ,4CAER,MAAOF,EAAAA,cAAoBT,EAAYI,KAAM,CAC/CM,wBAAyB,CACvBC,OAAQ,4CAER,iDAAkDF,EAAAA,cAAoBT,EAAYI,KAAM,CAC1FM,wBAAyB,CACvBC,OAAQ,0DAER,wBAAyBF,EAAAA,cAAoBT,EAAYI,KAAM,CACjEM,wBAAyB,CACvBC,OAAQ,oDAER,qBAAsBF,EAAAA,cAAoBT,EAAYI,KAAM,CAC9DM,wBAAyB,CACvBC,OAAQ,mDAER,WAAY,KAAMF,EAAAA,cAAoBT,EAAYI,KAAM,CAC1DM,wBAAyB,CACvBC,OAAQ,8kGAER,KAAMF,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,eAAgB,KAAMM,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,KAAMI,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,kDAAmD,KAAMG,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,kCAAmC,KAAMG,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,kCAAmC,MAAO,KAAMG,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,+LAAgM,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,SACnqB,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWd,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCjCA,MAAMS,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBa,EAAAA,EAAQ,KAAMb,EAAAA,cAAoB,KAAM,KAAMY,EAAKE,IAAIC,YAAYC,OAAQhB,EAAAA,cAAoBiB,EAAAA,GAAa,CACrIlB,WAAYA,GACXQ,GACL,CACe,SAASW,EAAiB5B,GACvC,OAAOU,EAAAA,cAAoBU,EAAcpB,EAAOU,EAAAA,cAAoBmB,EAAqB7B,GAC3F,C","sources":["webpack:///./content/posts/2017/draco_basics.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Googleのメッシュ圧縮ライブラリDracoの使い方を調査中。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/google/draco\"), \"\\n\", React.createElement(_components.p, null, \"コマンドラインツールから \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">obj</code>\"\n    }\n  }), \" と \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ply</code>\"\n    }\n  }), \" 形式の読み書きができるのでそこから解読する。\\nポイントクラウドの読み書き\\n点群を表す \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">draco::PointCloud</code>\"\n    }\n  }), \" 型があって、それを継承して面を追加した \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">draco::Mesh</code>\"\n    }\n  }), \" 型がある。\\nまずは、基本となる \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PointCloud</code>\"\n    }\n  }), \" の読み書き。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">#include &quot;draco/point_cloud/point_cloud.h&quot;\\n#include &quot;draco/point_cloud/point_cloud_builder.h&quot;\\n#include &quot;draco/compression/encode.h&quot;\\n#include &quot;draco/compression/decode.h&quot;\\n\\n\\nstruct Vector3\\n{\\n    float x;\\n    float y;\\n    float z;\\n};\\n\\n/*\\nstatic int AddPositionAttribute(draco::PointCloud *pc, int vertexCount)\\n{\\n    draco::GeometryAttribute va;\\n    va.Init(draco::GeometryAttribute::POSITION, nullptr, 3, draco::DT_FLOAT32, false, \\n        sizeof(float) * 3, 0);\\n    return pc-&gt;AddAttribute(va, false, vertexCount);\\n}\\nstatic int AddTexCoordAttribute(draco::PointCloud *pc, int vertexCount)\\n{\\n    draco::GeometryAttribute va;\\n    va.Init(draco::GeometryAttribute::TEX_COORD, nullptr, 2, draco::DT_FLOAT32, false,\\n        sizeof(float) * 2, 0);\\n    return pc-&gt;AddAttribute(va, false, vertexCount);\\n}\\nstatic int AddNormaldAttribute(draco::PointCloud *pc, int vertexCount)\\n{\\n    draco::GeometryAttribute va;\\n    va.Init(draco::GeometryAttribute::NORMAL, nullptr, 3, draco::DT_FLOAT32, false,\\n        sizeof(float) * 3, 0);\\n    return pc-&gt;AddAttribute(va, false, vertexCount);\\n}\\n*/\\n\\nint main(int argc, char **argv)\\n{\\n    Vector3 vertices[] =\\n    {\\n        {-1, -1, -1},\\n        { -1, 1, -1 },\\n        { 1, 1, -1 },\\n        { 1, -1, -1 },\\n    };\\n\\n    // setup point cloud\\n    /*\\n    draco::PointCloud pc;\\n    pc.set_num_points(_countof(vertices));\\n\\n    {\\n        auto pos_att_id = AddPositionAttribute(&amp;pc, _countof(vertices));\\n        auto attr = pc.attribute(pos_att_id);\\n        auto size = attr-&gt;size();\\n        attr-&gt;SetAttributeValue(draco::AttributeValueIndex(0), vertices);\\n    }\\n    */\\n    draco::PointCloudBuilder builder;\\n    builder.Start(_countof(vertices));\\n    auto pos_att_id = builder.AddAttribute(draco::GeometryAttribute::POSITION, 3, draco::DT_FLOAT32);\\n    for (int i = 0; i &lt; _countof(vertices); ++i) {\\n        builder.SetAttributeValueForPoint(pos_att_id, draco::PointIndex(i), &amp;vertices[i]);\\n    }\\n    auto res = builder.Finalize(false);\\n\\n    draco::EncoderBuffer encodeBuffer;\\n    {\\n        // encode\\n        draco::Encoder encoder;\\n        auto  status = encoder.EncodePointCloudToBuffer(*res, &amp;encodeBuffer);\\n    }\\n\\n    {\\n        // decode\\n        draco::DecoderBuffer decodeBuffer;\\n        decodeBuffer.Init(encodeBuffer.data(), encodeBuffer.size());\\n\\n        draco::Decoder decoder;\\n        auto statusor = decoder.DecodePointCloudFromBuffer(&amp;decodeBuffer);\\n\\n        auto dpc = std::move(statusor).value();\\n        auto num = dpc-&gt;NumNamedAttributes(draco::GeometryAttribute::POSITION);\\n        auto attr = dpc-&gt;GetNamedAttribute(draco::GeometryAttribute::POSITION);\\n        std::vector&lt;Vector3&gt; positions(attr-&gt;size());\\n        for (int i = 0; i &lt; positions.size(); ++i)\\n        {\\n            attr-&gt;ConvertValue&lt;float, 3&gt;(draco::AttributeValueIndex(i), &amp;positions[i].x);\\n        }\\n    }\\n\\n    return 0;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"参考になるファイルは、\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"point_cloud_builder_test.cc(build point cloud)\"), \"\\n\", React.createElement(_components.li, null, \"draco_encoder.cc(obj to draco)\"), \"\\n\", React.createElement(_components.li, null, \"draco_decoder.cc(draco to obj)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"PointCloud -> dracoとdraco->PointCloud->get points は簡単でAPIを素直に呼び出せばいい。\\n問題は如何に PointCloud を構築するか。 draco_encoder から解読したローレベルのAPIでやってみたらうまくいかなかったのだが、draco::PointCloudBuilderを発見した。\\nMeshの読み書き\"), \"\\n\", React.createElement(_components.p, null, \"ToDo…\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/draco_basics.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","ul","li","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (imguiについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/imgui.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2021 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Sun, 31 Oct 2021 17:57:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>ImGui の API</title><link>https://ousttrue.github.io/posts/2021/imgui_docking_api/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/ousttrue/limgui"&gt;https://github.com/ousttrue/limgui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ようやく &lt;code&gt;FFI&lt;/code&gt; の整備ができたので、ImGui の API 調査に進む&lt;/p&gt;
&lt;h2&gt;DockingBuilder&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;imgui_internal.h&lt;/code&gt; に一連の &lt;code&gt;Docking&lt;/code&gt; 向けの API がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ocornut/imgui/issues/2109"&gt;https://github.com/ocornut/imgui/issues/2109&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://gist.github.com/PossiblyAShrub/0aea9511b84c34e191eaa90dd7225969"&gt;PossiblyAShrub/dock_builder_example.cpp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;変数を流用していてわかりにくいのだが、おそらく下記のような感じだと思う。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;+----+----+
|    |    |
|Left|----|
|    |Down|
+----+----+
&lt;/pre&gt;

&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImGui&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DockBuilderAddNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dockspace_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dockspace_flags&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ImGuiDockNodeFlags_DockSpace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                                                                         &lt;span class="c1"&gt;// 返り値と同じ Left  // 反対側 Right&lt;/span&gt;
&lt;span class="n"&gt;ImGuiID&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImGui&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DockBuilderSplitNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImGuiDir_Left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                                                                         &lt;span class="c1"&gt;// 返り値と同じ Down  // 反対側 Up&lt;/span&gt;
&lt;span class="n"&gt;ImGuiID&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImGui&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DockBuilderSplitNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImGuiDir_Down&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;# .imgui.ini 
[Docking][Data]
DockSpace     ID=0x7CF2A649 Window=0x9A404470 Pos=0,30 Size=1200,870 Split=X
  DockNode    ID=0x00000001 Parent=0x7CF2A649 SizeRef=599,900 Selected=0xDA554856 =&amp;gt; Left
  DockNode    ID=0x00000002 Parent=0x7CF2A649 SizeRef=599,900 Split=Y
    DockNode  ID=0x00000003 Parent=0x00000002 SizeRef=599,673 CentralNode=1
    DockNode  ID=0x00000004 Parent=0x00000002 SizeRef=599,225 Selected=0xBCCD3F05 =&amp;gt; Down
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;[ ] central node&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tree&lt;/h2&gt;
&lt;p&gt;libclang のパース結果の &lt;code&gt;CXCursor&lt;/code&gt; のツリー&lt;/p&gt;
&lt;p&gt;{{ image(path="tree.jpg") }}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] selection&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Table&lt;/h2&gt;
&lt;p&gt;glTF を表示してみた。さくさく書けてよさそう。&lt;/p&gt;
&lt;p&gt;{{ image(path="table.jpg") }}&lt;/p&gt;&lt;/div&gt;</description><category>ffi</category><category>imgui</category><category>luajit</category><guid>https://ousttrue.github.io/posts/2021/imgui_docking_api/</guid><pubDate>Tue, 27 Jul 2021 15:00:00 GMT</pubDate></item><item><title>imgui の FFI が luajit で動くところまで作った</title><link>https://ousttrue.github.io/posts/2021/example_glfw_openg/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/ousttrue/limgui/blob/master/imgui_ffi/cdef/imgui.lua"&gt;https://github.com/ousttrue/limgui/blob/master/imgui_ffi/cdef/imgui.lua&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Window System は &lt;code&gt;GLFW&lt;/code&gt;、3D API は &lt;code&gt;OpenGL3&lt;/code&gt; を選択。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SDL2 は、 &lt;code&gt;HWND&lt;/code&gt; を取得周りが FFI では面倒なことが分かっていたのと、&lt;code&gt;SDL-Image&lt;/code&gt; などの関連ライブラリ無しで行くつもりだった&lt;/li&gt;
&lt;li&gt;D3D11 のバインディングを作っているとまた時間がかかる。&lt;code&gt;COM&lt;/code&gt; は C の範囲で実装できるので後でやりたい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということから、楽そうなものを選択したらそうなった。&lt;/p&gt;
&lt;h2&gt;メンバー関数呼び出し&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ImFont&lt;/code&gt;, &lt;code&gt;ImFontAtlas&lt;/code&gt; のみ何故か &lt;code&gt;c++&lt;/code&gt; 色が強く、メンバ関数呼び出しがあったりするのでなんとかしたい。
cdecl で FFI 記述できるんだっけ？&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//io.Fonts-&amp;gt;AddFontDefault();&lt;/span&gt;
&lt;span class="c1"&gt;//io.Fonts-&amp;gt;AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);&lt;/span&gt;
&lt;span class="c1"&gt;//io.Fonts-&amp;gt;AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);&lt;/span&gt;
&lt;span class="c1"&gt;//io.Fonts-&amp;gt;AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);&lt;/span&gt;
&lt;span class="c1"&gt;//io.Fonts-&amp;gt;AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);&lt;/span&gt;
&lt;span class="c1"&gt;//ImFont* font = io.Fonts-&amp;gt;AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts-&amp;gt;GetGlyphRangesJapanese());&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;第1引数に this に相当する引数を追加してやればいけた。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cdef&lt;/span&gt;&lt;span class="s"&gt;[[&lt;/span&gt;
&lt;span class="s"&gt;// 適当に名前を付け替える&lt;/span&gt;
&lt;span class="s"&gt;struct ImFont* ImFontAtlas_AddFontFromFileTTF(&lt;/span&gt;
&lt;span class="s"&gt;    struct ImFontAtlas* this,&lt;/span&gt;
&lt;span class="s"&gt;    const char* filename,&lt;/span&gt;
&lt;span class="s"&gt;    float size_pixels,&lt;/span&gt;
&lt;span class="s"&gt;    const struct ImFontConfig* font_cfg,&lt;/span&gt;
&lt;span class="s"&gt;    ImWchar* glyph_ranges&lt;/span&gt;
&lt;span class="s"&gt;) asm("?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z");&lt;/span&gt;
&lt;span class="s"&gt;]]&lt;/span&gt;
&lt;/pre&gt;

&lt;h2&gt;C++ デフォルト引数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ImGui&lt;/code&gt; の &lt;code&gt;API&lt;/code&gt; は基本的にほぼ C になるように配慮されていて、C++ の機能は限定的にしか使っていない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;関数オーバーロード&lt;/li&gt;
&lt;li&gt;デフォルト引数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;である。
で、このデフォルト引数がないと &lt;code&gt;imgui&lt;/code&gt; の使い勝手が著しく下がる。
リファレンスを確認して、デフォルト値を当ててやる必要が出るので。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 例&lt;/span&gt;
&lt;span class="n"&gt;IMGUI_API&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p_open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImGuiWindowFlags&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;NULL&lt;/code&gt; は &lt;code&gt;nil&lt;/code&gt; だし、 &lt;code&gt;0&lt;/code&gt; はそのまま &lt;code&gt;0&lt;/code&gt; なので、簡単なところだけでも対応する。
最悪、インテリセンスに出るようにすることで調べる手間は回避できるのだけど
&lt;code&gt;const &amp;amp;ImVec2 v = ImVec2(0, 0)&lt;/code&gt; とかはめんどくさいです。
FFI 境界の &lt;code&gt;struct の value 渡し&lt;/code&gt;, &lt;code&gt;デフォルト引数&lt;/code&gt; は解決できない場合が多いが、コード生成側で努力する価値はある。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rust&lt;/code&gt; はここができなくて、故にラッパー側で API を builder パターンに変更していたりするのだけど、
&lt;code&gt;rust&lt;/code&gt; の &lt;code&gt;imgui&lt;/code&gt; ラッパーの API を使いたいのではなくて、生の &lt;code&gt;imgui&lt;/code&gt; が使いたいのだ。
&lt;code&gt;luajit&lt;/code&gt; の FFI はちょっとラップすることで簡単に解決できる(遅くなるかもしれないが)。&lt;/p&gt;
&lt;p&gt;ラッパーを自動で生成するようにできた。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;-- lua では nil と false のみが 偽 である&lt;/span&gt;

    &lt;span class="c1"&gt;-- wrapper&lt;/span&gt;
    &lt;span class="n"&gt;Begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;-- p_open が供給されない場合、デフォルト nil になり、NULL として解釈される&lt;/span&gt;
        &lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="c1"&gt;-- ffi 呼び出し&lt;/span&gt;
        &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;imgui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;-- wrapper&lt;/span&gt;
    &lt;span class="n"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;-- 引数なしの `ffi.new` は zero 詰めする。 `ImVec2(0, 0)` になる。&lt;/span&gt;
        &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'struct ImVec2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;-- ffi 呼び出し&lt;/span&gt;
        &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;imgui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;

&lt;h2&gt;可変長引数&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;IMGUI_API&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;luajit ffi ではそのまま &lt;code&gt;...&lt;/code&gt; を扱うことができた。&lt;/p&gt;
&lt;p&gt;ただし、&lt;code&gt;%d&lt;/code&gt; のときは、
&lt;code&gt;LL&lt;/code&gt; をつけて &lt;code&gt;integer&lt;/code&gt; を渡す。
&lt;code&gt;number&lt;/code&gt; だとうまくいかない。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;LL&lt;/span&gt; &lt;span class="c1"&gt;-- 64bit int. UL もある&lt;/span&gt;
&lt;span class="n"&gt;imgui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"counter = %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;LL&lt;/code&gt; と &lt;code&gt;UL&lt;/code&gt; は luajit の拡張らしい。
&lt;a href="https://luajit.org/ext_ffi_api.html"&gt;https://luajit.org/ext_ffi_api.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Extensions to the Lua Parser&lt;/p&gt;
&lt;p&gt;numeric literals with the suffixes LL or ULL as signed or unsigned 64 bit integers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;だがしかし、この記法使うと &lt;code&gt;stylua&lt;/code&gt; がエラーになる。そりゃ、そうだ。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'long long[1]'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;-- 32bit だとうまくいかない&lt;/span&gt;
&lt;span class="n"&gt;imgui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"counter = %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;を使うのがよさそう。&lt;/p&gt;
&lt;h2&gt;template class のごまかし&lt;/h2&gt;
&lt;p&gt;T を pointer としてしか使わない場合は、
&lt;code&gt;T*&lt;/code&gt; を除去して &lt;code&gt;void*&lt;/code&gt; にすれば動く。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;ImVector&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Capacity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;    
&lt;/pre&gt;

&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cdef&lt;/span&gt;&lt;span class="s"&gt;[[&lt;/span&gt;
&lt;span class="s"&gt;struct ImVector{&lt;/span&gt;
&lt;span class="s"&gt;    int Size;&lt;/span&gt;
&lt;span class="s"&gt;    int Capacity;&lt;/span&gt;
&lt;span class="s"&gt;    void* Data;&lt;/span&gt;
&lt;span class="s"&gt;};    &lt;/span&gt;
&lt;span class="s"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>ffi</category><category>imgui</category><category>libclang</category><category>luajit</category><guid>https://ousttrue.github.io/posts/2021/example_glfw_openg/</guid><pubDate>Sat, 24 Jul 2021 15:00:00 GMT</pubDate></item><item><title>lua による imgui 計画</title><link>https://ousttrue.github.io/posts/2021/lua_imgui_plan/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;h3&gt;rust で D3D11 レンダラを進めてきたが・・・&lt;/h3&gt;
&lt;p&gt;当初 &lt;code&gt;rust&lt;/code&gt; で &lt;code&gt;d3d11&lt;/code&gt; のレンダラーを作ろうとして作業を進めていた。
&lt;code&gt;imgui&lt;/code&gt; を組み込んで、 &lt;code&gt;glTF&lt;/code&gt; をロードして &lt;code&gt;unlit&lt;/code&gt; で描画するところまで作ったが、
&lt;code&gt;GUI&lt;/code&gt; の作りこみが大変そうな感じだった。
&lt;code&gt;rust&lt;/code&gt; は関数オーバーロードが無いので　&lt;code&gt;imgui&lt;/code&gt; のラッパーの使い勝手が &lt;code&gt;c++&lt;/code&gt; より落ちるなど。
ポインターを渡せるのは素敵なのだが。&lt;/p&gt;
&lt;h3&gt;nvim-0.5 はおもしろい&lt;/h3&gt;
&lt;p&gt;ここで寄り道して、 &lt;code&gt;nvim&lt;/code&gt; をいじり始めた。
ちょうどバージョン &lt;code&gt;0.5&lt;/code&gt; がリリースされるタイミングで、&lt;code&gt;0.5&lt;/code&gt; になると lua サポートが強化されて、設定が lua で書けるとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/hituzi_no_sippo/articles/871c06cdbc45b53181e3"&gt;NeovimとLua&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということで Windows 向けのソースからのビルドシステムを作って &lt;code&gt;nvim&lt;/code&gt; 環境を整備してみた。
lua で記述された plugin をなるべく採用。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/my_nvim"&gt;https://github.com/ousttrue/my_nvim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近常用していた、 &lt;code&gt;vscode&lt;/code&gt; の便利さにどこまで追いつけるか。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Language Server Protocol。nvim-0.5 から nvim-lsp (luaで書いてある) がある。組み込み&lt;/li&gt;
&lt;li&gt;Debug Adapter Protocol。nvim-0.5 から nvim-dap (lulで書いてある) がある。&lt;a href="https://github.com/mfussenegger/nvim-dap"&gt;https://github.com/mfussenegger/nvim-dap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vscode から &lt;code&gt;lsp&lt;/code&gt; と &lt;code&gt;dap&lt;/code&gt; という重要な資産を持ってこれるので慣れればいけそうである。
調べたところ下記のようだった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;codelldb(native debugger c++ や rust) は nvim-dap を改造すれば使えた &lt;a href="https://github.com/ousttrue/nvim-dap"&gt;https://github.com/ousttrue/nvim-dap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rust-analyzer 動いた&lt;/li&gt;
&lt;li&gt;python: lsp, dap ともに動きそう&lt;/li&gt;
&lt;li&gt;lua: lsp, dap ともに動きそう&lt;/li&gt;
&lt;li&gt;csharp: lsp, dap ともに動きそう(Unityはうまくいかず)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;nvim-lsp も nvim-dap も lua で簡単に記述されているので、コードを読めば、たぶんわかる。
あとは、タスクランナーを整備すれば開発環境に使えそう。&lt;/p&gt;
&lt;h3&gt;luarocks の Windows 運用&lt;/h3&gt;
&lt;p&gt;lua で記述された nvim のパッケージマネージャー &lt;a href="https://github.com/wbthomason/packer.nvim"&gt;https://github.com/wbthomason/packer.nvim&lt;/a&gt; を採用したのだが、
Windows で luarocks 機能が動かなかった。&lt;a href="https://luarocks.org/"&gt;https://luarocks.org/&lt;/a&gt; は &lt;code&gt;lua&lt;/code&gt; のパッケージマネージャー。
ちょっと、古め(vc2017より前)の vc でないとだめぽい。
改造した。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/ousttrue/packer.nvim&lt;/li&gt;
&lt;li&gt;https://github.com/ousttrue/hererocks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hererocks は、luarocks のインストーラー。
&lt;code&gt;LUA_PATH&lt;/code&gt; &lt;code&gt;package.path&lt;/code&gt; を理解した。&lt;/p&gt;
&lt;h3&gt;スタンドアロンの lua インタプリタによるプロジェクト&lt;/h3&gt;
&lt;p&gt;luarocks が無事に Windows で運用できるようになったので、プロジェクトローカルに必要なライブラリをインストールして、
スタンドアロンの lua インタープリターを起点にしたアプリ開発ができないか探ってみた。
lua インタプリタがアプリ組み込みだと dap の運用がしづらい(port 開けて attach とかになる)のでスタンドアロンの lua インタープリターを推す。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;# フォルダ構成
project_root
  + lua(.gitignore) # hererocks でローカルビルドする
  + main.lua
&lt;/pre&gt;

&lt;p&gt;これで、 &lt;code&gt;lsp&lt;/code&gt; と &lt;code&gt;dap&lt;/code&gt; が利用できれば快適になるのではないか。&lt;/p&gt;
&lt;h4&gt;lua の LanguageServer&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=sumneko.lua"&gt;https://marketplace.visualstudio.com/items?itemName=sumneko.lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sumneko/lua-language-server"&gt;https://github.com/sumneko/lua-language-server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;がしっかり動き、&lt;code&gt;EmmyLua&lt;/code&gt; の型ヒントを活用できることが分かった。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/neovim/nvim-lspconfig/blob/a21a509417aa530fb7b54020f590fa5ccc67de77/CONFIG.md#sumneko_lua"&gt;https://github.com/neovim/nvim-lspconfig/blob/a21a509417aa530fb7b54020f590fa5ccc67de77/CONFIG.md#sumneko_lua&lt;/a&gt; に例があって、&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="s1"&gt;'lspconfig'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumneko_lua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Lua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;workspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;-- Make the server aware of Neovim runtime files&lt;/span&gt;
        &lt;span class="n"&gt;library&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'$VIMRUNTIME/lua'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;-- lua標準の型定義がある&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'$VIMRUNTIME/lua/vim/lsp'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;-- Vimの型定義がある&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;インテリセンスが効くし、組み込み関数の型ヒントも追加できる。&lt;/p&gt;
&lt;h4&gt;lua の DebugAdapter&lt;/h4&gt;
&lt;p&gt;DebugAdapter も問題なく動いた。
luajit の場合は対応しているものを使うべし。&lt;/p&gt;
&lt;h5&gt;Lua Debug&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=actboy168.lua-debug"&gt;https://marketplace.visualstudio.com/items?itemName=actboy168.lua-debug&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/actboy168/lua-debug"&gt;https://github.com/actboy168/lua-debug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/actboy168/bee.lua"&gt;https://github.com/actboy168/bee.lua&lt;/a&gt; の&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add error hook (for debugger)&lt;/li&gt;
&lt;li&gt;Add resume/yield hook (for debugger)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;謎の機能で実装されているぽい。&lt;/p&gt;
&lt;h5&gt;Local Lua Debugger&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=tomblind.local-lua-debugger-vscode"&gt;https://marketplace.visualstudio.com/items?itemName=tomblind.local-lua-debugger-vscode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/tomblind/local-lua-debugger-vscode"&gt;https://github.com/tomblind/local-lua-debugger-vscode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;luajit でも動く&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;TypeScriptToLua で書かれている&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;lua で 3D&lt;/h3&gt;
&lt;p&gt;ちょっと試したところ、 luajit の &lt;a href="https://luajit.org/ext_ffi.html"&gt;FFI&lt;/a&gt; を使うのが有望そうという感触を得た。
d3d は lua でやっている人があまりいなかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sonoro1234/LuaJIT-GLFW"&gt;https://github.com/sonoro1234/LuaJIT-GLFW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sonoro1234/LuaJIT-ImGui"&gt;https://github.com/sonoro1234/LuaJIT-ImGui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最新の luajit-2.1.0-beta3(lua-5.1仕様) でいく。&lt;/p&gt;
&lt;h3&gt;imgui の ffi&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cimgui&lt;/code&gt; ではなく 素の &lt;code&gt;imgui&lt;/code&gt; の luajit ffi できるか実験した。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/6691651/is-it-possible-to-use-functions-from-c-namespaces-with-luajit-ffi"&gt;https://stackoverflow.com/questions/6691651/is-it-possible-to-use-functions-from-c-namespaces-with-luajit-ffi&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cdef&lt;/span&gt;&lt;span class="s"&gt;[[&lt;/span&gt;
&lt;span class="s"&gt;void Test1_Method1(void) asm("_ZN5Test17Method1Ev");&lt;/span&gt;
&lt;span class="s"&gt;]]&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;のように mangling に対応すればできそう。&lt;/p&gt;
&lt;h3&gt;libclang による コード生成&lt;/h3&gt;
&lt;p&gt;ということで、 &lt;code&gt;luajit&lt;/code&gt; + &lt;code&gt;FFI&lt;/code&gt; を中心に &lt;code&gt;imgui&lt;/code&gt; ラッパーを作ってレンダラーというか 3D ツールのインフラとなる、
簡単なレンダラーと &lt;code&gt;Gizmo&lt;/code&gt; に対応したツールキットを作るという方向になってきた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;imgui&lt;/code&gt; の &lt;code&gt;luajit&lt;/code&gt; &lt;code&gt;FFI&lt;/code&gt; の使い勝手が重要。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/limgui"&gt;https://github.com/ousttrue/limgui&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] libclang で &lt;code&gt;imgui.h&lt;/code&gt; をパースして、luajit FFI 生成と &lt;code&gt;lsp&lt;/code&gt; への EmmyLua アノテーション生成を同時にやるツール。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>imgui</category><category>lua</category><guid>https://ousttrue.github.io/posts/2021/lua_imgui_plan/</guid><pubDate>Fri, 16 Jul 2021 15:00:00 GMT</pubDate></item><item><title>limgui</title><link>https://ousttrue.github.io/github/limgui/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/ousttrue/limgui"&gt;https://github.com/ousttrue/limgui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;luajit + ffi + imgui&lt;/p&gt;&lt;/div&gt;</description><category>imgui</category><category>lua</category><category>repository</category><guid>https://ousttrue.github.io/github/limgui/</guid><pubDate>Thu, 15 Jul 2021 09:01:59 GMT</pubDate></item><item><title>ManglingImgui</title><link>https://ousttrue.github.io/github/manglingimgui/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/ousttrue/ManglingImgui"&gt;https://github.com/ousttrue/ManglingImgui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# wrapper for Imgui.dll&lt;/p&gt;&lt;/div&gt;</description><category>cs</category><category>csharp</category><category>imgui</category><category>repository</category><guid>https://ousttrue.github.io/github/manglingimgui/</guid><pubDate>Sun, 28 Jun 2020 01:28:31 GMT</pubDate></item><item><title>SharpImGui</title><link>https://ousttrue.github.io/github/sharpimgui/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/ousttrue/SharpImGui"&gt;https://github.com/ousttrue/SharpImGui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cimgui binding&lt;/p&gt;&lt;/div&gt;</description><category>c</category><category>csharp</category><category>imgui</category><category>repository</category><guid>https://ousttrue.github.io/github/sharpimgui/</guid><pubDate>Sat, 07 Sep 2019 01:39:30 GMT</pubDate></item><item><title>imgui_samples</title><link>https://ousttrue.github.io/github/imgui_samples/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/ousttrue/imgui_samples"&gt;https://github.com/ousttrue/imgui_samples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;imgui samples&lt;/p&gt;&lt;/div&gt;</description><category>c++</category><category>cpp</category><category>imgui</category><category>repository</category><guid>https://ousttrue.github.io/github/imgui_samples/</guid><pubDate>Wed, 10 Jul 2019 01:59:58 GMT</pubDate></item><item><title>SwigImGui</title><link>https://ousttrue.github.io/github/swigimgui/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/ousttrue/SwigImGui"&gt;https://github.com/ousttrue/SwigImGui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;imgui swig wrapper&lt;/p&gt;&lt;/div&gt;</description><category>imgui</category><category>python</category><category>repository</category><guid>https://ousttrue.github.io/github/swigimgui/</guid><pubDate>Sun, 30 Jul 2017 04:26:14 GMT</pubDate></item><item><title>ImGuiのWidgets</title><link>https://ousttrue.github.io/qiita/imguinowidgets/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://qiita.com/ousttrue/items/ae7c8d5715adffc5b1fa"&gt;https://qiita.com/ousttrue/items/ae7c8d5715adffc5b1fa&lt;/a&gt;&lt;/p&gt;</description><category>imgui</category><category>qiita</category><guid>https://ousttrue.github.io/qiita/imguinowidgets/</guid><pubDate>Sat, 29 Oct 2016 05:21:09 GMT</pubDate></item><item><title>D言語でdear imgui (AKA ImGui)</title><link>https://ousttrue.github.io/qiita/dyan-yu-dedear-imgui-aka-imgui/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://qiita.com/ousttrue/items/8dc223ded267edb2e41a"&gt;https://qiita.com/ousttrue/items/8dc223ded267edb2e41a&lt;/a&gt;&lt;/p&gt;</description><category>dlang</category><category>imgui</category><category>opengl</category><category>qiita</category><guid>https://ousttrue.github.io/qiita/dyan-yu-dedear-imgui-aka-imgui/</guid><pubDate>Fri, 23 Sep 2016 01:54:41 GMT</pubDate></item></channel></rss>
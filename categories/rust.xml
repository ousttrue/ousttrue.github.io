<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (rustについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/rust.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2021 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Thu, 04 Nov 2021 03:36:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>rust の ffi</title><link>https://ousttrue.github.io/posts/2021/rust_ffi/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;rust の FFI に取り組んでいた。
結局、 sdl binding と imgui binding を自作した。&lt;/p&gt;
&lt;p&gt;両方とも、既存の crate があるのに何故わざわざ自作するのかと言えば、
ラップされて使い方が変わったところを学ぶのが面倒くさかったからじゃ。
&lt;a href="https://crates.io/crates/sdl2"&gt;SDL&lt;/a&gt; は　&lt;code&gt;HWND&lt;/code&gt; を取得する方法がわかりにくくて &lt;code&gt;SDL_Event&lt;/code&gt; を &lt;code&gt;imgui&lt;/code&gt; に渡す方法はわからなかった。
&lt;a href="https://crates.io/crates/imgui"&gt;imgui&lt;/a&gt; は最新版の &lt;code&gt;docking&lt;/code&gt; ブランチが使いたかった。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://crates.io/crates/clang-sys"&gt;clang-sys&lt;/a&gt; を使って rust の FFI コードを生成し、
&lt;a href="https://crates.io/crates/cc"&gt;cc&lt;/a&gt; を使って &lt;code&gt;build.rs&lt;/code&gt; でライブラリをビルドした。
これで、 &lt;code&gt;c&lt;/code&gt; &lt;code&gt;c++&lt;/code&gt; のライブラリをソースビルドしてスタティックリンクし、 &lt;code&gt;FFI&lt;/code&gt; で関数を呼び出し放題。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;imgui&lt;/code&gt; の FFI 生成の方が簡単で、 &lt;code&gt;SDL&lt;/code&gt; の方は C のマクロに苦しんだ(雑に対応)。
とはいえ、わりと素直に記述できるので快適であった。&lt;/p&gt;
&lt;p&gt;おかげで、 rust の FFI 周りに対する習熟度がだいぶ上がった。&lt;/p&gt;
&lt;h3&gt;できないこと&lt;/h3&gt;
&lt;p&gt;POD の struct を return する関数を呼び出すとクラッシュした。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ImVec2&lt;/span&gt; &lt;span class="n"&gt;ImGui&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetContentRegionAvail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;D言語だけど&lt;/p&gt;
&lt;p&gt;https://forum.dlang.org/thread/dkamxcamwttszxwwxttv@forum.dlang.org&lt;/p&gt;
&lt;p&gt;の件らしく、C++ 側でラップした。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;pGetContentRegionAvail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ImVec2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pOut&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pOut&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pOut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetContentRegionAvail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;h3&gt;自由に static link できる&lt;/h3&gt;
&lt;p&gt;build.rs を駆使して自由にリンクできるので、スタティックリンクとダイナミックリンクを制御できるので便利。
特に Windows の場合、システムに共通のライブラリがインストールされていることが期待できないので、
DLLを作ってコピーした入りパスを通すよりは、スタティックリンクする方が気楽。
今回は &lt;code&gt;cc&lt;/code&gt; でコンパイルしたけど、&lt;code&gt;c++/c&lt;/code&gt; は CMake でビルドする方が管理しやすいかもしれない。&lt;/p&gt;&lt;/div&gt;</description><category>ffi</category><category>libclang</category><category>rust</category><guid>https://ousttrue.github.io/posts/2021/rust_ffi/</guid><pubDate>Sat, 19 Jun 2021 15:00:00 GMT</pubDate></item><item><title>サイトジェネレーターを Zola に変更</title><link>https://ousttrue.github.io/posts/2021/init_zola/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;最近、 rust を再開したので、
&lt;code&gt;Static Site Generator&lt;/code&gt; を go 製の hugo から rust 製の zola に変更してみた。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.getzola.org/"&gt;https://www.getzola.org/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;hugo のからの引っ越し&lt;/h2&gt;
&lt;h3&gt;zola インストール&lt;/h3&gt;
&lt;h3&gt;初期化&lt;/h3&gt;
&lt;h3&gt;config.toml を hugo 版から zola 版に書き換える。&lt;/h3&gt;
&lt;p&gt;最低限 base_url。&lt;/p&gt;
&lt;h3&gt;プレビューしてみる&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ zola serve
&lt;/pre&gt;

&lt;p&gt;一部の記事でエラーが出る。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Reason&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;There&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;どの記事がまずいかはわかるが、何行目とか場所はわからないのかしら。
適当になおす。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ zola check
&lt;/pre&gt;

&lt;p&gt;の方がデバッグ向け。
いくつかなおしたら、エラーは出なくなった。&lt;/p&gt;
&lt;h2&gt;テンプレートを用意する&lt;/h2&gt;
&lt;p&gt;https://www.getzola.org/documentation/getting-started/overview/&lt;/p&gt;
&lt;p&gt;に従って基本的なテンプレートを作成。
index.html, section.html, page.html の3種類のテンプレートがサーチされる。
section.html と page.html は、section のフロントマター、 &lt;code&gt;template&lt;/code&gt;, &lt;code&gt;page_template&lt;/code&gt; で変更できる。&lt;/p&gt;
&lt;h2&gt;zola の content 構成&lt;/h2&gt;
&lt;p&gt;section(フォルダ) に page が所属するという構成みたい。
section とうのは単なるフォルダではなくて、folder/index.md もしくは folder/_index.md をさす。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;root =&amp;gt; index.html&lt;ul&gt;
&lt;li&gt;section&lt;ul&gt;
&lt;li&gt;_index.md (セクションになる) =&amp;gt; section.html&lt;/li&gt;
&lt;li&gt;page1.md =&amp;gt; page.html&lt;/li&gt;
&lt;li&gt;page2.md =&amp;gt; page.html&lt;/li&gt;
&lt;li&gt;subsection (_index.md が無いのでセクションでは無い) =&amp;gt; レンダリングされない&lt;ul&gt;
&lt;li&gt;page3.md (orphan page) =&amp;gt; page.html&lt;/li&gt;
&lt;li&gt;page4.md (orphan page) =&amp;gt; page.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;セクションに所属しない page は orphan page となり、 &lt;code&gt;section.pages&lt;/code&gt; のように列挙することができなくなる。
すべてのフォルダに &lt;code&gt;_index.md&lt;/code&gt; を配置してセクション化するという設計思想のようだ。&lt;/p&gt;
&lt;p&gt;セクションが木構造になっていて、page が leaf になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;section&lt;ul&gt;
&lt;li&gt;subsections&lt;/li&gt;
&lt;li&gt;pages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が再帰的に続く。&lt;/p&gt;
&lt;h3&gt;zola を改造してみた。&lt;/h3&gt;
&lt;p&gt;orphan page が section.pages に入るようになる。
https://github.com/ousttrue/zola/commit/7842d0b2d05eb15400dbe20b20791b57af077de1&lt;/p&gt;
&lt;h2&gt;zola 設定 config.toml&lt;/h2&gt;
&lt;p&gt;https://www.getzola.org/documentation/getting-started/configuration/&lt;/p&gt;
&lt;h2&gt;Tera テンプレート&lt;/h2&gt;
&lt;p&gt;https://tera.netlify.app/docs&lt;/p&gt;
&lt;h3&gt;extends&lt;/h3&gt;
&lt;p&gt;別ファイルを部分的に override する
https://tera.netlify.app/docs/#inheritance&lt;/p&gt;
&lt;h3&gt;include&lt;/h3&gt;
&lt;p&gt;別ファイルの部品を読み込む
https://tera.netlify.app/docs/#include&lt;/p&gt;
&lt;h3&gt;date format&lt;/h3&gt;
&lt;p&gt;https://tera.netlify.app/docs/#include&lt;/p&gt;
&lt;h2&gt;とりあえずメンテナンス中・・・&lt;/h2&gt;
&lt;p&gt;hugo に比べて template の構成がシンプルでわかりやすいような気がする
(hugo に慣れているせいかもしれない)。
そもそも hugo の時点でちゃんと管理してなかったので、
ぼちぼち続きをやる。&lt;/p&gt;&lt;/div&gt;</description><category>rust</category><category>ssg</category><category>zola</category><guid>https://ousttrue.github.io/posts/2021/init_zola/</guid><pubDate>Fri, 11 Jun 2021 15:00:00 GMT</pubDate></item><item><title>frame_factory</title><link>https://ousttrue.github.io/github/frame_factory/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/ousttrue/frame_factory"&gt;https://github.com/ousttrue/frame_factory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;rust 練習&lt;/p&gt;&lt;/div&gt;</description><category>3d</category><category>repository</category><category>rust</category><guid>https://ousttrue.github.io/github/frame_factory/</guid><pubDate>Fri, 07 May 2021 10:06:58 GMT</pubDate></item><item><title>jsonprops</title><link>https://ousttrue.github.io/github/jsonprops/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://github.com/ousttrue/jsonprops"&gt;https://github.com/ousttrue/jsonprops&lt;/a&gt;&lt;/p&gt;</description><category>repository</category><category>rust</category><guid>https://ousttrue.github.io/github/jsonprops/</guid><pubDate>Mon, 30 Nov 2020 11:34:17 GMT</pubDate></item><item><title>rust_gtk_glarea</title><link>https://ousttrue.github.io/github/rust_gtk_glarea/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/ousttrue/rust_gtk_glarea"&gt;https://github.com/ousttrue/rust_gtk_glarea&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GtkGLArea samples&lt;/p&gt;&lt;/div&gt;</description><category>repository</category><category>rust</category><guid>https://ousttrue.github.io/github/rust_gtk_glarea/</guid><pubDate>Sun, 21 Oct 2018 06:04:34 GMT</pubDate></item><item><title>WindowsでRust環境を作ってGtk3でOpenGLする</title><link>https://ousttrue.github.io/qiita/windowsderusthuan-jing-wozuo-tsutegtk3deopenglsuru/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://qiita.com/ousttrue/items/ee617544ab737fc34c1d"&gt;https://qiita.com/ousttrue/items/ee617544ab737fc34c1d&lt;/a&gt;&lt;/p&gt;</description><category>qiita</category><category>rust</category><guid>https://ousttrue.github.io/qiita/windowsderusthuan-jing-wozuo-tsutegtk3deopenglsuru/</guid><pubDate>Fri, 19 Oct 2018 18:17:57 GMT</pubDate></item></channel></rss>
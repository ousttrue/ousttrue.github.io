<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (wslについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/wsl.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2022 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Thu, 22 Sep 2022 17:26:44 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Windows11 で wslg する</title><link>https://ousttrue.github.io/posts/2021/fall/wslg_on_windows11/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;PCを新調したので &lt;code&gt;Windows11&lt;/code&gt; にアップグレードして wslg を試してみた。&lt;/p&gt;
&lt;h2&gt;その前に&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://news.mynavi.jp/article/win11tips-6/"&gt;Windows 10と同じコンテキストメニューを使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;WSLg&lt;/h2&gt;
&lt;h3&gt;WSLg とは&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/wslg"&gt;https://github.com/microsoft/wslg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/tutorials/gui-apps"&gt;https://docs.microsoft.com/en-us/windows/wsl/tutorials/gui-apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2021.10) &lt;a href="https://devblogs.microsoft.com/commandline/a-preview-of-wsl-in-the-microsoft-store-is-now-available/"&gt;https://devblogs.microsoft.com/commandline/a-preview-of-wsl-in-the-microsoft-store-is-now-available/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2021.04) &lt;a href="https://devblogs.microsoft.com/commandline/the-initial-preview-of-gui-app-support-is-now-available-for-the-windows-subsystem-for-linux-2/"&gt;https://devblogs.microsoft.com/commandline/the-initial-preview-of-gui-app-support-is-now-available-for-the-windows-subsystem-for-linux-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2020) &lt;a href="https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Microsoft-Writing-Wayland-Comp"&gt;Microsoft Is Writing Its Own Wayland Compositor As Part Of WSL2 GUI Efforts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ビジュアルは &lt;code&gt;Wayland&lt;/code&gt; 、音声は &lt;code&gt;PulseAudio&lt;/code&gt; で WSLg 仮想マシンに転送することで、
Linux の GUI アプリを使えるようにする仕組み。&lt;/p&gt;
&lt;h3&gt;Windows11 で試す&lt;/h3&gt;
&lt;p&gt;Windows11 では、 &lt;code&gt;Windows Insider Program&lt;/code&gt; にせずとも使える。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;&lt;code&gt;Ubuntu-CommPrev&lt;/code&gt; をインストールすると &lt;code&gt;wslg&lt;/code&gt; できる。&lt;/del&gt;
WSLで &lt;code&gt;/mnt/wslg&lt;/code&gt; が存在していれば動作する状態になっている。
Distribution による特別な設定は不要？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ubuntu-CommPrev&lt;/code&gt; の方が &lt;code&gt;GPU driver&lt;/code&gt; が新しいなど違いあり。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(2021)&lt;a href="https://kledgeb.blogspot.com/2021/04/wsl-222-linux-guiwslg.html"&gt;WSL その222 - Linux GUIアプリを動かすWSLgのアーキテクチャーと仕組み&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/wslg/discussions/78"&gt;https://github.com/microsoft/wslg/discussions/78&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;glxinfo -B&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;X&lt;/h2&gt;
&lt;p&gt;特に何も設定しなくても &lt;code&gt;xterm&lt;/code&gt; とか &lt;code&gt;gvim&lt;/code&gt; などの X11 のアプリは動作する。&lt;/p&gt;
&lt;h3&gt;101キーボード&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eisbahn.jp/yoichiro/2021/06/wslg.html"&gt;Windows 10 HomeでWSLgをさっそく試してみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;setxkbmap -layout us&lt;/code&gt; でなおった。
なおらないアプリもある。&lt;/p&gt;
&lt;h2&gt;PluseAudio&lt;/h2&gt;
&lt;h3&gt;mpd から pluse audio に出力してみる&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mpcbridge.fourthgate.jp/other/mpd_on_ubuntu"&gt;https://mpcbridge.fourthgate.jp/other/mpd_on_ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/wslg/issues/306"&gt;https://github.com/microsoft/wslg/issues/306&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;echo $PULSE_SERVER
/mnt/wslg/PulseServer
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;環境変数 &lt;code&gt;$PULSE_SERVER&lt;/code&gt; にファイルパスが入っているときは &lt;code&gt;unix socket&lt;/code&gt; を使うという意味。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/mpd.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;audio_output {
       type     "pulse"
       name     "My PULSE Device"
       server   "/mnt/wslg/PulseServer" # $PULSE_SERVER
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;という設定になる。&lt;code&gt;TCP&lt;/code&gt; 経由ではなく &lt;code&gt;UNIX SOCKET&lt;/code&gt; 経由なのに注意。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;acl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;は使われない。&lt;/p&gt;
&lt;h4&gt;mpd client&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.microsoft.com/ja-jp/p/mpdctrl/9nv2bbj82brx"&gt;https://www.microsoft.com/ja-jp/p/mpdctrl/9nv2bbj82brx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>wsl</category><guid>https://ousttrue.github.io/posts/2021/fall/wslg_on_windows11/</guid><pubDate>Sat, 30 Oct 2021 15:18:23 GMT</pubDate></item><item><title>wsl で HDD を mount する</title><link>https://ousttrue.github.io/posts/2021/fall/wsl_rawdevice/</link><dc:creator>ousttrue</dc:creator><description>&lt;h2&gt;raw device の mount&lt;/h2&gt;
&lt;p&gt;予備の HDD を raw device としてマウントして mpd の sotrage として使ってみる。
(OSが吹き飛ぶなどそれなりに危険な作業なので注意)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-mount-disk"&gt;https://docs.microsoft.com/en-us/windows/wsl/wsl2-mount-disk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;on windows&lt;/h3&gt;
&lt;p&gt;未使用のディスクだったので、管理から volume 削除してディスクをオフラインに変更した。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt; wsl --mount &amp;lt;DiskPath&amp;gt; --bare&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;でディスクを丸ごと &lt;code&gt;wsl&lt;/code&gt; に送る。&lt;/p&gt;
&lt;h3&gt;on wsl&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$ lsblk
NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda      &lt;span class="m"&gt;8&lt;/span&gt;:0    &lt;span class="m"&gt;0&lt;/span&gt;   256G  &lt;span class="m"&gt;0&lt;/span&gt; disk
sdb      &lt;span class="m"&gt;8&lt;/span&gt;:16   &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;339&lt;/span&gt;.7M  &lt;span class="m"&gt;1&lt;/span&gt; disk
sdc      &lt;span class="m"&gt;8&lt;/span&gt;:32   &lt;span class="m"&gt;0&lt;/span&gt;   256G  &lt;span class="m"&gt;0&lt;/span&gt; disk /
sdd      &lt;span class="m"&gt;8&lt;/span&gt;:48   &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;931&lt;/span&gt;.5G  &lt;span class="m"&gt;0&lt;/span&gt; disk
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;/dev/sdd となった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parted&lt;/li&gt;
&lt;li&gt;mkfs.ext4&lt;/li&gt;
&lt;li&gt;mount&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$ lsblk
NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda      &lt;span class="m"&gt;8&lt;/span&gt;:0    &lt;span class="m"&gt;0&lt;/span&gt;   256G  &lt;span class="m"&gt;0&lt;/span&gt; disk
sdb      &lt;span class="m"&gt;8&lt;/span&gt;:16   &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;339&lt;/span&gt;.7M  &lt;span class="m"&gt;1&lt;/span&gt; disk
sdc      &lt;span class="m"&gt;8&lt;/span&gt;:32   &lt;span class="m"&gt;0&lt;/span&gt;   256G  &lt;span class="m"&gt;0&lt;/span&gt; disk /
sdd      &lt;span class="m"&gt;8&lt;/span&gt;:48   &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;931&lt;/span&gt;.5G  &lt;span class="m"&gt;0&lt;/span&gt; disk
&lt;span class="sb"&gt;`&lt;/span&gt;-sdd1   &lt;span class="m"&gt;8&lt;/span&gt;:49   &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;465&lt;/span&gt;.8G  &lt;span class="m"&gt;0&lt;/span&gt; part /mnt/data
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;auto mount したい&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/WSL/issues/6073"&gt;https://github.com/microsoft/WSL/issues/6073&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>wsl</category><guid>https://ousttrue.github.io/posts/2021/fall/wsl_rawdevice/</guid><pubDate>Fri, 29 Oct 2021 15:18:23 GMT</pubDate></item><item><title>最近のWayland</title><link>https://ousttrue.github.io/posts/2021/fall/wayland/</link><dc:creator>ousttrue</dc:creator><description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://gitlab.freedesktop.org/wayland"&gt;https://gitlab.freedesktop.org/wayland&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wayland-project/wayland"&gt;Core Wayland protocol and libraries (mirror)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NilsBrause/waylandpp"&gt;https://github.com/NilsBrause/waylandpp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danvd/wlroots-eglstreams"&gt;https://github.com/danvd/wlroots-eglstreams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://wayland-book.com/"&gt;https://wayland-book.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(2021) &lt;a href="https://gihyo.jp/admin/serial/01/ubuntu-recipe/0666"&gt;Ubuntu Weekly Recipe
第666回　Waypipeを用いてWayland環境で「X転送 over SSH」っぽいことをしてみる&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(2017) &lt;a href="https://qiita.com/maueki/items/34323b2762e3c3342c51"&gt;作って学ぶWayland&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(2016) &lt;a href="https://qiita.com/naohikowatanabe/items/06a8b988b89b4b1ec899"&gt;Wayland の Client と Compositor の概念を理解する&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Waypipe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitlab.freedesktop.org/mstoeckl/waypipe"&gt;https://gitlab.freedesktop.org/mstoeckl/waypipe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(2019) &lt;a href="https://mstoeckl.com/notes/gsoc/blog.html"&gt;Network transparency with Wayland&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;OpenGL ES&lt;/h3&gt;
&lt;p&gt;サンプルを試したら WSLg でも動作した。
pyOpenGL からできる方法が分かるとよいのだが。&lt;/p&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/flacjacket/pywayland"&gt;https://github.com/flacjacket/pywayland&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wayland-book.com/introduction.html"&gt;https://wayland-book.com/introduction.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aznote.jakou.com/prog/wayland/index.html"&gt;https://aznote.jakou.com/prog/wayland/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2017)&lt;a href="https://qiita.com/maueki/items/34323b2762e3c3342c51"&gt;作って学ぶWayland&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>wayland</category><category>wsl</category><guid>https://ousttrue.github.io/posts/2021/fall/wayland/</guid><pubDate>Fri, 22 Oct 2021 15:00:00 GMT</pubDate></item><item><title>Windows Creators UPDATEが来たしWSL環境を整備</title><link>https://ousttrue.github.io/posts/2017/04/wsl/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;Windows SubSystem for Linux
わりとよくなっていそうな感じなので使ってみる。&lt;/p&gt;
&lt;p&gt;wsltty導入
minttyにwslビルド(wslbridge同梱)という素敵インストーラが提供されていた。
インストーラーを実行したらショートカットができる。片方のショートカットの末尾に”–login”を追加して、”~/.profile”が実行されるようにした。
%LOCALAPPDATA%\wsltty\bin\mintty.exe --wsl -o Locale=C -o Charset=UTF-8 /bin/wslbridge -C~ -t /bin/bash --login&lt;/p&gt;
&lt;p&gt;https://github.com/mintty/wsltty&lt;/p&gt;
&lt;p&gt;.profile
コメントイン
umask 022&lt;/p&gt;
&lt;p&gt;inputrc
"\C-n":history-search-forward
"\C-p":history-search-backward
set bell-style none&lt;/p&gt;
&lt;p&gt;.tmux.conf
set -g prefix C-l
bind C-l send-prefix
unbind C-b
set -sg escape-time 1
bind r source-file ~/.tmux.conf \; display "Reloaded!"&lt;/p&gt;
&lt;p&gt;set-option -g default-terminal screen-256color
set -g terminal-overrides 'xterm:colors=256'&lt;/p&gt;
&lt;p&gt;setw -g mode-keys vi&lt;/p&gt;
&lt;p&gt;vim&lt;/p&gt;
&lt;p&gt;dein.vimによるプラグイン管理のマイベストプラクティス&lt;/p&gt;
&lt;p&gt;dein
$ curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh &amp;gt; installer.sh
$ sh installer.sh ~/.cache/dein
$ mkdir -p ~/.config/nvim&lt;/p&gt;
&lt;p&gt;~/.config/nvim/dein.toml
[[plugins]]
repo = 'Shougo/dein.vim'&lt;/p&gt;
&lt;p&gt;[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']&lt;/p&gt;
&lt;p&gt;[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'&lt;/p&gt;
&lt;p&gt;[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'&lt;/p&gt;
&lt;p&gt;[[plugins]] # カラースキーマ
repo = 'w0ng/vim-hybrid'
hook_add = '''
set background=dark
" colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
" 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
au MyAutoCmd VimEnter * nested colorscheme hybrid
'''&lt;/p&gt;
&lt;p&gt;[[plugins]]
repo = 'itchyny/lightline.vim'&lt;/p&gt;
&lt;p&gt;[[plugins]]
repo = 'scrooloose/nerdtree'&lt;/p&gt;
&lt;p&gt;.vimrc
if !&amp;amp;compatible
  set nocompatible
endif&lt;/p&gt;
&lt;p&gt;" reset augroup
augroup MyAutoCmd
  autocmd!
augroup END&lt;/p&gt;
&lt;p&gt;" dein settings {{{
" dein自体の自動インストール
let s:cache_home = empty($XDG_CACHE_HOME) ? expand('~/.cache') : $XDG_CACHE_HOME
let s:dein_dir = s:cache_home . '/dein'
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'
if !isdirectory(s:dein_repo_dir)
  call system('git clone https://github.com/Shougo/dein.vim ' . shellescape(s:dein_repo_dir))
endif
let &amp;amp;runtimepath = s:dein_repo_dir .",". &amp;amp;runtimepath
" プラグイン読み込み＆キャッシュ作成
"let s:toml_file = fnamemodify(expand('&lt;sfile&gt;'), ':h').'/dein.toml'
let s:toml_file = '~/.config/nvim'.'/dein.toml'
if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)
  call dein#load_toml(s:toml_file)
  call dein#end()
  call dein#save_state()
endif
" 不足プラグインの自動インストール
if has('vim_starting') &amp;amp;&amp;amp; dein#check_install()
  call dein#install()
endif
" }}}&lt;/sfile&gt;&lt;/p&gt;
&lt;p&gt;"ビープ音すべてを無効にする
syntax on
filetype on
set visualbell t_vb=
set noerrorbells "エラーメッセージの表示時にビープを鳴らさない
set laststatus=2
set noswapfile nobackup noundofile
set hidden&lt;/p&gt;
&lt;p&gt;golang
binaryをdownloadして/usr/local/goに展開
nvm&lt;/p&gt;
&lt;p&gt;https://github.com/creationix/nvm&lt;/p&gt;</description><category>linux</category><category>wsl</category><guid>https://ousttrue.github.io/posts/2017/04/wsl/</guid><pubDate>Thu, 13 Apr 2017 15:00:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (ptkについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/ptk.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2022 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Sun, 20 Nov 2022 18:39:30 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>0404-prompt-toolkit</title><link>https://ousttrue.github.io/posts/2022/0404-prompt-toolkit/</link><dc:creator>ousttrue</dc:creator><description>&lt;h2&gt;prompt-toolkit の fullscreen アプリケーション&lt;/h2&gt;
&lt;h3&gt;Buffer&lt;/h3&gt;
&lt;p&gt;しばらく試行錯誤していたのだがやっと使い方が分かってきた。
&lt;code&gt;Window&lt;/code&gt; + &lt;code&gt;BufferControl&lt;/code&gt; が基本形で edit する場合向け。
&lt;code&gt;Window&lt;/code&gt; + &lt;code&gt;FormatedTextControl&lt;/code&gt; が readonly の装飾済みのテキストに向いていそう。&lt;/p&gt;
&lt;p&gt;Lexer で基本的な装飾を施して、Preprocess でフォーカスやホバーのUI的な装飾をするという使い分けがよさそう。
&lt;code&gt;FormattedTextControl&lt;/code&gt; の場合は初期化時にスタイル適用済みのテキストを渡してしまう。&lt;/p&gt;
&lt;h3&gt;example&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/prompt-toolkit"&gt;https://github.com/prompt-toolkit&lt;/a&gt; の、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/prompt-toolkit/pyvim"&gt;https://github.com/prompt-toolkit/pyvim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prompt-toolkit/pymux"&gt;https://github.com/prompt-toolkit/pymux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prompt-toolkit/pyterm"&gt;https://github.com/prompt-toolkit/pyterm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が &lt;code&gt;prompt-toolkit2&lt;/code&gt; のままになっているのだが、
ちょっと手直しすることで、 &lt;code&gt;prompt-toolkit3&lt;/code&gt; で動作させることができた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ptterm&lt;/code&gt; の &lt;code&gt;prompt-toolkit3&lt;/code&gt; 化に PR を送ってみた。
主に &lt;code&gt;pipe&lt;/code&gt; 周りの非同期入力を &lt;code&gt;asyncio&lt;/code&gt; に適合させてやることで動く。
&lt;a href="https://github.com/prompt-toolkit/ptterm/pull/9"&gt;https://github.com/prompt-toolkit/ptterm/pull/9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pymux&lt;/code&gt; も &lt;code&gt;fork&lt;/code&gt; しない &lt;code&gt;standalone&lt;/code&gt; 引き数付きならば &lt;code&gt;Windows&lt;/code&gt; + &lt;code&gt;prompt-toolkit3&lt;/code&gt; でも動かすことができた。&lt;/p&gt;
&lt;p&gt;prompt-toolkit3 では積極的に &lt;code&gt;asyncio&lt;/code&gt; を活用していくのがよさそう。&lt;/p&gt;
&lt;h3&gt;prompt-toolkit で任意のエスケープシーケンスを入れる&lt;/h3&gt;
&lt;p&gt;prompt-toolkit で &lt;code&gt;sixel&lt;/code&gt; 画像を表示させたい。
UIControl が UIContent を生成していて、このとき styled text のデータ構造に対して特殊なスタイル &lt;code&gt;[ZeroWidthEscape]&lt;/code&gt; を指定することでエスケープシーケンスを直接出力できることがわかった。諸々の調整が必要になるが、ここに &lt;code&gt;sixel&lt;/code&gt; のシーケンスを入れることで表示できる。
処理順の癖に対応するために、
画像の高さ分の改行を &lt;code&gt;sixel&lt;/code&gt; のエスケープシーケンスに先行させる必要があった。
&lt;code&gt;prompt-toolkit&lt;/code&gt; + &lt;code&gt;wezterm&lt;/code&gt; 固有の問題かもしれない。&lt;/p&gt;
&lt;h3&gt;Windows/Linux 共用で console アプリを動かす&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;prompt-toolkit3&lt;/code&gt; でかなりできそう。
フレームワークの構成を理解するまでとっつきが悪いのだが、
&lt;code&gt;pypager&lt;/code&gt;, &lt;code&gt;pyvim&lt;/code&gt;, &lt;code&gt;ptterm&lt;/code&gt;, &lt;code&gt;pymux&lt;/code&gt; を研究してやっとわかってきた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nerdfont&lt;/code&gt; で賑やかしを入れて、 &lt;code&gt;sixel&lt;/code&gt; で画像表示ができるおもちゃを企画している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vim ぽい lsp/dap の実験アプリ&lt;/li&gt;
&lt;li&gt;w3m ぽい ブラウザ&lt;/li&gt;
&lt;li&gt;tmux ぽいやつ&lt;/li&gt;
&lt;li&gt;ranger ぽいやつ&lt;/li&gt;
&lt;/ul&gt;</description><category>ptk</category><category>python</category><guid>https://ousttrue.github.io/posts/2022/0404-prompt-toolkit/</guid><pubDate>Sun, 03 Apr 2022 15:00:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (termについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/term.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2022 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Sat, 14 May 2022 17:22:19 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>0331-term</title><link>https://ousttrue.github.io/posts/2022/0331-term/</link><dc:creator>ousttrue</dc:creator><description>&lt;h2&gt;term周りの更新&lt;/h2&gt;
&lt;h3&gt;terminal emulator を選定・・・&lt;/h3&gt;
&lt;p&gt;主に3つの動作環境、&lt;code&gt;Windows&lt;/code&gt;, &lt;code&gt;Windows wsl&lt;/code&gt;, &lt;code&gt;Ubuntu-20.04&lt;/code&gt; があってtoolや設定をある程度共通にしたいということで試行錯誤していた。
他に &lt;code&gt;ssh経由&lt;/code&gt;, &lt;code&gt;Windows wslg&lt;/code&gt; もあるよ。&lt;/p&gt;
&lt;h4&gt;wezterm&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;wezterm&lt;/code&gt; が有望であることがわかった&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;font fallback&lt;/th&gt;
&lt;th&gt;multiplexer&lt;/th&gt;
&lt;th&gt;emoji&lt;/th&gt;
&lt;th&gt;nerdfnt&lt;/th&gt;
&lt;th&gt;graphics escape&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;wezterm windows&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;color&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;conpty issue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wezterm wsl&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;color&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;conpty issue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wezterm ssh&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;color&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;sixel, kitty, iterm2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wezterm linux&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;color&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;sixel, kitty, iterm2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;conpty を通すときに escape sequence が加工されるとかで、&lt;code&gt;sixel&lt;/code&gt;, &lt;code&gt;kitty&lt;/code&gt;, &lt;code&gt;iterm2&lt;/code&gt; いずれのプロトコルもうまくうごかなかった。&lt;code&gt;iterm2&lt;/code&gt; は絵はでるのだけど場所がずれるという惜しい挙動・・・。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wez/wezterm/issues/1236"&gt;https://github.com/wez/wezterm/issues/1236&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SSH 経由で WSL することで対処する。&lt;/p&gt;
&lt;h4&gt;wslg(xtermなど)&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;xterm&lt;/code&gt; は軽快できれいに表示できるので良かった。フォントのフォールバックができないぽいのが弱点。
&lt;code&gt;urxvt&lt;/code&gt; は、&lt;code&gt;NerdFonts&lt;/code&gt; がうまくでなかった。
&lt;code&gt;st&lt;/code&gt; (simple term) もフォントまわりでつまづきだったかな。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;font fallback&lt;/th&gt;
&lt;th&gt;multiplexer&lt;/th&gt;
&lt;th&gt;emoji&lt;/th&gt;
&lt;th&gt;nerdfnt&lt;/th&gt;
&lt;th&gt;graphics escape&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;xterm wslg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;mono&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;sixel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mlterm wslg&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;mlterm-con&lt;/td&gt;
&lt;td&gt;color&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;sixel&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;mlterm はフォント周りの設定が強力でよかった。
文字セットごとにフォントを個別に指定できるので、フォントを合成せずともばらのままでよい。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mlterm-con&lt;/code&gt; という multiplexer があり sixel support があるらしい。
自前ビルドが必要そう(apt には含まれていないぽい)。&lt;/p&gt;
&lt;p&gt;wslgは、頻繁にキーボードが押しっぱなしになったり不安定なような・・・
&lt;a href="https://github.com/microsoft/wslg/issues/207"&gt;https://github.com/microsoft/wslg/issues/207&lt;/a&gt;
なおっているけ、リリースに時間がかかりそう？&lt;/p&gt;
&lt;h4&gt;libvte&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;libvte&lt;/code&gt; 系のterm。
&lt;code&gt;gnome-terminal&lt;/code&gt;, &lt;code&gt;xfce4-term&lt;/code&gt; など。&lt;/p&gt;
&lt;h4&gt;gpu rendering&lt;/h4&gt;
&lt;p&gt;GPUレンダリングで &lt;code&gt;araclitty&lt;/code&gt;, &lt;code&gt;kitty&lt;/code&gt; そして &lt;code&gt;wezterm&lt;/code&gt; がある。
&lt;code&gt;wezterm&lt;/code&gt; が &lt;code&gt;Windows&lt;/code&gt; をサポートしていて、フォントのレンダリング、タブのサポートと総合的に良い。&lt;/p&gt;
&lt;h4&gt;その他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;tabby&lt;/li&gt;
&lt;li&gt;RLogin&lt;/li&gt;
&lt;li&gt;ConEmu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;など。&lt;/p&gt;
&lt;h3&gt;要件&lt;/h3&gt;
&lt;h4&gt;日本語、中文、絵文字, NerdFonts を同時にいい感じに表示したい&lt;/h4&gt;
&lt;p&gt;となるとすべてを含むひとつのフォントより、主になるフォントを設定してそれにグリフが含まれなかったら、他のフォントにフォールバックする挙動をしてもらう方が便利。
いくつかのフォントを試してみたのだけど、 &lt;code&gt;HackGenNerd Console&lt;/code&gt; が良かった。
で、中文の足りない漢字を &lt;code&gt;更紗ゴシックフォント&lt;/code&gt; にフォールバックするという組み合わせ。
がんばって完璧な合成フォントを自作すればいいのだけど、よくわからないので、 複数フォントのフォールバック機能が必要。&lt;/p&gt;
&lt;p&gt;かつて w3m で表示が乱れることで苦労した &lt;code&gt;ambigous width&lt;/code&gt; 問題はあまり気にならなくなっていた。
なんか、表示は２カラム使うが、データ上は1カラムと見なすような扱いになっていて、
&lt;code&gt;X&lt;/code&gt; につづいて &lt;code&gt;&lt;/code&gt; で隙間を開けることで正しく表示できるようだ。
NerdFonts や 絵文字 はそのようになっている？&lt;/p&gt;
&lt;h4&gt;エスケープシーケンスで画像を表示したい&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sixel&lt;/code&gt; とか &lt;code&gt;kitty&lt;/code&gt; とか &lt;code&gt;iterm2&lt;/code&gt; による画像表示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;graphics&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Windows Native(conpty)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wsltty&lt;/td&gt;
&lt;td&gt;sixel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xterm wslg&lt;/td&gt;
&lt;td&gt;sixel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wezterm linux&lt;/td&gt;
&lt;td&gt;sixel, kityt ,iterm2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;という感じになった。&lt;code&gt;wsltty&lt;/code&gt; は &lt;code&gt;conpty&lt;/code&gt; ではなくて &lt;code&gt;winpty&lt;/code&gt; なので例外的に &lt;code&gt;sixel&lt;/code&gt; が通過できるらしい。
動く環境でも &lt;code&gt;tmux&lt;/code&gt; を挟むと動かなくなる。
代わりに terminal emulator の方で multiplexer(タブ機能) する必要が発生。&lt;/p&gt;
&lt;h3&gt;まとめ&lt;/h3&gt;
&lt;p&gt;総合力で wezterm が強い。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;あまり頑張らなくてもフォントがうまく設定できる(cjk, NerdFonts, 絵文字)&lt;/li&gt;
&lt;li&gt;multiplexer 機能あり&lt;/li&gt;
&lt;li&gt;sixel, kitty, iterm2 プロトコルで画像を表示できる&lt;/li&gt;
&lt;li&gt;Windows でも動く&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/yutakatay/articles/wezterm-intro"&gt;alacritty+tmuxもいいけど、weztermがすごい件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wezfurlong.org/wezterm/"&gt;wezterm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sw.kovidgoyal.net/kitty/graphics-protocol/"&gt;https://sw.kovidgoyal.net/kitty/graphics-protocol/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OSC1337 &lt;a href="https://iterm2.com/documentation-images.html"&gt;https://iterm2.com/documentation-images.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unrealman.hatenablog.com/entry/tty-mintty-winpty"&gt;【Git for Windows】tty/mintty/winptyとは何なのか？【Gitbash】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>term</category><guid>https://ousttrue.github.io/posts/2022/0331-term/</guid><pubDate>Wed, 30 Mar 2022 15:00:00 GMT</pubDate></item></channel></rss>
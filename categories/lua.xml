<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (luaについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/lua.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2021 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Sat, 04 Dec 2021 17:19:06 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Lua Language Server 解読</title><link>https://ousttrue.github.io/posts/2021/summer/lua_language_server/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/sumneko/lua-language-server"&gt;lua-language-server&lt;/a&gt; が luajit ffi のインテリセンスを出せるように emmylua annotation を生成するより、
&lt;code&gt;ffi.cdef&lt;/code&gt; を読めるようにすればよいのでは。
ということで、lua-language-server を探ってみる。&lt;/p&gt;
&lt;h2&gt;構成&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/sumneko/lua-language-server/wiki/Command-line"&gt;https://github.com/sumneko/lua-language-server/wiki/Command-line&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BINRARY/lua-language-server LUA_LANGUAGE_SERVER/main.lua --logpath=D:/log --metapath=D:/meta --locale=en-us --configpath="config.json"&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; .\bin\Windows\lua-language-server.exe --help
lua-language-server.exe:unrecognized option '--help'usage: C:\Users\oustt\ghq\github.com\sumneko\lua-language-server\bin\Windows\lua-language-server.exe [options] [script [args]]
Available options are:
  -e stat  execute string 'stat'
  -i       enter interactive mode after executing 'script'
  -l name  require library 'name' into global 'name'
  -v       show version information
  -E       ignore environment variables
  -W       turn warnings on
  --       stop handling options
  -        stop handling options and execute stdin
&amp;gt; .\bin\Windows\lua-language-server.exe -v    
Lua 5.4.4  Copyright (C) 1994-2021 Lua.org, PUC-Rio  
&lt;/pre&gt;

&lt;p&gt;native モジュールを埋め込んだインタープリター &lt;code&gt;lua-language-server.exe&lt;/code&gt; で &lt;code&gt;main.lua&lt;/code&gt; を実行する。&lt;/p&gt;
&lt;h3&gt;setting&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.vscode/settings.json&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;     &lt;span class="s2"&gt;"Lua.runtime.version"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"LuaJIT"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;"Lua.workspace.preloadFileSize"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;/pre&gt;

&lt;h2&gt;LSP&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;https://microsoft.github.io/language-server-protocol/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_signatureHelp"&gt;signatureHelp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;main.lua&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;main.lua&lt;ul&gt;
&lt;li&gt;script/service/service.lua&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enableCloseFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setErrorHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recruitBraves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;-- transport&lt;/span&gt;
    &lt;span class="n"&gt;proto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pulse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reportStatus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'provider'&lt;/span&gt;

    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startTimer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;h2&gt;script/parser&lt;/h2&gt;
&lt;p&gt;lua のコード解析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;script/parser/parse.lua&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ast.init(state)&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;LPeg&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;script/parser/grammar.lua&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.inf.puc-rio.br/~roberto/lpeg/"&gt;LPeg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/tacigar/93b30931c879cd8a9b12380724b956aa"&gt;Lua製PEG「LPeg」を触ってみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nymphium.github.io/2015/07/23/lpeg2.html"&gt;LPegの使い方 patternその2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sceneryandfish.withnotes.net/blog/2014/07/22-lua-lpeg-how-to-use/"&gt;LPeg – Parsing Expression Grammars For Luaの使い方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>lsp</category><category>lua</category><category>luajit</category><guid>https://ousttrue.github.io/posts/2021/summer/lua_language_server/</guid><pubDate>Thu, 05 Aug 2021 15:00:00 GMT</pubDate></item><item><title>Lua で OpenGL</title><link>https://ousttrue.github.io/posts/2021/summer/lua_opengl/</link><dc:creator>ousttrue</dc:creator><description>&lt;figure&gt;&lt;img src="https://ousttrue.github.io/posts/2021/summer/glfw_sample.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;imgui bind がだいたいできて軌道に乗ったので、glTF viewer の作成にとりかかる。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.glfw.org/docs/latest/quick.html"&gt;https://www.glfw.org/docs/latest/quick.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;の回転アニメーション以外できた。&lt;/p&gt;
&lt;h2&gt;luajit の cdef で頂点配列の定義が捗る&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.6f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.4f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.f&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="mf"&gt;0.6f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.4f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.f&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="mf"&gt;0.f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;0.6f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.f&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;が、&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cdef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;[[&lt;/span&gt;
&lt;span class="s"&gt;struct Vertex2DRGB&lt;/span&gt;
&lt;span class="s"&gt;{&lt;/span&gt;
&lt;span class="s"&gt;    float x, y;&lt;/span&gt;
&lt;span class="s"&gt;    float r, g, b;&lt;/span&gt;
&lt;span class="s"&gt;};&lt;/span&gt;
&lt;span class="s"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;vertices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"struct Vertex2DRGB[3]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;などという書き方ができてしまう。luajit ffi 強い。&lt;/p&gt;
&lt;h2&gt;ffi.metatype&lt;/h2&gt;
&lt;p&gt;luajit を活かした線形代数ライブラリを探索していて、&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/bjornbytes/maf"&gt;https://github.com/bjornbytes/maf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;を見つけた。&lt;/p&gt;
&lt;p&gt;luajit ffi には便利関数&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;ffi.metatype(ct, metatable)
&lt;/pre&gt;

&lt;p&gt;があって、これを使うと ffi.cdef した C の struct に lua の metatable を合体できる。&lt;/p&gt;
&lt;p&gt;線形代数ライブラリは、 &lt;code&gt;ffi.metatype&lt;/code&gt; を使って自作してみよう(mafにはvec3 と quaternion しかないのもあり)。
ついでに、lua の unittest を取り入れましょう。&lt;/p&gt;
&lt;h2&gt;20210830&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mat4&lt;/code&gt; を実装してみた。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/limgui/blob/master/lua/mafex.lua"&gt;https://github.com/ousttrue/limgui/blob/master/lua/mafex.lua&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_34&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_44&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;mat4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;という定義で OpenGL の uniform 変数に直接渡せるので使いやすい。&lt;/p&gt;&lt;/div&gt;</description><category>lua</category><category>luajit</category><category>opengl</category><guid>https://ousttrue.github.io/posts/2021/summer/lua_opengl/</guid><pubDate>Wed, 04 Aug 2021 15:00:00 GMT</pubDate></item><item><title>luada</title><link>https://ousttrue.github.io/github/luada/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/ousttrue/luada"&gt;https://github.com/ousttrue/luada&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lua Debug Adapter&lt;/p&gt;&lt;/div&gt;</description><category>lua</category><category>repository</category><guid>https://ousttrue.github.io/github/luada/</guid><pubDate>Sat, 31 Jul 2021 09:33:29 GMT</pubDate></item><item><title>LuaDA</title><link>https://ousttrue.github.io/posts/2021/luada/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;vscode の lua デバッガーに&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=tomblind.local-lua-debugger-vscode"&gt;https://marketplace.visualstudio.com/items?itemName=tomblind.local-lua-debugger-vscode&lt;/a&gt; を使っていたのだが、&lt;/p&gt;
&lt;p&gt;&lt;code&gt;launch.json&lt;/code&gt; の &lt;code&gt;args&lt;/code&gt; に &lt;code&gt;\\&lt;/code&gt; が入るとエラーで起動できない。
Windows で作業しているので、稀によくファイルパスの指定に &lt;code&gt;\\&lt;/code&gt; が入る。&lt;/p&gt;
&lt;h2&gt;DebugAdapter を作っていたら、直し方がわかった&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/local-lua-debugger-vscode/commit/0f3974b73964b2e34f90a21de9757a57d6746eb4"&gt;https://github.com/ousttrue/local-lua-debugger-vscode/commit/0f3974b73964b2e34f90a21de9757a57d6746eb4&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;PR&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/tomblind/local-lua-debugger-vscode/pull/37"&gt;https://github.com/tomblind/local-lua-debugger-vscode/pull/37&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux では動かんかったらしく、別の方法で修正してくれた。&lt;/p&gt;
&lt;p&gt;👍 &lt;code&gt;0.2.2&lt;/code&gt; &lt;a href="https://github.com/tomblind/local-lua-debugger-vscode/blob/master/CHANGELOG.md"&gt;https://github.com/tomblind/local-lua-debugger-vscode/blob/master/CHANGELOG.md&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;自前で &lt;code&gt;DebugAdapter&lt;/code&gt; 作ってみることにした。&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/luada"&gt;https://github.com/ousttrue/luada&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;途中まで実装したのだが、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;luajit.exe + luada.lua&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という構成よりは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;luada.exe&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の方が取り回しがよくて、それなら lua 成分をもっと減らして JSON-RPC 制御も &lt;code&gt;c++&lt;/code&gt; なり &lt;code&gt;rust&lt;/code&gt; なりにして
lua 埋め込み型の exe が作りやすそう。
元々、 スタンドアロンの lua インタプリタと組み合わせて使う lua スクリプトという方向性で実装していたのだが、
&lt;code&gt;luajit-2.1.0-beta3&lt;/code&gt; 一辺倒になりつつあるので気分が変わってきたのであった。
これに関しては、今の構成でできるところまでやってみよう。&lt;/p&gt;
&lt;h2&gt;VSCode の Extension を作る&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/api/get-started/your-first-extension"&gt;https://code.visualstudio.com/api/get-started/your-first-extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;手順通りに初期化した。npm は最新版に更新したほうがよいぽい。&lt;/p&gt;
&lt;h2&gt;MockDebug&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/api/extension-guides/debugger-extension"&gt;https://code.visualstudio.com/api/extension-guides/debugger-extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を読む。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/vscode-mock-debug"&gt;https://github.com/microsoft/vscode-mock-debug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というサンプルがある。&lt;/p&gt;
&lt;p&gt;いくつかの機能をまとめて提供する必要がありそう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;launch.json の設定&lt;/li&gt;
&lt;li&gt;DebugAdapter 本体&lt;/li&gt;
&lt;li&gt;DebugAdapter を起動する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;実装してみる&lt;/h2&gt;
&lt;h3&gt;Extension の activate&lt;/h3&gt;
&lt;p&gt;適当にイベントを登録して&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;package.json&lt;/span&gt;
    &lt;span class="s2"&gt;"activationEvents"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"onDebug"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"onDebugInitialConfigurations"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"onDebugDynamicConfigurations"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"onDebugResolve:lua"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"onLanguage:lua"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;activate&lt;/code&gt; されることを確認&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// src/extension.ts&lt;/span&gt;
&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;: &lt;span class="kt"&gt;vscode.ExtensionContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'activate luada'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;h3&gt;Launch&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="s2"&gt;"contributes"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"breakpoints"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;"language"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"lua"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nt"&gt;"debuggers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"luada"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"LuaDA"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;"languages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s2"&gt;"lua"&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;launch.json&lt;/span&gt; &lt;span class="err"&gt;のテンプレート&lt;/span&gt;
                &lt;span class="nt"&gt;"initialConfigurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"luada"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"launch luada"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nt"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nt"&gt;"program"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"${workspaceFolder}/main.lua"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nt"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;request:&lt;/span&gt; &lt;span class="err"&gt;launch&lt;/span&gt; &lt;span class="err"&gt;に対して可能な&lt;/span&gt; &lt;span class="err"&gt;property&lt;/span&gt; &lt;span class="err"&gt;の定義&lt;/span&gt;
                &lt;span class="nt"&gt;"configurationAttributes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nt"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="nt"&gt;"program"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="nt"&gt;"markdownDescription"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Lua program to debug - set this to the path of the script"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="nt"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"${workspaceFolder}/main.lua"&lt;/span&gt;
                            &lt;span class="p"&gt;},&lt;/span&gt;                            
                            &lt;span class="nt"&gt;"arg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"array"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="nt"&gt;"markdownDescription"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Command line argument, arg[1] ... arg[n]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="nt"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;                            
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;activate で DebugAdapterDescriptorFactory を登録&lt;/li&gt;
&lt;li&gt;launch で createDebugAdapterDescriptor を実行する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;src/extensions.ts&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;vscode&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'vscode'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createDebugAdapterDescriptorFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;: &lt;span class="kt"&gt;vscode.ExtensionContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DebugAdapterDescriptorFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;createDebugAdapterDescriptor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;session&lt;/span&gt;: &lt;span class="kt"&gt;vscode.DebugSession&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;executable&lt;/span&gt;: &lt;span class="kt"&gt;vscode.DebugAdapterExecutable&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProviderResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DebugAdapterDescriptor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'launch luada'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"exe"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;runtimeArgs&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
            &lt;span class="c1"&gt;// デバッグアダプターを起動する&lt;/span&gt;
            &lt;span class="c1"&gt;// 起動したアダプターと vscode は、標準入出力で JSON-RPC により DebugAdapterProtocol で通信する。&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DebugAdapterExecutable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;runtimeArgs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;: &lt;span class="kt"&gt;vscode.ExtensionContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'activate luada'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerDebugAdapterDescriptorFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'luada'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createDebugAdapterDescriptorFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;deactivate() {&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;h3&gt;Debug Adapter の実装&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://microsoft.github.io/debug-adapter-protocol/specification"&gt;https://microsoft.github.io/debug-adapter-protocol/specification&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;を見て粛々と実装する。&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://microsoft.github.io/debug-adapter-protocol/specification#Events_Output"&gt;Output Event&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;vscode の DebugConsole に出力されるので早期に作ると print debug の助けになる。&lt;/p&gt;
&lt;h4&gt;Logger&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DebugAdapterProtocol のやりとりすべてを記録する機能をアダプター側で作るべし。無いとデバッグ困難に。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Microsoft/vscode-debugadapter-node/blob/main/adapter/src/loggingDebugSession.ts"&gt;https://github.com/Microsoft/vscode-debugadapter-node/blob/main/adapter/src/loggingDebugSession.ts&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;VSIX に出力&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension"&gt;https://code.visualstudio.com/api/working-with-extensions/publishing-extension&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vsce を使う。&lt;/p&gt;
&lt;p&gt;package.json に追加。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="s2"&gt;"publisher"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"ousttrue"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"repository"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/ousttrue/luada.git"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
&lt;/pre&gt;

&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ npx vsce package
&lt;/pre&gt;

&lt;h2&gt;参考&lt;/h2&gt;
&lt;h3&gt;&lt;a href="https://github.com/actboy168/lua-debug"&gt;https://github.com/actboy168/lua-debug&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vscode.DebugAdapterExecutable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/tomblind/local-lua-debugger-vscode"&gt;https://github.com/tomblind/local-lua-debugger-vscode&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vscode.DebugAdapterServer&lt;/li&gt;
&lt;li&gt;TypeScript で vscode.DebugAdapterServer を new&lt;/li&gt;
&lt;li&gt;vscode と DebugAdapterServer が DAP で通信&lt;/li&gt;
&lt;li&gt;DebugAdapterServer が lua を spawn もしている&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>dap</category><category>lua</category><category>luajit</category><guid>https://ousttrue.github.io/posts/2021/luada/</guid><pubDate>Fri, 30 Jul 2021 15:00:00 GMT</pubDate></item><item><title>luv</title><link>https://ousttrue.github.io/posts/2021/luv/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;main loop がブロックするので luv を取り入れてみる。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/luvit/luv"&gt;https://github.com/luvit/luv&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;cmake で build&lt;/h2&gt;
&lt;p&gt;luv に CMake が付属しており簡単。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ cmake -S &lt;span class="o"&gt;{&lt;/span&gt;LUV_DIR&lt;span class="o"&gt;}&lt;/span&gt; -B &lt;span class="o"&gt;{&lt;/span&gt;BUILD_DIR&lt;span class="o"&gt;}&lt;/span&gt;
$ cmake --build &lt;span class="o"&gt;{&lt;/span&gt;BUILD_DIR&lt;span class="o"&gt;}&lt;/span&gt; --config Release
&lt;/pre&gt;

&lt;h2&gt;main loop を idle へ&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- Main loop&lt;/span&gt;
&lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;new_frame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;uv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"luv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- Main loop&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;idle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_idle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;idle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;new_frame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
        &lt;span class="n"&gt;idle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;

&lt;h2&gt;重い処理を thread へ&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;on_thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;--work,in threadpool&lt;/span&gt;
        &lt;span class="n"&gt;on_end&lt;/span&gt; &lt;span class="c1"&gt;--after work, in loop thread&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/pre&gt;

&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;'table'&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;Uncaught&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attempt&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;nil&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;あ&lt;/p&gt;
&lt;h2&gt;thread 間で受け渡しのできる型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/luvit/luv/blob/master/docs.md#pseudo-types"&gt;https://github.com/luvit/luv/blob/master/docs.md#pseudo-types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;threadargs: variable arguments (...) of type nil, boolean, number, string, or userdata&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;nvim ではそこで messagepack なわけか。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tullio.hatenablog.com/entry/20121112/1352732239"&gt;Kyoto Tycoon+Lua-JIT拡張+MessagePack=無敵&lt;/a&gt; 経由で &lt;a href="https://gist.github.com/catwell/2971290"&gt;The state of MessagePack in Lua&lt;/a&gt; をたどり着く。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want pure LuaJIT -&amp;gt; luajit-msgpack-pure&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;たしかに、これだ。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/catwell/luajit-msgpack-pure"&gt;https://github.com/catwell/luajit-msgpack-pure&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows なので &lt;code&gt;malloc&lt;/code&gt;, &lt;code&gt;free&lt;/code&gt;, &lt;code&gt;realloc&lt;/code&gt; が cdef できなかったのを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt; と &lt;code&gt;cdata&lt;/code&gt; を nil にしてスキップする処理を追加してみた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結果、巨大なテーブルの pack/unpack でブロックしてしまう。
あとスレッド側のエラーハンドリングをしてないので、デバッガはアタッチできないし、何もわからない。
&lt;code&gt;pcall&lt;/code&gt; などでエラーメッセージを取得して、失敗した場合はエラーメッセージを投げるようにしてあげる必要がある。&lt;/p&gt;
&lt;p&gt;なんとなく、使い方はわかった。
後で、アニメーションシステムを実装するときのインフラにも使えるかもしれない。
OpenGL のレンダースレッドと、シーン更新を分離する。&lt;/p&gt;
&lt;h2&gt;関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kimitok.hateblo.jp/entry/2014/04/16/223643"&gt;node.jsを支えるlibuvのチュートリアル"uvbook" :スレッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nikhilm.github.io/uvbook/threads.html"&gt;https://nikhilm.github.io/uvbook/threads.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>lua</category><guid>https://ousttrue.github.io/posts/2021/luv/</guid><pubDate>Wed, 28 Jul 2021 15:00:00 GMT</pubDate></item><item><title>luaメモ</title><link>https://ousttrue.github.io/posts/2021/lua_info/</link><dc:creator>ousttrue</dc:creator><description>&lt;figure&gt;&lt;img src="https://ousttrue.github.io/posts/2021/lua.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;&lt;a href="https://www.lua.org/docs.html"&gt;https://www.lua.org/docs.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Interpreter&lt;/h2&gt;
&lt;p&gt;とりあえず &lt;code&gt;luajit-2.1.0-beta3&lt;/code&gt; 推し。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;+---+    +---+    +---+    +---+
|5.1| -&amp;gt; |5.2| -&amp;gt; |5.3| -&amp;gt; |5.4|
+---+    +---+    +---+    +---+
  |        |        |
  |        |        +- ravi
  |        |
  |        +- moonsharp
  |
  +- luajit(5.1 base)
  |   +- moonjit
  +- luau(5.1 base)
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;lua-5.1&lt;/code&gt; をベースに分岐したものが多い？&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.lua.org/versions.html"&gt;https://www.lua.org/versions.html&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;url&lt;/th&gt;
&lt;th&gt;memo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Lua5.1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2012。これより古いものを使う理由は無さそう。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lu15.2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.lua.org/manual/5.2/readme.html#changes"&gt;since Lua5.1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2015。finalizer. 関数の &lt;code&gt;_ENV&lt;/code&gt; 仕様変更&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lua5.3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.lua.org/manual/5.3/readme.html#changes"&gt;since Lua5.2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2020。integers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lua5.4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.lua.org/manual/5.4/readme.html#changes"&gt;since Lua5.3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021。const, to-be-closed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LuaJIT&lt;/td&gt;
&lt;td&gt;&lt;a href="https://luajit.org/"&gt;https://luajit.org/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Lua5.1base。最終版は &lt;code&gt;2.1.0-beta3&lt;/code&gt;。neovimもこれ。&lt;code&gt;FFI&lt;/code&gt; も強力。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Luau&lt;/td&gt;
&lt;td&gt;&lt;a href="https://luau-lang.org/"&gt;https://luau-lang.org/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Lua5.1 の superset。Roblox専用。オープンソースではない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ravi&lt;/td&gt;
&lt;td&gt;&lt;a href="http://ravilang.github.io/"&gt;http://ravilang.github.io/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Lua5.3base？。limited optional static typing and MIR based JIT compiler&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;変わり種&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;headeronly&lt;/code&gt;. include するだけで使える。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edubart/minilua"&gt;https://github.com/edubart/minilua&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LUA に更に埋め込む&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://terralang.org/"&gt;https://terralang.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Translator&lt;/h2&gt;
&lt;h3&gt;&lt;a href="https://moonscript.org/"&gt;MoonScript&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href="https://typescripttolua.github.io/"&gt;TypescriptToLua&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;後で出てくる、&lt;code&gt;local-lua-debugger&lt;/code&gt; はこれで実装されているぽい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://ifritjp.github.io/documents/lunescript/"&gt;LuneScript/&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href="https://github.com/teal-language/tl"&gt;Teal&lt;/a&gt;&lt;/h3&gt;
&lt;h2&gt;Language server&lt;/h2&gt;
&lt;h3&gt;&lt;a href="https://github.com/EmmyLua/EmmyLua-LanguageServer"&gt;EmmyLua&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java製&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emmylua.github.io/annotation.html"&gt;EmmyLua Annotation&lt;/a&gt; に対応。これにより、組み込み型のインテリセンスを動作させることができて使い勝手が向上する&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/sumneko/lua-language-server"&gt;lua-language-server&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;⭐ &lt;a href="https://emmylua.github.io/annotation.html"&gt;EmmyLua Annotation&lt;/a&gt; に対応。これにより、組み込み型のインテリセンスを動作させることができて使い勝手が向上する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定例&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="s2"&gt;"Lua.runtime.version"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"LuaJIT"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"Lua.workspace.preloadFileSize"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"Lua.runtime.path"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"?.lua"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"?/init.lua"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"?/?.lua"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
&lt;/pre&gt;

&lt;h3&gt;&lt;a href="https://github.com/Alloyed/lua-lsp"&gt;lua-lsp&lt;/a&gt;&lt;/h3&gt;
&lt;h2&gt;Debug adapter&lt;/h2&gt;
&lt;h3&gt;&lt;a href="https://github.com/tomblind/local-lua-debugger-vscode"&gt;local-lua-debugger-vscode&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Debugされるスクリプト側に仕込み不要&lt;/li&gt;
&lt;li&gt;⭐ luajit 対応&lt;/li&gt;
&lt;li&gt;__tostring でエラーが発生すると固まるので、__tostring の実装で例外が起きないように注意&lt;/li&gt;
&lt;li&gt;起動時の引数に &lt;code&gt;\\&lt;/code&gt; が含まれているとエラーになる =&amp;gt; &lt;code&gt;0.2.2&lt;/code&gt; で修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/actboy168/lua-debug"&gt;lua-debug&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Debugされるスクリプト側に仕込み不要&lt;/li&gt;
&lt;li&gt;hook が拡張してある。途中で止めたりとかできるぽい&lt;/li&gt;
&lt;li&gt;残念ながら luajit では動作しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Formatter&lt;/h2&gt;
&lt;h3&gt;&lt;a href="https://github.com/johnnymorganz/stylua"&gt;stylua&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;⭐ rust 製でインストールしやすい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stylua.toml&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;column_width = 120
line_endings = "Unix"
indent_type = "Spaces"
indent_width = 4
quote_style = "AutoPreferDouble"
no_call_parentheses = true
&lt;/pre&gt;

&lt;h2&gt;ソース読み&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ousttrue.github.io/lua/"&gt;https://ousttrue.github.io/lua/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>dap</category><category>lsp</category><category>lua</category><category>luajit</category><guid>https://ousttrue.github.io/posts/2021/lua_info/</guid><pubDate>Mon, 26 Jul 2021 15:00:00 GMT</pubDate></item><item><title>libclang で luajit 向けの FFI を生成する</title><link>https://ousttrue.github.io/posts/2021/luajitffi/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;lua による imgui 計画の準備として、 &lt;code&gt;libclang&lt;/code&gt; によるバインディング生成器を &lt;code&gt;luajit&lt;/code&gt; に移植してみた。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/luajitffi"&gt;https://github.com/ousttrue/luajitffi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;libclang&lt;/code&gt; に対してはだいだい動くようになって、自身で生成した &lt;code&gt;FFI&lt;/code&gt; で動作するところまでできた。
また、 &lt;code&gt;EmmyLua Annotation&lt;/code&gt; もある程度付与できた。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/luajitffi/blob/master/clang/mod.lua"&gt;https://github.com/ousttrue/luajitffi/blob/master/clang/mod.lua&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こいつで、 &lt;code&gt;imgui.h&lt;/code&gt; から luajit FFI を生成する。&lt;/p&gt;
&lt;h3&gt;libclang&lt;/h3&gt;
&lt;p&gt;c(c++)ヘッダーを &lt;code&gt;clang_visitChildren&lt;/code&gt; により、カーソルのTree としてパースする。
今回は、 &lt;code&gt;CXChildVisit_Recurse&lt;/code&gt; で全部のカーソルをパースすることにした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同じカーソルが複数個所に現れうる&lt;/li&gt;
&lt;li&gt;循環しうる(Link List ？)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;がありうることを考慮しておく。
&lt;code&gt;clang-c/Index.h&lt;/code&gt; は 6000 カーソルくらいなので問題ないが、 &lt;code&gt;Windows.h&lt;/code&gt; とかは 150000 カーソルとか爆発する。&lt;/p&gt;
&lt;h3&gt;わりと色んなところで型がネストしていてつらい&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;struct の中は namespace なので何でもあり&lt;/li&gt;
&lt;li&gt;anonymous な union や struct のその場定義&lt;/li&gt;
&lt;li&gt;typedef struct などのその場定義&lt;/li&gt;
&lt;li&gt;関数ポインタのその場定義&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要するに、Cのコードの書き方によってどのようなカーソル構造になるかのパターンを知っている必要があって、
パターン毎に分岐して情報を収集する必要がある。
ある型のメンバーの情報を集めていると、ネストした別の型情報が現れる場合があるので切り分ける。&lt;/p&gt;
&lt;h3&gt;基本的なパターン&lt;/h3&gt;
&lt;p&gt;FFI では、対象となる関数を起点にその関数が使用するすべての型の定義を取り込む。
カーソルはCのTranslationUnitの木構造をあらわしていて、型をあらわしていない。
カーソルから頑張って型を得る。
型を得られるカーソルは決まっていて、&lt;code&gt;CXCursorType&lt;/code&gt; が宣言Declの系列となる。&lt;/p&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h4&gt;カーソル FunctionDecl&lt;/h4&gt;
&lt;h4&gt;カーソル EnumDecl&lt;/h4&gt;
&lt;h4&gt;カーソル TypedefDecl&lt;/h4&gt;
&lt;h4&gt;カーソル StructDecl&lt;/h4&gt;
&lt;h4&gt;Type Pointer&lt;/h4&gt;
&lt;h4&gt;Type Array&lt;/h4&gt;
&lt;h4&gt;Type Elaborated&lt;/h4&gt;
&lt;h4&gt;Type Record&lt;/h4&gt;
&lt;h4&gt;Type FunctionProto 関数ポインタ pointer =&amp;gt; functionproto&lt;/h4&gt;
&lt;h4&gt;union&lt;/h4&gt;
&lt;h4&gt;typedef struct&lt;/h4&gt;
&lt;h4&gt;c++ name mangling&lt;/h4&gt;
&lt;h4&gt;マクロとの戦い&lt;/h4&gt;
&lt;h3&gt;luajit ffi&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ffi.cdef&lt;/code&gt; に素直に定義すればいいので、他の言語の FFI に比べて簡単。&lt;/p&gt;
&lt;p&gt;はまり。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ffi.load&lt;/code&gt; の返り値が GC されると関数ポインタが死ぬ&lt;/li&gt;
&lt;li&gt;pointer は &lt;code&gt;ffi.new('TYPE[1]')&lt;/code&gt; のようにサイズ１の array で運用する&lt;/li&gt;
&lt;li&gt;tostring と ffi.string は違う&lt;/li&gt;
&lt;li&gt;nullptr は nil ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;だいたいよきに計らってくれるので、 &lt;code&gt;rust&lt;/code&gt; の FFI に比べて簡単なのであった。&lt;/p&gt;
&lt;p&gt;ひとつだけはまりがあって、 &lt;code&gt;struct&lt;/code&gt; の値渡しができない場合がある。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wiki.luajit.org/FFI-Callbacks-with-pass-by-value-structs"&gt;http://wiki.luajit.org/FFI-Callbacks-with-pass-by-value-structs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;そういえば、 &lt;code&gt;rust&lt;/code&gt; でも &lt;code&gt;struct&lt;/code&gt; の値渡しではまった記憶が。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://forum.dlang.org/thread/dkamxcamwttszxwwxttv@forum.dlang.org"&gt;https://forum.dlang.org/thread/dkamxcamwttszxwwxttv@forum.dlang.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;rust の場合は、 &lt;code&gt;struct&lt;/code&gt; の値返しが動かなかった。
これ、C の方で pointer 経由で値を返すラッパーを定義する必要があって回避方法はなかった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ImVec2 ImGui::GetContentRegionAvail()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;luajit ffi でもできるか注意が必要だな。&lt;/p&gt;
&lt;h3&gt;lfs への依存を FFI した Windows API で置き換える&lt;/h3&gt;
&lt;p&gt;現状、ファイル操作 &lt;code&gt;isExists&lt;/code&gt;, &lt;code&gt;mkDir&lt;/code&gt; のために lfs を使っているのだけど、
FFI で Windows API にアクセスできるようにしたら lfs 無しにできそう。
となれば luarocks も無しにできるので、 必要なのは luajit.exe だけになる。&lt;/p&gt;&lt;/div&gt;</description><category>libclang</category><category>lua</category><guid>https://ousttrue.github.io/posts/2021/luajitffi/</guid><pubDate>Thu, 22 Jul 2021 15:00:00 GMT</pubDate></item><item><title>luajitffi</title><link>https://ousttrue.github.io/github/luajitffi/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/ousttrue/luajitffi"&gt;https://github.com/ousttrue/luajitffi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ffi generator using libclang&lt;/p&gt;&lt;/div&gt;</description><category>lua</category><category>repository</category><guid>https://ousttrue.github.io/github/luajitffi/</guid><pubDate>Sun, 18 Jul 2021 09:35:20 GMT</pubDate></item><item><title>lua による imgui 計画</title><link>https://ousttrue.github.io/posts/2021/lua_imgui_plan/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;h3&gt;rust で D3D11 レンダラを進めてきたが・・・&lt;/h3&gt;
&lt;p&gt;当初 &lt;code&gt;rust&lt;/code&gt; で &lt;code&gt;d3d11&lt;/code&gt; のレンダラーを作ろうとして作業を進めていた。
&lt;code&gt;imgui&lt;/code&gt; を組み込んで、 &lt;code&gt;glTF&lt;/code&gt; をロードして &lt;code&gt;unlit&lt;/code&gt; で描画するところまで作ったが、
&lt;code&gt;GUI&lt;/code&gt; の作りこみが大変そうな感じだった。
&lt;code&gt;rust&lt;/code&gt; は関数オーバーロードが無いので　&lt;code&gt;imgui&lt;/code&gt; のラッパーの使い勝手が &lt;code&gt;c++&lt;/code&gt; より落ちるなど。
ポインターを渡せるのは素敵なのだが。&lt;/p&gt;
&lt;h3&gt;nvim-0.5 はおもしろい&lt;/h3&gt;
&lt;p&gt;ここで寄り道して、 &lt;code&gt;nvim&lt;/code&gt; をいじり始めた。
ちょうどバージョン &lt;code&gt;0.5&lt;/code&gt; がリリースされるタイミングで、&lt;code&gt;0.5&lt;/code&gt; になると lua サポートが強化されて、設定が lua で書けるとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/hituzi_no_sippo/articles/871c06cdbc45b53181e3"&gt;NeovimとLua&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということで Windows 向けのソースからのビルドシステムを作って &lt;code&gt;nvim&lt;/code&gt; 環境を整備してみた。
lua で記述された plugin をなるべく採用。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/my_nvim"&gt;https://github.com/ousttrue/my_nvim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近常用していた、 &lt;code&gt;vscode&lt;/code&gt; の便利さにどこまで追いつけるか。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Language Server Protocol。nvim-0.5 から nvim-lsp (luaで書いてある) がある。組み込み&lt;/li&gt;
&lt;li&gt;Debug Adapter Protocol。nvim-0.5 から nvim-dap (lulで書いてある) がある。&lt;a href="https://github.com/mfussenegger/nvim-dap"&gt;https://github.com/mfussenegger/nvim-dap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vscode から &lt;code&gt;lsp&lt;/code&gt; と &lt;code&gt;dap&lt;/code&gt; という重要な資産を持ってこれるので慣れればいけそうである。
調べたところ下記のようだった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;codelldb(native debugger c++ や rust) は nvim-dap を改造すれば使えた &lt;a href="https://github.com/ousttrue/nvim-dap"&gt;https://github.com/ousttrue/nvim-dap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rust-analyzer 動いた&lt;/li&gt;
&lt;li&gt;python: lsp, dap ともに動きそう&lt;/li&gt;
&lt;li&gt;lua: lsp, dap ともに動きそう&lt;/li&gt;
&lt;li&gt;csharp: lsp, dap ともに動きそう(Unityはうまくいかず)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;nvim-lsp も nvim-dap も lua で簡単に記述されているので、コードを読めば、たぶんわかる。
あとは、タスクランナーを整備すれば開発環境に使えそう。&lt;/p&gt;
&lt;h3&gt;luarocks の Windows 運用&lt;/h3&gt;
&lt;p&gt;lua で記述された nvim のパッケージマネージャー &lt;a href="https://github.com/wbthomason/packer.nvim"&gt;https://github.com/wbthomason/packer.nvim&lt;/a&gt; を採用したのだが、
Windows で luarocks 機能が動かなかった。&lt;a href="https://luarocks.org/"&gt;https://luarocks.org/&lt;/a&gt; は &lt;code&gt;lua&lt;/code&gt; のパッケージマネージャー。
ちょっと、古め(vc2017より前)の vc でないとだめぽい。
改造した。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/ousttrue/packer.nvim&lt;/li&gt;
&lt;li&gt;https://github.com/ousttrue/hererocks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hererocks は、luarocks のインストーラー。
&lt;code&gt;LUA_PATH&lt;/code&gt; &lt;code&gt;package.path&lt;/code&gt; を理解した。&lt;/p&gt;
&lt;h3&gt;スタンドアロンの lua インタプリタによるプロジェクト&lt;/h3&gt;
&lt;p&gt;luarocks が無事に Windows で運用できるようになったので、プロジェクトローカルに必要なライブラリをインストールして、
スタンドアロンの lua インタープリターを起点にしたアプリ開発ができないか探ってみた。
lua インタプリタがアプリ組み込みだと dap の運用がしづらい(port 開けて attach とかになる)のでスタンドアロンの lua インタープリターを推す。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;# フォルダ構成
project_root
  + lua(.gitignore) # hererocks でローカルビルドする
  + main.lua
&lt;/pre&gt;

&lt;p&gt;これで、 &lt;code&gt;lsp&lt;/code&gt; と &lt;code&gt;dap&lt;/code&gt; が利用できれば快適になるのではないか。&lt;/p&gt;
&lt;h4&gt;lua の LanguageServer&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=sumneko.lua"&gt;https://marketplace.visualstudio.com/items?itemName=sumneko.lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sumneko/lua-language-server"&gt;https://github.com/sumneko/lua-language-server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;がしっかり動き、&lt;code&gt;EmmyLua&lt;/code&gt; の型ヒントを活用できることが分かった。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/neovim/nvim-lspconfig/blob/a21a509417aa530fb7b54020f590fa5ccc67de77/CONFIG.md#sumneko_lua"&gt;https://github.com/neovim/nvim-lspconfig/blob/a21a509417aa530fb7b54020f590fa5ccc67de77/CONFIG.md#sumneko_lua&lt;/a&gt; に例があって、&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="s1"&gt;'lspconfig'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumneko_lua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Lua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;workspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;-- Make the server aware of Neovim runtime files&lt;/span&gt;
        &lt;span class="n"&gt;library&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'$VIMRUNTIME/lua'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;-- lua標準の型定義がある&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'$VIMRUNTIME/lua/vim/lsp'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;-- Vimの型定義がある&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;インテリセンスが効くし、組み込み関数の型ヒントも追加できる。&lt;/p&gt;
&lt;h4&gt;lua の DebugAdapter&lt;/h4&gt;
&lt;p&gt;DebugAdapter も問題なく動いた。
luajit の場合は対応しているものを使うべし。&lt;/p&gt;
&lt;h5&gt;Lua Debug&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=actboy168.lua-debug"&gt;https://marketplace.visualstudio.com/items?itemName=actboy168.lua-debug&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/actboy168/lua-debug"&gt;https://github.com/actboy168/lua-debug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/actboy168/bee.lua"&gt;https://github.com/actboy168/bee.lua&lt;/a&gt; の&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add error hook (for debugger)&lt;/li&gt;
&lt;li&gt;Add resume/yield hook (for debugger)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;謎の機能で実装されているぽい。&lt;/p&gt;
&lt;h5&gt;Local Lua Debugger&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=tomblind.local-lua-debugger-vscode"&gt;https://marketplace.visualstudio.com/items?itemName=tomblind.local-lua-debugger-vscode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/tomblind/local-lua-debugger-vscode"&gt;https://github.com/tomblind/local-lua-debugger-vscode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;luajit でも動く&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;TypeScriptToLua で書かれている&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;lua で 3D&lt;/h3&gt;
&lt;p&gt;ちょっと試したところ、 luajit の &lt;a href="https://luajit.org/ext_ffi.html"&gt;FFI&lt;/a&gt; を使うのが有望そうという感触を得た。
d3d は lua でやっている人があまりいなかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sonoro1234/LuaJIT-GLFW"&gt;https://github.com/sonoro1234/LuaJIT-GLFW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sonoro1234/LuaJIT-ImGui"&gt;https://github.com/sonoro1234/LuaJIT-ImGui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最新の luajit-2.1.0-beta3(lua-5.1仕様) でいく。&lt;/p&gt;
&lt;h3&gt;imgui の ffi&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cimgui&lt;/code&gt; ではなく 素の &lt;code&gt;imgui&lt;/code&gt; の luajit ffi できるか実験した。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/6691651/is-it-possible-to-use-functions-from-c-namespaces-with-luajit-ffi"&gt;https://stackoverflow.com/questions/6691651/is-it-possible-to-use-functions-from-c-namespaces-with-luajit-ffi&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cdef&lt;/span&gt;&lt;span class="s"&gt;[[&lt;/span&gt;
&lt;span class="s"&gt;void Test1_Method1(void) asm("_ZN5Test17Method1Ev");&lt;/span&gt;
&lt;span class="s"&gt;]]&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;のように mangling に対応すればできそう。&lt;/p&gt;
&lt;h3&gt;libclang による コード生成&lt;/h3&gt;
&lt;p&gt;ということで、 &lt;code&gt;luajit&lt;/code&gt; + &lt;code&gt;FFI&lt;/code&gt; を中心に &lt;code&gt;imgui&lt;/code&gt; ラッパーを作ってレンダラーというか 3D ツールのインフラとなる、
簡単なレンダラーと &lt;code&gt;Gizmo&lt;/code&gt; に対応したツールキットを作るという方向になってきた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;imgui&lt;/code&gt; の &lt;code&gt;luajit&lt;/code&gt; &lt;code&gt;FFI&lt;/code&gt; の使い勝手が重要。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/limgui"&gt;https://github.com/ousttrue/limgui&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] libclang で &lt;code&gt;imgui.h&lt;/code&gt; をパースして、luajit FFI 生成と &lt;code&gt;lsp&lt;/code&gt; への EmmyLua アノテーション生成を同時にやるツール。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>imgui</category><category>lua</category><guid>https://ousttrue.github.io/posts/2021/lua_imgui_plan/</guid><pubDate>Fri, 16 Jul 2021 15:00:00 GMT</pubDate></item><item><title>limgui</title><link>https://ousttrue.github.io/github/limgui/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/ousttrue/limgui"&gt;https://github.com/ousttrue/limgui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;luajit + ffi + imgui&lt;/p&gt;&lt;/div&gt;</description><category>imgui</category><category>lua</category><category>repository</category><guid>https://ousttrue.github.io/github/limgui/</guid><pubDate>Thu, 15 Jul 2021 09:01:59 GMT</pubDate></item></channel></rss>
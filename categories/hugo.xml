<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (hugoについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/hugo.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2022 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Sat, 14 May 2022 17:17:06 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Hugo再インストール</title><link>https://ousttrue.github.io/posts/2020/hugo-reinstall/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;再びサイトジェネレーターを &lt;code&gt;hugo&lt;/code&gt; に戻した。
今度は、 &lt;code&gt;travis-ci&lt;/code&gt; の自動ビルドを入れたし万全。
軽くレイアウト一式を作ってみたけど、今回は前よりもよく理解できた。
&lt;code&gt;partial&lt;/code&gt;, &lt;code&gt;baseof&lt;/code&gt; に加えて &lt;code&gt;.Render&lt;/code&gt; をマスターしたぞ。
変数付きの部品に分解できて、うまく引数になる変数を共有できれば部品を共有できる。&lt;/p&gt;
&lt;p&gt;とりあえず構造を理解するためにデバッグ色なので整えたいところだが、そのうちやる。
Webものは調べる範囲が広すぎて関心が拡散してしまって、気力が保たないんよね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github pages&lt;/li&gt;
&lt;li&gt;hugo&lt;ul&gt;
&lt;li&gt;layout&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;css&lt;ul&gt;
&lt;li&gt;scss&lt;/li&gt;
&lt;li&gt;css3&lt;ul&gt;
&lt;li&gt;grid, flexbox&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;css reset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;font&lt;ul&gt;
&lt;li&gt;icon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などの断片を集めてきた。
そういえば &lt;code&gt;Gatsby.js&lt;/code&gt; にしようかと考えていたのだけど、無難にある程度知っている &lt;code&gt;hugo&lt;/code&gt; にした。
Web方面は付け焼刃なので、あまり必要な知識が増えすぎても手に負えない。
今回の hugo 作業では &lt;code&gt;node.js&lt;/code&gt; には触れずにすんでいるので、いい塩梅というものである。&lt;/p&gt;
&lt;p&gt;一応過去記事をインポートしてみたが、雑多なフォーマットでできているのであまり互換性がなかった。
&lt;code&gt;frontmatter&lt;/code&gt; だけ置換とかで整えてみた。&lt;/p&gt;
&lt;p&gt;過去記事のタイトルをチェックしてみたところ、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hatena dialy&lt;/li&gt;
&lt;li&gt;2012-11 tdiary(heroku)&lt;/li&gt;
&lt;li&gt;2013-02 octopress&lt;/li&gt;
&lt;li&gt;2013-10 tinkerer&lt;/li&gt;
&lt;li&gt;2015-11 gulp&lt;/li&gt;
&lt;li&gt;2017-02 hugo&lt;/li&gt;
&lt;li&gt;2018 自分とこで管理するのがめんどくさくて Qiitaとかに&lt;/li&gt;
&lt;li&gt;2019-04 自作のpythonスクリプト&lt;/li&gt;
&lt;li&gt;2019-08 wyam&lt;/li&gt;
&lt;li&gt;2019 自分とこで管理するのがめんどくさくて Qiitaとかに&lt;/li&gt;
&lt;li&gt;2020-07 hugo 復活&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という経緯をたどっていることが分かった。
しばらく、hugo でいってみよう。&lt;/p&gt;</description><category>hugo</category><guid>https://ousttrue.github.io/posts/2020/hugo-reinstall/</guid><pubDate>Sat, 25 Jul 2020 04:50:27 GMT</pubDate></item><item><title>Github Pages の種類</title><link>https://ousttrue.github.io/posts/2020/hugo-github-pages/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;https://docs.github.com/ja/github/working-with-github-pages/about-github-pages&lt;/p&gt;
&lt;h3&gt;プロジェクトサイト (gh-pages)&lt;/h3&gt;
&lt;p&gt;各プロジェクトに作れる。&lt;/p&gt;
&lt;p&gt;URLは、&lt;code&gt;http(s)://&amp;lt;user&amp;gt;.github.io/&amp;lt;repository&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;各リポジトリの、 &lt;code&gt;gh-pages&lt;/code&gt; ブランチでサイトをホストする。
hugo で運用するなら、
&lt;code&gt;master&lt;/code&gt; ブランチに hugo project を commit する。
hugo のビルド結果を &lt;code&gt;gh-pages&lt;/code&gt; に commit する。
手間を省くために &lt;code&gt;master&lt;/code&gt; への push をトリガーに &lt;code&gt;travis-CI&lt;/code&gt; 等で自動でビルドして、結果を gh-pages に push する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="c1"&gt;# .travis.yml&lt;/span&gt;
&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;
  &lt;span class="n"&gt;skip_cleanup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;github_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;GITHUB_TOKEN&lt;/span&gt;  &lt;span class="c1"&gt;# Set in the settings page of your repository, as a secure variable&lt;/span&gt;
  &lt;span class="n"&gt;keep_history&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;target_branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="c1"&gt;# default&lt;/span&gt;
  &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt;
  &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;master&lt;/span&gt; &lt;span class="c1"&gt;# master branch が push されたのをトリガーに public フォルダを gh-pages ブランチに pushする&lt;/span&gt;
&lt;/pre&gt;
&lt;h3&gt;ユーザーサイト&lt;/h3&gt;
&lt;p&gt;ユーザー毎にひとつだけ作ることのできるリポジトリ。&lt;/p&gt;
&lt;p&gt;URLは、&lt;code&gt;http(s)://&amp;lt;user&amp;gt;.github.io&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;これ、&lt;code&gt;gh-pages&lt;/code&gt; と URL が重複するときがありそうな。&lt;/p&gt;
&lt;p&gt;repository &lt;code&gt;${user_name}.github.io&lt;/code&gt; の場合 &lt;code&gt;master&lt;/code&gt; が &lt;code&gt;gh-pages&lt;/code&gt; の役割を果たす。
この名前にすると、サイトをホストする用の特殊なリポジトリになる様子。&lt;/p&gt;
&lt;p&gt;hugo で運用するなら &lt;code&gt;gh-pages&lt;/code&gt; ブランチ運用と逆になる。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;
  &lt;span class="n"&gt;skip_cleanup&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;github_token&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$GITHUB_TOKEN&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;secure&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;
  &lt;span class="n"&gt;keep_history&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;target_branch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
  &lt;span class="n"&gt;local_dir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt;
  &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hugo&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;hugo&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="err"&gt;が&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="err"&gt;されたのをトリガーに&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="err"&gt;フォルダを&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="err"&gt;ブランチに&lt;/span&gt;&lt;span class="n"&gt;pushする&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;default branch を hugo の方に変えてから、git clone すると作業しやすい。&lt;/p&gt;</description><category>hugo</category><category>ssg</category><guid>https://ousttrue.github.io/posts/2020/hugo-github-pages/</guid><pubDate>Mon, 20 Jul 2020 04:50:17 GMT</pubDate></item><item><title>hugoのfrontmatter</title><link>https://ousttrue.github.io/posts/2017/06/hugo_frontmatter/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;hugo newで新しく記事を作成した時のfrontmatterをカスタマイズするには。&lt;/p&gt;
&lt;p&gt;とりあえず本家のドキュメントに目を通す。&lt;/p&gt;
&lt;p&gt;https://gohugo.io/content/archetypes/&lt;/p&gt;
&lt;p&gt;archetypes/default.md
にfrontmatterのみの記事を作ればよいらしい。
+++
tags = []
draft = true
+++&lt;/p&gt;
&lt;p&gt;やってみた。
hugo newでfrontmatterがカスタマイズされることを確認できた。&lt;/p&gt;</description><category>hugo</category><guid>https://ousttrue.github.io/posts/2017/06/hugo_frontmatter/</guid><pubDate>Sun, 04 Jun 2017 15:00:00 GMT</pubDate></item><item><title>PartialとBlockTemplate</title><link>https://ousttrue.github.io/posts/2017/05/hugo_partial_and_blocktemplate/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;ページを部品に分解するPartialとBlockTemplateについて。&lt;/p&gt;
&lt;p&gt;PartialTemplate&lt;/p&gt;
&lt;p&gt;https://gohugo.io/templates/partials/&lt;/p&gt;
&lt;p&gt;layouts/_default/single.html

{{ partial "head.html" . }}&lt;/p&gt;


    {{ partial "header.html" . }}
    {{ .Content }}
    {{ partial "footer.html" . }}


&lt;p&gt;&lt;/p&gt;
&lt;p&gt;のように一部を部品で置き換える。&lt;/p&gt;
&lt;p&gt;layouts/partials/head.html
layouts/partials/header.html
layouts/partials/footer.html&lt;/p&gt;
&lt;p&gt;BlockTemplate&lt;/p&gt;
&lt;p&gt;https://gohugo.io/templates/blocks/&lt;/p&gt;
&lt;p&gt;layouts/_default/single.html
{{ define "title" }}
  {{ .Title }} – {{ .Site.Title }}
{{ end }}&lt;/p&gt;
&lt;p&gt;{{ define "main" }}
  {{ .Content }}
{{ end }}&lt;/p&gt;
&lt;p&gt;のように自分が部品になる。
デフォルトでブロックテンプレート_default/baseof.htmlが選択される。

&lt;/p&gt;
&lt;title&gt;{{ block "title" . }}
  &lt;!-- Blocks may include default content. --&gt;
&lt;p&gt;{{ .Site.Title }}
{{ end }}&lt;/p&gt;&lt;/title&gt;


{{ block "main" . }}
&lt;!-- The part of the page that begins to differ between templates --&gt;
{{ end }}


&lt;p&gt;PartialよりもBlockTemplateの方がきれいに分割できる気がするね。実際には両方使う。&lt;/p&gt;</description><category>hugo</category><guid>https://ousttrue.github.io/posts/2017/05/hugo_partial_and_blocktemplate/</guid><pubDate>Mon, 22 May 2017 15:00:00 GMT</pubDate></item><item><title>Hugoのレイアウトとコンテントの関係</title><link>https://ousttrue.github.io/posts/2017/05/hugo_layout/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;概要&lt;/p&gt;
&lt;p&gt;hugoコマンド実行時に以下のタスクが実行される
contentのmdファイルをsingle.htmlを使ってhtmlに変換する(1対1)
contentのサブフォルダをsectionと呼ぶ。sectionのサブフォルダはsectionにならない
sectionのindex.htmlをlist.htmlで生成する
topのindex.htmlをindex.htmlまたはlist.htmlで生成する(サイト全体で1)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;     +-------+
     |layouts|
     +-------+
         |
         v
&lt;/pre&gt;
&lt;p&gt;content -----+-------&amp;gt; public / (index.html or list.html) -&amp;gt; index.html
  + post                    + post / (list.html) -&amp;gt; index.html
    + 2017                    + 2017
      + 05                      + 05
        + article1.md             + article1 / (single.html) -&amp;gt; index.html
        + article2.md             + article2 / (single.html) -&amp;gt; index.html
        + article3.md             + article3 / (single.html) -&amp;gt; index.html&lt;/p&gt;
&lt;p&gt;contentフォルダの構成&lt;/p&gt;
&lt;p&gt;https://gohugo.io/overview/source-directory/#content-for-home-page-and-other-list-pages&lt;/p&gt;
&lt;p&gt;個別記事(single content)のmdをhtmlに変換する&lt;/p&gt;
&lt;p&gt;https://gohugo.io/templates/content/&lt;/p&gt;
&lt;p&gt;個々のページをhtmlに変換(render)するときにどのTemplateを選択するのかについての説明が上記にある。
デフォルトは /themes/THEME/layouts/_default/single.htmlが使われる。
セクション毎にセクション内の記事のリスト(list content)のhtmlを生成する&lt;/p&gt;
&lt;p&gt;https://gohugo.io/templates/list/&lt;/p&gt;
&lt;p&gt;セクションページのhtmlを生成するときにどのTemplateを選択するのかについての説明が上記にある。
デフォルトは/themes/THEME/layouts/_default/list.htmlが使われる。
サイトトップのhtmlを生成する&lt;/p&gt;
&lt;p&gt;https://gohugo.io/templates/homepage/&lt;/p&gt;
&lt;p&gt;サイトトップのhtmlを生成するときにどのTemplateを選択するのかについての説明が上記にある。
以下の順に選択される。&lt;/p&gt;
&lt;p&gt;/themes/THEME/layouts/index.html
/themes/THEME/layouts/_default/list.html
/themes/THEME/layouts/_default/single.html&lt;/p&gt;</description><category>hugo</category><guid>https://ousttrue.github.io/posts/2017/05/hugo_layout/</guid><pubDate>Sun, 21 May 2017 15:00:00 GMT</pubDate></item><item><title>hugoでmapを使ってpartialに追加の変数を渡す</title><link>https://ousttrue.github.io/posts/2017/05/hugo_dict/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;hugoのrange内のpartialから.Siteにアクセスできなくて困ったので、代替する方法を探した。&lt;/p&gt;
&lt;p&gt;こんな感じ。
config.tomlでSite.Params.tagiconsを定義。
[Params.tagicons]
python = "icon-python"
tinkerer = "icon-python"
gulp = "icon-gulp"
ruby = "icon-ruby"
heroku = "icon-heroku"&lt;/p&gt;
&lt;p&gt;partial呼び出し。
{{ range .Params.tags }} 
    {{ partial "tags.html" (dict "tag" . "icons" $.Site.Params.tagicons) }}
{{ end }}&lt;/p&gt;
&lt;p&gt;partialで使う。
&lt;i class="{{ index .icons .tag }}" aria-hidden="true"&gt;&lt;/i&gt;
{{ .tag }}&lt;/p&gt;
&lt;p&gt;http://gohugo.io/templates/functions/#dict&lt;/p&gt;</description><category>hugo</category><guid>https://ousttrue.github.io/posts/2017/05/hugo_dict/</guid><pubDate>Sat, 13 May 2017 15:00:00 GMT</pubDate></item><item><title>Hugoのテーマ作り</title><link>https://ousttrue.github.io/posts/2017/05/hugo_theme/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;hugoの仕組みも気になることだし作ってみることにした。&lt;/p&gt;
&lt;p&gt;Hugoのテーマを何個か作ったので知見をまとめてみる
https://gohugo.io/tutorials/creating-a-new-theme/&lt;/p&gt;
&lt;p&gt;新しくテーマを作る
$ hugo new theme hoge&lt;/p&gt;
&lt;p&gt;themes/hogeにテーマのテンプレートが作成される。
３つのテンプレート
layout/index.html&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

  {{- range first 10 .Data.Pages }}
    &lt;h5&gt;&lt;a href="https://ousttrue.github.io/posts/2017/05/hugo_theme/%7B%7B%20.Permalink%20%7D%7D"&gt;{{ .Title }}&lt;/a&gt;&lt;/h5&gt;
  {{- end }}

&lt;p&gt;&lt;/p&gt;
&lt;p&gt;layout/_default/single.html&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;
  &lt;title&gt;{{ .Title }}&lt;/title&gt;


  &lt;h2&gt;{{ .Title }}&lt;/h2&gt;
  &lt;h6&gt;{{ .Date.Format "Mon, Jan 2, 2006" }}&lt;/h6&gt;
  {{ .Content }}
  &lt;h5&gt;&lt;a href="https://ousttrue.github.io/posts/2017/05/hugo_theme/%7B%7B%20.Site.BaseURL%20%7D%7D"&gt;Home&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;&lt;/p&gt;
&lt;p&gt;layout/_default/list.html&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

  &lt;h2&gt;Articles&lt;/h2&gt;
  {{- range first 10 .Data.Pages }}
    &lt;h5&gt;&lt;a href="https://ousttrue.github.io/posts/2017/05/hugo_theme/%7B%7B%20.Permalink%20%7D%7D"&gt;{{ .Title }}&lt;/a&gt;&lt;/h5&gt;
  {{- end }}
  &lt;h5&gt;&lt;a href="https://ousttrue.github.io/posts/2017/05/hugo_theme/%7B%7B%20.Site.BaseURL%20%7D%7D"&gt;Home&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;&lt;/p&gt;
&lt;p&gt;partial導入
layout/_default/header.html
layout/_default/footer.html
bootstrap&lt;/p&gt;
&lt;p&gt;http://getbootstrap.com/&lt;/p&gt;
&lt;p&gt;2column
sticky-footer
tags&lt;/p&gt;
&lt;p&gt;http://text.baldanders.info/hugo/section/
http://text.baldanders.info/hugo/categories-and-tags-list/&lt;/p&gt;
&lt;p&gt;付ける
frontmatterに
tags = ["hugo"]&lt;/p&gt;
&lt;p&gt;のように書く。よくわからないがアルファベットの大文字は避けた方がよさげ。マルチバイト文字はOKぽい。
single
.Params.tagsに格納されているので以下のようにして使う
{{ range .Params.tags }}
&lt;a href="https://ousttrue.github.io/tags/%7B%7B%20.%20%7C%20urlize%20%7D%7D/"&gt;{{ . }}&lt;/a&gt;
{{ end }}&lt;/p&gt;
&lt;p&gt;list
.Data.Pagesを列挙して中から取り出せる
{{ range .Data.Pages }}
    &lt;/p&gt;&lt;hr&gt;
    {{ range .Params.tags }}
    &lt;a href="https://ousttrue.github.io/tags/%7B%7B%20.%20%7C%20urlize%20%7D%7D/"&gt;{{ . }}&lt;/a&gt;
    {{ end }}
{{ end}}
&lt;p&gt;サイトのタグ一覧&lt;/p&gt;
&lt;p&gt;Hugoでwebサイト構築(12) タグの列挙
https://gohugo.io/taxonomies/ordering/&lt;/p&gt;
&lt;p&gt;{{ range $name, $value := $.Site.Taxonomies.Alphabetical }}
    &lt;/p&gt;&lt;li&gt;
        &lt;a href="https://ousttrue.github.io/posts/2017/05/hugo_theme/%7B%7B%20%24.Site.BaseURL%20%7D%7D/tags/%7B%7B%20%24name%20%7D%7D/"&gt;
        &lt;div&gt;&lt;span class="badge"&gt;{{ .Count }}&lt;/span&gt;{{ $name }}&lt;/div&gt;
        &lt;/a&gt;
    &lt;/li&gt;
{{ end }}
&lt;p&gt;pagination&lt;/p&gt;
&lt;p&gt;http://wdkk.co.jp/note/2015/0915-hugo-pagination/
https://gohugo.io/extras/pagination/&lt;/p&gt;
&lt;p&gt;more&lt;/p&gt;
&lt;p&gt;https://gohugo.io/content/summaries/&lt;/p&gt;
&lt;p&gt;目次&lt;/p&gt;
&lt;p&gt;https://gohugo.io/extras/toc/&lt;/p&gt;
&lt;p&gt;syntax highlight&lt;/p&gt;
&lt;p&gt;https://gohugo.io/extras/highlighting/&lt;/p&gt;
&lt;p&gt;prev/next&lt;/p&gt;
&lt;p&gt;http://qiita.com/y_hokkey/items/f9d8b66b3770a82d4c1c#%E5%89%8D%E3%81%AE%E8%A8%98%E4%BA%8B%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B%E3%81%B8%E3%81%AE%E3%83%8A%E3%83%93%E3%82%B2%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3&lt;/p&gt;
&lt;p&gt;作業中
あまりかっこよくならんね…。
とりあえず読めるようにはなってきた。
まぁ、見易さ優先で。&lt;/p&gt;</description><category>hugo</category><guid>https://ousttrue.github.io/posts/2017/05/hugo_theme/</guid><pubDate>Thu, 04 May 2017 15:00:00 GMT</pubDate></item><item><title>Hugoに乗り換え</title><link>https://ousttrue.github.io/posts/2017/02/hugo-memo/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;なんとなくまたサイトシステム更新。&lt;/p&gt;
&lt;p&gt;前回はgulpで何もかも自前にしすぎて、めんどくささが上がりすぎてしまった。反省してシンプルなhugoにしてみました。前はgulpで何でもありにしてたのでwebglとかunityとかもできたのだけど、そういうのは動かなくなる。しかしまぁ、そんなにwebやらんよねということで。とりあえず、旧サイトのMarkdownのfrontmatterをpythonで少し手直ししてimportしてみた。hugo軽快な動作でよいね。themeを見繕ってsyntax highlightの入ったよさげな感じになった。&lt;/p&gt;</description><category>hugo</category><category>ssg</category><guid>https://ousttrue.github.io/posts/2017/02/hugo-memo/</guid><pubDate>Thu, 16 Feb 2017 15:00:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (w3mについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/w3m.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2022 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Sat, 14 May 2022 17:22:20 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>w3m改造</title><link>https://ousttrue.github.io/posts/2020/w3m-mod/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;以前にも何度かやったことがあるのだけど立ち消えになっていた、 &lt;a href="http://w3m.sourceforge.net/index.ja.html"&gt;w3m&lt;/a&gt; の改造を試みている。
w3m はわりと好きなテキストブラウザなのだが、 2011 年くらいの 0.5.3 で開発が終了している様子。&lt;/p&gt;
&lt;p&gt;https://github.com/ousttrue/w3m&lt;/p&gt;
&lt;p&gt;まずは &lt;code&gt;C++&lt;/code&gt; 化してから、HTML処理などを再入可能にしてタブごとにスレッド独立する方向を目指す。
同時に、 &lt;code&gt;boehm-GC&lt;/code&gt; を少しずつ &lt;code&gt;STL&lt;/code&gt; のコンテナや &lt;code&gt;std::string&lt;/code&gt; に置き換える。
どうも、&lt;code&gt;c++&lt;/code&gt; と &lt;code&gt;boehm-GC&lt;/code&gt; の共存するのに技がいるらしく、適当に置き換えていくとメモリ破壊で死ぬ。&lt;code&gt;boehm-GC&lt;/code&gt; をすべて置き換える必要がありそう。&lt;code&gt;C++&lt;/code&gt; クラスのメンバーに &lt;code&gt;GC&lt;/code&gt; が要る、&lt;code&gt;GC struct&lt;/code&gt; のメンバーに &lt;code&gt;C++&lt;/code&gt; クラスが居るの両方に問題があるっぽい。一応、 &lt;code&gt;gc_cleanup&lt;/code&gt; を継承したりしているのだけど、やり方がまずいぽい。&lt;/p&gt;
&lt;p&gt;改造にあたってなるべく機能を維持しようとしていたのだけど、ある程度わりきって機能を落とさないと手に負えないところがある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http + https 以外の通信プロトコルは落とす。NNTP とか Gopher 使ったことないしなー、FTPもいったん落とす&lt;/li&gt;
&lt;li&gt;backend, dump, halfload 等の出力に介入する機能は落とす。コードを読むのが大変&lt;/li&gt;
&lt;li&gt;M17N, COLOR, IMAGE, MENU は残す&lt;/li&gt;
&lt;li&gt;Mouse は微妙。削ってもよいかも&lt;/li&gt;
&lt;li&gt;GetText も削る&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;量を減らす。思ったよりコードが多かったのだ。&lt;/p&gt;
&lt;h2&gt;下準備&lt;/h2&gt;
&lt;h3&gt;msys2 でとりあえずビルド&lt;/h3&gt;
&lt;p&gt;WSL Ubuntu だとビルドできなかった。
しかし、msys2 ならわりと簡単にビルドできることを発見。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;$ pacman -S make gcc libgc-devel openssl-devel ncurses-devel
$ x86_64-pc-msys-gcc --version
x86_64-pc-msys-gcc &lt;span class="o"&gt;(&lt;/span&gt;GCC&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;.3.0
Copyright &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2019&lt;/span&gt; Free Software Foundation, Inc.
This is free software&lt;span class="p"&gt;;&lt;/span&gt; see the &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; copying conditions.  There is NO
warranty&lt;span class="p"&gt;;&lt;/span&gt; not even &lt;span class="k"&gt;for&lt;/span&gt; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
$ ./configure
&lt;/pre&gt;
&lt;p&gt;コンパイル環境の方が昔と変わってしまってビルドでエラーになる。&lt;/p&gt;
&lt;p&gt;修正方法👇&lt;/p&gt;
&lt;p&gt;&lt;a href="https://qiita.com/imkitchen/items/02a9df7baaaf434fee66"&gt;[CentOS7] emacs24にemacs-w3mインストール&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#ifdef&lt;/code&gt; の調整&lt;/p&gt;
&lt;pre class="code literal-block"&gt;// config.h
//#define USE_BINMODE_STREAM 1
//#define USE_EGD
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;$ make
$ ./w3m www.google.com // 動いた
&lt;/pre&gt;
&lt;h3&gt;WSL で GC がクラッシュする問題&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boehm-GC&lt;/code&gt; がランタイムにエラーになることで、 &lt;code&gt;make&lt;/code&gt; 中のコード生成 &lt;code&gt;mktable&lt;/code&gt; がクラッシュするのが原因でビルドステップが途中で止まるのが原因だった。なので、たとえビルド済みの &lt;code&gt;w3m&lt;/code&gt; を &lt;code&gt;apt get&lt;/code&gt; しても、ランタイムも同じ原因でクラッシュする。&lt;/p&gt;
&lt;p&gt;エラー。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;Wrong&lt;/span&gt; &lt;span class="n"&gt;__data_start&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_end&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;
&lt;span class="n"&gt;fish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'./build/w3m'&lt;/span&gt; &lt;span class="n"&gt;terminated&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="k"&gt;signal&lt;/span&gt; &lt;span class="n"&gt;SIGABRT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Abort&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;https://hitkey.nekokan.dyndns.info/diary2004.php#D200424&lt;/p&gt;
&lt;p&gt;によると、stack size の制限が原因らしい。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;$ &lt;span class="nb"&gt;ulimit&lt;/span&gt; -s
&lt;span class="m"&gt;8192&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;WSL でこれを変えるには・・・。&lt;/p&gt;
&lt;p&gt;https://github.com/microsoft/WSL/issues/633&lt;/p&gt;
&lt;p&gt;無理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WSL2&lt;/code&gt; ならできる？&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&amp;gt; wsl -l -v
  NAME            STATE           VERSION
* Ubuntu-20.04    Running         2
&lt;/pre&gt;
&lt;p&gt;やってみる。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;$ &lt;span class="nb"&gt;ulimit&lt;/span&gt; -s unlimited
&amp;gt; &lt;span class="nb"&gt;ulimit&lt;/span&gt; -s
unlimited
&lt;/pre&gt;
&lt;p&gt;できた。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;$ w3m
Wrong __data_start/_end pair
&lt;/pre&gt;
&lt;p&gt;うーむ。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;$ &lt;span class="nb"&gt;ulimit&lt;/span&gt; -s &lt;span class="m"&gt;81920&lt;/span&gt;
&amp;gt; &lt;span class="nb"&gt;ulimit&lt;/span&gt; -s
&lt;span class="m"&gt;81920&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;動いた。
8192KB では足りなく、 unlimited では多すぎるらしい。これは、難しいな。&lt;/p&gt;
&lt;p&gt;ちなみに、 &lt;code&gt;gdb&lt;/code&gt; 上ならスタック問題を解決しなくても動いた。
&lt;code&gt;gdb&lt;/code&gt; がスタックを覆い隠すのかな？
開発だけならできなくもない。&lt;/p&gt;
&lt;h3&gt;ビルドシステム&lt;/h3&gt;
&lt;p&gt;とりあえず慣れたツールに変更。
WSL 上の vscode で作業しているのもあり、autotools から CMake に変更。
クロスプラットフォームは後退させて、新しめの gcc(c++20) でビルドできればいいや。
config.h や funcname 系のコード生成結果はコミットしちゃう。
libwc が static ライブラリにわかれているのも、ひとまとめにしてしまった。
あと、適当にソースをフォルダに移動する。&lt;/p&gt;
&lt;p&gt;生成コード一覧&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ファイル&lt;/th&gt;
&lt;th&gt;生成方法&lt;/th&gt;
&lt;th&gt;入力&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;config.h&lt;/td&gt;
&lt;td&gt;configure&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;各種 #define など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;entity.h&lt;/td&gt;
&lt;td&gt;Makefile(mktable)&lt;/td&gt;
&lt;td&gt;entity.tab&lt;/td&gt;
&lt;td&gt;./mktable 100 entity.tab &amp;gt; entity.h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;funcname.tab&lt;/td&gt;
&lt;td&gt;Makefile(awk)&lt;/td&gt;
&lt;td&gt;main.c, menu.c&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;funcname.c&lt;/td&gt;
&lt;td&gt;Makefile(awk)&lt;/td&gt;
&lt;td&gt;funcname.tab&lt;/td&gt;
&lt;td&gt;sort funcname.tab ｜ awk -f funcname0.awk &amp;gt; funcname.c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;funcname1.h&lt;/td&gt;
&lt;td&gt;Makefile(awk)&lt;/td&gt;
&lt;td&gt;funcname.tab&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;funcname2.h&lt;/td&gt;
&lt;td&gt;Makefile(awk)&lt;/td&gt;
&lt;td&gt;funcname.tab&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;functable.c&lt;/td&gt;
&lt;td&gt;Makefile(mktable)&lt;/td&gt;
&lt;td&gt;funcname.tab&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tagtable.c&lt;/td&gt;
&lt;td&gt;Makefile(mktable)&lt;/td&gt;
&lt;td&gt;funcname.tab&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;警告からエラーに引き上げ&lt;/h3&gt;
&lt;p&gt;改造していくのに &lt;code&gt;C&lt;/code&gt; の緩い型制限が危険(コンパイルが通るのに型が不一致になりやすい)なので、
以下のオプションを追加。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;-Werror=implicit-function-declaration
-Werror=int-conversion
-Werror=conversion-null
&lt;/pre&gt;
&lt;p&gt;これで、型宣言を補強しながら進める。&lt;/p&gt;
&lt;h2&gt;第1段階&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;extern "C" を追加してソースの拡張子を &lt;code&gt;.cpp&lt;/code&gt; に変更&lt;/li&gt;
&lt;li&gt;extern "C" をまとめて取り除く&lt;/li&gt;
&lt;li&gt;typedef struct tag を取り除く&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここまでやると、自由に &lt;code&gt;c++&lt;/code&gt; のコードを混ぜることができる。
&lt;code&gt;std::string&lt;/code&gt;、&lt;code&gt;std::vector&lt;/code&gt;, &lt;code&gt;std::shared_ptr&lt;/code&gt;, &lt;code&gt;std::function&lt;/code&gt;, &lt;code&gt;std::string_view&lt;/code&gt;, &lt;code&gt;template&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, 前方宣言, &lt;code&gt;auto&lt;/code&gt;, &lt;code&gt;inline&lt;/code&gt; 等使い放題 👍&lt;/p&gt;
&lt;p&gt;特に &lt;code&gt;std::string_view&lt;/code&gt; の使い勝手を試したい。
所有しない文字列はすべて、 &lt;code&gt;std::string_view&lt;/code&gt; でいけると思うのだが。
&lt;code&gt;split&lt;/code&gt; の &lt;code&gt;std::string_view&lt;/code&gt; 版は具合がよかった。&lt;/p&gt;
&lt;h3&gt;c++ 化 (extern "C")&lt;/h3&gt;
&lt;p&gt;手法としては、各ソースの拡張子を &lt;code&gt;.c&lt;/code&gt; から &lt;code&gt;.cpp&lt;/code&gt; に変更する。
&lt;code&gt;CMakeLists.txt&lt;/code&gt; を修正。
&lt;code&gt;#include&lt;/code&gt; を &lt;code&gt;extern "C"&lt;/code&gt; で囲む、で &lt;code&gt;c++&lt;/code&gt; 化することができる。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;"xxx.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ただ、 &lt;code&gt;cpp&lt;/code&gt; で定義する関数の宣言が &lt;code&gt;extern "C"&lt;/code&gt; の中に入らないとリンクエラーになるので、
そうなるようにソースごとにヘッダを分配してやる。
&lt;code&gt;w3m&lt;/code&gt; は関数宣言が少数のファイル &lt;code&gt;proto.h&lt;/code&gt;, &lt;code&gt;fm.h&lt;/code&gt; とかに集中しているのだが、いっぱいあるので雑にやる。
コンパイルが通ればよい。&lt;/p&gt;
&lt;p&gt;分配するときに未定義の型を前方宣言ですませたいのだけど、 &lt;code&gt;c&lt;/code&gt; の &lt;code&gt;struct&lt;/code&gt; 定義が、&lt;code&gt;struct tag&lt;/code&gt; と &lt;code&gt;typedef&lt;/code&gt; に分かれているのがやっかいだった。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="c1"&gt;// C&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;hogeTag&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;DoHoge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// に対する前方宣言は、&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;hogeTag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hogeTag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Hoge&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;C&lt;/code&gt; の状態で、前方宣言を導入できずヘッダの分割が難航。
型ごとに別のヘッダに分割することは断念して、
ほとんど全部の &lt;code&gt;struct&lt;/code&gt; 定義の入ったヘッダを &lt;code&gt;fm.h&lt;/code&gt; から分離して作るのに留めた。&lt;/p&gt;
&lt;h3&gt;DEFUN&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;w3m&lt;/code&gt; は &lt;code&gt;DEFUN&lt;/code&gt; でキーアサインできる関数を定義している。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ousttrue.github.io/w3m/doc-jp/readme.func/"&gt;readme.func&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下のように、キーボードなどのイベントをトリガーにアクションを実行するというイメージ。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;Key
    KeyMap
        DEFUN
    Menu
        DEFUN
MouseAction
    ActionMap
        DEFUN
    Menu
        DEFUN
Alarm
    DEFUN
&lt;/pre&gt;
&lt;p&gt;ソースは、&lt;code&gt;main.c&lt;/code&gt; と &lt;code&gt;menu.c&lt;/code&gt; に &lt;code&gt;DEFUN&lt;/code&gt; とそれの使う補助関数がまとめて定義されていて、
ヘッダは &lt;code&gt;proto.h&lt;/code&gt; に全部入れとなっている。&lt;/p&gt;
&lt;p&gt;c++ で下記のようなディスパッチャを作った。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unordered_map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;g_commandMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;使い捨ての python で関数に登録するコードを生成した。&lt;/p&gt;
&lt;h2&gt;第２段階&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PODじゃない型が動くようにする&lt;ul&gt;
&lt;li&gt;constructor/destructor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;脱GC&lt;ul&gt;
&lt;li&gt;コレクションをSTLに置き換える&lt;/li&gt;
&lt;li&gt;std::string&lt;/li&gt;
&lt;li&gt;std::shared_ptr&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;機能ごとにモジュール化&lt;/li&gt;
&lt;li&gt;再入可能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GC_MALLOC から gc_cleanup 継承へ&lt;/h3&gt;
&lt;p&gt;boehm-GC を &lt;code&gt;c++&lt;/code&gt; のクラスで使う方法を調べた。&lt;/p&gt;
&lt;p&gt;http://www.namikilab.tuat.ac.jp/~sasada/prog/boehmgc.html#i-0-5&lt;/p&gt;
&lt;p&gt;&lt;code&gt;w3m&lt;/code&gt; では、 &lt;code&gt;GC&lt;/code&gt; を多用している。&lt;/p&gt;
&lt;p&gt;おもに、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;struct Str&lt;/li&gt;
&lt;li&gt;コレクション&lt;/li&gt;
&lt;li&gt;struct の field&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という感じに。
このうち、 struct の field で使われるタイプの単発の &lt;code&gt;GC_MALLOC&lt;/code&gt; している型を &lt;code&gt;gc_cleanup&lt;/code&gt; 継承にして、 &lt;code&gt;new&lt;/code&gt; で初期化するようにする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bzero, bcopy, memcpy, sizeof&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等でメモリクリアしているところに注意する。
これで、その型は &lt;code&gt;constructor/destructor&lt;/code&gt; が動くようになり、
メンバーに &lt;code&gt;std::string&lt;/code&gt; 等を配置できるようになる。
あとで、 &lt;code&gt;gc_cleanup&lt;/code&gt; から &lt;code&gt;std::shared_ptr&lt;/code&gt; に変更することも視野に入れている。&lt;/p&gt;
&lt;h3&gt;GC文字列 Str&lt;/h3&gt;
&lt;p&gt;アプリ全体で使われていて一挙になくすことはできないのだけど、構造体の末端のメンバーから &lt;code&gt;std::string&lt;/code&gt; に変える。
あと、がんばって &lt;code&gt;const char *&lt;/code&gt; の範囲を増やす。
&lt;code&gt;libwc&lt;/code&gt; から &lt;code&gt;Str&lt;/code&gt; を剥そうと思っていたのだが、逆に &lt;code&gt;libwc&lt;/code&gt; に &lt;code&gt;Str&lt;/code&gt; を封じ込める方向に軌道修正。
&lt;code&gt;indep.c&lt;/code&gt; の便利文字列関数も少しずつ変えてく。&lt;/p&gt;
&lt;h3&gt;グローバル変数を減らす&lt;/h3&gt;
&lt;p&gt;関数の中でグローバル変数にアクセスしている場合(CurrentBufferなど)、これを関数の引数経由とか、クラスのメンバー経由でもらう。面倒でも Getter と Setter を区別して、どこで変更されうるかわかりやすくする。
クラスのメンバーは、 &lt;code&gt;private&lt;/code&gt; 化を試みる。&lt;/p&gt;
&lt;h3&gt;Stream処理&lt;/h3&gt;
&lt;p&gt;多分、最難関の &lt;code&gt;loadGeneralFile&lt;/code&gt; 関数。700行くらいだったか。
goto とか longjmp があってよくわからなかったのだが、慣れてきた。
&lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt;, &lt;code&gt;NNTP ?&lt;/code&gt;, &lt;code&gt;gopher&lt;/code&gt;, &lt;code&gt;ftp&lt;/code&gt;, &lt;code&gt;pipe&lt;/code&gt; 等、&lt;code&gt;http&lt;/code&gt; のプロキシーやリダイレクト、 &lt;code&gt;www-auth&lt;/code&gt; などを一手に処理していて容易に手を付けられない。
何度か整理しようとして悉く撃退されたので、雑にやることにした。
機能を &lt;code&gt;http(https)&lt;/code&gt; に絞ってそれ以外をコメントアウトしてとにかく量を減らす。
プロキシーとか、 &lt;code&gt;dump&lt;/code&gt;, &lt;code&gt;halfload&lt;/code&gt; などのよく知らない機能もどんどん削る。
としてなんとか改造できるようになってきた。&lt;/p&gt;
&lt;p&gt;ここを &lt;code&gt;HttpClient&lt;/code&gt;, &lt;code&gt;LocalFile&lt;/code&gt;, &lt;code&gt;PipeReader&lt;/code&gt; あたりに整理したい。&lt;/p&gt;
&lt;h2&gt;第３段階&lt;/h2&gt;
&lt;p&gt;Tab, Buffer, Line のリンクリストを STL のコレクションに置き換えた。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;という形を目指す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;loadGeneralFile&lt;/code&gt; を解きほぐして、 &lt;code&gt;HTTP&lt;/code&gt; 機能を抽出、リダイレクトまで動くようにできた。
&lt;code&gt;loadGeneralFile&lt;/code&gt; は、&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;OpenStream&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;Send&lt;/span&gt; &lt;span class="nv"&gt;HTTP&lt;/span&gt; &lt;span class="nv"&gt;Request&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;HTTP&lt;/span&gt; &lt;span class="nv"&gt;Response&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nv"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Redirect&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt; で分岐
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;BufferLoader&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Buffer&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;という感じに整理できそう。
HttpとBufferローダーを副作用の無い関数に整理できれば再入可能が見えてくる。
早めに分岐させて、分岐したら合流しない。同じ処理は関数で共有するという方向性で整理。&lt;/p&gt;
&lt;p&gt;Buffer が多機能なので、Document, HttpResponse, FileInfo とかに分割したい。&lt;/p&gt;
&lt;h2&gt;第４段階&lt;/h2&gt;
&lt;p&gt;mainloop の再実装。libuv, libevent 等を検討していたのだけど、 c++ との親和性の高い asio を使うことにした。
&lt;code&gt;tty read (keyboard input)&lt;/code&gt;, &lt;code&gt;signal callback (sigint, winresize)&lt;/code&gt;, &lt;code&gt;alarm&lt;/code&gt; の割り込みを asio 経由にする。
アプリの終了をloop の終了にして、自然に destructor がコールされるようになる。&lt;/p&gt;
&lt;h2&gt;第５段階&lt;/h2&gt;
&lt;p&gt;html parse から term へのレンダリング部分の分解。
やっと解読できて１パス目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部文字コード(wtf-8)に変換&lt;/li&gt;
&lt;li&gt;tokenize&lt;/li&gt;
&lt;li&gt;tag をパースして属性取得 =&amp;gt; パースに成功したら行バッファに書き戻す。フォームの情報を蓄積する。テーブルのレイアウト&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結果として、行のリストと、フォーム情報を得る。&lt;/p&gt;
&lt;p&gt;２パス目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行のリストを再度パース&lt;/li&gt;
&lt;li&gt;非タグ部分をBufferに出力&lt;/li&gt;
&lt;li&gt;Aタグやフォームを Anchor などに出力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という感じだった。
１パス目で html 化するときに知らない属性を捨てたり、内部属性を追加したりしている様子。
この、内部属性がよくわからなくて難しい。&lt;/p&gt;
&lt;h2&gt;文字コード&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;content-charset&lt;/code&gt; =&amp;gt; &lt;code&gt;wtf&lt;/code&gt; =&amp;gt; &lt;code&gt;DisplayCharset&lt;/code&gt; と文字コードを変換して動作していることがわかった。
試しに、&lt;code&gt;utf-8&lt;/code&gt; であることが分かっている &lt;code&gt;html&lt;/code&gt; で &lt;code&gt;wtf&lt;/code&gt; 変換を飛ばしてみたところ表示が壊れた。
&lt;code&gt;wtf&lt;/code&gt; は &lt;code&gt;utf-8&lt;/code&gt; と互換性がないらしい。
http://simonsapin.github.io/wtf-8/
なのかと思ったのだが、違う独自形式かもしれない。&lt;/p&gt;
&lt;p&gt;w3m は、この &lt;code&gt;wtf&lt;/code&gt; エンコーディングで、html タグのパース、文字のバイト幅の判定、文字のカラム幅の判定をしているのだが、
&lt;code&gt;utf-8&lt;/code&gt; では、文字のバイト幅、カラム幅の判定が狂う。
ということで、 &lt;code&gt;utf-8&lt;/code&gt; でのバイト幅判定を自作して &lt;code&gt;wcwidth&lt;/code&gt; を組み合わせてみた。
&lt;code&gt;*#12345;&lt;/code&gt; 形式の &lt;code&gt;unicode&lt;/code&gt; 埋め込みに対応するために、追加で &lt;code&gt;unicode&lt;/code&gt; =&amp;gt; &lt;code&gt;utf-8&lt;/code&gt; 変換も作った。
正しく表示することができた。&lt;/p&gt;
&lt;p&gt;ということで、&lt;code&gt;euc-jp&lt;/code&gt; と &lt;code&gt;shift-jis&lt;/code&gt; と &lt;code&gt;iso-2022-jp&lt;/code&gt; から &lt;code&gt;utf-8&lt;/code&gt; への変換を作れば日本語は対応できそう。
&lt;code&gt;std::string_view&lt;/code&gt;, &lt;code&gt;char32_t&lt;/code&gt;, &lt;code&gt;char8_t&lt;/code&gt; あたりの新しい型を使った &lt;code&gt;\0&lt;/code&gt; 終端に頼らないライブラリを作ってみる。&lt;/p&gt;
&lt;h2&gt;メモ&lt;/h2&gt;
&lt;h3&gt;モジュールに分割&lt;/h3&gt;
&lt;p&gt;機能ごとにモジュールに分割する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UI(frontend)&lt;ul&gt;
&lt;li&gt;Term&lt;ul&gt;
&lt;li&gt;低レベル描画&lt;ul&gt;
&lt;li&gt;termcap の関数を直接呼ぶ。curses の自前実装的な&lt;/li&gt;
&lt;li&gt;マルチバイト、マルチカラムの文字列と密接に関連していて libwc と不可分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;キーボード入力&lt;/li&gt;
&lt;li&gt;マウス入力&lt;/li&gt;
&lt;li&gt;リサイズイベント&lt;/li&gt;
&lt;li&gt;SIGNALハンドリング&lt;ul&gt;
&lt;li&gt;SIGINT =&amp;gt; longjmp でキャンセル処理を実現している。c++ のデストラクタとかまずそう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高レベル描画&lt;ul&gt;
&lt;li&gt;Lineの構築(byte ごとに char と Lineprop がペアになる)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tab&lt;/li&gt;
&lt;li&gt;Buffer&lt;/li&gt;
&lt;li&gt;Message&lt;/li&gt;
&lt;li&gt;Menu&lt;/li&gt;
&lt;li&gt;Keymap&lt;/li&gt;
&lt;li&gt;LineInput&lt;ul&gt;
&lt;li&gt;SearchKey&lt;/li&gt;
&lt;li&gt;History&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IO(transport)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IStream&lt;ul&gt;
&lt;li&gt;union =&amp;gt; class polymorphism化&lt;/li&gt;
&lt;li&gt;file descriptor&lt;/li&gt;
&lt;li&gt;FILE*&lt;/li&gt;
&lt;li&gt;ssl&lt;/li&gt;
&lt;li&gt;memory&lt;/li&gt;
&lt;li&gt;Compression&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LocalCGI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;http&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HttpSession&lt;ul&gt;
&lt;li&gt;HttpRequest&lt;/li&gt;
&lt;li&gt;HttpResponse&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cookie&lt;/li&gt;
&lt;li&gt;redirect&lt;/li&gt;
&lt;li&gt;referer&lt;/li&gt;
&lt;li&gt;https&lt;/li&gt;
&lt;li&gt;ftp&lt;/li&gt;
&lt;li&gt;URL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTML&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTMLtagproc1&lt;/li&gt;
&lt;li&gt;HTMLlineproc2body&lt;ul&gt;
&lt;li&gt;process_form&lt;/li&gt;
&lt;li&gt;process_form_int&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;form&lt;/li&gt;
&lt;li&gt;table&lt;/li&gt;
&lt;li&gt;frame&lt;/li&gt;
&lt;li&gt;term rendering&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字コード&lt;/li&gt;
&lt;li&gt;quote&lt;/li&gt;
&lt;li&gt;url escape&lt;/li&gt;
&lt;li&gt;html escape&lt;/li&gt;
&lt;li&gt;html entity&lt;/li&gt;
&lt;li&gt;char_util&lt;ul&gt;
&lt;li&gt;myctype&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;string_view_util&lt;ul&gt;
&lt;li&gt;strip&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;string_util&lt;ul&gt;
&lt;li&gt;malloc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;リンクをたどる(followLink)&lt;/h3&gt;
&lt;p&gt;followA();
loadLink();
loadGeneralFile();&lt;/p&gt;
&lt;p&gt;cmd_loadURL();
loadGeneralFile();&lt;/p&gt;
&lt;p&gt;cmd_loadURL();
loadGeneralFile();&lt;/p&gt;
&lt;h3&gt;描画する&lt;/h3&gt;
&lt;p&gt;displayBuffer
redrawBuffer
redrawNLine&lt;/p&gt;
&lt;h3&gt;key入力&lt;/h3&gt;</description><category>w3m</category><guid>https://ousttrue.github.io/posts/2020/w3m-mod/</guid><pubDate>Sat, 25 Jul 2020 05:59:50 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (blenderについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/blender.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2022 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Thu, 22 Sep 2022 17:26:43 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Blender-3.0</title><link>https://ousttrue.github.io/posts/2021/summer/blender3/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;Blender-3.0 が面白そうだし bender 活動を再開しよう。
&lt;code&gt;Gingerbread Man&lt;/code&gt; を作りなおそう。&lt;/p&gt;
&lt;h2&gt;Blender-3.0 alpha&lt;/h2&gt;
&lt;h3&gt;build&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/bpy_module"&gt;https://github.com/ousttrue/bpy_module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;build より subversion の更新が遥かに長い。
embree や llvm までいろんなもの入っているな。&lt;/p&gt;
&lt;p&gt;luajit を仕込んだら ffi で色々な関数にアクセスできるかもしれないな。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/scoder/lupa"&gt;https://github.com/scoder/lupa&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;python-3.9&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Blender-2.93&lt;/code&gt; で既に python-3.9 になっていた。
python-3.9 の型ヒント付きで addon 書くで。
Blender に合わせて python のバージョンを上げるスタイル。&lt;/p&gt;
&lt;h3&gt;asset browser&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ameblo.jp/kay-nea/entry-12688563203.html"&gt;Blender 3.0 Alphaを触ってみた　【　Blender 3.0 Alpha　】&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;pose library&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=TNbdj6qbrAg"&gt;https://www.youtube.com/watch?v=TNbdj6qbrAg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;USD&lt;/h3&gt;
&lt;p&gt;オープンソースで簡単なオーサリングができるツールがあるといいのだけど、現状 Houdini の Solaris しか存在しない？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/remiria/articles/a4c8e4a80caec7"&gt;Blender 3.0 のUSD対応状況を調べる(1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;addon&lt;/h2&gt;
&lt;p&gt;作りかけで放置している&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ousttrue/io_scene_yup"&gt;https://github.com/ousttrue/io_scene_yup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ousttrue/pyimpex"&gt;https://github.com/ousttrue/pyimpex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>blender</category><guid>https://ousttrue.github.io/posts/2021/summer/blender3/</guid><pubDate>Sun, 29 Aug 2021 15:00:00 GMT</pubDate></item><item><title>meta-rig を組み立てる</title><link>https://ousttrue.github.io/qiita/meta-rig-wozu-mili-teru/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://qiita.com/ousttrue/items/915e81391809171e975f"&gt;https://qiita.com/ousttrue/items/915e81391809171e975f&lt;/a&gt;&lt;/p&gt;</description><category>blender</category><category>blender2.8</category><category>qiita</category><guid>https://ousttrue.github.io/qiita/meta-rig-wozu-mili-teru/</guid><pubDate>Sun, 08 Nov 2020 18:05:23 GMT</pubDate></item><item><title>pyimpex</title><link>https://ousttrue.github.io/github/pyimpex/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://github.com/ousttrue/pyimpex"&gt;https://github.com/ousttrue/pyimpex&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;import/export for Blender-2.83&lt;/p&gt;</description><category>blender</category><category>python</category><category>repository</category><guid>https://ousttrue.github.io/github/pyimpex/</guid><pubDate>Mon, 12 Oct 2020 10:36:47 GMT</pubDate></item><item><title>Blender2.83でUnity向けヒューマノイドを Weight Paint する</title><link>https://ousttrue.github.io/qiita/blender283deunityxiang-kehiyumanoidowo-weight-paint-suru/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://qiita.com/ousttrue/items/ecb442122af6966dcefd"&gt;https://qiita.com/ousttrue/items/ecb442122af6966dcefd&lt;/a&gt;&lt;/p&gt;</description><category>blender</category><category>qiita</category><guid>https://ousttrue.github.io/qiita/blender283deunityxiang-kehiyumanoidowo-weight-paint-suru/</guid><pubDate>Mon, 08 Jun 2020 14:44:56 GMT</pubDate></item><item><title>bpy_module</title><link>https://ousttrue.github.io/github/bpy_module/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://github.com/ousttrue/bpy_module"&gt;https://github.com/ousttrue/bpy_module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;build blender as module&lt;/p&gt;</description><category>blender</category><category>python</category><category>repository</category><guid>https://ousttrue.github.io/github/bpy_module/</guid><pubDate>Mon, 02 Dec 2019 06:13:38 GMT</pubDate></item><item><title>Blenderのモジュールビルドとインストール(Windows)</title><link>https://ousttrue.github.io/qiita/blendernomoziyurubirudotoinsutoruwindows/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://qiita.com/ousttrue/items/db68f5a1939fd3a9d982"&gt;https://qiita.com/ousttrue/items/db68f5a1939fd3a9d982&lt;/a&gt;&lt;/p&gt;</description><category>blender</category><category>python</category><category>qiita</category><guid>https://ousttrue.github.io/qiita/blendernomoziyurubirudotoinsutoruwindows/</guid><pubDate>Wed, 08 Aug 2018 14:44:01 GMT</pubDate></item><item><title>io_scene_yup</title><link>https://ousttrue.github.io/github/io_scene_yup/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://github.com/ousttrue/io_scene_yup"&gt;https://github.com/ousttrue/io_scene_yup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Y-UP Scene importer and exporter for Blender&lt;/p&gt;</description><category>blender</category><category>python</category><category>repository</category><guid>https://ousttrue.github.io/github/io_scene_yup/</guid><pubDate>Fri, 27 Jul 2018 16:28:20 GMT</pubDate></item><item><title>blpymeshio</title><link>https://ousttrue.github.io/github/blpymeshio/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://github.com/ousttrue/blpymeshio"&gt;https://github.com/ousttrue/blpymeshio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;separate blender part from pymeshio&lt;/p&gt;</description><category>blender</category><category>python</category><category>repository</category><guid>https://ousttrue.github.io/github/blpymeshio/</guid><pubDate>Sun, 15 Apr 2018 16:14:06 GMT</pubDate></item><item><title>SampleHumanoidModel</title><link>https://ousttrue.github.io/github/samplehumanoidmodel/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://github.com/ousttrue/SampleHumanoidModel"&gt;https://github.com/ousttrue/SampleHumanoidModel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;blender model&lt;/p&gt;</description><category>blender</category><category>repository</category><guid>https://ousttrue.github.io/github/samplehumanoidmodel/</guid><pubDate>Thu, 22 Mar 2018 02:08:30 GMT</pubDate></item><item><title>BlenderのAddOnを、VSCodeでデバッグする</title><link>https://ousttrue.github.io/posts/2017/blender_addon_vscode/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;VSCodeのリモートデバッグを利用してBlenderのPythonにデバッガをアタッチする。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/ptvsd"&gt;PTVSD&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VisualStudioのPTVS向けのリモートデバッグモジュール。VSCodeも対応しているらしい。
リモート側でptvsdをimportして待ち受けて、VisualStudio側からtcp経由でアタッチする。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ptvsd&lt;/span&gt;
&lt;span class="n"&gt;ptvsd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enable_attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'secret'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'0.0.0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;'Windows'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ptvsd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for_attach&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# スクリプトが終わらないようにブロックする&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;+--------------+
|remoteのpython|
|         ptvsd|tcp:3000 &amp;lt;-- VisualStudio attach
+--------------+
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;dos窓&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&amp;gt; netstat -an | find "3000"
  TCP         0.0.0.0:3000           0.0.0.0:0              LISTENING
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;確かに待っている。
TCP経由なのでptvsd側が、LinuxやRasPi、Blenderの組み込みPythonなどなんであってもアタッチできる。
素のPythonでやってみる&lt;/p&gt;
&lt;p&gt;Windows10(64bit)
Python-3.6
PTVSD-3.0.0&lt;/p&gt;
&lt;p&gt;PTVSDのバージョンが3.0.0でないと
デバッグアダプタープロセスが予期せず終了しました。&lt;/p&gt;
&lt;p&gt;等のエラーが出てうまくいかぬ。&lt;/p&gt;
&lt;p&gt;https://github.com/DonJayamanne/pythonVSCode/issues/1039&lt;/p&gt;
&lt;p&gt;ptvsdのインストール&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&amp;gt; py -3.6 -m pip install ptvsd==3.0.0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;testプロジェクト&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&amp;gt; mkdir ptvsd_test
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;VSCodeでptvsd_testフォルダを開く。
testスクリプト
ptvsd_test/main.py&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# PTVSDを準備する&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ptvsd&lt;/span&gt;
&lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'0.0.0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ptvsd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enable_attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'my_secret'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'wait_for_attach...'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ptvsd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for_attach&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# リモートデバッガの接続を待つ&lt;/span&gt;

&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 接続後少し待つ&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'connected'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# デバッグするコード&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&amp;gt;py -3.6 main.py
wait_for_attach... ('0.0.0.0', 3000)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;VSCodeから接続
ptvsd_test/main.pyを開いてデバッグ開始。構成の追加でpythonを選択する。&lt;/p&gt;
&lt;p&gt;ptvsd_test/.vscode/launch.json&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// IntelliSense を使用して利用可能な属性を学べます。&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 既存の属性の説明をホバーして表示します。&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 詳細情報は次を確認してください: https://go.microsoft.com/fwlink/?linkid=830387&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"stopOnEntry"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"pythonPath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${config:python.pythonPath}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"program"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${file}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"cwd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceRoot}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"envFile"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceRoot}/.env"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"debugOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="s2"&gt;"WaitOnAbnormalExit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="s2"&gt;"WaitOnNormalExit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="s2"&gt;"RedirectOutput"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// これ&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Python: Attach"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"attach"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"localRoot"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceRoot}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"remoteRoot"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceRoot}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"secret"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my_secret"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 以降省略&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;デバッグの選択メニューでPython:Attachを選択。改めて開始。
うまく接続できればデバッグコンソールにprintした内容が表示される。
breakポイントもステップ実行も可能。素晴らしい。
BlenderのAddOnでやってみる&lt;/p&gt;
&lt;p&gt;https://github.com/Barbarbarbarian/Blender-VScode-Debugger&lt;/p&gt;
&lt;p&gt;これ。
BlenderのPythonにptvsdをインストールする
Blenderを起動して以下のスクリプトを実行する。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;適当なパスを選んでそこにptvsd-3.0.0をコピーする。
ptvsd-3.0.0.zipをダウンロード。
解凍してptvsdフォルダをBlenderのsys.pathに含まれていたC:/Program Files/Blender Foundation/Blenderにコピーした。
Blender-VScode-Debuggerをインストールする&lt;/p&gt;
&lt;p&gt;File - UserPreferences - Add-ons と潜ってinstall Add-on from FileボタンからBlender_VScode_Debugger.pyを選択する。
Add-onsからDevelopment: Debugger for Visual Codeを選択してチェックボックスをOnにする
三角を押してPreferencesを展開、Path of PTVSD module:にptvsdをインストールしたパスを設定する(うちではC:/Program Files/Blender Foundation/Blender)
Save - User Settings&lt;/p&gt;
&lt;p&gt;実行してみる
3DViewでspaceを押してConnect to Visual Studio Code Debuggerを選択。
dos窓&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&amp;gt; netstat -an | find "3000"
  TCP         0.0.0.0:3000           0.0.0.0:0              LISTENING
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;待っている。
試しにAddOnを作ってみる
例えばWindows版のBlenderのAddOnパスは
C:/Users/&lt;strong&gt;USER_NAME&lt;/strong&gt;/AppData/Roaming/Blender Foundation/Blender/2.79/scripts/addons
です。
Hello AddOnを作る。
hello.pyとhello/&lt;strong&gt;init&lt;/strong&gt;.pyという選択肢があるが、後者で作る。
gitやVSCodeを使うのだからフォルダが独立している方がよろしい。
helloフォルダを作って、VSCodeでフォルダを開いた。
hello/&lt;strong&gt;init&lt;/strong&gt;.pyを作成。&lt;/p&gt;
&lt;p&gt;https://docs.blender.org/manual/en/dev/advanced/scripting/addon_tutorial.html&lt;/p&gt;
&lt;p&gt;を参考に。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;bl_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Move X Axis"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ObjectMoveX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""My Object Moving Script"""&lt;/span&gt;      &lt;span class="c1"&gt;# Use this as a tool-tip for menu items and buttons.&lt;/span&gt;
    &lt;span class="n"&gt;bl_idname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"object.move_x"&lt;/span&gt;        &lt;span class="c1"&gt;# Unique identifier for buttons and menu items to reference.&lt;/span&gt;
    &lt;span class="n"&gt;bl_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Move X by One"&lt;/span&gt;         &lt;span class="c1"&gt;# Display name in the interface.&lt;/span&gt;
    &lt;span class="n"&gt;bl_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'REGISTER'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'UNDO'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;# Enable undo for the operator.&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="c1"&gt;# execute() is called when running the operator.&lt;/span&gt;

        &lt;span class="c1"&gt;# The original script&lt;/span&gt;
        &lt;span class="n"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'FINISHED'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;            &lt;span class="c1"&gt;# Lets Blender know the operator finished successfully.&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectMoveX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectMoveX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# This allows you to run the script directly from Blenders Text editor&lt;/span&gt;
&lt;span class="c1"&gt;# to test the add-on without having to install it.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Blenderを再起動して、AddOnのチェックボックスを有効にする。
3DViewでスペースを押してMove X by oneを実行してみる。
動けば準備完了。
AddOnをステップ実行してみる&lt;/p&gt;
&lt;p&gt;3DViewでConnect to Visual Studio Code Debugger
VSCodeで構成を追加してRemoteDebuggerでアタッチ&lt;/p&gt;
&lt;p&gt;hello/.vscode/launch.json&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Python: Attach"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"attach"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"localRoot"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceRoot}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"remoteRoot"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceRoot}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"secret"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my_secret"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;VSCodeでexecute関数のscene=context.sceneにbreak pointをセットする
3DViewでMove X by one&lt;/p&gt;
&lt;p&gt;うまくいった。&lt;/p&gt;
&lt;h3&gt;Memo&lt;/h3&gt;
&lt;p&gt;Blenderプロセスが生きていればいいのでptvsd.wait_for_attach()する必要はない
Pythonのターンになるまで接続が処理されないので、VSCodeからアタッチした後AddOnを実行するまでVSCodeは待ち状態になる&lt;/p&gt;</description><category>blender</category><category>vscode</category><guid>https://ousttrue.github.io/posts/2017/blender_addon_vscode/</guid><pubDate>Wed, 22 Nov 2017 15:00:00 GMT</pubDate></item></channel></rss>
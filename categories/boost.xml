<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (boostについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/boost.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2022 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Sat, 14 May 2022 17:17:58 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>CMakeでBoost.Pythonを使う</title><link>https://ousttrue.github.io/posts/2017/08/cmake_find_boost_python/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;Windows上のCMakeでFIND_PACKAGE(Boost)する件について。&lt;/p&gt;
&lt;p&gt;Boost.Pythonのビルド
C:/boost_1_61_0に解凍して、b2 --with-pythonしたとする。
のようなディレクトリ構成。
C:/boost_1_61_0
    stage
        lib
            boost_python.lib&lt;/p&gt;
&lt;p&gt;FIND_PACKAGE
BOOST.Pythonを使う場合は下記の記述をして、-DBOOST_ROOT=C:/boost_1_61_0を指定してやるとcmakeはBoost.Pythonを見つけることができる。
ただし、検索パスが${BOOST_ROOT}/stage/lib決め打ち。
FIND_PACKAGE (Boost COMPONENTS PYTHON REQUIRED)
MESSAGE(STATUS ${Boost_LIBRARIES})&lt;/p&gt;
&lt;p&gt;見つかった
optimizedD:/lib/boost_1_61_0/stage/lib/boost_python-vc140-mt-1_61.libdebugD:/lib/boost_1_61_0/stage/lib/boost_python-vc140-mt-gd-1_61.lib&lt;/p&gt;
&lt;p&gt;Python3は？
FIND_PACKAGE (Boost COMPONENTS python3 REQUIRED)
MESSAGE(STATUS ${Boost_LIBRARIES})&lt;/p&gt;
&lt;p&gt;でいける。
しかし、警告が出た。
CMake Warning at D:/Program Files/CMake/share/cmake-3.9/Modules/FindBoost.cmake:1564 (message):
  No header defined for python3; skipping header check
Call Stack (most recent call first):
  CMakeLists.txt:42 (FIND_PACKAGE)&lt;/p&gt;
&lt;p&gt;3がついてなくても同じだった
stage/libに出力されているboost_python3.dllとboost_python.dllは同じバイナリぽい。
static, sharedの呼び分けは？
後で。
FindBoost&lt;/p&gt;
&lt;p&gt;https://cmake.org/cmake/help/latest/module/FindBoost.html&lt;/p&gt;
&lt;p&gt;しかし
FIND_PACKAGEした結果のBoost_LIBRARIESを使うのには注意が必要。
ネイティブモジュール開発で、デバッグ版にRelease版のPythonをリンクする場合(通常そうする)に、Boost.PytnonもRelease版にリンクするべきなのでここではまりうる(コンパイルは通るが実行時に謎エラーが出る)。LINK_DIRECTORIESを使って、リンク対象はBOOSTのautolink頼りの方が確実かもしれない。&lt;/p&gt;
&lt;p&gt;BOOST_ALL_NO_LIB を定義して Boost_LIBRARIESにリンクする
Boost_LIBRARIESを使わずに、BoostのAutoLinkに従う&lt;/p&gt;
&lt;p&gt;のいずれかになるが、ネイティブモジュール開発では後者がおすすめか。&lt;/p&gt;</description><category>boost</category><category>cmake</category><category>python</category><guid>https://ousttrue.github.io/posts/2017/08/cmake_find_boost_python/</guid><pubDate>Tue, 08 Aug 2017 15:00:00 GMT</pubDate></item></channel></rss>
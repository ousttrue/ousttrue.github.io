<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (cmakeについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/cmake.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2022 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Sat, 14 May 2022 17:22:18 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>cmake_book</title><link>https://ousttrue.github.io/github/cmake_book/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://github.com/ousttrue/cmake_book"&gt;https://github.com/ousttrue/cmake_book&lt;/a&gt;&lt;/p&gt;</description><category>cmake</category><category>repository</category><guid>https://ousttrue.github.io/github/cmake_book/</guid><pubDate>Mon, 14 Jun 2021 08:36:32 GMT</pubDate></item><item><title>VCPKGを利用して、Windows上でgrpc_cppする</title><link>https://ousttrue.github.io/qiita/vcpkgwoli-yong-shite-windowsshang-degrpc_cppsuru/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://qiita.com/ousttrue/items/0b28def0d03925117705"&gt;https://qiita.com/ousttrue/items/0b28def0d03925117705&lt;/a&gt;&lt;/p&gt;</description><category>c++</category><category>cmake</category><category>grpc</category><category>qiita</category><category>vcpkg</category><category>vscode</category><guid>https://ousttrue.github.io/qiita/vcpkgwoli-yong-shite-windowsshang-degrpc_cppsuru/</guid><pubDate>Wed, 06 May 2020 02:46:34 GMT</pubDate></item><item><title>CMakeでBoost.Pythonを使う</title><link>https://ousttrue.github.io/posts/2017/08/cmake_find_boost_python/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;Windows上のCMakeでFIND_PACKAGE(Boost)する件について。&lt;/p&gt;
&lt;p&gt;Boost.Pythonのビルド
C:/boost_1_61_0に解凍して、b2 --with-pythonしたとする。
のようなディレクトリ構成。
C:/boost_1_61_0
    stage
        lib
            boost_python.lib&lt;/p&gt;
&lt;p&gt;FIND_PACKAGE
BOOST.Pythonを使う場合は下記の記述をして、-DBOOST_ROOT=C:/boost_1_61_0を指定してやるとcmakeはBoost.Pythonを見つけることができる。
ただし、検索パスが${BOOST_ROOT}/stage/lib決め打ち。
FIND_PACKAGE (Boost COMPONENTS PYTHON REQUIRED)
MESSAGE(STATUS ${Boost_LIBRARIES})&lt;/p&gt;
&lt;p&gt;見つかった
optimizedD:/lib/boost_1_61_0/stage/lib/boost_python-vc140-mt-1_61.libdebugD:/lib/boost_1_61_0/stage/lib/boost_python-vc140-mt-gd-1_61.lib&lt;/p&gt;
&lt;p&gt;Python3は？
FIND_PACKAGE (Boost COMPONENTS python3 REQUIRED)
MESSAGE(STATUS ${Boost_LIBRARIES})&lt;/p&gt;
&lt;p&gt;でいける。
しかし、警告が出た。
CMake Warning at D:/Program Files/CMake/share/cmake-3.9/Modules/FindBoost.cmake:1564 (message):
  No header defined for python3; skipping header check
Call Stack (most recent call first):
  CMakeLists.txt:42 (FIND_PACKAGE)&lt;/p&gt;
&lt;p&gt;3がついてなくても同じだった
stage/libに出力されているboost_python3.dllとboost_python.dllは同じバイナリぽい。
static, sharedの呼び分けは？
後で。
FindBoost&lt;/p&gt;
&lt;p&gt;https://cmake.org/cmake/help/latest/module/FindBoost.html&lt;/p&gt;
&lt;p&gt;しかし
FIND_PACKAGEした結果のBoost_LIBRARIESを使うのには注意が必要。
ネイティブモジュール開発で、デバッグ版にRelease版のPythonをリンクする場合(通常そうする)に、Boost.PytnonもRelease版にリンクするべきなのでここではまりうる(コンパイルは通るが実行時に謎エラーが出る)。LINK_DIRECTORIESを使って、リンク対象はBOOSTのautolink頼りの方が確実かもしれない。&lt;/p&gt;
&lt;p&gt;BOOST_ALL_NO_LIB を定義して Boost_LIBRARIESにリンクする
Boost_LIBRARIESを使わずに、BoostのAutoLinkに従う&lt;/p&gt;
&lt;p&gt;のいずれかになるが、ネイティブモジュール開発では後者がおすすめか。&lt;/p&gt;</description><category>boost</category><category>cmake</category><category>python</category><guid>https://ousttrue.github.io/posts/2017/08/cmake_find_boost_python/</guid><pubDate>Tue, 08 Aug 2017 15:00:00 GMT</pubDate></item><item><title>WindowsでPyAlembicできるのか</title><link>https://ousttrue.github.io/posts/2017/08/pyalembic/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;Windows上でPyAlembicを使いたいのだができるのか。
素直にLinuxでやるべきでは・・・
Windows10(64bit) + Python-3.6(64bit)&lt;/p&gt;
&lt;p&gt;作業場。&lt;/p&gt;
&lt;p&gt;https://github.com/ousttrue/openexr&lt;/p&gt;
&lt;p&gt;Anaconda3(Windows10 64bit)でモジュール探す&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;conda install -c conda-forge alembic&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;しかし、これは違うAlembicだった。
Pythonのalembicは、database migrations toolと名前が被っております。
なるほど・・・。
Python2.7なら&lt;/p&gt;
&lt;p&gt;http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyalembic&lt;/p&gt;
&lt;p&gt;あとから発見。わいは、Python3.6にしたいので。
自前でビルドを試みる
alembic-1.7.1/python/PyAlembicがそれですな。
問題が２つある。&lt;/p&gt;
&lt;p&gt;Python2(Python3にしたい)
Boost.Python(PyBind11にしてリンク問題とおさらばしたい)&lt;/p&gt;
&lt;p&gt;さすがにPyBind11差し替えはやるにしても後にするべきなので、 Python3化だけやる。
Boost.Pythonのビルド
Boost.Pythonで使うPythonを明示するには、user-config.jamに記述する。
BOOST_DIR/user-conifg.jam
using python 
    : 3.6                   # Version
    : D:\Anaconda3\python.exe      # Python Path
    : D:\Anaconda3\include         # include path
    : D:\Anaconda3\libs            # lib path(s)
    : &lt;define&gt;BOOST_ALL_NO_LIB=1
    ;&lt;/define&gt;&lt;/p&gt;
&lt;p&gt;ビルド
boost&amp;gt; b2.exe -j3 --stagedir=stage\x86_64 link=shared runtime-link=shared threading=multi toolset=msvc-14.0 address-model=64 --with-python&lt;/p&gt;
&lt;p&gt;link=sharedにしてdllを生成することが必要。
これは、iex.pydとimath.pyd間でBoost.Pythonのstatic変数を共有するために必須である(pyexの型登録周りか)。
IlmBaseを修正
ilmbase-2.2.0/IexMath/IexMathFloatExc.h
の以下の部分を修正する。多分、記述ミスなのだけど誰もWindowsビルドしないので気付かれていないのであろう。
//#if defined(IEX_EXPORTS)↲&lt;/p&gt;
&lt;h2&gt;if defined(IEXMATH_EXPORTS)↲&lt;/h2&gt;
&lt;p&gt;これでilmbaseをビルドしておく。vcpkgを使った。
alembicを修正
alembic-1.7.1/lib/Alembic/AbcCoreLayer/CMakeLists.txtを修正してヘッダを追加する(PyAlembicが使う)
INSTALL(FILES Read.h Util.h
    Foundation.h # 追加
    DESTINATION include/Alembic/AbcCoreLayer)&lt;/p&gt;
&lt;p&gt;これも、vcpkgを使った。
PyIlmBaseのビルド
OpenEXRのサイトにあるpyilmbase-2.2.0tar.gzを使おうとしたのだけど、githubの方が新しいようなのでこちらを使う。
Python3向けの修正
Python2とPytnon3間での非互換によるコンパイルエラーを直していく。&lt;/p&gt;
&lt;p&gt;PySliceObject_XXX -&amp;gt; PyObject_XXX
PyInt_XXX -&amp;gt; PyLong_XXX
PyString_AsString -&amp;gt; PyUnicode_AsUTF8
_PyThreadState_Current -&amp;gt; _PyThreadState_UncheckedGet()&lt;/p&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;Python3 Advent Calendar - Pythonで2/3両方で動くコードを書く(C/API)
Fix build for Python 3.5
http://py3c.readthedocs.io/en/latest/guide.html&lt;/p&gt;
&lt;p&gt;CMake設定&lt;/p&gt;
&lt;p&gt;CMAKE_INSTALL_PREFIX
BOOST_ROOT
ILMBASE_PACKAGE_PREFIX
FIND_PACKAGE(numpy)をコメントアウト
DebugでもPython36.libにリンクするように、#include &lt;python.h&gt;を除去(boost/python.hpp経由でインクルードさせればそうなる)&lt;/python.h&gt;&lt;/p&gt;
&lt;p&gt;ビルドが通るようになった。
PyAlembicのビルド
当初、AlembicのプロジェクトでPythonフラグを有効にして一緒にビルドしようとしていたが、PyIlmBase傘下にPyAlembicをコピーする方式に変えた。
alembic-1.7.1/python/PyAlembicをilmbase-2.2.0/PyIlmBaseにコピーして、CMakeLists.txtを調整する。
CMake設定&lt;/p&gt;
&lt;p&gt;Alembic_ROOT&lt;/p&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;uimac実装メモ - PyImath&lt;/p&gt;
&lt;p&gt;PyAlembicのビルドが通ったので実行してみよう
PyAlembic/Tests/testPolyMesh.pyを動かしてみようと思う。
こういう感じに準備する。
testPolyMesh.py
iex.pyd
PyIex.dll
imath.pyd
PyImath.dll
alembic.lib
alembic.pyd
boost_python-vc140-mt-1_61.dll # debug buildもこれ&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C:/python36/python.exe testPolyMesh.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;import alembicでクラッシュする。デバッガで追ってみると、モジュールの初期化でエラーが発生している。一個ずつ直す。
初期化の修正
Python3化による変更？
AbcView
今回の作業目標。&lt;/p&gt;
&lt;p&gt;http://alembic.github.io/abcview/&lt;/p&gt;
&lt;p&gt;これを動作させたい。
AbcView has the following requirements:&lt;/p&gt;
&lt;p&gt;Python 2.6+ =&amp;gt; Python 3.6 で動くように改造する(print文とか)
PyAlembic。できた
PyAbcOpenGL。できた
PyOpenGL。pip
argparse。pip
PyQt4。http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyalembic
numpy-mkl。http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyalembic&lt;/p&gt;
&lt;p&gt;PyQt4をインストール&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/22640640/how-to-install-pyqt4-on-windows-using-pip
http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyqt4&lt;/p&gt;
&lt;p&gt;こんな感じで公式のPython3.6(64bit)に対してインストール。
D:\Python36\Scripts\pip.exe install .\PyQt4-4.11.4-cp36-cp36m-win_amd64.whl&lt;/p&gt;
&lt;p&gt;https://www.tutorialspoint.com/pyqt/pyqt_hello_world.htm&lt;/p&gt;
&lt;p&gt;import sys
from PyQt4 import QtGui&lt;/p&gt;
&lt;p&gt;def window():
    app = QtGui.QApplication(sys.argv)
    w = QtGui.QWidget()
    b = QtGui.QLabel(w)
    b.setText("Hello World!")
    w.setGeometry(100,100,200,50)
    b.move(50,20)
    w.setWindowTitle("PyQt")
    w.show()
    sys.exit(app.exec_())&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    window()&lt;/p&gt;
&lt;p&gt;動いた。
alembicgl.pyd, alembic.pyd, imath.pyd, iex.pydと依存dll群をwheel化する
同じdllを参照するpydを同じフォルダに配置したいので、
共通の親モジュールとしてilmを定義してその中にすべてのpydとdllを収めることにした。
そのうえでこれを間接的にエクスポートするモジュール’iex’, ‘imath’, ‘alembic’, ‘alembicgl’
を作る計画。
ilm
    + &lt;strong&gt;init&lt;/strong&gt;.py
    + iex.pyd
    + imath.pyd
    + alembic.pyd
    + alembicgl.pyd
    + PyEx.dll
    + PyImath.dll
    + boost_python.dll
    + Alembic.dll # VCPKG BUILD
    + ilmbase.dll # VCPKG BUILD
    + iex.dll # VCPKG BUILD
    + imath.dll # VCPKG BUILD
    + half.dll # VCPKG BUILD
    + hdf5.dll # VCPKG BUILD
    + zip.dll # VCPKG BUILD
    + szip.dll # VCPKG BUILD
iex
    + &lt;strong&gt;init&lt;/strong&gt;.py # ilm.iexを公開
imath
    + &lt;strong&gt;init&lt;/strong&gt;.py # ilm.imathを公開
alembic
    + &lt;strong&gt;init&lt;/strong&gt;.py # ilm.alembicを公開
alembicgl
    + &lt;strong&gt;init&lt;/strong&gt;.py # ilm.alembicglを公開
setup.py&lt;/p&gt;
&lt;p&gt;iex/init.py
from ilm.iex import *&lt;/p&gt;
&lt;p&gt;こういうのをiex, imath, alembic, alembicglそれぞれに作った。
setup.py&lt;/p&gt;
&lt;h2&gt;!/usr/bin/env python&lt;/h2&gt;
&lt;p&gt;from setuptools import setup, Distribution&lt;/p&gt;
&lt;p&gt;setup(
        name='alembic',
        version='0.1',
        description='Alembic Library',
        packages=['ilm', 'iex', 'imath', 'alembic', 'alembicgl'],
        package_data={
            'ilm':['&lt;em&gt;.pyd', '&lt;/em&gt;.dll'],
            },
        )&lt;/p&gt;
&lt;p&gt;py_package&amp;gt; D:\Python36\python.exe setup.py bidst_wheel
py_package&amp;gt; D:\Python36\Scripts\pip.exe install .\dist\alembic-0.1-cp36-cp36m-win_amd64.whl&lt;/p&gt;
&lt;p&gt;AbcViewを実行してみる
こういう感じに配置して、abcview_main.pyを実行してみる。
abcview_main.py # bin/abcviewから改名(名前がフォルダと被らないように変更)
abcview
    &lt;strong&gt;init&lt;/strong&gt;.py&lt;/p&gt;
&lt;p&gt;python2仕様の部分をまとめて修正。&lt;/p&gt;
&lt;p&gt;https://docs.python.jp/3/library/2to3.html&lt;/p&gt;
&lt;p&gt;AbcView&amp;gt; D:\Python36\python.exe D:\Python36\Tools\scripts\2to3.py -w .&lt;/p&gt;
&lt;p&gt;print文、except文などの定型的な文法問題はこれで一網打尽。ディレクトリを指定することでまとめて処理できる。
file.toAscii() =&amp;gt; file
これもPython2との非互換か。
QtCore.QString(str(value)) =&amp;gt; str(value)
QStringは、PythonのStringでよさげ。
動いた&lt;/p&gt;
&lt;p&gt;https://github.com/ousttrue/openexr/releases/tag/v0.1&lt;/p&gt;
&lt;p&gt;タイムラインを操作したら蛸が動いた。&lt;/p&gt;</description><category>cg</category><category>cmake</category><category>python</category><guid>https://ousttrue.github.io/posts/2017/08/pyalembic/</guid><pubDate>Sun, 06 Aug 2017 15:00:00 GMT</pubDate></item><item><title>cmakeのfind_package</title><link>https://ousttrue.github.io/posts/2017/07/cmake_find_package/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;cmakeのFIND_PACKAGEわかりずらいよ。もやもやするものがある。&lt;/p&gt;
&lt;p&gt;GLUTの例
検証用に小さい例を作ってみた。&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/9460242/how-to-compile-glut-opengl-project-with-cmake-and-kdevelop-in-linux&lt;/p&gt;
&lt;p&gt;これを参考にしたのだけどちょっと手直しした。&lt;/p&gt;
&lt;p&gt;ADD_EXECUTABLEの前にINCLUDE_DIRECTORIESする必要がある
OPENGL_INCLUDE_DIRSじゃなくてOPENGL_INCLUDE_DIR
GLUT_INCLUDE_DIRSじゃなくてGLUT_INCLUDE_DIR&lt;/p&gt;
&lt;p&gt;Linuxとかだとdistributionがcmakeファイルを管理してたりするかもしれん。
main.cpp&lt;/p&gt;
&lt;h2&gt;include &lt;gl&gt;&lt;/gl&gt;&lt;/h2&gt;
&lt;p&gt;void display(void)
{
}&lt;/p&gt;
&lt;p&gt;int main(int argc, char *argv[])
{
    glutInit(&amp;amp;argc, argv);
    glutCreateWindow(argv[0]);
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}&lt;/p&gt;
&lt;p&gt;CMakeLists.txt
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(hello)&lt;/p&gt;
&lt;p&gt;FIND_PACKAGE(OpenGL REQUIRED)
MESSAGE(STATUS ${OPENGL_LIBRARIES})
MESSAGE(STATUS ${OPENGL_INCLUDE_DIR})&lt;/p&gt;
&lt;p&gt;FIND_PACKAGE(GLUT REQUIRED)
MESSAGE(STATUS ${GLUT_LIBRARY})
MESSAGE(STATUS ${GLUT_INCLUDE_DIR})&lt;/p&gt;
&lt;p&gt;INCLUDE_DIRECTORIES(
    ${OPENGL_INCLUDE_DIR}
    ${GLUT_INCLUDE_DIR}
    )
ADD_DEFINITIONS(
    -DFREEGLUT_LIB_PRAGMAS=0 # avoid pragma
    )
ADD_EXECUTABLE(hello 
    main.cpp
    )
TARGET_LINK_LIBRARIES(hello
    ${OPENGL_LIBRARIES}
    ${GLUT_LIBRARY}
    )&lt;/p&gt;
&lt;p&gt;実行時のメッセージ
-- glu32opengl32
--
-- D:/vcpkg/installed/x64-windows/lib/freeglut.lib
-- D:/vcpkg/installed/x64-windows/include
-- Configuring done
-- Generating done&lt;/p&gt;
&lt;p&gt;なぜかvcpkgのfreeglutを発見してくれた。
vcpkgがcmakeの探索パスを追加しているぽい。レジストリとかか？
まず、第1に
FIND_PACKAGEの結果として如何なる変数が増えるのかが分からん。&lt;/p&gt;
&lt;p&gt;https://cmake.org/Wiki/CMake:How_To_Find_Libraries#How_package_finding_works&lt;/p&gt;
&lt;p&gt;慣例では、下記のようになっている。&lt;/p&gt;
&lt;p&gt;_FOUND
_INCLUDE_DIRS or _INCLUDES
_LIBRARIES or _LIBRARIES or _LIBS
_DEFINITIONS&lt;/p&gt;
&lt;p&gt;強制じゃなくて規約なので各種表記ブレの余地が危険を醸し出している。
大文字小文字(find_package(glut)に対して${GLUT_FOUND})、複数単数(DIR, DIRS)、短縮(LIBRARIES, LIBS)とか一貫性が。はまりそうだー。
とりあえあず、標準のパッケージに関してはコマンドから問い合わせることができる。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cmake --help-module OpenGL
FindOpenGL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;FindModule for OpenGL and GLU.&lt;/p&gt;
&lt;p&gt;IMPORTED Targets
^^^^^^^^^^^^^^^^&lt;/p&gt;
&lt;p&gt;This module defines the &lt;code&gt;IMPORTED&lt;/code&gt; targets:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OpenGL::GL&lt;/code&gt;
 Defined if the system has OpenGL.
&lt;code&gt;OpenGL::GLU&lt;/code&gt;
 Defined if the system has GLU.&lt;/p&gt;
&lt;p&gt;Result Variables
^^^^^^^^^^^^^^^^&lt;/p&gt;
&lt;p&gt;This module sets the following variables:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OPENGL_FOUND&lt;/code&gt;
 True, if the system has OpenGL.
&lt;code&gt;OPENGL_XMESA_FOUND&lt;/code&gt;
 True, if the system has XMESA.
&lt;code&gt;OPENGL_GLU_FOUND&lt;/code&gt;
 True, if the system has GLU.
&lt;code&gt;OPENGL_INCLUDE_DIR&lt;/code&gt;
 Path to the OpenGL include directory.
&lt;code&gt;OPENGL_LIBRARIES&lt;/code&gt;
 Paths to the OpenGL and GLU libraries.&lt;/p&gt;
&lt;p&gt;If you want to use just GL you can use these values:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OPENGL_gl_LIBRARY&lt;/code&gt;
 Path to the OpenGL library.
&lt;code&gt;OPENGL_glu_LIBRARY&lt;/code&gt;
 Path to the GLU library.&lt;/p&gt;
&lt;p&gt;OSX Specific
^^^^^^^^^^^^&lt;/p&gt;
&lt;p&gt;On OSX default to using the framework version of OpenGL. People will
have to change the cache values of OPENGL_glu_LIBRARY and
OPENGL_gl_LIBRARY to use OpenGL with X11 on OSX.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cmake --help-module GLUT
FindGLUT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;try to find glut library and include files.&lt;/p&gt;
&lt;p&gt;IMPORTED Targets
^^^^^^^^^^^^^^^^&lt;/p&gt;
&lt;p&gt;This module defines the &lt;code&gt;IMPORTED&lt;/code&gt; targets:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GLUT::GLUT&lt;/code&gt;
 Defined if the system has GLUT.&lt;/p&gt;
&lt;p&gt;Result Variables
^^^^^^^^^^^^^^^^&lt;/p&gt;
&lt;p&gt;This module sets the following variables:&lt;/p&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;p&gt;GLUT_INCLUDE_DIR, where to find GL/glut.h, etc.
 GLUT_LIBRARIES, the libraries to link against
 GLUT_FOUND, If false, do not try to use GLUT.&lt;/p&gt;
&lt;p&gt;Also defined, but not for general use are:&lt;/p&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;p&gt;GLUT_glut_LIBRARY = the full path to the glut library.
 GLUT_Xmu_LIBRARY  = the full path to the Xmu library.
 GLUT_Xi_LIBRARY   = the full path to the Xi Library.&lt;/p&gt;
&lt;p&gt;という感じでcmakeに最初から入っているタイプのモジュールはわかる。
ちなみにFIND_PACKAGEの引数は大文字小文字を区別しないが、結果はただの変数なので区別することに注意。
${OPENGL_GL_LIBRARY}とかだめですから。
不安があるときはMESSAGEでプリントデバッグするのが手堅い。
MESSAGE(STATUS ${OPENGL_gl_LIBRARY})&lt;/p&gt;
&lt;p&gt;VisualStudioなのでリンクをDebug, Releaseで振り分けたいんだけど
lib/freeglut.libとdebug/lib/freeglutd.libとか。
上の例は問答無用でRelease版にリンクされる(glutの場合は、別にfreeglutのデバッグはしないのでそれはそれでよかったりもするが・・・)。プラグマでリンクすればいいやんとなるのだが、link_directoriesにはDebug, Releaseの振り分けはない。Release決め打ちの方がましである。
TARGET_LINK_LIBRARIESには振り分け機能が実装されている。
TARGET_LINK_LIBRARIES(hello
    debug path_to_freeglutd.lib
    optimized path_to_freeglut.lib
    )&lt;/p&gt;
&lt;p&gt;という風に記述できる。で、これを如何にしてFIND_PACKAGEと連携させるのか。
例としてfreeglut.libとfreeglutd.lib。
FIND_PACKAGE(OpenGL REQUIRED)
MESSAGE(STATUS ${OPENGL_LIBRARIES})
FIND_PACKAGE(GLUT)
MESSAGE(STATUS ${GLUT_LIBRARY})
STRING(REPLACE lib/freeglut.lib debug/lib/freeglutd.lib GLUT_LIBRARY_DEBUG ${GLUT_LIBRARY})
SET(OPENGL_LIBS 
    general ${OPENGL_LIBRARIES} 
    optimized ${GLUT_LIBRARY} 
    debug ${GLUT_LIBRARY_DEBUG}
    )
TARGET_LINK_LIBRARIES(hello
    ${OPENGL_LIBS}
    )&lt;/p&gt;
&lt;p&gt;インストールしたパッケージがFindされないんだけど
alembicなどvcpkgでインストールしたパッケージをVCPKG_DIR/installed/x64-windowsから探索して欲しいのだが方法がよくわからない。&lt;/p&gt;
&lt;p&gt;CMakeを使ってみた (7) find_packageとpkg_check_modulesによるライブラリ探索&lt;/p&gt;
&lt;p&gt;あとで&lt;/p&gt;</description><category>cmake</category><guid>https://ousttrue.github.io/posts/2017/07/cmake_find_package/</guid><pubDate>Wed, 19 Jul 2017 15:00:00 GMT</pubDate></item><item><title>cmakeで実行ファイルを作成する例</title><link>https://ousttrue.github.io/posts/2017/05/add_executable/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;main.cpp
CMakeLists.txt&lt;/p&gt;
&lt;p&gt;main.cpp
int main()
{
   return 0;
}&lt;/p&gt;
&lt;p&gt;CMakeLists.txt
cmake_minimum_required(VERSION 2.8)
project(hello) # .sln
add_executable(hello main.cpp) # .vcxproj&lt;/p&gt;
&lt;p&gt;実行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mkdir build
cd build
build&amp;gt; cmake.exe .. -G "Visual Studio 15 2017"
build&amp;gt; dir 
CMakeFiles
ALL_BUILD.vcxproj
ALL_BUILD.vcxproj.filters
CMakeCache.txt
cmake_install.cmake
hello.sln
hello.vcxproj
hello.vcxproj.filters
ZERO_CHECK.vcxproj
ZERO_CHECK.vcxproj.filters&lt;/p&gt;
&lt;/blockquote&gt;</description><category>cmake</category><guid>https://ousttrue.github.io/posts/2017/05/add_executable/</guid><pubDate>Sat, 27 May 2017 15:00:00 GMT</pubDate></item><item><title>cmakeチートシート</title><link>https://ousttrue.github.io/posts/2017/05/cmake_compileoptions/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;すぐ忘れるのでここをチートシート化しよう。&lt;/p&gt;
&lt;p&gt;構成
solution
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(hello) # .sln&lt;/p&gt;
&lt;p&gt;subdirectory&lt;/p&gt;
&lt;p&gt;https://cmake.org/cmake/help/latest/command/add_subdirectory.html&lt;/p&gt;
&lt;p&gt;ADD_SUBDIRECTORY(src)&lt;/p&gt;
&lt;h2&gt;もしくは&lt;/h2&gt;
&lt;p&gt;SUBDIRS(FOO BAR HOGE FUGA)&lt;/p&gt;
&lt;p&gt;target
exe&lt;/p&gt;
&lt;p&gt;https://cmake.org/cmake/help/latest/command/add_executable.html&lt;/p&gt;
&lt;p&gt;ADD_EXECUTABLE(hello
    main.cpp
    renderer.cpp
    scene.cpp
    )&lt;/p&gt;
&lt;p&gt;fileを集める例
FILE(GLOB SRC
    &lt;em&gt;.cpp
    &lt;/em&gt;.h
    )
ADD_EXECUTABLE(hello
    ${SRC}
    )&lt;/p&gt;
&lt;h2&gt;fo winmain&lt;/h2&gt;
&lt;p&gt;ADD_EXECUTABLE(hello_windows WIN32
    ${SRC}
    )&lt;/p&gt;
&lt;p&gt;static lib&lt;/p&gt;
&lt;p&gt;https://cmake.org/cmake/help/latest/command/add_library.html&lt;/p&gt;
&lt;p&gt;ADD_LIBRARY(renderer STATIC
    renderer.cpp
    )&lt;/p&gt;
&lt;p&gt;dll
ADD_LIBRARY(renderer SHARED
    renderer.cpp
    )&lt;/p&gt;
&lt;p&gt;compile
compiler options
全体
SET(CMAKE_CXX_FLAGS "-Wall")&lt;/p&gt;
&lt;p&gt;ターゲット指定
TARGET_COMPILE_OPTIONS(foo PUBLIC "$&amp;lt;$&lt;debug&gt;:${MY_DEBUG_OPTIONS}&amp;gt;")
TARGET_COMPILE_OPTIONS(foo PUBLIC "$&amp;lt;$&lt;release&gt;:${MY_RELEASE_OPTIONS}&amp;gt;")&lt;/release&gt;&lt;/debug&gt;&lt;/p&gt;
&lt;p&gt;include path
全体
以降のADD_XXXに対して有効になる
INCLUDE_DIRECTORIES(libpath/include)&lt;/p&gt;
&lt;p&gt;ターゲット指定
PUBLICの部分はよくわからぬ。
TARGET_INCLUDE_DIRECTORIES(HELLO PUBLIC
    ${BOOST_DIR}
    )&lt;/p&gt;
&lt;p&gt;define
全体
以降のADD_XXXに対して有効になる
ADD_DEFINITIONS(-DWITH_OPENCV2)&lt;/p&gt;
&lt;p&gt;ターゲット指定
PUBLICの部分はよくわからぬ。&lt;/p&gt;
&lt;h2&gt;-Dなし&lt;/h2&gt;
&lt;p&gt;TARGET_COMPILE_DEFINITIONS(TARGET PUBLIC
    WITH_OPENCV2=1
    )&lt;/p&gt;
&lt;p&gt;link
link path
LINK_DIRECTORIES(libpath/lib)&lt;/p&gt;
&lt;p&gt;x86とx64で違うパスにしたい時は？
LINK_LIBRARIES
TARGET_LINK_LIBRARIES
TARGET_LINK_LIBRARIES(MediaSessionPlaybackExample
    Mf
    Mfplat
    Mfuuid
    strmiids
    )&lt;/p&gt;
&lt;p&gt;Debug Releaseの切り分け
TARGET_LINK_LIBRARIES(Fuga
    DEBUG hoge_d
    OPTIMIZE hoge
    )&lt;/p&gt;
&lt;p&gt;変数
ソース
cmake -G CMAKE_SOURCE_DIR
CMAKE_SOURCE_DIR&lt;/p&gt;
&lt;p&gt;ビルドディレクトリ
cmake -G CMAKE_SOURCE_DIRを実行したディレクトリ
CMAKE_BINARY_DIR&lt;/p&gt;
&lt;p&gt;The path to the top level of the build tree&lt;/p&gt;
&lt;p&gt;出力ディレクトリ
exeとdllの出力先。
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)&lt;/p&gt;
&lt;p&gt;example
CMakeLists.txt
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(hello) # hello.sln
ADD_EXECUTABLE(hello main.cpp) # hello.vcxproj&lt;/p&gt;
&lt;p&gt;set(CMAKE_CXX_FLAGS "/WD4096")
set(CMAKE_C_FLAGS "/WD4096")
include_directories(libpath/include)
add_definitions(
    -DUNICODE
    -D_UNICODE
    )&lt;/p&gt;</description><category>cmake</category><guid>https://ousttrue.github.io/posts/2017/05/cmake_compileoptions/</guid><pubDate>Sat, 27 May 2017 15:00:00 GMT</pubDate></item><item><title>msbuildとcmakeの在りか</title><link>https://ousttrue.github.io/posts/2017/05/cmake_exe/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;bat作るときにたまに使う
cmake.exeとmsbuild.exeの在りかについて&lt;/p&gt;
&lt;p&gt;VisualStudio2017内のcmake.exe
VisualStudio2017に同梱されるようになったcmakeのパスについて。
以下のパスに存在する。
C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe
version確認
PS&amp;gt; &amp;amp;"C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" --version
cmake version 3.6.20160606-g0391f-MSVC&lt;/p&gt;
&lt;p&gt;CMake suite maintained and supported by Kitware (kitware.com/cmake).&lt;/p&gt;
&lt;p&gt;レジストリからパスを得る
システムドライブの容量節約のためVSのインストールパスを変更している場合に必要だった。
regコマンドでコマンドラインで値を得る。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\VS7" /v "15.0"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\VS7
    15.0    REG_SZ    C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\&lt;/p&gt;
&lt;p&gt;cmake呼び出しbat
cmake_vs2017.bat
@echo off
FOR /F "TOKENS=1,2,*" %%A IN ('reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\VS7" /v "15.0"') DO IF "%%A"=="15.0" SET VSPATH=%%C
@echo on&lt;/p&gt;
&lt;p&gt;set CMAKE="%VSPATH%\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"
set BUILD_DIR="build_vs2017"&lt;/p&gt;
&lt;p&gt;if not exist %BUILD_DIR% mkdir %BUILD_DIR%
pushd %BUILD_DIR%
%CMAKE% -D CMAKE_INSTALL_PREFIX=%VCPKG_DIR%/installed/x64-windows -D OpenCVDir=%VCPKG_DIR%/installed/x64-windows/share/opencv .. -G "Visual Studio 15 2017 Win64"
popd&lt;/p&gt;
&lt;p&gt;使用例&lt;/p&gt;
&lt;p&gt;https://github.com/ousttrue/msgpackpp/blob/master/cmake_vs2017.bat&lt;/p&gt;
&lt;p&gt;VisualStudio2017内のmsbuild
C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/MSBuild/15.0/Bin/msbuild.exe
なので&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\VS7" /v "15.0"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\VS7
    15.0    REG_SZ    C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\&lt;/p&gt;
&lt;p&gt;と組み合わせると得られる。
@echo off
FOR /F "TOKENS=1,2,*" %%A IN ('reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\VS7" /v "15.0"') DO IF "%%A"=="15.0" SET VSPATH=%%C
@echo on&lt;/p&gt;
&lt;p&gt;set MSBUILD="%VSPATH%\MSBuild\15.0\Bin\msbuild.exe"&lt;/p&gt;
&lt;p&gt;VisualStudio2015内のmsbuild&lt;/p&gt;
&lt;p&gt;https://github.com/Microsoft/HoloToolkit-Unity/blob/master/Assets/HoloToolkit/Build/Editor/BuildDeployTools.cs#L72&lt;/p&gt;
&lt;p&gt;レジストリ
HKLM\Software\Microsoft\MSBuild\ToolsVersions\14.0
から得ることができる。
@echo off
FOR /F "TOKENS=1,2,*" %%A IN ('reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSBuild\ToolsVersions" /v "14.0"') DO IF "%%A"=="14.0" SET MSBUILDPATH=%%C
@echo on&lt;/p&gt;
&lt;p&gt;set MSBUILD="%MSBUILDPATH%\msbuild.exe"&lt;/p&gt;</description><category>cmake</category><guid>https://ousttrue.github.io/posts/2017/05/cmake_exe/</guid><pubDate>Sat, 27 May 2017 15:00:00 GMT</pubDate></item><item><title>UWPでNativeDllを使う</title><link>https://ousttrue.github.io/posts/2017/05/uwp_dll/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;UWPでNativeのDLLを使うとどんな感じなのか試してみた。&lt;/p&gt;
&lt;p&gt;https://github.com/ousttrue/UwpNativeDllSample&lt;/p&gt;
&lt;p&gt;CMakeのCache機構のせいで挙動を勘違いした部分を書き直し。&lt;/p&gt;
&lt;p&gt;自前でビルドしたlibpng.dllでpngを表示するサンプル。
デスクトップアプリとの違い&lt;/p&gt;
&lt;p&gt;dllのロードパスがカレントディレクトリと環境変数PATHに記述された場所ではなく、projectのトップレベルのみ
デスクトップと公開されているAPIに差異がある
projectが違う。x86 vxprojとuwp32 vcxprojのdiffの抜粋。&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nt"&gt;&amp;lt;ApplicationType&amp;gt;&lt;/span&gt;Windows Store&lt;span class="nt"&gt;&amp;lt;/ApplicationType&amp;gt;&lt;/span&gt;^M
&lt;span class="nt"&gt;&amp;lt;DefaultLanguage&amp;gt;&lt;/span&gt;en-US&lt;span class="nt"&gt;&amp;lt;/DefaultLanguage&amp;gt;&lt;/span&gt;^M
&lt;span class="nt"&gt;&amp;lt;ApplicationTypeRevision&amp;gt;&lt;/span&gt;10.0&lt;span class="nt"&gt;&amp;lt;/ApplicationTypeRevision&amp;gt;&lt;/span&gt;^M
&lt;span class="nt"&gt;&amp;lt;MinimumVisualStudioVersion&amp;gt;&lt;/span&gt;14.0&lt;span class="nt"&gt;&amp;lt;/MinimumVisualStudioVersion&amp;gt;&lt;/span&gt;^M
&lt;span class="nt"&gt;&amp;lt;AppContainerApplication&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/AppContainerApplication&amp;gt;&lt;/span&gt;^M
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;zlib-1.2.11を無修正でビルドできた。
libpng-1.6.29は_ExitProcessにリンクする段階でエラーになった&lt;/p&gt;
&lt;p&gt;修正方法が書いてあった。&lt;/p&gt;
&lt;p&gt;https://github.com/Microsoft/vcpkg/blob/master/docs/example-3-patch-libpng.md&lt;/p&gt;
&lt;p&gt;UWP向けビルドオプション/zw
無くても動いた。UWP固有のAPIにアクセスするときもしくはC++/CXに必要？&lt;/p&gt;
&lt;p&gt;https://msdn.microsoft.com/ja-jp/library/hh561383.aspx&lt;/p&gt;
&lt;p&gt;cmakeでWindowsStore向けのprojectを生成する
Microsoft版のcmakeなら作れる。
VS2017にも含まれていて以下のパスにあった。
C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe
本家のcmakeでもできるかもしれないが未確認。
プロジェクトを生成するときに以下のオプションを指定する。&lt;/p&gt;
&lt;p&gt;-DCMAKE_SYSTEM_NAME=WindowsStore
-DCMAKE_SYSTEM_VERSION=10.0&lt;/p&gt;
&lt;p&gt;これだけだとCMAKE_SYSTEM_PROCESSORが空になってlibpngではエラーになる。追加で下記のオプションも指定した。&lt;/p&gt;
&lt;p&gt;-DCMAKE_SYSTEM_PROCESSOR=x86&lt;/p&gt;
&lt;p&gt;ほかに/zwの指定など。&lt;/p&gt;
&lt;p&gt;-DCMAKE_C_FLAGS=/ZW /EHsc /DWIN32=1
-DCMAKE_CXX_FLAGS=/ZW /EHsc /DWIN32=1&lt;/p&gt;
&lt;p&gt;例
zlib-1.2.11/build&amp;gt; cmake.exe .. -G Visual Studio 15 2017 -DCMAKE_SYSTEM_PROCESSOR=x86 -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -DCMAKE_C_FLAGS=/ZW /EHsc /DWIN32=1 -DCMAKE_CXX_FLAGS=/ZW /EHsc /DWIN32=1 &lt;/p&gt;
&lt;p _dll='"DLL' _hresult="(HRESULT" _libpng16_="'libpng16'"&gt;C#からDllImport
Desktopの時と記述方法は同じ。dllの配置場所は上記の通りprojectに放り込むだけ。
デスクトップ向けにビルドしたdllは動くのか
動いた。
逆にUWP向けにビルドしたdllはデスクトップで動くのか
動かなかった。ソース互換はある程度あるがバイナリ互換は無い。&lt;/p&gt;
&lt;p&gt;このエラーがデスクトップでuwpのdllを呼び出したとき固有のエラーメッセージぽい。
まとめ
CMakeの場合はプロジェクト生成オプションさえわかれば、 デスクトップとそれほど使い勝手は変わらない。この煩雑な手順を記録しておくべく自動ビルドツール作成中。&lt;/p&gt;
&lt;p&gt;https://github.com/ousttrue/bldproc&lt;/p&gt;</description><category>cmake</category><category>uwp</category><guid>https://ousttrue.github.io/posts/2017/05/uwp_dll/</guid><pubDate>Tue, 02 May 2017 15:00:00 GMT</pubDate></item><item><title>cmakeを使ってみる(Windowsかつコマンドラインで)</title><link>https://ousttrue.github.io/posts/2013/12/08/cmake/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;cmakeを使ってみる(Windowsかつコマンドラインで)
ArUcoを使おうとしたら、msvcpdのvc10版を要求されてvc12でデバッグビルドが動かなかった。
最新版のOpenCV-2.4.7をゲットしてきたところvc10とvc11は含まれて居るのだが、vc12ビルドは含まれていなかった(vc2013は早すぎたかw)。
仕方ないので自前ビルドすることにした。
ということでcmakeの使い方を調べてみる。
ついでに、cmakeでビルドしたライブラリを特定のディレクトリを基準にインストールする方法を調べてみる。
練習にzlibをビルドしてインストールしてみる
以下のようなディレクトリ構成で運用してみることを目標に作業開始。
local_vc12
 + bin # dll置き場
 + include # dllを使うのに必要なheader置き場
 + lib # dllのimportライブラリ置き場&lt;/p&gt;
&lt;p&gt;外部依存の無い適当なライブラリで練習してみようということでzlibを選定。
さっそくcmakeを使ってみようと思ったら、zlib-1.2.8にはCmakeLists.txtが含まれとるで。
C:\src&amp;gt; cd zlib-1.2.8
C:\src\zlib-1.2.8&amp;gt; cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .
C:\src\zlib-1.2.8&amp;gt; msbuild INSTALL.vcxproj
C:\src\zlib-1.2.8&amp;gt; msbuild INSTALL.vcxproj /p:Configuration=Release&lt;/p&gt;
&lt;p&gt;以上で下記のようになった。
C:/local_vc12
C:/local_vc12/bin
C:/local_vc12/bin/zlib.dll
C:/local_vc12/bin/zlibd.dll
C:/local_vc12/include
C:/local_vc12/include/zconf.h
C:/local_vc12/include/zlib.h
C:/local_vc12/lib
C:/local_vc12/lib/zlib.lib
C:/local_vc12/lib/zlibd.lib
C:/local_vc12/lib/zlibstatic.lib
C:/local_vc12/lib/zlibstaticd.lib
C:/local_vc12/share
C:/local_vc12/share/man
C:/local_vc12/share/man/man3
C:/local_vc12/share/man/man3/zlib.3
C:/local_vc12/share/pkgconfig
C:/local_vc12/share/pkgconfig/zlib.pc&lt;/p&gt;
&lt;p&gt;素晴らしい。
OpenCV-2.4.7でやってみる
C:\src&amp;gt; cd opencv-2.4.7
C:\src\opencv-2.4.7&amp;gt; cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .
C:\src\opencv-2.4.7&amp;gt; msbuild ALL_BUILD.vcxproj&lt;/p&gt;
&lt;p&gt;失敗する。&lt;/p&gt;
&lt;p&gt;https://github.com/SpecLad/opencv/commit/7973594a01228107dcb9d2d1f10eb64498b91aac
http://stackoverflow.com/questions/17409956/cannot-compile-opencv-2-4-5-with-vs-2013-rtm&lt;/p&gt;
&lt;p&gt;あとIlmxxxでmin, maxのエラーが出るので”#include
&lt;algorithm&gt;“する。std::min,
maxはalgorithmに入っとる。ALL_BUILDが成功したらINSTALLする。
C:\src\opencv-2.4.7&amp;gt; msbuild INSTALL.vcxproj&lt;/algorithm&gt;&lt;/p&gt;
&lt;p&gt;これで”local_vc12”にopencvも入った。
cmakeはいままで敬遠していたのだがライブラリのinstallまで面倒見てくれるのはいいですな。
同じく敬遠していた自前dllを使う開発が捗りそうな感じだ。
ArUcoをビルド
cmakeを使ったアプリ(ライブラリを使う方)のビルド。
C:\src&amp;gt; cd aruco-1.2.4
C:\src\aruco-1.2.4&amp;gt; cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .&lt;/p&gt;
&lt;p&gt;ここでエラーが出る。
OpenCVが正式ビルドと違うディレクトリにインストールされたために検知に失敗する。
“C:/local_vc12/OpenCVConfig.cmake”を直接修正した。
get_filename_component(OpenCV_CONFIG_PATH "${CMAKE_CURRENT_LIST_FILE}" PATH CACHE)&lt;/p&gt;
&lt;h2&gt;if(OpenCV_RUNTIME AND OpenCV_ARCH)&lt;/h2&gt;
&lt;h2&gt;if(OpenCV_STATIC AND EXISTS "${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib/OpenCVConfig.cmake")&lt;/h2&gt;
&lt;h2&gt;if(OpenCV_CUDA AND EXISTS "${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib/OpenCVConfig.cmake")&lt;/h2&gt;
&lt;h2&gt;set(OpenCV_LIB_PATH "${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib")&lt;/h2&gt;
&lt;h2&gt;else()&lt;/h2&gt;
&lt;h2&gt;set(OpenCV_LIB_PATH "${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib")&lt;/h2&gt;
&lt;h2&gt;endif()&lt;/h2&gt;
&lt;h2&gt;elseif(EXISTS "${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib/OpenCVConfig.cmake")&lt;/h2&gt;
&lt;h2&gt;if(OpenCV_CUDA AND EXISTS "${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib/OpenCVConfig.cmake")&lt;/h2&gt;
&lt;h2&gt;set(OpenCV_LIB_PATH "${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib")&lt;/h2&gt;
&lt;h2&gt;else()&lt;/h2&gt;
&lt;h2&gt;set(OpenCV_LIB_PATH "${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib")&lt;/h2&gt;
&lt;h2&gt;endif()&lt;/h2&gt;
&lt;h2&gt;endif()&lt;/h2&gt;
&lt;h2&gt;endif()&lt;/h2&gt;
&lt;p&gt;set(OpenCV_LIB_PATH "${OpenCV_CONFIG_PATH}/lib")&lt;/p&gt;
&lt;p&gt;これでビルドできた。
C:\src\aruco-1.2.4&amp;gt; cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .
C:\src\opencv-2.4.7&amp;gt; msbuild ALL_BUILD.vcxproj&lt;/p&gt;
&lt;p&gt;しかし、OpenGLを使ったサンプルがビルドされぬ。
どうやらglutが見つからないらいしい。せっかくなのでFreeGlutを入れてみますか。
FreeGlut
http://freeglut.sourceforge.net/
C:\src\freeglut-2.8.1&amp;gt; cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .
CMake Error: The source directory "C:/src/freeglut-2.8.1" does not appear to contain CMakeLists.txt.
Specify --help for usage, or press the help button on the CMake GUI.&lt;/p&gt;
&lt;p&gt;CMakeLists.txtが無い。作ってみる。
project (freeglut)&lt;/p&gt;
&lt;p&gt;file(GLOB SOURCES "src/*.c")
ADD_LIBRARY(freeglut SHARED ${SOURCES})&lt;/p&gt;
&lt;p&gt;include_directories(include)&lt;/p&gt;
&lt;p&gt;ADD_DEFINITIONS(-DFREEGLUT_EXPORTS)
ADD_DEFINITIONS(-D_USRDLL)
ADD_DEFINITIONS(-D_WINDOWS)
ADD_DEFINITIONS(-DWIN32)&lt;/p&gt;
&lt;p&gt;C:\src\freeglut-2.8.1&amp;gt; cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .
C:\src\opencv-2.4.7&amp;gt; msbuild ALL_BUILD.vcxproj&lt;/p&gt;
&lt;p&gt;ビルドできた。INSTALL.vcxprojが見当たらないのでCMakeLists.txtに追記する必要がありそう。
インストールに関する追記。&lt;/p&gt;
&lt;h2&gt;dll&lt;/h2&gt;
&lt;p&gt;INSTALL(TARGETS freeglut RUNTIME
    DESTINATION bin)&lt;/p&gt;
&lt;h2&gt;lib&lt;/h2&gt;
&lt;p&gt;INSTALL(TARGETS freeglut ARCHIVE
    DESTINATION lib)&lt;/p&gt;
&lt;h2&gt;headers&lt;/h2&gt;
&lt;p&gt;INSTALL(DIRECTORY include/
    DESTINATION include
    PATTERN "Makefile.*" EXCLUDE
)&lt;/p&gt;
&lt;p&gt;インストールしてみる。
C:\src\freeglut-2.8.1&amp;gt; cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .
C:\src\opencv-2.4.7&amp;gt; msbuild INSTALL.vcxproj&lt;/p&gt;
&lt;p&gt;-- Install configuration: "Debug"
 -- Installing: C:/local_vc12/bin/freeglut.dll
 -- Installing: C:/local_vc12/lib/freeglut.lib
 -- Installing: C:/local_vc12/include
 -- Installing: C:/local_vc12/include/GL
 -- Up-to-date: C:/local_vc12/include/GL/freeglut.h
 -- Up-to-date: C:/local_vc12/include/GL/freeglut_ext.h
 -- Up-to-date: C:/local_vc12/include/GL/freeglut_std.h
 -- Up-to-date: C:/local_vc12/include/GL/glut.h&lt;/p&gt;
&lt;p&gt;インストール成功。
再度ArUco
C:\src\freeglut-2.8.1&amp;gt; cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .
 -- FOUND OPENGL=YES    LIBS=opengl32;glu32;C:/local_vc12/lib/freeglut.lib&lt;/p&gt;
&lt;p&gt;glutが発見されたようだ。
どうやらcmakeはCMAKE_INSTALL_PREFIXにライブラリを探しに行くようですな。
C:\src\opencv-2.4.7&amp;gt; msbuild ALL_BUILD.vcxproj&lt;/p&gt;
&lt;p&gt;gl.hの前に”#include &lt;windows.h&gt;“してやってビルドできた。
Debug版の後ろに”d”をつける
FreeGlutのCmakeLists.txtにzlibの”CmakeLists.txt”から頂いてきた。
set(CMAKE_DEBUG_POSTFIX "d")&lt;/windows.h&gt;&lt;/p&gt;
&lt;p&gt;記述順の影響があるようで前の方(ADD_LIBRARYより前？)に書く必要があるっぽい。
Debug版の後ろに”d”がついたライブラリを使う&lt;/p&gt;
&lt;p&gt;http://stackoverflow.com/questions/2209929/linking-different-libraries-for-debug-and-release-builds-in-cmake-on-windows
http://stackoverflow.com/questions/5497348/debug-and-release-library-linking-with-cmake-visual-studio&lt;/p&gt;
&lt;p&gt;こういう書き方でできた。
set (OPENGL_LIBS  general ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY} optimized ${GLUT_glut_LIBRARY} debug ${GLUT_glut_DEBUG_LIBRARY})&lt;/p&gt;
&lt;p&gt;CMAKE_DEBUG_POSTFIXに関連は使われる方と使う方の双方で合わせる必要があるので変更する場合は自分で両方の面倒を見なければならない。
一応、cmakeのひととおりの使い方が分かってきた。
vcがmsbuildを使うようになってビルドが制御可能になっている感じ。
makeの各ターゲットに対するmsbuildの実行方法は以下の通り。
"target", "make", "msbuild"
"build", "make all", "msbuild ALL_BUILD.vcxproj /t:Build"
"release build", "?", "msbuild ALL_BUILD.vcxproj /t:Build /p:Configuration=Release"
"debug build", "?", "msbuild ALL_BUILD.vcxproj /t:Build /p:Configuration=Debug"
"clean", "make clean", "msbuild ALL_BUILD.vcxproj /t:Clean"
"install", "make install", "msbuild INSTALL.vcxproj"&lt;/p&gt;
&lt;p&gt;ちょっといろいろビルドしてみる。&lt;/p&gt;</description><category>cmake</category><guid>https://ousttrue.github.io/posts/2013/12/08/cmake/</guid><pubDate>Sat, 07 Dec 2013 15:00:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (pythonについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2022 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Sat, 14 May 2022 17:17:58 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Nikola復活</title><link>https://ousttrue.github.io/posts/0514-nikola_revival/</link><dc:creator>ousttrue</dc:creator><description>&lt;h2&gt;Nikola復活&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://getnikola.com/"&gt;nikola&lt;/a&gt; 復活。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/dotfiles/blob/master/dodo.py"&gt;https://github.com/ousttrue/dotfiles/blob/master/dodo.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;を作りながら &lt;a href="https://pydoit.org/"&gt;doit&lt;/a&gt; を学んだし、 &lt;a href="https://jinja.palletsprojects.com/en/3.1.x/"&gt;jinja&lt;/a&gt;
も少しやったので、前よりは読めそう。
使いながら、 nikola のコードを読んで、 doit のカスタムタスクの使い方を眺めてみたい。&lt;/p&gt;
&lt;h3&gt;sphinx + ablog + myst との違い&lt;/h3&gt;
&lt;p&gt;nikola は &lt;code&gt;frontmatter&lt;/code&gt; で title を決めるが、 sphinx は 本文の先頭の見出しで決めるという違いがある。
nikola の方も title と 先頭の見出しを同じにする運用にすれば、だいたい同じになると思う。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;conf.py # nikola の設定
docs
  + conf.py # sphinx の設定
  + posts # content. nikola と sphinx の ablog 両用
    + post.md
&lt;/pre&gt;
&lt;p&gt;みたいな感じにしてもだいたい動く。
細かく違うところはあると思うが。&lt;/p&gt;
&lt;h3&gt;動作&lt;/h3&gt;
&lt;h4&gt;DoitNikola(DoitMain)&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/getnikola/nikola/blob/398d5722d78a27ac5233849e3057f9d787345561/nikola/__main__.py#L301"&gt;https://github.com/getnikola/nikola/blob/398d5722d78a27ac5233849e3057f9d787345561/nikola/__main__.py#L301&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここから入っていく。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;from doit.cmd_base import TaskLoader2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pydoit.org/extending.html?highlight=taskloader#doit.cmd_base.TaskLoader2"&gt;https://pydoit.org/extending.html?highlight=taskloader#doit.cmd_base.TaskLoader2&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;NikolaTaskLoader(TaskLoader2)&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/getnikola/nikola/blob/398d5722d78a27ac5233849e3057f9d787345561/nikola/__main__.py#L257"&gt;https://github.com/getnikola/nikola/blob/398d5722d78a27ac5233849e3057f9d787345561/nikola/__main__.py#L257&lt;/a&gt;&lt;/p&gt;</description><category>python</category><category>ssg</category><guid>https://ousttrue.github.io/posts/0514-nikola_revival/</guid><pubDate>Fri, 13 May 2022 15:00:00 GMT</pubDate></item><item><title>0507-bdist_wheel</title><link>https://ousttrue.github.io/posts/2022/0507-bdist_wheel/</link><dc:creator>ousttrue</dc:creator><description>&lt;h2&gt;bdist_wheel + pep517 ではまる&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;setup.py bdist_wheel
&lt;/pre&gt;
&lt;p&gt;なら成功するが、&lt;/p&gt;
&lt;pre class="code literal-block"&gt;pip wheel .
&lt;/pre&gt;
&lt;p&gt;だと失敗するという現象に悩まされる。
cmake でビルドしている extension の pyd が含まれないのである。&lt;/p&gt;
&lt;p&gt;原因は、 &lt;code&gt;setup.py&lt;/code&gt; の下記の記述。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;build_ext_cmake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build_ext&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_cmake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_cmake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# these dirs will be created in build_py, so if you don't have&lt;/span&gt;
        &lt;span class="c1"&gt;# any python sources to bundle, the dirs will be missing&lt;/span&gt;
        &lt;span class="n"&gt;build_temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;build_temp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exist_ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ext_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_ext_fullpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;- これ&lt;/span&gt;
        &lt;span class="n"&gt;ext_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exist_ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;直した。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;        &lt;span class="n"&gt;ext_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_ext_fullpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;たぶん、 &lt;code&gt;get_ext_fullpath&lt;/code&gt; が相対パスを返していて、変なところに &lt;code&gt;pyd&lt;/code&gt; が出力されていた。
pip の時だけフォルダの構成や pwd が変わっている様子。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;pip wheel . -v
&lt;/pre&gt;
&lt;p&gt;として、ログと睨めっこしていたら気付いた。
pip が subprocess とか使うので、デバッガがアタッチできなくて、なかなかわからなかった。&lt;/p&gt;</description><category>python</category><guid>https://ousttrue.github.io/posts/2022/0507-bdist_wheel/</guid><pubDate>Fri, 06 May 2022 15:00:00 GMT</pubDate></item><item><title>0404-prompt-toolkit</title><link>https://ousttrue.github.io/posts/2022/0404-prompt-toolkit/</link><dc:creator>ousttrue</dc:creator><description>&lt;h2&gt;prompt-toolkit の fullscreen アプリケーション&lt;/h2&gt;
&lt;h3&gt;Buffer&lt;/h3&gt;
&lt;p&gt;しばらく試行錯誤していたのだがやっと使い方が分かってきた。
&lt;code&gt;Window&lt;/code&gt; + &lt;code&gt;BufferControl&lt;/code&gt; が基本形で edit する場合向け。
&lt;code&gt;Window&lt;/code&gt; + &lt;code&gt;FormatedTextControl&lt;/code&gt; が readonly の装飾済みのテキストに向いていそう。&lt;/p&gt;
&lt;p&gt;Lexer で基本的な装飾を施して、Preprocess でフォーカスやホバーのUI的な装飾をするという使い分けがよさそう。
&lt;code&gt;FormattedTextControl&lt;/code&gt; の場合は初期化時にスタイル適用済みのテキストを渡してしまう。&lt;/p&gt;
&lt;h3&gt;example&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/prompt-toolkit"&gt;https://github.com/prompt-toolkit&lt;/a&gt; の、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/prompt-toolkit/pyvim"&gt;https://github.com/prompt-toolkit/pyvim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prompt-toolkit/pymux"&gt;https://github.com/prompt-toolkit/pymux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prompt-toolkit/pyterm"&gt;https://github.com/prompt-toolkit/pyterm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が &lt;code&gt;prompt-toolkit2&lt;/code&gt; のままになっているのだが、
ちょっと手直しすることで、 &lt;code&gt;prompt-toolkit3&lt;/code&gt; で動作させることができた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ptterm&lt;/code&gt; の &lt;code&gt;prompt-toolkit3&lt;/code&gt; 化に PR を送ってみた。
主に &lt;code&gt;pipe&lt;/code&gt; 周りの非同期入力を &lt;code&gt;asyncio&lt;/code&gt; に適合させてやることで動く。
&lt;a href="https://github.com/prompt-toolkit/ptterm/pull/9"&gt;https://github.com/prompt-toolkit/ptterm/pull/9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pymux&lt;/code&gt; も &lt;code&gt;fork&lt;/code&gt; しない &lt;code&gt;standalone&lt;/code&gt; 引き数付きならば &lt;code&gt;Windows&lt;/code&gt; + &lt;code&gt;prompt-toolkit3&lt;/code&gt; でも動かすことができた。&lt;/p&gt;
&lt;p&gt;prompt-toolkit3 では積極的に &lt;code&gt;asyncio&lt;/code&gt; を活用していくのがよさそう。&lt;/p&gt;
&lt;h3&gt;prompt-toolkit で任意のエスケープシーケンスを入れる&lt;/h3&gt;
&lt;p&gt;prompt-toolkit で &lt;code&gt;sixel&lt;/code&gt; 画像を表示させたい。
UIControl が UIContent を生成していて、このとき styled text のデータ構造に対して特殊なスタイル &lt;code&gt;[ZeroWidthEscape]&lt;/code&gt; を指定することでエスケープシーケンスを直接出力できることがわかった。諸々の調整が必要になるが、ここに &lt;code&gt;sixel&lt;/code&gt; のシーケンスを入れることで表示できる。
処理順の癖に対応するために、
画像の高さ分の改行を &lt;code&gt;sixel&lt;/code&gt; のエスケープシーケンスに先行させる必要があった。
&lt;code&gt;prompt-toolkit&lt;/code&gt; + &lt;code&gt;wezterm&lt;/code&gt; 固有の問題かもしれない。&lt;/p&gt;
&lt;h3&gt;Windows/Linux 共用で console アプリを動かす&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;prompt-toolkit3&lt;/code&gt; でかなりできそう。
フレームワークの構成を理解するまでとっつきが悪いのだが、
&lt;code&gt;pypager&lt;/code&gt;, &lt;code&gt;pyvim&lt;/code&gt;, &lt;code&gt;ptterm&lt;/code&gt;, &lt;code&gt;pymux&lt;/code&gt; を研究してやっとわかってきた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nerdfont&lt;/code&gt; で賑やかしを入れて、 &lt;code&gt;sixel&lt;/code&gt; で画像表示ができるおもちゃを企画している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vim ぽい lsp/dap の実験アプリ&lt;/li&gt;
&lt;li&gt;w3m ぽい ブラウザ&lt;/li&gt;
&lt;li&gt;tmux ぽいやつ&lt;/li&gt;
&lt;li&gt;ranger ぽいやつ&lt;/li&gt;
&lt;/ul&gt;</description><category>ptk</category><category>python</category><guid>https://ousttrue.github.io/posts/2022/0404-prompt-toolkit/</guid><pubDate>Sun, 03 Apr 2022 15:00:00 GMT</pubDate></item><item><title>0205-xonsh</title><link>https://ousttrue.github.io/posts/2022/0205-xonsh/</link><dc:creator>ousttrue</dc:creator><description>&lt;h2&gt;xonsh メモ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://xon.sh/contents.html"&gt;https://xon.sh/contents.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関連&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vaaaaaanquish.hatenablog.com/archive/category/xonsh"&gt;https://vaaaaaanquish.hatenablog.com/archive/category/xonsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://murabitoleg.com/windows-xonsh/"&gt;https://murabitoleg.com/windows-xonsh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/choge_/items/a4ceb6e2d77a373a8e2e"&gt;https://qiita.com/choge_/items/a4ceb6e2d77a373a8e2e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrapbox.io/PythonOsaka/prompt--toolkit_%E3%82%92%E4%BD%BF%E3%81%84%E3%81%93%E3%81%AA%E3%81%9D%E3%81%86"&gt;https://scrapbox.io/PythonOsaka/prompt--toolkit_%E3%82%92%E4%BD%BF%E3%81%84%E3%81%93%E3%81%AA%E3%81%9D%E3%81%86&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/prompt-toolkit/pymux"&gt;https://github.com/prompt-toolkit/pymux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>python</category><category>xonsh</category><guid>https://ousttrue.github.io/posts/2022/0205-xonsh/</guid><pubDate>Fri, 04 Feb 2022 15:00:00 GMT</pubDate></item><item><title>0115-pybullet</title><link>https://ousttrue.github.io/posts/2022/0115-pybullet/</link><dc:creator>ousttrue</dc:creator><description>&lt;h2&gt;ExampleBrowser を読んでいる&lt;/h2&gt;
&lt;p&gt;fork して改造しながら読んでいる。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/bullet3"&gt;https://github.com/ousttrue/bullet3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;やっと構造がわかってきた。
コードはディレクトリに別れているのだけど、
CMake を整理しながら推進。&lt;/p&gt;
&lt;p&gt;ざっくりとこんな感じか。&lt;/p&gt;
&lt;p&gt;```{digraph} G
rankdir="BT"&lt;/p&gt;
&lt;p&gt;ExampleBrowser -&amp;gt; SimpleOpenGL3App -&amp;gt; gwen -&amp;gt; "Select DEMO";&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;で、この SimpleOpenGL3App を glfw に、gwen を imgui に置き換えてコードを単純化している。
&lt;code&gt;bulletphysic&lt;/code&gt; の マルチクライアント システム ぽい &lt;code&gt;SharedMemory&lt;/code&gt; を解読したい。
各 Demo は、 &lt;code&gt;CommonExampleInterface&lt;/code&gt; できれいに分離されている。
&lt;code&gt;SharedMemory&lt;/code&gt; と各クライアントの通信内容と &lt;code&gt;OpenGL&lt;/code&gt; の繋ぎの部分が知りたい。 &lt;/p&gt;
&lt;p&gt;この pybullet の下地の部分がシーン同期システムに使えないかと。
&lt;code&gt;Unity&lt;/code&gt; とかだとノードに剛体をくっつけるのだけど、
&lt;code&gt;bullet&lt;/code&gt; 的には、剛体に &lt;code&gt;Mesh&lt;/code&gt; をつける考えになるような。&lt;/p&gt;
&lt;h3&gt;20220118&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;各デモ&lt;/code&gt; と &lt;code&gt;Physics&lt;/code&gt; と &lt;code&gt;Renderer&lt;/code&gt; を分離できればよいのだが。
わりと規模が大きい。&lt;/p&gt;
&lt;h3&gt;20220122&lt;/h3&gt;
&lt;p&gt;だいぶ読んだ。&lt;code&gt;GLInstancingRenderer&lt;/code&gt; がレンダラー本体。
&lt;code&gt;btIDebugDraw&lt;/code&gt; とは別に普通の Renderer が実装されていてこっちを解読したい。
btIDebugDraw だと wireframe になるのかな。&lt;/p&gt;</description><category>bullet</category><category>python</category><guid>https://ousttrue.github.io/posts/2022/0115-pybullet/</guid><pubDate>Fri, 14 Jan 2022 15:00:00 GMT</pubDate></item><item><title>rawtypes 作ってみる</title><link>https://ousttrue.github.io/posts/2022/0101-rawtypes/</link><dc:creator>ousttrue</dc:creator><description>&lt;h2&gt;rawtypes 作ってみる&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cython&lt;/code&gt; から &lt;code&gt;pybind11&lt;/code&gt; に乗り換えを試みたのだが、
一歩目で躓いた。&lt;/p&gt;
&lt;p&gt;不完全型のポインタをそのまま返す方法がわからん。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;ImGuiContext&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;CreateContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ImFontAtlas&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shared_font_atlas&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ImGuiContext&lt;/code&gt; は前方宣言なのです。&lt;/p&gt;
&lt;p&gt;自分でやろうと思った。
&lt;code&gt;ctypes&lt;/code&gt; と併用することを前提にした省機能のバインダー、名付けて &lt;code&gt;rawtypes&lt;/code&gt; を作ってみよう。
&lt;code&gt;c++&lt;/code&gt; の関数呼び出しのちょっとしたコード生成をする。
基本的に &lt;code&gt;ctypes.c_void_p&lt;/code&gt; で済ます。
型の宣言が必要なところは、 &lt;code&gt;ctypes.Structure&lt;/code&gt; により &lt;code&gt;python&lt;/code&gt; 側で宣言。
&lt;code&gt;c++&lt;/code&gt; から返す時には、キャストする。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ctypes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctypes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POINTER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CTYPES_TYPE&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;object の所有権 はまじめに探求しない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python で作って、python で開放する(cypte.Struct object)&lt;/li&gt;
&lt;li&gt;c++ で作ったのを cast して python に渡すが参照のみ(cast された ctypes.Struct)。無効なものにアクセスしないようにプログラマがー注意する&lt;/li&gt;
&lt;li&gt;それ以外は値渡し&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これで十分。
主要な狙いは、 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static library のリンク&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c++&lt;/code&gt; 関数の呼び出し&lt;/li&gt;
&lt;li&gt;構造体の値渡しを &lt;code&gt;c++&lt;/code&gt; でラップする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で、 &lt;code&gt;ctypes&lt;/code&gt; の苦手なところだけをやる。
&lt;code&gt;luajit ffi&lt;/code&gt; に倣ったスタイルでまいる。&lt;/p&gt;
&lt;h3&gt;動いた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/pydear"&gt;https://github.com/ousttrue/pydear&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ImGui ひととおりできた。
もうちっとパッケージング(sdist, wheel)を整理したら形が整う。
&lt;code&gt;github action&lt;/code&gt; で &lt;code&gt;wheel&lt;/code&gt; をビルドする技もできた(&lt;code&gt;windows-64bit + python-3.10&lt;/code&gt; のみ実験)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;str&lt;/code&gt; と &lt;code&gt;bytes&lt;/code&gt; の切りわけも &lt;code&gt;C-API&lt;/code&gt; で書けたし、慣れれば直接 &lt;code&gt;C-API&lt;/code&gt; を使った方が便利そう。
&lt;code&gt;Py_INCREF&lt;/code&gt; &lt;code&gt;Py_DECREF&lt;/code&gt; による参照管理と、&lt;code&gt;PyErr_Clear&lt;/code&gt; 等のエラーハンドリングなど
を抑えればよさそう。&lt;/p&gt;
&lt;h3&gt;pypi&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/pydear/"&gt;https://pypi.org/project/pydear/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github actions で wheel をビルドして、 pypi にアップロードするところまでできた。
あと、 &lt;code&gt;sdist&lt;/code&gt; も作る。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install pydear&lt;/code&gt; して使えるようになった。
使いながら整備していこう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pyi&lt;/code&gt; が含まれているので、ある程度のインテリセンスが効くところがよい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] rawtypes をライブラリとして分離する&lt;/li&gt;
&lt;li&gt;[ ] clang.cindex でコード生成した結果を &lt;code&gt;sdist&lt;/code&gt; に含める&lt;/li&gt;
&lt;/ul&gt;</description><category>python</category><guid>https://ousttrue.github.io/posts/2022/0101-rawtypes/</guid><pubDate>Fri, 31 Dec 2021 15:00:00 GMT</pubDate></item><item><title>geojson</title><link>https://ousttrue.github.io/posts/2021/winter/geojson/</link><dc:creator>ousttrue</dc:creator><description>&lt;h2&gt;geojson&lt;/h2&gt;
&lt;p&gt;既存のライブラリが重厚長大なものが多いのだけど、
OpenGL や SVG のような二次元のベクター描画で簡単に済ませたい。
その方向で調査。&lt;/p&gt;
&lt;h3&gt;format&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc7946"&gt;https://datatracker.ietf.org/doc/html/rfc7946&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/GeoJSON"&gt;https://ja.wikipedia.org/wiki/GeoJSON&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/GeoJSON"&gt;https://en.wikipedia.org/wiki/GeoJSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GeoJSON is a geospatial data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下のような様式。
&lt;code&gt;Feature&lt;/code&gt; の中に &lt;code&gt;Geometry&lt;/code&gt; が入っている。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"FeatureCollection"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"features"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Feature"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
            &lt;span class="nt"&gt;"geometry"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Geometry Object&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Point&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MultiPoint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LineString&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MultiLineString&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Polygon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MultiPolygon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeometryCollection&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Point&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Point"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"coordinates"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;h4&gt;Polygon&lt;/h4&gt;
&lt;p&gt;穴が空いている場合は、複数の頂点リストを保持する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;No&lt;/span&gt; &lt;span class="err"&gt;holes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Polygon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"coordinates"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;101.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;101.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;wi&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;h&lt;/span&gt; &lt;span class="err"&gt;holes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Polygon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"coordinates"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;101.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;101.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;100.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;100.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;100.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;100.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;100.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;h3&gt;read&lt;/h3&gt;
&lt;p&gt;python で素直に読んでみた。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"MultiPolygon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"coordinates"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; polygon'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;coord&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'  &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; rings'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;coord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'    &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; points'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_feature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Feature"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"geometry"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;process_geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_bytes&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"FeatureCollection"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"features"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;process_feature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'japan.geo.json'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;jpan.geo.json&lt;/code&gt; は、 &lt;a href="https://github.com/dataofjapan/land"&gt;https://github.com/dataofjapan/land&lt;/a&gt; です。
実行結果。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;{'nam': 'Kyoto Fu', 'nam_ja': '京都府', 'id': 26}
4 polygon
  1 rings
    1235 points
  1 rings
    6 points
  1 rings
    8 points
  1 rings
    6 points
&lt;/pre&gt;
&lt;p&gt;なるほど。&lt;/p&gt;
&lt;h3&gt;GL_LINE_LOOP&lt;/h3&gt;
&lt;p&gt;単純に &lt;code&gt;GL_LINE_LOOP&lt;/code&gt; で描画できそうとわかった。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Polygon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Polygon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"coordinates"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))()&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;float2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SubMesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;))])&lt;/span&gt;

        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"MultiPolygon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"coordinates"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygons&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
            &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;polygons&lt;/span&gt;&lt;span class="p"&gt;))()&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="n"&gt;submeshes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;polygons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;submeshes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SubMesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                    &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;float2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;submeshes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;orthogonal&lt;/code&gt; の方で適当にビューポートを &lt;code&gt;(140, 35)&lt;/code&gt; というような適当な経度緯度に調整してやればよさそう。&lt;/p&gt;
&lt;h3&gt;data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dataofjapan/land"&gt;https://github.com/dataofjapan/land&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://geojson.io/"&gt;http://geojson.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/kkdd/items/416b955fb2d3e1327edc"&gt;GeoJSON (RFC7946) 仕様の注意点など&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jeremyfromearth/cinder-geojson-experiments"&gt;https://github.com/jeremyfromearth/cinder-geojson-experiments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/soolmaz-mk/Atlasi"&gt;https://github.com/soolmaz-mk/Atlasi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>gis</category><category>python</category><guid>https://ousttrue.github.io/posts/2021/winter/geojson/</guid><pubDate>Tue, 28 Dec 2021 15:00:00 GMT</pubDate></item><item><title>python で地理情報を扱う</title><link>https://ousttrue.github.io/posts/2021/winter/python_geo/</link><dc:creator>ousttrue</dc:creator><description>&lt;h2&gt;python で地理情報を扱う&lt;/h2&gt;
&lt;p&gt;python で地図画像を作ろうと思ったら思いのほか大変だった(まだできていない)のでメモ。&lt;/p&gt;
&lt;p&gt;Windows であれば&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;https://www.lfd.uci.edu/~gohlke/pythonlibs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;の助けを借りるのがよさそう。&lt;/p&gt;
&lt;h3&gt;GEOS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://libgeos.org/"&gt;https://libgeos.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/libgeos/geos"&gt;https://github.com/libgeos/geos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GDAL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;depends: GEOS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;gdal-config&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;sudo apt install libgdal-dev
&lt;/pre&gt;
&lt;p&gt;version ?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/OSGeo/gdal/issues/1762"&gt;https://github.com/OSGeo/gdal/issues/1762&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You need to install the native library GDAL 3.0.1 first. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;shapely&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;depends: GEOS&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shapely/shapely"&gt;https://github.com/shapely/shapely&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;fiona&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Toblerity/Fiona"&gt;https://github.com/Toblerity/Fiona&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;geopandas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://geopandas.org/en/stable/index.html"&gt;https://geopandas.org/en/stable/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/geopandas/geopandas"&gt;https://github.com/geopandas/geopandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;depends: shapely, fiona&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/sorabatake/article_20455_geopandas/blob/master/geoPandas01.ipynb"&gt;https://github.com/sorabatake/article_20455_geopandas/blob/master/geoPandas01.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;folium&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python-visualization.github.io/folium/#"&gt;http://python-visualization.github.io/folium/#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;geohash&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://geohash.org/site/tips.html"&gt;http://geohash.org/site/tips.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;地図タイル&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.geolonia.com/2020/07/06/zoom-level.html"&gt;https://blog.geolonia.com/2020/07/06/zoom-level.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cariot.jp/blog/2017/07/14/maptiler/"&gt;https://www.cariot.jp/blog/2017/07/14/maptiler/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://maps.gsi.go.jp/development/ichiran.html"&gt;https://maps.gsi.go.jp/development/ichiran.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ujicya.jp/blog-mapping/xyz-tiles-url/"&gt;https://ujicya.jp/blog-mapping/xyz-tiles-url/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/HidKamiya/items/5e7240f8f66c9af8b10e"&gt;pythonを用いたshapefileやgeojsonの読込および描画&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/aimof/items/b4e4551d27abaf5bb258"&gt;【脱GIS】（Pythonとかで）地理空間情報、位置情報を扱うための情報まとめ【随時更新】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://note.com/yearman/n/n69fa3f2d583d"&gt;Pythonでプロットした地図を出力する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>gis</category><category>python</category><guid>https://ousttrue.github.io/posts/2021/winter/python_geo/</guid><pubDate>Mon, 27 Dec 2021 15:00:00 GMT</pubDate></item><item><title>imgui の python バインディングをまた作る</title><link>https://ousttrue.github.io/posts/2021/winter/python_imgui/</link><dc:creator>ousttrue</dc:creator><description>&lt;h2&gt;名付けて cydeer&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/cydeer"&gt;https://github.com/ousttrue/cydeer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python&lt;/code&gt;, &lt;code&gt;cython&lt;/code&gt;, &lt;code&gt;dear imgui&lt;/code&gt; の組み合わせで名前を付けようと思ったのだが、既に先人がいっぱいいて名前が被るので適当に決めた。🦌&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/HankiDesign/awesome-dear-imgui#languages"&gt;https://github.com/HankiDesign/awesome-dear-imgui#languages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最初、&lt;code&gt;DearPyGui&lt;/code&gt; のサイトが強そうだったので試そうと思ったのだけど用途が違いそうだった。
次に、しばらく &lt;code&gt;pyimgui&lt;/code&gt; を使っていい感じだったので、 &lt;code&gt;docking&lt;/code&gt; ブランチ対応を見たら開発ブランチならば動いたので、自前ビルドを改造して使っていた。
PR も送ってみたのだが、
どうせなら自分で作ろうという機運が高まったので、作った。
cydeer は pyOpenGL とともに使う &lt;code&gt;薄い&lt;/code&gt; ImGui ラッパーという路線である。
&lt;code&gt;ctypes&lt;/code&gt; を併用することでポインタを直接扱う。 &lt;code&gt;camel case&lt;/code&gt; と &lt;code&gt;snake case&lt;/code&gt; の変換を含めて何も変えない。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;lib&lt;/th&gt;
&lt;th&gt;binder&lt;/th&gt;
&lt;th&gt;imgui&lt;/th&gt;
&lt;th&gt;window &amp;amp; graphincs&lt;/th&gt;
&lt;th&gt;コメント&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(python)cydeer&lt;/td&gt;
&lt;td&gt;cython + ctypes(generate using libclang.cindex )&lt;/td&gt;
&lt;td&gt;imgui docking branch&lt;/td&gt;
&lt;td&gt;glfw など + pyOpenGL でがんばる&lt;/td&gt;
&lt;td&gt;可能な限りAPIの改変をしない。ポインタは ctypes で作る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(python)pyimgui&lt;/td&gt;
&lt;td&gt;cython&lt;/td&gt;
&lt;td&gt;imgui&lt;/td&gt;
&lt;td&gt;glfw など + pyOpenGL でがんばる&lt;/td&gt;
&lt;td&gt;ポインタ引数(p_openなど)による返り値を、tuple による複値で表現&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(python)DearPyGui&lt;/td&gt;
&lt;td&gt;未確認&lt;/td&gt;
&lt;td&gt;未確認&lt;/td&gt;
&lt;td&gt;DirectX11。python からアクセスできない？&lt;/td&gt;
&lt;td&gt;imgui をラップして独自 API。python で OpenGL するという目的には使えぬ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(c)cimgui&lt;/td&gt;
&lt;td&gt;未確認&lt;/td&gt;
&lt;td&gt;未確認&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;imgui を &lt;code&gt;extern C&lt;/code&gt; にラップしたもの。他言語バインド向け&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(rust)imgui-rs&lt;/td&gt;
&lt;td&gt;未確認&lt;/td&gt;
&lt;td&gt;未確認&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;builder パターンで Default 引数を代替&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;imgui ラップには、 &lt;code&gt;関数オーバーロード&lt;/code&gt; , &lt;code&gt;デフォルト引数&lt;/code&gt; , &lt;code&gt;メンバー関数&lt;/code&gt; という難所がある。
要するに &lt;code&gt;c++&lt;/code&gt; 要素なのだけど、&lt;code&gt;c++&lt;/code&gt; 要素含めての imgui の使い勝手なので。各言語バインディングで悩ましいところです。
たとえば、 &lt;code&gt;rust&lt;/code&gt; は関数オーバーロードやデフォルト引数が無いので API を変えてます。&lt;/p&gt;
&lt;p&gt;C# とかでも、 &lt;code&gt;const ImVec2 pos&amp;amp; = ImVec2(0, 0)&lt;/code&gt; のような引数を解決するのは手間がかかったりする。
DLLImport 定義に対するデフォルト引数では解決できないので、 C# 側で一時変数を作ってポインターを取得する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;デフォルト引数&lt;/code&gt; は cython で普通に解決した。
clang.cindex から値を取れれば難しくない。
&lt;code&gt;メンバー関数&lt;/code&gt; は &lt;code&gt;ctypes&lt;/code&gt; に &lt;code&gt;cython&lt;/code&gt; のメソッドを定義して、 &lt;code&gt;self&lt;/code&gt; を &lt;code&gt;this pointer&lt;/code&gt; に cast して呼び出すコードを作った(ImGuiFontAtlas)。
&lt;code&gt;関数オーバーロード&lt;/code&gt; は &lt;code&gt;cython&lt;/code&gt; でディスパッチするのはつらいので、&lt;code&gt;MenuItem_2&lt;/code&gt; のような suffix をつけて人間が選ぶようにした。&lt;/p&gt;
&lt;p&gt;忘れていたが、もっとも問題になるのが &lt;code&gt;構造体の値渡し・返し&lt;/code&gt; だった(C++に限らない？)。
&lt;code&gt;D言語&lt;/code&gt; , &lt;code&gt;rust&lt;/code&gt; ともにこれができない(vcのコンパイラと互換性がない？)ので注意が必要だった。コンパイルは通るが動作がおかしかったような。
ImGui の ImVec2 を値返しする関数でヒットする。
&lt;code&gt;cydeer&lt;/code&gt; は、 &lt;code&gt;cython&lt;/code&gt; を採用したので、&lt;code&gt;cython&lt;/code&gt; 関数の出口で python 型に入れ替えるだけである。&lt;/p&gt;
&lt;p&gt;あと、 &lt;code&gt;cydeer&lt;/code&gt; は &lt;code&gt;pyi&lt;/code&gt; 標準装備でいい感じである(一部実際のpython型と齟齬があるが・・・)。&lt;/p&gt;
&lt;h3&gt;実装上の課題&lt;/h3&gt;
&lt;p&gt;cython の cimport の扱いがやっかいで、&lt;code&gt;imgui&lt;/code&gt;, &lt;code&gt;imgui.internal&lt;/code&gt; に分割しようとするとうまくいかなかった。
&lt;code&gt;cydeer&lt;/code&gt; に関しては巨大な単一のモジュールで行くのが無難かもしれない。
&lt;code&gt;internal&lt;/code&gt; やノードエディターとか追加するときに分けたいのだけど。&lt;/p&gt;
&lt;p&gt;現状、Windows + python-3.10 しか試していない。
Windows11 の wslg + wayland で動くようにしたい。&lt;/p&gt;</description><category>cython</category><category>imgui</category><category>libclang</category><category>python</category><guid>https://ousttrue.github.io/posts/2021/winter/python_imgui/</guid><pubDate>Sun, 19 Dec 2021 15:00:00 GMT</pubDate></item><item><title>SSGをABlogに変更</title><link>https://ousttrue.github.io/posts/2021/winter/ablog/</link><dc:creator>ousttrue</dc:creator><description>&lt;h2&gt;ABlog にシステムを変更&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://getnikola.com/"&gt;nikola&lt;/a&gt; は使いこなせなくて短命に終わってしまった。
&lt;a href="https://pydoit.org/"&gt;doit&lt;/a&gt; は面白いと思うのだが。&lt;/p&gt;
&lt;p&gt;ということで、 &lt;code&gt;sphinx&lt;/code&gt; プラグインの &lt;a href="https://ablog.readthedocs.io/en/latest/"&gt;ABlog&lt;/a&gt; です。&lt;/p&gt;
&lt;h3&gt;はまり1: Sphinx のキャッシュ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;python -m sphinx content build&lt;/code&gt; にデバッガをアタッチして試行錯誤するのだけど、
キャッシュされて処理されなかった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m sphinx content build -E -v&lt;/code&gt; とする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-E: 全処理(キャッシュを使わない)&lt;/li&gt;
&lt;li&gt;-v: 詳細メッセージ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;はまり2: ablog が timezone の有無で日付の比較に失敗する&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;can't compare offset-naive and offset-aware datetimes
&lt;/pre&gt;
&lt;p&gt;これは、既存記事の &lt;code&gt;frontmatter&lt;/code&gt; の日付に &lt;code&gt;timezone&lt;/code&gt; が付いていると
日付の比較に失敗する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="c1"&gt;# site-packages/ablog/blog.py:382&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;と対処した。&lt;/p&gt;
&lt;h3&gt;はまり3: myst-parser の toml frontmatter 対応&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;myst-parser&lt;/code&gt; が &lt;code&gt;---&lt;/code&gt; による &lt;code&gt;yaml&lt;/code&gt; 形式の &lt;code&gt;frontmatter&lt;/code&gt; にしか対応していない様子。
&lt;a href="https://gohugo.io/content-management/front-matter/"&gt;hugo の frontmatter&lt;/a&gt; にある &lt;code&gt;toml&lt;/code&gt; 様式に対応するべく改造したい。&lt;/p&gt;
&lt;h4&gt;切り出し&lt;/h4&gt;
&lt;p&gt;どこで処理しているのか探索が難航した。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;site-packages/mdit_py_plugins/front_matter/index.py&lt;/code&gt;
で処理している。&lt;/p&gt;
&lt;h4&gt;Parse&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;site-packages/myst_parser/docutils_renderer.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;render_front_matter&lt;/code&gt; で切り出した文字列を &lt;code&gt;yaml&lt;/code&gt; でパースしている。
&lt;code&gt;except&lt;/code&gt; 節で &lt;code&gt;toml&lt;/code&gt; にリトライさせたら動いた。&lt;/p&gt;
&lt;h3&gt;モンキーパッチ&lt;/h3&gt;
&lt;p&gt;とりあえず &lt;code&gt;conf.py&lt;/code&gt; にて直接修正する。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ousttrue/ousttrue.github.io/blob/ablog/content/patch.py"&gt;https://github.com/ousttrue/ousttrue.github.io/blob/ablog/content/patch.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;後で PR 送ったりできるかな。&lt;/p&gt;
&lt;h3&gt;ABlog は何をしているのか&lt;/h3&gt;
&lt;h4&gt;toctree無しのpost記事&lt;/h4&gt;
&lt;p&gt;特定の条件で、記事をブログ記事と見做して &lt;code&gt;toctree&lt;/code&gt; 無しで辿れるようにする。
記事は、日付やタグでグループ化してくれる。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ablog.readthedocs.io/en/latest/manual/posting-and-listing/#posting-with-page-front-matter"&gt;https://ablog.readthedocs.io/en/latest/manual/posting-and-listing/#posting-with-page-front-matter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;パス指定。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;blog_post_pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"posts/**/*.md"&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;条件。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="c1"&gt;# .venv/lib/python3.9/site-packages/ablog/post.py&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"blogpost"&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docname&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matched_blog_posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;frontmatter&lt;/code&gt; 等から最低限、日付の情報がとれないとトップページから辿る方法が無い状態になる。&lt;/p&gt;
&lt;p&gt;あと &lt;code&gt;sphinx&lt;/code&gt; なのでトップレベルの表題が本文側に必要かも。
&lt;code&gt;frontmatter&lt;/code&gt; の &lt;code&gt;title&lt;/code&gt; を反映できると便利そう。&lt;/p&gt;
&lt;h4&gt;event: 'doctree-read'&lt;/h4&gt;
&lt;p&gt;doctree から &lt;code&gt;PostNode&lt;/code&gt; を集める。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alog/post#process_posts(app, doctree)&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_posts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doctree&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;post_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doctree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PostNode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;post_nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# PostNode が必要&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="c1"&gt;# 省略&lt;/span&gt;

    &lt;span class="n"&gt;postinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"docname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;docname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"section"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;section_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"order"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"update"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update_dates&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"excerpt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;excerpt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;"location"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"location"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;"language"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"language"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;"redirect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"redirect"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;"nocomments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"nocomments"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;"exclude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"exclude"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;"doctree"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;section_copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;docname&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ablog_posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ablog_posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;docname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ablog_posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;docname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postinfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CheckFrontMatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SphinxTransform&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CheckFrontMatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;/pre&gt;
&lt;h4&gt;追加のページ生成&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ablog/templates&lt;/code&gt; に格納されている。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="c1"&gt;# -- ABlog Sidebars -------------------------------------------------------&lt;/span&gt;

&lt;span class="c1"&gt;# There are seven sidebars you can include in your HTML output.&lt;/span&gt;
&lt;span class="c1"&gt;# postcard.html provides information regarding the current post.&lt;/span&gt;
&lt;span class="c1"&gt;# recentposts.html lists most recent five posts. Others provide&lt;/span&gt;
&lt;span class="c1"&gt;# a link to a archive pages generated for each tag, category, and year.&lt;/span&gt;
&lt;span class="c1"&gt;# In addition, there are authors.html, languages.html, and locations.html&lt;/span&gt;
&lt;span class="c1"&gt;# sidebars that link to author and location archive pages.&lt;/span&gt;
&lt;span class="n"&gt;html_sidebars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'**'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'about.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'postcard.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'navigation.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'recentposts.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'tagcloud.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'categories.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'archives.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'searchbox.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;これらに対して追加のページ生成を行っている。
&lt;code&gt;genindex.html&lt;/code&gt; などのように。&lt;/p&gt;
&lt;h3&gt;ToDo&lt;/h3&gt;
&lt;h4&gt;✅ タグが変&lt;/h4&gt;
&lt;p&gt;toml 由来の tag の処理に失敗している。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;["python", "ssg", "sphinx"]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;が、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;["python"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"ssg"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"sphinx"]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;になっちゃってる。&lt;/p&gt;
&lt;p&gt;https://github.com/sunpy/ablog/pull/119&lt;/p&gt;
&lt;p&gt;送ってみた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v0.10.22&lt;/code&gt; で修正。👍&lt;/p&gt;
&lt;h4&gt;✅ 日付のフォーマット&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;conf.py&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;post_date_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'%Y/%m/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;span class="n"&gt;post_date_format_short&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'%Y/%m'&lt;/span&gt;
&lt;/pre&gt;
&lt;h4&gt;✅ 記事のURL&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/attakei/articles/sphinx-make-dirhtml"&gt;https://zenn.dev/attakei/articles/sphinx-make-dirhtml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;✅ 記事タイトルは最初の見出しではなく、frontmatter の title にしたい&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;MystParser&lt;/code&gt; を改造した。
わりと Sphinx わかってきた。
&lt;code&gt;python&lt;/code&gt; でデバッガがアタッチできるとなんでもできる(慣れ)。&lt;/p&gt;
&lt;h4&gt;[ ] tagの表記振れ&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;c++&lt;/code&gt; と &lt;code&gt;C++&lt;/code&gt;、&lt;code&gt;c#&lt;/code&gt; と &lt;code&gt;csharp&lt;/code&gt; などをたばねる。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://water2litter.net/pisco/doc/ablog.html"&gt;Sphinxでブログをしてみよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>python</category><category>sphinx</category><category>ssg</category><guid>https://ousttrue.github.io/posts/2021/winter/ablog/</guid><pubDate>Sun, 19 Dec 2021 15:00:00 GMT</pubDate></item></channel></rss>
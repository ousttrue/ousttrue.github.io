<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (cythonについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/cython.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2021 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Sat, 04 Dec 2021 17:19:09 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>libclang で 言語バインディングを作る</title><link>https://ousttrue.github.io/posts/2021/winter/cindex/</link><dc:creator>ousttrue</dc:creator><description>&lt;div&gt;&lt;h2&gt;今まで試作したものたち&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(2019)&lt;a href="https://github.com/ousttrue/pycpptool"&gt;https://github.com/ousttrue/pycpptool&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install clang&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ousttrue.github.io/posts/2019/python_clang/"&gt;pythonモジュール clang で C++ ヘッダーを変換する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;途中でデバッグが困難になった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2020)&lt;a href="https://github.com/ousttrue/regenerator"&gt;https://github.com/ousttrue/regenerator&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;D&lt;/code&gt; + &lt;code&gt;lua&lt;/code&gt; (text template によるコード生成部)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2020)&lt;a href="https://github.com/ousttrue/ClangCaster"&gt;https://github.com/ousttrue/ClangCaster&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C#&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ousttrue/items/d878ec97483cb8834793"&gt;libclangでWindowsKitsをDllImportするライブラリを作った(ている)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2020)&lt;a href="https://github.com/ousttrue/clalua"&gt;https://github.com/ousttrue/clalua&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C++&lt;/code&gt; + &lt;code&gt;lua&lt;/code&gt; (text template によるコード生成部)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2021)&lt;a href="https://github.com/ousttrue/frame_factory/tree/master/clanggen"&gt;https://github.com/ousttrue/frame_factory/tree/master/clanggen&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rust&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2021)&lt;a href="https://github.com/ousttrue/luajitffi/tree/master/clang/cdef"&gt;https://github.com/ousttrue/luajitffi/tree/master/clang/cdef&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ousttrue.github.io/posts/2019/luajitffi/"&gt;libclang で luajit 向けの FFI を生成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;imgui による cindex のパース結果のビューワーを作ってみたが動作が遅かった。&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ousttrue/luajitffi/tree/master/clangffi"&gt;https://github.com/ousttrue/luajitffi/tree/master/clangffi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ousttrue/limgui/blob/master/samples/clang_viewer.lua"&gt;https://github.com/ousttrue/limgui/blob/master/samples/clang_viewer.lua&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ものによるのだけど、 &lt;code&gt;d3d11.h&lt;/code&gt; をパースしたりすると
要素が数万とかになる巨大なツリーを構築するので練習に良い。
同じものを作りすぎである。&lt;/p&gt;
&lt;h3&gt;imgui.h&lt;/h3&gt;
&lt;p&gt;限定的にだが &lt;code&gt;c++&lt;/code&gt; の機能を使っているので、言語によっては気持ちよくラップできない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;関数オーバーロードとデフォルト引き数&lt;ul&gt;
&lt;li&gt;mangling は libclang で対処できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rust&lt;/code&gt; などオーバーロードが無いものは厳しい。&lt;/li&gt;
&lt;li&gt;あってもディスパッチするコードを生成するのが厳しい。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const ImVec2 &amp;amp;pos = ImVec2(0, 0)&lt;/code&gt; みたいなのが厳しい。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;フォント設定とかのメンバー関数&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt; の呼び出し関数を用意する必要があるかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;d3d11.h&lt;/h3&gt;
&lt;p&gt;COM の仮想関数テーブルを工夫すれば行ける。
GC言語だとデストラクターの呼びだしが制御できないかも。&lt;/p&gt;
&lt;h2&gt;cython&lt;/h2&gt;
&lt;p&gt;最近、 &lt;code&gt;C&lt;/code&gt; のライブラリーを &lt;code&gt;cython&lt;/code&gt; でラップするのに着目している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/seung-lab/DracoPy"&gt;https://github.com/seung-lab/DracoPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pyimgui/pyimgui"&gt;https://github.com/pyimgui/pyimgui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;練習に作ってみた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ousttrue/pymikktspace"&gt;https://github.com/ousttrue/pymikktspace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;予定&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cindex&lt;/code&gt; で &lt;code&gt;cython&lt;/code&gt; 部分の自動生成をやってみる。
更に、 &lt;code&gt;.pyi&lt;/code&gt; を同時に生成すればコード補完の効くネイティブモジュールが作れるのでは。
あと、 &lt;code&gt;cindex&lt;/code&gt; の使いかたについてのメモをまとめたい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ousttrue/cywrap"&gt;https://github.com/ousttrue/cywrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;サブモジュールだけ cython にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AshleySetter/HowToPackageCythonAndCppFuncs"&gt;https://github.com/AshleySetter/HowToPackageCythonAndCppFuncs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.py4u.net/discuss/175142"&gt;https://www.py4u.net/discuss/175142&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>cython</category><category>libclang</category><category>python</category><guid>https://ousttrue.github.io/posts/2021/winter/cindex/</guid><pubDate>Fri, 03 Dec 2021 15:00:00 GMT</pubDate></item></channel></rss>
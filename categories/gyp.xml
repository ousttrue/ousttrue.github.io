<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (gypについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/gyp.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2022 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Sun, 20 Nov 2022 18:39:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>gypでdebugとrelease設定を分ける</title><link>https://ousttrue.github.io/posts/2014/05/16/gyp_debug_release/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;gypでdebugとrelease設定を分ける
gypでvc2010向けのプロジェクトが生成できたので、
実用に向けて設定のテンプレート的なものを準備する。&lt;/p&gt;
&lt;p&gt;ビルドオートメーションツールGYPを使おう
https://code.google.com/p/gyp/source/browse/trunk/test/win/linker-flags/pdb-output.gyp?spec=svn1832&amp;amp;r=1832&lt;/p&gt;
&lt;p&gt;を参考に設定を追加。
Debug, Release設定の追加
main.cpp
projects.gyp
common.gypi&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gyp projects.gyp --depth .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;とりあえずDebugでステップ実行できた。
こりゃ、よく使うパターンの雛形を揃えるまでは苦しいですな。 premake4,
cmakeもそうだった。&lt;/p&gt;</description><category>gyp</category><guid>https://ousttrue.github.io/posts/2014/05/16/gyp_debug_release/</guid><pubDate>Thu, 15 May 2014 15:00:00 GMT</pubDate></item><item><title>python製のビルドツールgypを使ってみる</title><link>https://ousttrue.github.io/posts/2014/05/15/gyp/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;python製のビルドツールgypを使ってみる
gyp(Generate Your Projects) は、
pythonで記述されたプロジェクト生成ツールで設定からVC向けプロジェクトや、GCC向けMakefileを生成するツールである。
chromeやnode.jsのビルドツールとして採用されているそうな。
機能的にはpremake4やcmakeと同じ範囲をカバーするがそれぞれ以下のような問題があった。&lt;/p&gt;
&lt;p&gt;premake4はわりと気に入っているのだが布教困難。luaで宣言的に記述するのが分かりづらい
cmakeはcmake語が解読不能でちょっとしたプロジェクトのカスタマイズが困難すぎる(OpenCVとかのことだ)&lt;/p&gt;
&lt;p&gt;そこで、python製のgypを試してみた。
gyp導入
環境は、Windows7 + python3。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python setup.py install
:
中略
:
SyntaxError: invalid syntax&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;File "c:\python33\lib\site-packages\gyp-0.1-py3.3.egg\gyp\generator\ninja.py",
 line 475
    print "Warning: Actions/rules writing object files don't work with " \
                                                                       ^
SyntaxError: invalid syntax&lt;/p&gt;
&lt;p&gt;File "c:\python33\lib\site-packages\gyp-0.1-py3.3.egg\gyp\generator\xcode.py",
 line 126
    except OSError, e:
                  ^
SyntaxError: invalid syntax&lt;/p&gt;
&lt;p&gt;python3非対応だった。まぁpython2で。
とりあえずc++の”hello world”をビルドするところから
hello_gyp
    + main.cpp
    + projects.gyp&lt;/p&gt;
&lt;p&gt;main.cpp
projects.gyp
プロジェクト生成。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gyp projects.gyp --depth .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これで、projects.slnとhello_gyp.vcxprojが生成された。
hello_gyp
    + main.cpp
    + projects.gyp
    + projects.sln(generated)
    + hello_gyp.vcxproj(generated)&lt;/p&gt;
&lt;p&gt;vc2010 express editionでprojects.slnを開いてビルドできた。
hello_gyp
    + main.cpp
    + projects.gyp
    + projects.sln
    + hello_gyp.vcxproj
    + Default/hello_gyp.exe(build)&lt;/p&gt;
&lt;p&gt;構成がDebug,
ReleaseではなくDefault一本立てなのでカスタマイズの必要あり。&lt;/p&gt;</description><category>gyp</category><guid>https://ousttrue.github.io/posts/2014/05/15/gyp/</guid><pubDate>Wed, 14 May 2014 15:00:00 GMT</pubDate></item></channel></rss>
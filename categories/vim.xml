<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三次元日誌 (vimについての記事)</title><link>https://ousttrue.github.io/</link><description></description><atom:link href="https://ousttrue.github.io/categories/vim.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2022 &lt;a href="mailto:ousttrue@gmail.com"&gt;ousttrue&lt;/a&gt; </copyright><lastBuildDate>Sun, 18 Sep 2022 09:57:34 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Vimのカラースキーム</title><link>https://ousttrue.github.io/posts/2019/vim_colorscheme/</link><dc:creator>ousttrue</dc:creator><description>&lt;h3&gt;カッコのハイライト&lt;/h3&gt;
&lt;p&gt;カーソル下の反対側のカッコが派手過ぎて気が散る。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://vim-jp.org/vimdoc-ja/pi_paren.html&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/mochizukikotaro/items/7829ab32e0353d49c185"&gt;Vimで括弧の反対側のハイライトを調節する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;hi&lt;/span&gt; MatchParen ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;239&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;両方の色を指定できるとよかったのだけど、反対側のカッコの色を &lt;code&gt;MatchParen&lt;/code&gt; で指定してカーソルの下をそれの反転色にする様子。
ほどほどにグレーで暗い色にして、カーソルがほぼ白になるようにした。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://thinca.hatenablog.com/entry/I_expect_to_colorscheme&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cohama.hateblo.jp/entry/2013/08/11/020849"&gt;Vim のカラースキームが微妙に気に食わないときの対処法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>vim</category><guid>https://ousttrue.github.io/posts/2019/vim_colorscheme/</guid><pubDate>Sat, 24 Aug 2019 15:00:00 GMT</pubDate></item><item><title>Vimのgutter表示</title><link>https://ousttrue.github.io/posts/2019/vim_sign_gutter/</link><dc:creator>ousttrue</dc:creator><description>&lt;h3&gt;使い方&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;piet&lt;/code&gt; を定義して&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;sign&lt;/span&gt; &lt;span class="nb"&gt;define&lt;/span&gt; piet text&lt;span class="p"&gt;=&amp;gt;&amp;gt;&lt;/span&gt; texthl&lt;span class="p"&gt;=&lt;/span&gt;Search
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;piet&lt;/code&gt; を &lt;code&gt;id=2&lt;/code&gt; で配置する&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;:&lt;/span&gt;exe &lt;span class="s2"&gt;":sign place 2 line=23 name=piet file="&lt;/span&gt; . expand&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%:p"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;id=2&lt;/code&gt; を削除する&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;:&lt;/span&gt;exe ":&lt;span class="k"&gt;sign&lt;/span&gt; unplace &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>vim</category><guid>https://ousttrue.github.io/posts/2019/vim_sign_gutter/</guid><pubDate>Sun, 12 May 2019 12:25:03 GMT</pubDate></item><item><title>QuickFixとLocationList周り</title><link>https://ousttrue.github.io/posts/2019/quickfix/</link><dc:creator>ousttrue</dc:creator><description>&lt;h3&gt;setqflist と setloclist&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;# システムでひとつ
setqflist({list} [, {action}[, {what}]])

# Window毎
# nr(Window番号)が増えている
setloclist({nr}, {list} [, {action}[, {what}]])
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;記事&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thinca.hatenablog.com/entry/20130708/1373210009"&gt;quickfix を便利に使う設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><category>vim</category><guid>https://ousttrue.github.io/posts/2019/quickfix/</guid><pubDate>Mon, 06 May 2019 06:09:02 GMT</pubDate></item><item><title>vim の python plugin 関連</title><link>https://ousttrue.github.io/posts/2019/vim_python/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;phthon2は使わないのでスルーで。&lt;/p&gt;
&lt;h3&gt;vim組み込み&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;&lt;code&gt;PLUGIN_ROOT/python3&lt;/code&gt; パス&lt;/h4&gt;
&lt;p&gt;モジュールとして自動で &lt;code&gt;import&lt;/code&gt; されるぽい。
リロードは？
開発不便なのでは。&lt;/p&gt;
&lt;h4&gt;py3file コマンド&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;so%&lt;/code&gt; などを経由してリロードできる。&lt;/p&gt;
&lt;h4&gt;py3 コマンド&lt;/h4&gt;
&lt;p&gt;インポート済みの関数呼び出しなど短い処理にとどめた方がよいと思う。&lt;/p&gt;
&lt;h3&gt;リモートプラグイン&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nvim&lt;/code&gt; の機能で &lt;code&gt;msgpack-rpc&lt;/code&gt; を通した別プロセスでの実行。&lt;/p&gt;
&lt;p&gt;vim8 への移植版。 https://github.com/roxma/nvim-yarp&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;PLUGIN_ROOT/rplugin/python3&lt;/code&gt;&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;neovim&lt;/span&gt; &lt;span class="c1"&gt;# msgpack-rpc で vim と通信する&lt;/span&gt;


&lt;span class="nd"&gt;@neovim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RemotePlugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nvim&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nvim&lt;/span&gt;

    &lt;span class="nd"&gt;@neovim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'HogeCommand'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# vimのコマンドとして実行可能になる&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hogee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;比べてみると&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vim&lt;/code&gt; もしくは &lt;code&gt;neovim&lt;/code&gt; とやり取りする部分は、単体実行ができないような。
なるほど。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;GUIやVIM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;+--------+&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="err"&gt;これを単体で開発する&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;+--------------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="err"&gt;もしくは&lt;/span&gt;&lt;span class="o"&gt;|----&amp;gt;|&lt;/span&gt;&lt;span class="err"&gt;使うモジュール&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;neovim&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;+--------------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="err"&gt;を&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;+--------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;リモートプラグイン(GUI)&lt;/h3&gt;
&lt;p&gt;これは、&lt;code&gt;msgpack-rpc&lt;/code&gt; を使うのだけど &lt;code&gt;GUI&lt;/code&gt; から &lt;code&gt;nvim&lt;/code&gt; を特定の作法で起動して &lt;code&gt;GUIイベントを受け取る&lt;/code&gt; というものでちょっと違う。&lt;/p&gt;</description><category>python</category><category>vim</category><guid>https://ousttrue.github.io/posts/2019/vim_python/</guid><pubDate>Sat, 27 Apr 2019 18:17:07 GMT</pubDate></item><item><title>vim で DebugAdapterProtocol する</title><link>https://ousttrue.github.io/posts/2019/vim_debugger/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;vimで &lt;code&gt;breakpoint&lt;/code&gt; を設置してステップ実行できるようなデバッガを調べた。&lt;/p&gt;
&lt;h2&gt;vim 上のデバッガ&lt;/h2&gt;
&lt;h3&gt;lldb.nvim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/dbgx/lldb.nvim&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim-vebugger&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/idanarye/vim-vebugger&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんか動きそうなのだが、 &lt;code&gt;vimproc&lt;/code&gt; を使っていたので動かせなかった
kaoriya 版の Vim を使うなどしてみたがよくわからず。&lt;/p&gt;
&lt;h3&gt;pyclewn&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/Mistobaan/pyclewn&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gdb と pdb のvimフロントエンド？&lt;/p&gt;
&lt;h3&gt;pubd&lt;/h3&gt;
&lt;p&gt;pythonのpdb.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/inducer/pudb&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim-breakpts&lt;/h3&gt;
&lt;p&gt;vim スクリプト用？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/albfan/vim-breakpts&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vimspector&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/puremourning/vimspector&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VSCodeの &lt;code&gt;DebugAdapterProtocol&lt;/code&gt; を使うものらしい。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While Language Server Protocol is well known, the Debug Adapter Protocol is less well known, but achieves a similar goal: language agnostic API abstracting debuggers from clients.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;動かし方よくわからず。&lt;/p&gt;
&lt;h2&gt;DebugAdapterProtocol&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/blogs/2018/08/07/debug-adapter-protocol-website"&gt;DebugAdapterProtocol&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Microsoft/vscode-debugadapter-node"&gt;旧サイト・リポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;読む。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The "deep understanding of a language" is surfaced by the Language Server Protocol (LSP) and the "debugging support" by the Debug Adapter Protocol (DAP).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;editor &amp;lt;=&amp;gt; adapter &amp;lt;=&amp;gt; gdb
              ||
              ++=====&amp;gt; pdb
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;adapterでラップして同じに見えるようにする。&lt;/p&gt;
&lt;p&gt;adapterの起動設定は、 &lt;code&gt;.vscode/launch.json&lt;/code&gt; にというわけか。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Debug Adapter Protocol is not tied to VS Code and can be used as the foundation for a generic debugger UI in other development tools.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;新サイトで仕様を公開していくで、って書いてあるね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新サイト https://microsoft.github.io/debug-adapter-protocol/&lt;ul&gt;
&lt;li&gt;新リポジトリ https://github.com/Microsoft/debug-adapter-protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;読む。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://microsoft.github.io/debug-adapter-protocol/overview&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;single session mode: in this mode, the development tool starts a debug adapter as a standalone process and communicates with it through stdin and stdout.&lt;/p&gt;
&lt;p&gt;multi session mode: in this mode, the development tool does not start the debug adapter but assumes that it is already running and that it listens on a specific port for connections attempts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;DAPの仕様&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://microsoft.github.io/debug-adapter-protocol/specification&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;DAPの実装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ネイティブコンパイルするタイプは言語ごとではなく、ネイティブコンパイルの様式ごとに違うものになる。例えば、 &lt;code&gt;vc&lt;/code&gt; , &lt;code&gt;gcc&lt;/code&gt; , &lt;code&gt;llvm&lt;/code&gt; のように。&lt;/p&gt;
&lt;p&gt;となるとVMタイプのものは、 &lt;code&gt;.Net&lt;/code&gt;, &lt;code&gt;Mono&lt;/code&gt;, &lt;code&gt;java&lt;/code&gt; といった分類になるのだろうか。
&lt;code&gt;C#&lt;/code&gt;, &lt;code&gt;F#&lt;/code&gt; が両方デバッグできたりしそうではある。&lt;/p&gt;
&lt;p&gt;インタープリター型はそれぞれの言語ごとになる。&lt;/p&gt;
&lt;p&gt;あとは、リモートデバッグの事情を調べる。&lt;/p&gt;
&lt;h4&gt;native debug&lt;/h4&gt;
&lt;p&gt;c++やd, rustなんかのnativeコードを出力するものをまとめて面倒見れるという理解であったいるのかな。ビルド形式とデバッグビルドに付加される情報のフォーマットに対応してデバッガを選択する必要があると。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/Microsoft/vscode-cpptools&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LLVM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/vadimcn/vscode-lldb&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;.Net&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Mono debugging is not supported.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ILは互換性があるにしても、VMのデバッグインタフェースは互換性が無いということなのかな。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/OmniSharp/omnisharp-vscode&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Mono&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/Microsoft/vscode-mono-debug&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Unity&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/Unity-Technologies/vscode-unity-debug&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UnityEditorにアタッチできるらしい。
Unity版のMonoにアタッチできるということかしら。&lt;/p&gt;
&lt;h4&gt;lua / ravi&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/dibyendumajumdar/ravi-vscode-debugger&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんなのあるのか・・・&lt;/p&gt;
&lt;h4&gt;powershell&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/PowerShell/vscode-powershell&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;python&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/Microsoft/vscode-python&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;vimspectorの実装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/puremourning/vimspector&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;読む。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.\install_gadget.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;を実行することで、 &lt;code&gt;VSCode&lt;/code&gt; の &lt;code&gt;extension&lt;/code&gt; を &lt;code&gt;download&lt;/code&gt; する。
&lt;code&gt;extension&lt;/code&gt; に、 &lt;code&gt;DAP&lt;/code&gt; が含まれているのでこれを使う。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;autoload/vimspector.vim&lt;/code&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; vimspector#Launch&lt;span class="p"&gt;()&lt;/span&gt; abort
  &lt;span class="k"&gt;py3&lt;/span&gt; _vimspector_session.Start&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;python3/vimspector/debug_session.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DebugSession&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;vim.bindeval&lt;/code&gt; を使っているので、 &lt;code&gt;vim8&lt;/code&gt; 専用。
&lt;code&gt;nvim&lt;/code&gt; では回避する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.vimspector.json&lt;/code&gt; &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"adapters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;の &lt;code&gt;configurations&lt;/code&gt; からデバッグセッションの起動方法を取得して、
デバッグアダプターを &lt;code&gt;vim&lt;/code&gt; の &lt;code&gt;job&lt;/code&gt; か &lt;code&gt;channel&lt;/code&gt; 経由で起動する。
&lt;code&gt;configurations&lt;/code&gt; が &lt;code&gt;.vscode/launch.json&lt;/code&gt; に相当するようだ。
&lt;code&gt;adapters&lt;/code&gt; は、インストールされている &lt;code&gt;DebugAdapter&lt;/code&gt; のリスト。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;call vimspector#Launch()&lt;/code&gt; &lt;code&gt;simple_python - launch&lt;/code&gt; &lt;code&gt;/Users/ousttrue&lt;/code&gt; と入力することでjobが、アダプター開始するところまでできた。
しかし、アダプターがすぐに死んでいる様子。&lt;/p&gt;
&lt;p&gt;アダプターを手動起動してみる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;node .\.vscode\extensions\ms-python.python-2019.4.11987\out\client\debugger\debugAdapter\main.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.vimspector.json&lt;/code&gt; に書いてあるのとバージョンが違う。
&lt;code&gt;file not found&lt;/code&gt; か。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;path&lt;/code&gt; をなおしたら動いた😃&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;-          "$HOME/.vscode/extensions/ms-python.python-2018.4.0/out/client/debugger/Main.js"
+          "$HOME/.vscode/extensions/ms-python.python-2019.4.11987/out/client/debugger/debugAdapter/Main.js"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;neovim&lt;/code&gt; の &lt;code&gt;rplugin&lt;/code&gt; での構成を考えてみようか。&lt;/p&gt;
&lt;h2&gt;python3 で Adapter を起動してみる&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;AdapterAdapter&lt;/code&gt; というか &lt;code&gt;AdapterBridge&lt;/code&gt; という感じになりそうだけど、
&lt;code&gt;vim&lt;/code&gt; で込み入った実装をするのは手に余るので、可能な限り &lt;code&gt;python&lt;/code&gt; で事を進めよう。
pythonでprotocl実験。&lt;/p&gt;
&lt;p&gt;https://github.com/ousttrue/daplauncher&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://pydev.blogspot.com/2018/05/howto-launch-and-debug-in-vscode-using.html&lt;/li&gt;
&lt;li&gt;https://vscode-docs.readthedocs.io/en/stable/extensions/example-debuggers/&lt;/li&gt;
&lt;li&gt;https://vscode-docs.readthedocs.io/en/stable/extensionAPI/api-debugging/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;launchRequestの後で固まると思ったら、サイトに記述されていないパラメーターがあった。
&lt;code&gt;console&lt;/code&gt; どこに書いてあるのか・・・&lt;/p&gt;
&lt;p&gt;https://github.com/Microsoft/vscode-debugadapter-node/blob/master/debugProtocol.json&lt;/p&gt;
&lt;p&gt;https://github.com/Microsoft/vscode-python/issues/3762&lt;/p&gt;
&lt;p&gt;わかった。&lt;/p&gt;
&lt;p&gt;https://github.com/Microsoft/vscode-go/issues/219&lt;/p&gt;
&lt;p&gt;vscodeの &lt;code&gt;.vscode/launch.json&lt;/code&gt; の起動設定を &lt;code&gt;launch&lt;/code&gt; の引数に合体するのだ。&lt;/p&gt;
&lt;p&gt;https://code.visualstudio.com/Docs/editor/debugging#_launchjson-attributes&lt;/p&gt;
&lt;p&gt;書いとけよー。&lt;/p&gt;</description><category>dap</category><category>vim</category><guid>https://ousttrue.github.io/posts/2019/vim_debugger/</guid><pubDate>Sat, 27 Apr 2019 10:00:26 GMT</pubDate></item><item><title>vimscriptからpythonするのを補助するpycallを作る</title><link>https://ousttrue.github.io/qiita/vimscriptkarapythonsurunowobu-zhu-surupycallwozuo-ru/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;a href="https://qiita.com/ousttrue/items/d2f831199e4764d89bbc"&gt;https://qiita.com/ousttrue/items/d2f831199e4764d89bbc&lt;/a&gt;&lt;/p&gt;</description><category>plugin</category><category>python</category><category>qiita</category><category>vim</category><guid>https://ousttrue.github.io/qiita/vimscriptkarapythonsurunowobu-zhu-surupycallwozuo-ru/</guid><pubDate>Tue, 23 Apr 2019 17:29:17 GMT</pubDate></item><item><title>vim の Buffer 操作のメモ</title><link>https://ousttrue.github.io/posts/2019/vim_buffer/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;code&gt;buffer list&lt;/code&gt; &amp;lt; &lt;code&gt;buffer&lt;/code&gt; &amp;gt; &lt;code&gt;window&lt;/code&gt; &amp;gt; &lt;code&gt;tab&lt;/code&gt; &amp;gt; &lt;code&gt;vim&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;という感じ&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:help window&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Summary:
   A buffer is the in-memory text of a file.
   A window is a viewport on a buffer.
   A tab page is a collection of windows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Tab&lt;/h3&gt;
&lt;h4&gt;autocmd events&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;TabEnter: after entering another tab page&lt;/li&gt;
&lt;li&gt;TabLeave: before leaving a tab page&lt;/li&gt;
&lt;li&gt;TabNew: when creating a new tab page&lt;/li&gt;
&lt;li&gt;TabNewEntered: after entering a new tab page&lt;/li&gt;
&lt;li&gt;TabClosed: after closing a tab page&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Window&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://vim-jp.org/vimdoc-ja/windows.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Window番号は、vim によって自動で振られる。
BufferからWindow番号を手繰る。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bufwinnr('buf_name')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;tabにひとつだけ &lt;code&gt;previewwindow&lt;/code&gt; を作れる。&lt;/p&gt;
&lt;h4&gt;autocmd events&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;WinNew: after creating a new window&lt;/li&gt;
&lt;li&gt;WinEnter: after entering another window&lt;/li&gt;
&lt;li&gt;WinLeave: before leaving a window&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;winnr&lt;/h4&gt;
&lt;p&gt;Windowの増減で番号が代わる。&lt;/p&gt;
&lt;h4&gt;win_getid&lt;/h4&gt;
&lt;p&gt;vimセッション中不変のユニークなID&lt;/p&gt;
&lt;h5&gt;id to nr&lt;/h5&gt;
&lt;h4&gt;win_id2tabwin&lt;/h4&gt;
&lt;p&gt;vimセッション中不変のユニークなID&lt;/p&gt;
&lt;h4&gt;指定のWindowに移動する&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;:&lt;/span&gt;exe nr . &lt;span class="s2"&gt;"wincmd w"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; win_gotoid&lt;span class="p"&gt;(&lt;/span&gt;id&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;split&lt;/h4&gt;
&lt;h4&gt;vsplit&lt;/h4&gt;
&lt;h4&gt;topleft&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;+---+
| 1 |
+-+-+
| |0|
+-+-+
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;aboveleft&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;+-+-+
| |1|
| +-+
| |0|
+-+-+
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Buffer + Window&lt;/h3&gt;
&lt;h4&gt;閉じるときの挙動&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;:bdelete&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最後のWindowでない時&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そのバッファを表示しているWindowごと取り除かれる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最後のWindowの時&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;バッファを取り除いて、 &lt;code&gt;:bnext&lt;/code&gt; される&lt;/p&gt;
&lt;h3&gt;BufferList&lt;/h3&gt;
&lt;h4&gt;bufferlisted&lt;/h4&gt;
&lt;h4&gt;new name&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;split&lt;/li&gt;
&lt;li&gt;enew&lt;/li&gt;
&lt;li&gt;file name&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;vne[w] name&lt;/h4&gt;
&lt;p&gt;vertical new&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vsplit&lt;/li&gt;
&lt;li&gt;enew&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;bd[elete]&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;カレントバッファを閉じる&lt;/li&gt;
&lt;li&gt;このバッファを開いているWindowをすべて閉じる。&lt;/li&gt;
&lt;li&gt;buffer-listから取り除く&lt;/li&gt;
&lt;li&gt;bufferはまだ消えてない&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;bdwipeout&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;カレントバッファを閉じる&lt;/li&gt;
&lt;li&gt;このバッファを開いているWindowをすべて閉じる。&lt;/li&gt;
&lt;li&gt;buffer-listから取り除く&lt;/li&gt;
&lt;li&gt;bufferを消す&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Buffer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"$": last buffer&lt;/li&gt;
&lt;li&gt;0, "#": alternate buffer&lt;/li&gt;
&lt;li&gt;"%", "": current buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;autocmd events(Bufferの変化)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;BufNewFile: starting to edit a file that doesn't exist&lt;/li&gt;
&lt;li&gt;BufReadPre: starting to edit a new buffer, before reading the file&lt;/li&gt;
&lt;li&gt;BufRead: starting to edit a new buffer, after reading the file&lt;/li&gt;
&lt;li&gt;BufReadPost: starting to edit a new buffer, after reading the file&lt;/li&gt;
&lt;li&gt;BufReadCmd: before starting to edit a new buffer |Cmd-event|&lt;/li&gt;
&lt;li&gt;BufWrite: starting to write the whole buffer to a file&lt;/li&gt;
&lt;li&gt;BufWritePre: starting to write the whole buffer to a file&lt;/li&gt;
&lt;li&gt;BufWritePost: after writing the whole buffer to a file&lt;/li&gt;
&lt;li&gt;BufWriteCmd: before writing the whole buffer to a file |Cmd-event: &lt;/li&gt;
&lt;li&gt;BufAdd: just after adding a buffer to the buffer list&lt;/li&gt;
&lt;li&gt;BufCreate: just after adding a buffer to the buffer list&lt;/li&gt;
&lt;li&gt;BufDelete: before deleting a buffer from the buffer list&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BufWipeout: before completely deleting a buffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BufFilePre: before changing the name of the current buffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BufFilePost: after changing the name of the current buffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BufEnter: after entering a buffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;BufLeave: before leaving to another buffer&lt;/li&gt;
&lt;li&gt;BufWinEnter: after a buffer is displayed in a window&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BufWinLeave: before a buffer is removed from a window&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BufUnload: before unloading a buffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;BufHidden: just after a buffer has become hidden&lt;/li&gt;
&lt;li&gt;BufNew: just after creating a new buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;autocmd events(Bufferの中身の変化)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CursorMoved&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;:file&lt;/h4&gt;
&lt;p&gt;バッファ名(ファイル名)&lt;/p&gt;
&lt;h4&gt;bufnr&lt;/h4&gt;
&lt;p&gt;名前から番号を得る&lt;/p&gt;
&lt;h4&gt;bufname&lt;/h4&gt;
&lt;p&gt;番号から名前を得る&lt;/p&gt;
&lt;h4&gt;bufexists&lt;/h4&gt;
&lt;h4&gt;bufloaded&lt;/h4&gt;
&lt;p&gt;bufexists and not bufloaded はあり得る&lt;/p&gt;
&lt;h4&gt;bnext&lt;/h4&gt;
&lt;h3&gt;Buffer Variables&lt;/h3&gt;
&lt;h4&gt;getbufvar&lt;/h4&gt;
&lt;h4&gt;setbufvar&lt;/h4&gt;</description><category>vim</category><guid>https://ousttrue.github.io/posts/2019/vim_buffer/</guid><pubDate>Tue, 23 Apr 2019 05:30:07 GMT</pubDate></item><item><title>buffer を持つ vim plugin を作る</title><link>https://ousttrue.github.io/posts/2019/vim_create_plugin_has_buffer/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;独自のバッファを持つpluginを作りたい&lt;/p&gt;
&lt;h3&gt;BufferList読んでみる&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/vim-scripts/bufferlist.vim/blob/master/plugin/bufferlist.vim&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;273行&lt;/p&gt;
&lt;p&gt;この量なら読める。&lt;/p&gt;
&lt;h4&gt;インクルードガード&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;if&lt;/span&gt; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'g:BufferListLoaded'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;finish&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:BufferListLoaded &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;初期値決め&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c"&gt;" vimrcで先に値を決められるようにしている？&lt;/span&gt;
&lt;span class="c"&gt;" vimrc より plugin の方が後に実行されるからか？&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'g:BufferListWidth'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:BufferListWidth &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'g:BufferListMaxWidth'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:BufferListMaxWidth &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;40&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;BufferList関数&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;__BUFFERLIST__&lt;/code&gt; という Buffer を専用のバッファとして扱う。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c"&gt;" toggled the buffer list on/off&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; BufferList&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;  " if we get called and the list is open --&amp;gt; close it&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; bufexists&lt;span class="p"&gt;(&lt;/span&gt;bufnr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"__BUFFERLIST__"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c"&gt;    " 既に開いていたら閉じる&lt;/span&gt;
    exec &lt;span class="s1"&gt;':'&lt;/span&gt; . bufnr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"__BUFFERLIST__"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; . &lt;span class="s1"&gt;'bwipeout'&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;bufnr&lt;/code&gt; でバッファ名からバッファ番号を得て、&lt;code&gt;bufexists&lt;/code&gt; で存在を確認する。
&lt;code&gt;bufnr&lt;/code&gt; には特別な名前を指定出来て以下のような効果があるようだ。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:bufcount &lt;span class="p"&gt;=&lt;/span&gt; bufnr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:activebuf &lt;span class="p"&gt;=&lt;/span&gt; bufnr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;バッファを作る&lt;/h5&gt;
&lt;p&gt;作ったバッファがアクティブになり、以降の操作対象になる。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c"&gt;  " now, create the buffer &amp;amp; set it up&lt;/span&gt;
  exec &lt;span class="s1"&gt;'silent! '&lt;/span&gt; . &lt;span class="k"&gt;l&lt;/span&gt;:width . &lt;span class="s1"&gt;'vne __BUFFERLIST__'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;色決め&lt;/h5&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c"&gt;  " set up syntax highlighting&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"syntax"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;syn&lt;/span&gt; clear
    &lt;span class="k"&gt;syn&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; BufferNormal &lt;span class="sr"&gt;/  .*/&lt;/span&gt;
    &lt;span class="k"&gt;syn&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; BufferSelected &lt;span class="sr"&gt;/&amp;gt; .*/&lt;/span&gt;hs&lt;span class="p"&gt;=&lt;/span&gt;s&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;hi&lt;/span&gt; &lt;span class="nb"&gt;def&lt;/span&gt; BufferNormal ctermfg&lt;span class="p"&gt;=&lt;/span&gt;black ctermbg&lt;span class="p"&gt;=&lt;/span&gt;white
    &lt;span class="k"&gt;hi&lt;/span&gt; &lt;span class="nb"&gt;def&lt;/span&gt; BufferSelected ctermfg&lt;span class="p"&gt;=&lt;/span&gt;white ctermbg&lt;span class="p"&gt;=&lt;/span&gt;black
  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;Buffer構築&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;setlocal nomodifiable&lt;/code&gt; で編集不可に&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;  &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;modifiable&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:displayedbufs &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="c"&gt;    " input the buffer list, delete the trailing newline, &amp;amp; fill with blank lines&lt;/span&gt;
    &lt;span class="k"&gt;put&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;:buflist
&lt;span class="c"&gt;    " is there any way to NOT delete into a register? bummer...&lt;/span&gt;
&lt;span class="c"&gt;    "norm Gdd$&lt;/span&gt;
    norm GkJ
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;winheight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;put&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;:fill
    &lt;span class="k"&gt;endwhile&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:&lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:&lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;winheight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:&lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:&lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;put&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;:fill
    &lt;span class="k"&gt;endwhile&lt;/span&gt;
    norm &lt;span class="m"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;endif&lt;/span&gt;
  &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;nomodifiable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;操作を設定&lt;/h5&gt;
&lt;p&gt;バッファローカルに &lt;code&gt;map&lt;/code&gt; を設定する。
&lt;code&gt;map&lt;/code&gt; がキーボード・マウス入力へのコールバック設定になっているのか。なるほど。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c"&gt;  " set up the keymap&lt;/span&gt;
  &lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; LoadBuffer&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;q&lt;/span&gt; :&lt;span class="k"&gt;bwipeout&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;j&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; BufferListMove&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"down"&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;k&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; BufferListMove&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"up"&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;d&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; BufferListDeleteBuffer&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;MouseDown&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; BufferListMove&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"up"&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;MouseUp&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; BufferListMove&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"down"&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LeftDrag&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Nop&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LeftRelease&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; BufferListMove&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mouse"&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;LeftMouse&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; BufferListMove&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mouse"&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    \:&lt;span class="k"&gt;call&lt;/span&gt; LoadBuffer&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Down&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;j&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Up&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;k&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;左右への動きを封じてある&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Nop&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Nop&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Left&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Nop&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Right&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Nop&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;その他編集系の機能を封じる&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Nop&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Nop&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; I &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Nop&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; A &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Nop&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;o&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Nop&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; O &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Nop&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;移動&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;BufferListMove&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;End&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;BufferListMove&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"$"&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;情報収集&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;:set nomodifiable&lt;/code&gt; で調べてみた&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://tyru.hatenablog.com/entry/20101107/modifiable_and_readonly&lt;/li&gt;
&lt;li&gt;https://vimconf.org/2018/slides/Effective_Modern_Vim_scripting_at_vimconf2018_for_PDF.pdf&lt;/li&gt;
&lt;li&gt;https://vi.stackexchange.com/questions/17140/how-to-create-a-buffer-like-a-fugitive-temporary-buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;:set buftype=nofile&lt;/code&gt; が出てきた&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://leafcage.hateblo.jp/entry/2013/11/21/083830"&gt;'nobuflisted' なバッファの作り方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://vi.stackexchange.com/questions/14832/how-to-create-a-buffer-with-customized-behavior-how-to-create-a-buffer-that-a&lt;/li&gt;
&lt;li&gt;http://learnvimscriptthehardway.stevelosh.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;NERDTree解読&lt;/h3&gt;
&lt;h4&gt;左側にどうやって &lt;code&gt;split&lt;/code&gt; して開くのか&lt;/h4&gt;
&lt;h4&gt;ファイルを選択して開くとき開き先をどうやって決めるのか&lt;/h4&gt;
&lt;h3&gt;pythonに移植できんやろか&lt;/h3&gt;
&lt;p&gt;つまり、Pythonでvimから見える関数を定義できれば勝つるのでは。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://candidtim.github.io/vim/2017/08/11/write-vim-plugin-in-python.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;vim.eval&lt;/code&gt; とかあるな・・・。いけるのでは？&lt;/p&gt;
&lt;p&gt;慣れたら全部 &lt;code&gt;vim script&lt;/code&gt; で書くようになりそうだけど、練習に移植してみよか。&lt;/p&gt;
&lt;p&gt;nvimで、&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:py3 import sys; print(sys.version)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;としたら&lt;/p&gt;
&lt;p&gt;&lt;code&gt;3.6.8 (tags/v3.6.8:3c6b436a57, Dec 23 2018, 23:31:17) [MSC v.1916 32 bit (Intel)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;と返ってきた。なるほど。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[Pythonでvim pluginを書く https://qiita.com/zakuro9715/items/98449dd4c6b9e1d61ef5]&lt;/li&gt;
&lt;/ul&gt;</description><category>vim</category><guid>https://ousttrue.github.io/posts/2019/vim_create_plugin_has_buffer/</guid><pubDate>Mon, 22 Apr 2019 15:13:09 GMT</pubDate></item><item><title>vim の Completion について調べる</title><link>https://ousttrue.github.io/posts/2019/vim_completion/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;&lt;code&gt;omnicompletion&lt;/code&gt; とかいろいろあるけどどう違うねん。ということで調べる。
&lt;code&gt;help ins-completion&lt;/code&gt;
&lt;code&gt;help complete-functions&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;いろいろな補完&lt;/h3&gt;
&lt;h3&gt;補完関数を定義&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;C-X&amp;gt;&amp;lt;C-U&amp;gt;&lt;/code&gt; を &lt;code&gt;set completefunc&lt;/code&gt; で、
&lt;code&gt;&amp;lt;C-X&amp;gt;&amp;lt;C-O&amp;gt;&lt;/code&gt; を &lt;code&gt;set omnifunc&lt;/code&gt; でユーザー定義できる。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:my_omni_complete&lt;span class="p"&gt;(&lt;/span&gt;findstart&lt;span class="p"&gt;,&lt;/span&gt; base&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:findstart
&lt;span class="c"&gt;        " 補完の開始列を返す&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="c"&gt;    " 補完候補を返す&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:matches &lt;span class="p"&gt;=&lt;/span&gt;  [&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"c"&lt;/span&gt;]
    &lt;span class="k"&gt;return&lt;/span&gt; {&lt;span class="s1"&gt;'words'&lt;/span&gt;: matches&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'refresh'&lt;/span&gt;: &lt;span class="s1"&gt;'always'&lt;/span&gt;}

&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c"&gt;"setlocal complefunc = &lt;/span&gt;
&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;omnifunc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; s:my_omni_complete
&lt;span class="c"&gt;" menuone&lt;/span&gt;
&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;completeopt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; menu&lt;span class="p"&gt;,&lt;/span&gt;preview&lt;span class="p"&gt;,&lt;/span&gt;longest
&lt;span class="c"&gt;" default&lt;/span&gt;
&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;previewheight&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="c"&gt;"setlocal pumheight&lt;/span&gt;
&lt;span class="k"&gt;setlocal&lt;/span&gt; pumwidth &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;のように定義する。&lt;/p&gt;
&lt;h4&gt;最初の実行時&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;On the first invocation the arguments are:
   a:findstart  1
   a:base empty&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;候補の取得&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;On the second invocation the arguments are:
   a:findstart  0
   a:base the text with which matches should match; the text that was
      located in the first call (can be empty)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;補完候補&lt;/h4&gt;
&lt;p&gt;単なる文字列か以下のdictionary&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inserted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mandatory&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;abbr&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;abbreviation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"word"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;instead&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"word"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;menu&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;popup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;displayed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"word"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"abbr"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;displayed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;preview&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;single&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;indicating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;completion&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;#define or macro&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;icase&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ignored&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comparing&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;omitted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;thus&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;differ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;added&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dup&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;added&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;even&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;same&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;already&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;present&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;added&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;even&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;associated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;completed_item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;非同期で更新&lt;/h4&gt;
&lt;h4&gt;自動的にsuggest&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;deoplete&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;呼び出し例&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;expr&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; . MayComplete&lt;span class="p"&gt;()&lt;/span&gt;
func MayComplete&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;can &lt;span class="nb"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;".\&amp;lt;C-X&amp;gt;\&amp;lt;C-O&amp;gt;"&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'.'&lt;/span&gt;
endfunc
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;実装例&lt;/h4&gt;
&lt;h5&gt;vim-lsp&lt;/h5&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;lsp&lt;/span&gt;#omni#&lt;span class="nb"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;findstart&lt;span class="p"&gt;,&lt;/span&gt; base&lt;span class="p"&gt;)&lt;/span&gt; abort
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:findstart
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="c"&gt;        " language serverに補完候補ををリクエスト&lt;/span&gt;
        &lt;span class="k"&gt;call&lt;/span&gt; s:send_completion_request&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;:info&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;        " 空で抜ける&lt;/span&gt;
        &lt;span class="k"&gt;redraw&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;v&lt;/span&gt;:none
    &lt;span class="k"&gt;endif&lt;/span&gt;
endfunc
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c"&gt;" call s:send_completion_request(l:info) のコールバック&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nb"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:matches&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>lsp</category><category>vim</category><guid>https://ousttrue.github.io/posts/2019/vim_completion/</guid><pubDate>Sun, 21 Apr 2019 17:17:20 GMT</pubDate></item><item><title>Denite練習</title><link>https://ousttrue.github.io/posts/2019/use_denite/</link><dc:creator>ousttrue</dc:creator><description>&lt;p&gt;nvim 環境が軌道に乗ってきたので、 &lt;code&gt;denite&lt;/code&gt; やってみよう。&lt;/p&gt;
&lt;h3&gt;source 作る&lt;/h3&gt;
&lt;h4&gt;リポジトリ&lt;/h4&gt;
&lt;p&gt;https://github.com/ousttrue/deso&lt;/p&gt;
&lt;p&gt;作った&lt;/p&gt;
&lt;p&gt;とりあえず &lt;code&gt;dein.toml&lt;/code&gt; に登録。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;'ousttrue/deso'&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;nvim 再起動して &lt;code&gt;~/.cache/dein/repose/github.com/ousttrue/deso&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;にクローンされるところまで確認。&lt;/p&gt;
&lt;h4&gt;deso.py&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;rplugin/python3/denite/source/deso.py&lt;/code&gt; を作る&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'deso'&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'word'&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gather_candidates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;candidates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;candidates&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;:UpdateRemotePlugin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;して、&lt;code&gt;Denite deso&lt;/code&gt; で空のリストが返るところまで確認した。&lt;/p&gt;
&lt;h3&gt;中身作る&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;help denite-create_-source&lt;/code&gt; を読む。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gather_candidates&lt;/code&gt; は &lt;code&gt;dictionary&lt;/code&gt; の &lt;code&gt;list&lt;/code&gt; を返す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dictionary&lt;/code&gt; の様式は、 &lt;code&gt;help denite-candidate-attributes&lt;/code&gt; を読む。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"word"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"hogehoge"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# required&lt;/span&gt;
    &lt;span class="s2"&gt;"abbr"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"hoge"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# 表示用。無くてもよい&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;なるほど。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gather_candidates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;"word"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;date&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;しかし、うまくいかず。どうも変更が反映されないなーと悩んでいたのだが、&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/.cache/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/deso.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;を見たら最初に作った空の候補を返す状態だった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:UpdateRemotePlugin&lt;/code&gt; 
で元のファイルに更新があっても置き換えてくれないように見えた。&lt;/p&gt;
&lt;p&gt;dein で &lt;code&gt;denite&lt;/code&gt; を入れなおしたら更新できた。
もっと楽に更新する方法は無いのかしら。&lt;/p&gt;
&lt;p&gt;シンボリックリンクにしてごまかした w&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;ln -s ~/.cache/dein/repos/github.com/ousttrue/deso/rplugin/python3/denite/source/deso.py
~/.cache/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/deso.py
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これで、 &lt;code&gt;neovim&lt;/code&gt; を再起動すればリロードできるようになった。
そのうち正しいやり方がわかるだろう・・・&lt;/p&gt;</description><category>vim</category><guid>https://ousttrue.github.io/posts/2019/use_denite/</guid><pubDate>Sun, 21 Apr 2019 09:13:27 GMT</pubDate></item></channel></rss>
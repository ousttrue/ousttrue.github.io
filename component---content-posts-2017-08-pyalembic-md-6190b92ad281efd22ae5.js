"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3814],{2441:function(e,n,t){t.r(n);var l=t(1151),a=t(7294);function i(e){const n=Object.assign({p:"p",pre:"pre",code:"code"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"Windows 上で PyAlembic を使いたいのだができるのか。\n素直に Linux でやるべきでは・・・\nWindows10(64bit) + Python-3.6(64bit)"),"\n",a.createElement(n.p,null,"作業場。"),"\n",a.createElement(n.p,null,"https://github.com/ousttrue/openexr"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"Anaconda3(Windows10 64bit)でモジュール探す\n> conda install -c conda-forge alembic\n")),"\n",a.createElement(n.p,null,"しかし、これは違う Alembic だった。\nPython の alembic は、database migrations tool と名前が被っております。\nなるほど・・・。\nPython2.7 なら"),"\n",a.createElement(n.p,null,"http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyalembic"),"\n",a.createElement(n.p,null,"あとから発見。わいは、Python3.6 にしたいので。\n自前でビルドを試みる\nalembic-1.7.1/python/PyAlembic がそれですな。\n問題が２つある。"),"\n",a.createElement(n.p,null,"Python2(Python3 にしたい)\nBoost.Python(PyBind11 にしてリンク問題とおさらばしたい)"),"\n",a.createElement(n.p,null,"さすがに PyBind11 差し替えはやるにしても後にするべきなので、 Python3 化だけやる。\nBoost.Python のビルド\nBoost.Python で使う Python を明示するには、user-config.jam に記述する。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"BOOST_DIR/user-conifg.jam\nusing python\n    : 3.6                   # Version\n    : D:\\\\Anaconda3\\\\python.exe      # Python Path\n    : D:\\\\Anaconda3\\\\include         # include path\n    : D:\\\\Anaconda3\\\\libs            # lib path(s)\n    : <define>BOOST_ALL_NO_LIB=1\n    ;\n")),"\n",a.createElement(n.p,null,"ビルド"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"boost> b2.exe -j3 --stagedir=stage\\x86_64 link=shared runtime-link=shared threading=multi toolset=msvc-14.0 address-model=64 --with-python\n")),"\n",a.createElement(n.p,null,"link=shared にして dll を生成することが必要。\nこれは、iex.pyd と imath.pyd 間で Boost.Python の static 変数を共有するために必須である(pyex の型登録周りか)。\nIlmBase を修正\nilmbase-2.2.0/IexMath/IexMathFloatExc.h\nの以下の部分を修正する。多分、記述ミスなのだけど誰も Windows ビルドしないので気付かれていないのであろう。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-c++"},"//#if defined(IEX_EXPORTS)↲\n#if defined(IEXMATH_EXPORTS)↲\n")),"\n",a.createElement(n.p,null,"これで ilmbase をビルドしておく。vcpkg を使った。\nalembic を修正\nalembic-1.7.1/lib/Alembic/AbcCoreLayer/CMakeLists.txt を修正してヘッダを追加する(PyAlembic が使う)"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},"INSTALL(FILES Read.h Util.h\n    Foundation.h # 追加\n    DESTINATION include/Alembic/AbcCoreLayer)\n")),"\n",a.createElement(n.p,null,"これも、vcpkg を使った。\nPyIlmBase のビルド\nOpenEXR のサイトにある pyilmbase-2.2.0tar.gz を使おうとしたのだけど、github の方が新しいようなのでこちらを使う。\nPython3 向けの修正\nPython2 と Pytnon3 間での非互換によるコンパイルエラーを直していく。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"PySliceObject_XXX -> PyObject_XXX\nPyInt_XXX -> PyLong_XXX\nPyString_AsString -> PyUnicode_AsUTF8\n_PyThreadState_Current -> _PyThreadState_UncheckedGet()\n")),"\n",a.createElement(n.p,null,"参考"),"\n",a.createElement(n.p,null,"Python3 Advent Calendar - Python で 2/3 両方で動くコードを書く(C/API)\nFix build for Python 3.5\nhttp://py3c.readthedocs.io/en/latest/guide.html"),"\n",a.createElement(n.p,null,"CMake 設定"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},"CMAKE_INSTALL_PREFIX\nBOOST_ROOT\nILMBASE_PACKAGE_PREFIX\nFIND_PACKAGE(numpy)をコメントアウト\nDebugでもPython36.libにリンクするように、#include <Python.h>を除去(boost/python.hpp経由でインクルードさせればそうなる)\n")),"\n",a.createElement(n.p,null,"ビルドが通るようになった。\nPyAlembic のビルド\n当初、Alembic のプロジェクトで Python フラグを有効にして一緒にビルドしようとしていたが、PyIlmBase 傘下に PyAlembic をコピーする方式に変えた。\nalembic-1.7.1/python/PyAlembic を ilmbase-2.2.0/PyIlmBase にコピーして、CMakeLists.txt を調整する。\nCMake 設定"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-cmake"},"Alembic_ROOT\n")),"\n",a.createElement(n.p,null,"参考"),"\n",a.createElement(n.p,null,"uimac 実装メモ - PyImath"),"\n",a.createElement(n.p,null,"PyAlembic のビルドが通ったので実行してみよう\nPyAlembic/Tests/testPolyMesh.py を動かしてみようと思う。\nこういう感じに準備する。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"testPolyMesh.py\niex.pyd\nPyIex.dll\nimath.pyd\nPyImath.dll\nalembic.lib\nalembic.pyd\nboost_python-vc140-mt-1_61.dll # debug buildもこれ\n\n> C:/python36/python.exe testPolyMesh.py\n")),"\n",a.createElement(n.p,null,"import alembic でクラッシュする。デバッガで追ってみると、モジュールの初期化でエラーが発生している。一個ずつ直す。\n初期化の修正\nPython3 化による変更？\nAbcView\n今回の作業目標。"),"\n",a.createElement(n.p,null,"http://alembic.github.io/abcview/"),"\n",a.createElement(n.p,null,"これを動作させたい。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"AbcView has the following requirements:\n\nPython 2.6+ => Python 3.6 で動くように改造する(print 文とか)\nPyAlembic。できた\nPyAbcOpenGL。できた\nPyOpenGL。pip\nargparse。pip\nPyQt4。http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyalembic\nnumpy-mkl。http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyalembic\n\nPyQt4 をインストール\n\nhttps://stackoverflow.com/questions/22640640/how-to-install-pyqt4-on-windows-using-pip\nhttp://www.lfd.uci.edu/~gohlke/pythonlibs/#pyqt4\n\nこんな感じで公式の Python3.6(64bit)に対してインストール。\nD:\\Python36\\Scripts\\pip.exe install .\\PyQt4-4.11.4-cp36-cp36m-win_amd64.whl\n\nhttps://www.tutorialspoint.com/pyqt/pyqt_hello_world.htm\n")),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},'import sys\nfrom PyQt4 import QtGui\n\ndef window():\n    app = QtGui.QApplication(sys.argv)\n    w = QtGui.QWidget()\n    b = QtGui.QLabel(w)\n    b.setText("Hello World!")\n    w.setGeometry(100,100,200,50)\n    b.move(50,20)\n    w.setWindowTitle("PyQt")\n    w.show()\n    sys.exit(app.exec_())\n\nif __name__ == \'__main__\':\n    window()\n')),"\n",a.createElement(n.p,null,"動いた。\nalembicgl.pyd, alembic.pyd, imath.pyd, iex.pyd と依存 dll 群を wheel 化する\n同じ dll を参照する pyd を同じフォルダに配置したいので、\n共通の親モジュールとして ilm を定義してその中にすべての pyd と dll を収めることにした。\nそのうえでこれを間接的にエクスポートするモジュール’iex’, ‘imath’, ‘alembic’, ‘alembicgl’\nを作る計画。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"ilm\n    + __init__.py\n    + iex.pyd\n    + imath.pyd\n    + alembic.pyd\n    + alembicgl.pyd\n    + PyEx.dll\n    + PyImath.dll\n    + boost_python.dll\n    + Alembic.dll # VCPKG BUILD\n    + ilmbase.dll # VCPKG BUILD\n    + iex.dll # VCPKG BUILD\n    + imath.dll # VCPKG BUILD\n    + half.dll # VCPKG BUILD\n    + hdf5.dll # VCPKG BUILD\n    + zip.dll # VCPKG BUILD\n    + szip.dll # VCPKG BUILD\niex\n    + __init__.py # ilm.iexを公開\nimath\n    + __init__.py # ilm.imathを公開\nalembic\n    + __init__.py # ilm.alembicを公開\nalembicgl\n    + __init__.py # ilm.alembicglを公開\nsetup.py\n")),"\n",a.createElement(n.p,null,"iex/init.py"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"from ilm.iex import \\*\n")),"\n",a.createElement(n.p,null,"こういうのを iex, imath, alembic, alembicgl それぞれに作った。\nsetup.py"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"#!/usr/bin/env python\n\nfrom setuptools import setup, Distribution\n\n\nsetup(\n        name='alembic',\n        version='0.1',\n        description='Alembic Library',\n        packages=['ilm', 'iex', 'imath', 'alembic', 'alembicgl'],\n        package_data={\n            'ilm':['*.pyd', '*.dll'],\n            },\n        )\n")),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"py_package> D:\\Python36\\python.exe setup.py bidst_wheel\npy_package> D:\\Python36\\Scripts\\pip.exe install .\\dist\\alembic-0.1-cp36-cp36m-win_amd64.whl\n")),"\n",a.createElement(n.p,null,"AbcView を実行してみる\nこういう感じに配置して、abcview_main.py を実行してみる。\nabcview_main.py `# bin/abcview から改名(名前がフォルダと被らないように変更)\nabcview"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"**init**.py\n")),"\n",a.createElement(n.p,null,"python2 仕様の部分をまとめて修正。"),"\n",a.createElement(n.p,null,"https://docs.python.jp/3/library/2to3.html"),"\n",a.createElement(n.p,null,"AbcView> D:\\Python36\\python.exe D:\\Python36\\Tools\\scripts\\2to3.py -w ."),"\n",a.createElement(n.p,null,"print 文、except 文などの定型的な文法問題はこれで一網打尽。ディレクトリを指定することでまとめて処理できる。\nfile.toAscii() => file\nこれも Python2 との非互換か。\nQtCore.QString(str(value)) => str(value)\nQString は、Python の String でよさげ。\n動いた"),"\n",a.createElement(n.p,null,"https://github.com/ousttrue/openexr/releases/tag/v0.1"),"\n",a.createElement(n.p,null,"タイムラインを操作したら蛸が動いた。"))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(i,e)):i(e)}},1151:function(e,n,t){t.d(n,{ah:function(){return i}});var l=t(7294);const a=l.createContext({});function i(e){const n=l.useContext(a);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---content-posts-2017-08-pyalembic-md-6190b92ad281efd22ae5.js.map
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-05-19-call-with-tuple-md-1b9c9f391870202de8cf.js","mappings":"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","sources":["webpack:///./content/posts/2013/05/19/call-with-tuple.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"(記事復旧のついでに少し修正)\"), \"\\n\", React.createElement(_components.p, null, \"msgpack-rpcのリクエストは、によると\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[type, msgid, method, params]</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, \"という形式なのでmethod名をstd::stringとしてparamsをstd::tupleとして得られる。\\nこれをサーバ側で如何に呼び出すかについて。\"), \"\\n\", React.createElement(_components.p, null, \"単純な実装だと以下のようにメソッド名をキーにして分岐することになる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">and</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">dispatcher</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> msgid<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">const</span> std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>method<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">const</span> msgpack<span class=\\\"token double-colon punctuation\\\">::</span>object <span class=\\\"token operator\\\">&amp;</span>params<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>method<span class=\\\"token operator\\\">==</span>“add”<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 引数展開</span>\\n            std<span class=\\\"token double-colon punctuation\\\">::</span>tuple t<span class=\\\"token punctuation\\\">;</span> params<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">convert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            <span class=\\\"token comment\\\">// 関数実行</span>\\n            <span class=\\\"token keyword\\\">int</span> result<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>std<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">get</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">0</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> std<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">get</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            <span class=\\\"token comment\\\">// 結果のパッキング</span>\\n            <span class=\\\"token comment\\\">// response [type, msgid, error, result]</span>\\n            msgpack<span class=\\\"token double-colon punctuation\\\">::</span>sbuffer response<span class=\\\"token punctuation\\\">;</span>\\n            msgpack<span class=\\\"token double-colon punctuation\\\">::</span>packer<span class=\\\"token operator\\\">&lt;</span>msgpack<span class=\\\"token double-colon punctuation\\\">::</span>sbuffer<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">pk</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>response<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack_array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span>\\n            pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack</span><span class=\\\"token punctuation\\\">(</span>msgid<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack_nil</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            <span class=\\\"token comment\\\">// responseを送り返す</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">throw</span> “unknown func”<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"引数展開、関数呼び出し、結果のパッキングと一連の操作を定型処理として括りだすと下記のように書ける。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token comment\\\">// ２引数展開用</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">dispatcher</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 実行</span>\\n    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> msgid<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">const</span> std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>method<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">const</span> msgpack<span class=\\\"token double-colon punctuation\\\">::</span>object <span class=\\\"token operator\\\">&amp;</span>params<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>method<span class=\\\"token operator\\\">==</span>“add”<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            msgpack<span class=\\\"token double-colon punctuation\\\">::</span>sbuffer response<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">unpack_exec_pack</span><span class=\\\"token punctuation\\\">(</span>msgid<span class=\\\"token punctuation\\\">,</span> add<span class=\\\"token punctuation\\\">,</span> params<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            <span class=\\\"token comment\\\">// responseを送り返す</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">throw</span> “unknown func”<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ヘルパー</span>\\n<span class=\\\"token keyword\\\">template</span> msgpack<span class=\\\"token double-colon punctuation\\\">::</span>sbuffer <span class=\\\"token function\\\">unpack_exec_pack</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">int</span> msgid<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">R</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>f<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>A1<span class=\\\"token punctuation\\\">,</span> A2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">const</span> msgpack<span class=\\\"token double-colon punctuation\\\">::</span>object <span class=\\\"token operator\\\">&amp;</span>params<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 引数展開</span>\\n    std<span class=\\\"token double-colon punctuation\\\">::</span>tuple t<span class=\\\"token punctuation\\\">;</span> params<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">convert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 関数実行</span>\\n    R result<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>std<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">get</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">0</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> std<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">get</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 結果のパッキング</span>\\n    <span class=\\\"token comment\\\">// response [type, msgid, error, result]</span>\\n    msgpack<span class=\\\"token double-colon punctuation\\\">::</span>sbuffer response<span class=\\\"token punctuation\\\">;</span>\\n    msgpack<span class=\\\"token double-colon punctuation\\\">::</span>packer<span class=\\\"token operator\\\">&lt;</span>msgpack<span class=\\\"token double-colon punctuation\\\">::</span>sbuffer<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">pk</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>response<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack_array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span>\\n    pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack</span><span class=\\\"token punctuation\\\">(</span>msgid<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack_nil</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> response<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"１引数関数から９引数くらいまでと返り値void版を作ってやればだいたいの関数を登録することができる。\"), \"\\n\", React.createElement(_components.p, null, \"さらに 関数の登録と実行を分けるべく次のように拡張した。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">dispatcher</span> <span class=\\\"token punctuation\\\">{</span>\\n    std<span class=\\\"token double-colon punctuation\\\">::</span>map m_map<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 実行</span>\\n    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> msgid<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">const</span> std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>method<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">const</span> msgpack<span class=\\\"token double-colon punctuation\\\">::</span>object <span class=\\\"token operator\\\">&amp;</span>params<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        std<span class=\\\"token double-colon punctuation\\\">::</span>function f<span class=\\\"token operator\\\">=</span>m_map<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span>method<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">!=</span>m_map<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// 関数実行</span>\\n            msgpack<span class=\\\"token double-colon punctuation\\\">::</span>sbuffer resonse<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>msgid<span class=\\\"token punctuation\\\">,</span> params<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            <span class=\\\"token comment\\\">// responseを送り返す</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">throw</span> “unknown func”<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 登録</span>\\n    <span class=\\\"token keyword\\\">template</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">add_handler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>method<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">R</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>f<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>A1<span class=\\\"token punctuation\\\">,</span> A2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        m_map<span class=\\\"token punctuation\\\">[</span>method<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">=</span>f<span class=\\\"token operator\\\">-></span>msgpack<span class=\\\"token double-colon punctuation\\\">::</span>sbuffer<span class=\\\"token punctuation\\\">{</span>\\n\\n            <span class=\\\"token comment\\\">// 引数展開</span>\\n            std<span class=\\\"token double-colon punctuation\\\">::</span>tuple<span class=\\\"token operator\\\">&lt;</span>A1<span class=\\\"token punctuation\\\">,</span> A2<span class=\\\"token operator\\\">></span> t<span class=\\\"token punctuation\\\">;</span>\\n            params<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">convert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            <span class=\\\"token comment\\\">// 実行</span>\\n            R result<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>std<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">get</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">0</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> std<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">get</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            <span class=\\\"token comment\\\">// 結果のパッキング</span>\\n            <span class=\\\"token comment\\\">// response [type, msgid, error, result]</span>\\n            msgpack<span class=\\\"token double-colon punctuation\\\">::</span>sbuffer response<span class=\\\"token punctuation\\\">;</span>\\n            msgpack<span class=\\\"token double-colon punctuation\\\">::</span>packer<span class=\\\"token operator\\\">&lt;</span>msgpack<span class=\\\"token double-colon punctuation\\\">::</span>sbuffer<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">pk</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>response<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack_array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span>\\n            pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack</span><span class=\\\"token punctuation\\\">(</span>msgid<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack_nil</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            pk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pack</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n            <span class=\\\"token keyword\\\">return</span> response<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">msgpack->引数展開->cpp関数呼び出し->msgpack</code>\"\n    }\n  }), \" への一連の操作を 同一のシグネチャの\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">std::function</code>\"\n    }\n  }), \" に 封じ込めることができる。\"), \"\\n\", React.createElement(_components.p, null, \"次にこれを関数ポインタ以外に関数オブジェクトを受け付けるように拡張したい。 まず、std::functionから実装。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token comment\\\">// std::function用</span>\\n<span class=\\\"token keyword\\\">template</span><span class=\\\"token operator\\\">&lt;</span>typname R<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">A1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typename</span> <span class=\\\"token class-name\\\">A2</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">add_handler</span><span class=\\\"token punctuation\\\">(</span>contt std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>method<span class=\\\"token punctuation\\\">,</span> std<span class=\\\"token double-colon punctuation\\\">::</span>function<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token function\\\">R</span><span class=\\\"token punctuation\\\">(</span>A1<span class=\\\"token punctuation\\\">,</span> A2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span> f<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 中身同じ</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"呼び出し時に \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">std::function</code>\"\n    }\n  }), \" を経由するようにすればあらゆる関数呼び出しを登録できる。 例えば、ラムダ関数も以下のように登録できる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token comment\\\">// ラムダ登録</span>\\ndispatcher d<span class=\\\"token punctuation\\\">;</span>\\nd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add_handler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"add\\\"</span><span class=\\\"token punctuation\\\">,</span> std<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">function</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-></span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token operator\\\">+</span>b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"しかし、どうせなら\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\">dispatcher d<span class=\\\"token punctuation\\\">;</span>\\nd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add_handler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"add\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-></span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token operator\\\">+</span>b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"と書きたい。\"), \"\\n\", React.createElement(_components.p, null, \"となると下記のような登録関数を書かねばならぬが関数のシグネチャがわからないので中身を記述することができない。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token comment\\\">// ラムダの登録</span>\\n<span class=\\\"token keyword\\\">template</span><span class=\\\"token operator\\\">&lt;</span>typname F<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">add_handler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>method<span class=\\\"token punctuation\\\">,</span> F f<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 型がわからぬ</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"ここで関数オブジェクトのoperator()へのポインタを型推論することでFのシグネチャを得ることができる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"> <span class=\\\"token keyword\\\">template</span>\\n <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">add_handler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>method<span class=\\\"token punctuation\\\">,</span> F f<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">R</span><span class=\\\"token punctuation\\\">(</span>C<span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>A1<span class=\\\"token punctuation\\\">,</span> A2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">const</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n     <span class=\\\"token comment\\\">// 中身同じ</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// ラムダの登録</span>\\n<span class=\\\"token comment\\\">// std::functionも受けられる</span>\\n<span class=\\\"token comment\\\">// std::bindは無理だった</span>\\n<span class=\\\"token comment\\\">// operator()がひとつしかない関数オブジェクトを受け付けられる？</span>\\n\\n<span class=\\\"token keyword\\\">template</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">add_handler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> std<span class=\\\"token double-colon punctuation\\\">::</span>string <span class=\\\"token operator\\\">&amp;</span>method<span class=\\\"token punctuation\\\">,</span> F f<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 上の関数で型推論させる</span>\\n    <span class=\\\"token function\\\">add_handler</span><span class=\\\"token punctuation\\\">(</span>method<span class=\\\"token punctuation\\\">,</span> f<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">&amp;</span><span class=\\\"token class-name\\\">F</span><span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token keyword\\\">operator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"これでめでたくラムダも直接登録できるようになった。\\nただし、operator()のオーバーロードが解決できないらしくstd::bindが登録できない。 std::bindに関しては、ラムダで代用できるしstd::functionでラップできるのでおいておくことにした。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/05/19/call-with-tuple.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5118],{5653:function(n,e,t){t.r(e),t.d(e,{default:function(){return m}});var a=t(1151),s=t(7294);function l(n){const e=Object.assign({p:"p",code:"code",ul:"ul",li:"li",h1:"h1",span:"span",blockquote:"blockquote"},(0,a.ah)(),n.components);return s.createElement(s.Fragment,null,s.createElement(e.p,null,"https://github.com/ousttrue/limgui/blob/master/imgui_ffi/cdef/imgui.lua"),"\n",s.createElement(e.p,null,"Window System は ",s.createElement(e.code,null,"GLFW"),"、3D API は ",s.createElement(e.code,null,"OpenGL3")," を選択。"),"\n",s.createElement(e.ul,null,"\n",s.createElement(e.li,null,"SDL2 は、 ",s.createElement(e.code,null,"HWND")," を取得周りが FFI では面倒なことが分かっていたのと、",s.createElement(e.code,null,"SDL-Image")," などの関連ライブラリ無しで行くつもりだった"),"\n",s.createElement(e.li,null,"D3D11 のバインディングを作っているとまた時間がかかる。",s.createElement(e.code,null,"COM")," は C の範囲で実装できるので後でやりたい"),"\n"),"\n",s.createElement(e.p,null,"ということから、楽そうなものを選択したらそうなった。"),"\n",s.createElement(e.h1,null,"メンバー関数呼び出し"),"\n",s.createElement(e.p,null,s.createElement(e.code,null,"ImFont"),", ",s.createElement(e.code,null,"ImFontAtlas")," のみ何故か ",s.createElement(e.code,null,"c++")," 色が強く、メンバ関数呼び出しがあったりするのでなんとかしたい。\ncdecl で FFI 記述できるんだっけ？"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">//io.Fonts-&gt;AddFontDefault();\n//io.Fonts-&gt;AddFontFromFileTTF(&quot;../../misc/fonts/Roboto-Medium.ttf&quot;, 16.0f);\n//io.Fonts-&gt;AddFontFromFileTTF(&quot;../../misc/fonts/Cousine-Regular.ttf&quot;, 15.0f);\n//io.Fonts-&gt;AddFontFromFileTTF(&quot;../../misc/fonts/DroidSans.ttf&quot;, 16.0f);\n//io.Fonts-&gt;AddFontFromFileTTF(&quot;../../misc/fonts/ProggyTiny.ttf&quot;, 10.0f);\n//ImFont* font = io.Fonts-&gt;AddFontFromFileTTF(&quot;c:\\\\Windows\\\\Fonts\\\\ArialUni.ttf&quot;, 18.0f, NULL, io.Fonts-&gt;GetGlyphRangesJapanese());</code></pre></div>'}}),"\n",s.createElement(e.p,null,"第1引数に this に相当する引数を追加してやればいけた。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua">ffi<span class="token punctuation">.</span>cdef<span class="token string">[[\n// 適当に名前を付け替える\nstruct ImFont* ImFontAtlas_AddFontFromFileTTF(\n    struct ImFontAtlas* this,\n    const char* filename,\n    float size_pixels,\n    const struct ImFontConfig* font_cfg,\n    ImWchar* glyph_ranges\n) asm("?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z");\n]]</span></code></pre></div>'}}),"\n",s.createElement(e.h1,null,"C++ デフォルト引数"),"\n",s.createElement(e.p,null,s.createElement(e.code,null,"ImGui")," の ",s.createElement(e.code,null,"API")," は基本的にほぼ C になるように配慮されていて、C++ の機能は限定的にしか使っていない。"),"\n",s.createElement(e.ul,null,"\n",s.createElement(e.li,null,"関数オーバーロード"),"\n",s.createElement(e.li,null,"デフォルト引数"),"\n"),"\n",s.createElement(e.p,null,"である。\nで、このデフォルト引数がないと ",s.createElement(e.code,null,"imgui")," の使い勝手が著しく下がる。\nリファレンスを確認して、デフォルト値を当ててやる必要が出るので。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">// 例\nIMGUI_API bool Begin(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0);</code></pre></div>'}}),"\n",s.createElement(e.p,null,s.createElement(e.code,null,"NULL")," は ",s.createElement(e.code,null,"nil")," だし、 ",s.createElement(e.code,null,"0")," はそのまま ",s.createElement(e.code,null,"0")," なので、簡単なところだけでも対応する。\n最悪、インテリセンスに出るようにすることで調べる手間は回避できるのだけど\n",s.createElement(e.code,null,"const &ImVec2 v = ImVec2(0, 0)")," とかはめんどくさいです。\nFFI 境界の ",s.createElement(e.code,null,"struct の value 渡し"),", ",s.createElement(e.code,null,"デフォルト引数")," は解決できない場合が多いが、コード生成側で努力する価値はある。"),"\n",s.createElement(e.p,null,s.createElement(e.code,null,"rust")," はここができなくて、故にラッパー側で API を builder パターンに変更していたりするのだけど、\n",s.createElement(e.code,null,"rust")," の ",s.createElement(e.code,null,"imgui")," ラッパーの API を使いたいのではなくて、生の ",s.createElement(e.code,null,"imgui")," が使いたいのだ。\n",s.createElement(e.code,null,"luajit")," の FFI はちょっとラップすることで簡単に解決できる(遅くなるかもしれないが)。"),"\n",s.createElement(e.p,null,"ラッパーを自動で生成するようにできた。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua">    <span class="token comment">-- lua では nil と false のみが 偽 である</span>\n\n    <span class="token comment">-- wrapper</span>\n    Begin <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> p_open<span class="token punctuation">,</span> flags<span class="token punctuation">)</span>\n        <span class="token comment">-- p_open が供給されない場合、デフォルト nil になり、NULL として解釈される</span>\n        flags <span class="token operator">=</span> flags <span class="token keyword">or</span> <span class="token number">0</span>\n        <span class="token comment">-- ffi 呼び出し</span>\n        <span class="token keyword">return</span> imgui<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> p_open<span class="token punctuation">,</span> flags<span class="token punctuation">)</span>\n    <span class="token keyword">end</span><span class="token punctuation">,</span>\n\n    <span class="token comment">-- wrapper</span>\n    Button <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span> size<span class="token punctuation">)</span>\n        <span class="token comment">-- 引数なしの `ffi.new` は zero 詰めする。 `ImVec2(0, 0)` になる。</span>\n        size <span class="token operator">=</span> size <span class="token keyword">or</span> ffi<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">\'struct ImVec2\'</span><span class="token punctuation">)</span>\n        <span class="token comment">-- ffi 呼び出し</span>\n        <span class="token keyword">return</span> imgui<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span> size<span class="token punctuation">)</span>\n    <span class="token keyword">end</span><span class="token punctuation">,</span></code></pre></div>'}}),"\n",s.createElement(e.h1,null,"可変長引数"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">IMGUI_API void Text(const char* fmt, ...)</code></pre></div>'}}),"\n",s.createElement(e.p,null,"luajit ffi ではそのまま ",s.createElement(e.code,null,"...")," を扱うことができた。"),"\n",s.createElement(e.p,null,"ただし、",s.createElement(e.code,null,"%d")," のときは、\n",s.createElement(e.code,null,"LL")," をつけて ",s.createElement(e.code,null,"integer")," を渡す。\n",s.createElement(e.code,null,"number")," だとうまくいかない。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua"><span class="token keyword">local</span> count <span class="token operator">=</span> 1LL <span class="token comment">-- 64bit int. UL もある</span>\nimgui<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"counter = %d"</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,s.createElement(e.code,null,"LL")," と ",s.createElement(e.code,null,"UL")," は luajit の拡張らしい。\nhttps://luajit.org/ext_ffi_api.html"),"\n",s.createElement(e.blockquote,null,"\n",s.createElement(e.p,null,"Extensions to the Lua Parser"),"\n",s.createElement(e.p,null,"numeric literals with the suffixes LL or ULL as signed or unsigned 64 bit integers"),"\n"),"\n",s.createElement(e.p,null,"だがしかし、この記法使うと ",s.createElement(e.code,null,"stylua")," がエラーになる。そりゃ、そうだ。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua"><span class="token keyword">local</span> count <span class="token operator">=</span> ffi<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">\'long long[1]\'</span><span class="token punctuation">)</span> <span class="token comment">-- 32bit だとうまくいかない</span>\nimgui<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"counter = %d"</span><span class="token punctuation">,</span> counter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"を使うのがよさそう。"),"\n",s.createElement(e.h1,null,"template class のごまかし"),"\n",s.createElement(e.p,null,"T を pointer としてしか使わない場合は、\n",s.createElement(e.code,null,"T*")," を除去して ",s.createElement(e.code,null,"void*")," にすれば動く。"),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">template&lt;typename T&gt;\nstruct ImVector{\n    int Size;\n    int Capacity;\n    T* Data;\n};    \n</code></pre></div>'}}),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua">ffi<span class="token punctuation">.</span>cdef<span class="token string">[[\nstruct ImVector{\n    int Size;\n    int Capacity;\n    void* Data;\n};    \n]]</span></code></pre></div>'}}))}var c=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?s.createElement(e,n,s.createElement(l,n)):l(n)},o=t(8678),u=t(4160),p=t(8736);const r={code:n=>{let{children:e,className:t}=n;return t?s.createElement(p.Z,{className:t},e):s.createElement("code",null,e)}};function i(n){let{data:e,children:t}=n;const l=e.mdx.frontmatter;return s.createElement(o.Z,null,s.createElement("h1",null,l.title),s.createElement("div",{className:"tags-index"},l.tags&&l.tags.length>0&&l.tags.map((n=>s.createElement(u.rU,{to:"/tags/"+n+"/",itemProp:"url"},s.createElement("button",null,n))))),s.createElement(a.Zo,{components:r},t))}function m(n){return s.createElement(i,n,s.createElement(c,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2021-example-glfw-openg-md-0dafcf470305450584bc.js.map
{"version":3,"file":"component---content-posts-2015-12-08-threejs-05-md-01df76a0b90e37ed9213.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,sUAAuU,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,ihDAAkhD,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wEAAyE,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,CAC7tEI,UAAW,iBACV,uuDACL,CAKA,UAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECiBO,MAAMa,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,C","sources":["webpack:///./content/posts/2015/12/08/threejs_05.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"骨入りモデルとかやってみようかと思ったのだけど、その前に Three.js のソースを見やすい状態で作業したい。\\n結合前の Three.js を自前ビルドしながら運用する方法を調べてみる。\\nbuild.py, or how to generate a compressed three.js file\\nと本家に書いてある。python 使うんか。gulp でやりてぇな。\\n全部 concat して uglify したらいいんじゃないか。\\nやってみよう。\\nとりあえず bower で導入した three.js 関連を削除。\\nthreejs.src フォルダを作って three.js ソースの src ディレクトリの中身を展開した。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"gulp.task('bowerjs', function () {\\n\\n    var files = [\\n        './bower_components/jquery/dist/jquery.js',\\n        './bower_components/highlightjs/highlight.pack.js',\\n        './bower_components/stats.js/build/stats.min.js',\\n        './lib/**/*.js', // <-- 中にthree.jsのsrcをコピーした\\n    ];\\n    gulp.src(files)\\n        .pipe($.plumber({ errorHandler: $.notify.onError('<%= error.message %>') }))\\n        .pipe($.debug({ title: 'bowerjs files:' }))\\n        .pipe($.sourcemaps.init())\\n        //.pipe($.uglify())\\n        .pipe($.concat('all.min.js'))\\n        .pipe($.sourcemaps.write('./', {\\n            sourceMappingURL: function (file) {\\n                return file.relative + '.map';\\n            }\\n        }))\\n        .pipe(gulp.dest('build/js'))\\n        .pipe(browser.reload({ stream: true }))\\n    ;\\n});\\n\\nこれで作ったall.min.jsではエラーが出てだめですね。\\n単にsrcをconcatするだけではだめだ。本家のドキュメントを読み始める。\\n/three.js/utils/build/\\n\\nでビルドできるよって書いてあります。python関係ないみたいだ。\\n> npm install\\n> node build.js --include common --include extras\\n\\nなるほどbuild.jsを見てみよう。\\nincludeってなんだろうと調べてみると\\n/three.js/utils/build/includes\\n\\nにjsonファイルがあり中にjsファイルがリストされている。\\nなるほど。src下を全部concatするのではなくここに書いてあるものを、書いてある順でconcatすればいいんでないか。\\n//\\ngulp.task('threejs:build', function(){\\n    var common=JSON.parse(fs.readFileSync('three.js/includes/common.json')).map(function(v, i){ return 'three.js/'+v; });\\n    gulp.src(common)\\n        .pipe($.concat('three.js'))\\n        .pipe(gulp.dest('./lib'))\\n        ;\\n});\\n\\ngulp.task('bowerjs', ['threejs:build'], function () {\\n    // 前と同じ\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"これで実行するとそれっぽい three.js が出てくるが、まだエラーが出る。\\nでエラー行に飛ぶと ifdef がある。なんだこれは。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-glsl\"\n  }, \"#ifdef USE_ALPHAMAP\\n\\n    diffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n\\n#endif\\n\\nglslだ・・・。\\n確かに、build.js内で拡張子がglslのファイルだけ別処理になっている。\\nif( file.indexOf( '.glsl') >= 0 ) {\\n\\n    contents = 'THREE.ShaderChunk[ \\\\'' +\\n        path.basename( file, '.glsl' ) + '\\\\' ] =' +\\n        JSON.stringify( contents ) + ';\\\\n';\\n\\n}\\n\\nちょっとgulpのフィルタを作りますか。\\nthree.shaderchunk.js\\nvar through = require('through2');\\nvar gutil = require('gulp-util');\\nvar fs = require('fs');\\nvar path = require('path');\\n\\nmodule.exports = function () {\\n\\n    return through.obj(function (file, enc, cb) {\\n\\n        if (file.isStream()) {\\n            cb(new gutil.PluginError('three.shadechunk', 'Streaming not supported'));\\n            return;\\n        }\\n\\n        if (path.extname(file.path).toLowerCase() == '.glsl') {\\n            var contents = 'THREE.ShaderChunk[ \\\\'' +\\n                path.basename(file.path, '.glsl') + '\\\\' ] =' +\\n                JSON.stringify(file.contents.toString()) + ';\\\\n';\\n            file.contents = new Buffer(contents);\\n            file.path = file.path + \\\".js\\\";\\n        }\\n\\n        this.push(file);\\n\\n        cb();\\n    });\\n}\\n\\ngulpファイルの呼び出しの方。これでthree.js/srcからthree.jsを作成できた。\\nあとは、sourcemapが付くようにした。\\ngulpfile.js\\ngulp.task('threejs:build', function(){\\n    var common=JSON.parse(fs.readFileSync('three.js/includes/common.json'))\\n    .map(function(v, i){ return 'three.js/'+v; });\\n    var extras=JSON.parse(fs.readFileSync('three.js/includes/extras.json'))\\n    .map(function(v, i){ return 'three.js/'+v; });\\n    gulp.src(common.concat(extras))\\n        .pipe(threeShaderchunk())\\n        .pipe($.concat('three.js'))\\n        .pipe(gulp.dest('./lib'))\\n        ;\\n});\\n\\nFireFoxでブレイクポイントを仕掛けてステップ実行できた。\\nこれで、Loaderの自作とかが捗るぞ。\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
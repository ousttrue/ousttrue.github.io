"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2244],{3217:function(n,a,e){e.r(a),e.d(a,{default:function(){return r}});var t=e(1151),s=e(7294);function l(n){const a=Object.assign({p:"p",h1:"h1",span:"span",ul:"ul",li:"li",blockquote:"blockquote",a:"a"},(0,t.ah)(),n.components);return s.createElement(s.Fragment,null,s.createElement(a.p,null,"main loop がブロックするので luv を取り入れてみる。"),"\n",s.createElement(a.p,null,"https://github.com/luvit/luv"),"\n",s.createElement(a.h1,null,"cmake で build"),"\n",s.createElement(a.p,null,"luv に CMake が付属しており簡単。"),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">$ cmake -S {LUV_DIR} -B {BUILD_DIR}\n$ cmake --build {BUILD_DIR} --config Release</code></pre></div>'}}),"\n",s.createElement(a.h1,null,"main loop を idle へ"),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua"><span class="token comment">-- Main loop</span>\n<span class="token keyword">while</span> app<span class="token punctuation">:</span><span class="token function">new_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">do</span>\n    gui<span class="token punctuation">:</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    app<span class="token punctuation">:</span><span class="token function">render</span><span class="token punctuation">(</span>gui<span class="token punctuation">.</span>clear_color<span class="token punctuation">)</span>\n<span class="token keyword">end</span></code></pre></div>'}}),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua"><span class="token keyword">local</span> uv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"luv"</span><span class="token punctuation">)</span>\n\n<span class="token comment">-- Main loop</span>\n<span class="token keyword">local</span> idle <span class="token operator">=</span> uv<span class="token punctuation">.</span><span class="token function">new_idle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nidle<span class="token punctuation">:</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token keyword">not</span> app<span class="token punctuation">:</span><span class="token function">new_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">then</span>\n        idle<span class="token punctuation">:</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">end</span>\n    gui<span class="token punctuation">:</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    app<span class="token punctuation">:</span><span class="token function">render</span><span class="token punctuation">(</span>gui<span class="token punctuation">.</span>clear_color<span class="token punctuation">)</span>\n<span class="token keyword">end</span><span class="token punctuation">)</span>\n\nuv<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",s.createElement(a.h1,null,"重い処理を thread へ"),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua">    <span class="token keyword">local</span> ctx <span class="token operator">=</span> uv<span class="token punctuation">.</span><span class="token function">new_work</span><span class="token punctuation">(</span>\n        on_thread<span class="token punctuation">,</span> <span class="token comment">--work,in threadpool</span>\n        on_end <span class="token comment">--after work, in loop thread</span>\n    <span class="token punctuation">)</span>\n    uv<span class="token punctuation">.</span><span class="token function">queue_work</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> mp<span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">Error: thread arg not support type \'table\' at 2Error: thread arg not support type table at 1Uncaught Error: attempt to call a nil value</code></pre></div>'}}),"\n",s.createElement(a.p,null,"あ"),"\n",s.createElement(a.h1,null,"thread 間で受け渡しのできる型"),"\n",s.createElement(a.ul,null,"\n",s.createElement(a.li,null,"https://github.com/luvit/luv/blob/master/docs.md#pseudo-types"),"\n"),"\n",s.createElement(a.blockquote,null,"\n",s.createElement(a.p,null,"threadargs: variable arguments (...) of type nil, boolean, number, string, or userdata"),"\n"),"\n",s.createElement(a.p,null,"nvim ではそこで messagepack なわけか。"),"\n",s.createElement(a.p,null,s.createElement(a.a,{href:"https://tullio.hatenablog.com/entry/20121112/1352732239"},"Kyoto Tycoon+Lua-JIT拡張+MessagePack=無敵")," 経由で ",s.createElement(a.a,{href:"https://gist.github.com/catwell/2971290"},"The state of MessagePack in Lua")," をたどり着く。"),"\n",s.createElement(a.blockquote,null,"\n",s.createElement(a.p,null,"If you want pure LuaJIT -> luajit-msgpack-pure"),"\n"),"\n",s.createElement(a.p,null,"たしかに、これだ。"),"\n",s.createElement(a.p,null,"https://github.com/catwell/luajit-msgpack-pure"),"\n",s.createElement(a.ul,null,"\n",s.createElement(a.li,null,"Windows なので ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">malloc</code>'}}),", ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">free</code>'}}),", ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">realloc</code>'}})," が cdef できなかったのを修正"),"\n",s.createElement(a.li,null,s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">function</code>'}})," と ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cdata</code>'}})," を nil にしてスキップする処理を追加してみた"),"\n"),"\n",s.createElement(a.p,null,"結果、巨大なテーブルの pack/unpack でブロックしてしまう。\nあとスレッド側のエラーハンドリングをしてないので、デバッガはアタッチできないし、何もわからない。\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pcall</code>'}})," などでエラーメッセージを取得して、失敗した場合はエラーメッセージを投げるようにしてあげる必要がある。"),"\n",s.createElement(a.p,null,"なんとなく、使い方はわかった。\n後で、アニメーションシステムを実装するときのインフラにも使えるかもしれない。\nOpenGL のレンダースレッドと、シーン更新を分離する。"),"\n",s.createElement(a.h1,null,"関連"),"\n",s.createElement(a.ul,null,"\n",s.createElement(a.li,null,s.createElement(a.a,{href:"https://kimitok.hateblo.jp/entry/2014/04/16/223643"},'node.jsを支えるlibuvのチュートリアル"uvbook" :スレッド')),"\n",s.createElement(a.li,null,"https://nikhilm.github.io/uvbook/threads.html"),"\n"))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?s.createElement(a,n,s.createElement(l,n)):l(n)},c=(e(8678),e(8838));const o={code:n=>{let{children:a,className:e}=n;return e?s.createElement(c.Z,{className:e},a):s.createElement("code",null,a)}};function u(n){let{data:a,children:e}=n;return s.createElement(s.Fragment,null,s.createElement("h1",null,a.mdx.frontmatter.title),s.createElement(t.Zo,{components:o},e))}function r(n){return s.createElement(u,n,s.createElement(p,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-luv-md-840bdf2b56be32f9951e.js.map
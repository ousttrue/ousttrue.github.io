{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-0419-gentoo-md-fabf99d16a70516b12eb.js","mappings":"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","sources":["webpack:///./content/posts/2022/0419-gentoo.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    span: \"span\",\n    h2: \"h2\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Gentoo 構築\"), \"\\n\", React.createElement(_components.p, null, \"久しぶりに gentoo の機運が高まったので入れてみた。\\n先に \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Ubuntu-20.04</code>\"\n    }\n  }), \" を入れておいて、後ろのパーティションに gentoo をインストールする作戦。\\nUbuntu と同じ \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/home</code>\"\n    }\n  }), \" をマウントしてみたら \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">dotfiles</code>\"\n    }\n  }), \" に互換性が無かったのでやめた。\\nわりと順調にインストールできた。\\nゆくゆくは wsl も gentoo に換装したいところじゃ。\"), \"\\n\", React.createElement(_components.h2, null, \"2022-05-05\"), \"\\n\", React.createElement(_components.p, null, \"システムを壊してしもた。\\n作りなおし。ついでに \", React.createElement(_components.a, {\n    href: \"https://wiki.gentoo.org/wiki/Btrfs\"\n  }, \"btffs\"), \" やってみる。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Stage#Downloading_the_stage_tarball\"\n  }, \"https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Stage#Downloading_the_stage_tarball\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Stage3: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">openrc | desktop profile</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.h2, null, \"btrfs\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/etc/fstab</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">/dev/sdb                /srv            btrfs           compress=zstd:9,relatime,rw     0 0</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"python-3.10\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PYTHON_SINGLE_TARGET</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, \"6月くらいにデフォルトになる予定みたいだ。先にやってみた。\"), \"\\n\", React.createElement(_components.p, null, \"間違い。去年の6月に、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Python-3.9</code>\"\n    }\n  }), \" がデフォルトになった。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Python-3.10</code>\"\n    }\n  }), \" は今のところ予定に無い。\\nいろいろインストールできなくなったので、元に戻した。\"), \"\\n\", React.createElement(_components.h2, null, \"make.conf\"), \"\\n\", React.createElement(_components.p, null, \"ここに貼っておこう。\\nこいつを育てているようなものだし。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\"># These settings were set by the catalyst build script that automatically\\n# built this stage.\\n# Please consult /usr/share/portage/config/make.conf.example for a more\\n# detailed example.\\nCOMMON_FLAGS=\\\"-march=native -O2 -pipe\\\"\\nCFLAGS=\\\"${COMMON_FLAGS}\\\"\\nCXXFLAGS=\\\"${COMMON_FLAGS}\\\"\\nFCFLAGS=\\\"${COMMON_FLAGS}\\\"\\nFFLAGS=\\\"${COMMON_FLAGS}\\\"\\n\\n# NOTE: This stage was built with the bindist Use flag enabled\\nPORTDIR=\\\"/var/db/repos/gentoo\\\"\\nDISTDIR=\\\"/var/cache/distfiles\\\"\\nPKGDIR=\\\"/var/cache/binpkgs\\\"\\n\\nUSE=\\\"X sixel truetype vim-syntax jpeg png python fontforge cjk alsa \\\\\\n     pulseaudio mp3 dbus opengl ffmpeg mad mpd elogind gtk\\\"\\nINPUT_DEVICES=\\\"evdev libinput synaptics\\\"\\n#VIDEO_CARDS=\\\"nouveau\\\"\\nVIDEO_CARDS=\\\"nvidia\\\"\\nABI_X86=\\\"64\\\"\\n\\n# This sets the language of build output to English.\\n# Please keep this setting intact when reporting bugs.\\nLC_MESSAGES=\\\"C\\\"\\n\\nMAKEOPTS=\\\"-j6\\\"</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"passwd\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/etc/security/passwdqc.conf</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.h2, null, \"boot\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">refind</code>\"\n    }\n  }), \" を試してみた。\\n先に、Ubuntu の方でインストールして \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gentoo</code>\"\n    }\n  }), \" でエントリーだけ増やした。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">grub2</code>\"\n    }\n  }), \" より設定が簡単だと思った。\\n情報は少なめ。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/boot/efi/EFI/refind/refind.conf</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\"># rootの指定が必要 \\nmenuentry Gentoo {\\n    icon EFI/refind/icons/os_gentoo.png\\n    loader /EFI/gentoo/vmlinuz-5.15.32-gentoo-r1-x86_64\\n    initrd /EFI/gentoo/initramfs-5.15.32-gentoo-r1-x86_64.img\\n    options \\\"root=/dev/sda4\\\"\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"起動時に自動検索と設定に記述したエントリが出てくるので、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-</code>\"\n    }\n  }), \" キーで隠すと見ためがすっきりする。\"), \"\\n\", React.createElement(_components.h2, null, \"xorg\"), \"\\n\", React.createElement(_components.p, null, \"なんとなくできた。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$ startx -- vt1</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"としないとエラーになる。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/etc/X11</code>\"\n    }\n  }), \" は作らなくても動いた。\"), \"\\n\", React.createElement(_components.p, null, \"いつもどおりに \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">openbox</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">tint2</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PCManFM</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">conky</code>\"\n    }\n  }), \" という感じだが、今回は新型の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">wezterm</code>\"\n    }\n  }), \" がある。\"), \"\\n\", React.createElement(_components.h2, null, \"yaft\"), \"\\n\", React.createElement(_components.p, null, \"nerdfonts 入りの bdffont を作りたいのだが未だ。\\nmlterm-fb や kmscon も試してみたのだがうまく動かなかった。\"), \"\\n\", React.createElement(_components.h2, null, \"wayland\"), \"\\n\", React.createElement(_components.p, null, \"TODO:\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2022/0419-gentoo.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","span","h2","a","ul","li","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
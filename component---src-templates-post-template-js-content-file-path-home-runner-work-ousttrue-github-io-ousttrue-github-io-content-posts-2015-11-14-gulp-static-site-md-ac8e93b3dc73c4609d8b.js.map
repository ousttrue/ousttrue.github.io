{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-11-14-gulp-static-site-md-ac8e93b3dc73c4609d8b.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,oBAAqB,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,yuJAC9M,CAKA,MAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCTA,SAASY,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOJ,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMK,EAAKE,IAAIC,YAAYC,OAAQT,EAAAA,cAAoBU,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBpB,GACvC,OAAOS,EAAAA,cAAoBG,EAAcZ,EAAOS,EAAAA,cAAoBY,EAAqBrB,GAC3F,C,4HCuBO,MAAMsB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBf,GAC/B,MAAMgB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfd,EACFA,EAAWgB,GAGb,IAAIA,KAAsBhB,IAChC,CAACgB,EAAmBhB,GACzB,CAGA,MAAMiB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACX,EAAU,SAAEO,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAflB,EACHA,EAAW,CAAC,GACZA,GAAciB,EAEJF,EAAiBf,GAG5B,gBACLc,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2015/11/14/gulp_static_site.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"gulp で静的サイト生成その２\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"引き続き、サイト生成作業を続行中。見た目は置いておいて(bootstrap入れたけど)機能を優先して作ろう。\\n「次へ」と「前へ」のリンクを作れば内部リンクは揃う。\\ngulpは自由度が高いのでなんとでもなるな。\\n強まったmakeのようで非常にポテンシャルを感じる。\\n中期的なも目標としてはローカルもしくはLAN内のnode.jsがホストとなるGUIをさくっと作れるようになるというものがあるのだが、\\n関連項目が多すぎてひたすら拡がっていくのが危険だ。\\n特に、インターネットで調べながらだと収束せずにひたすら拡散する傾向がある。\\nanglar, backboneは避けようと思ったのだがmithrilは気になっているし、electronも気になっている。\\nあと、typescriptもはやめに使いこなしたい。\\nだいぶgulpがわかってきた\\n「前へ」と「次へ」は全部のファイルをリストに投入してソートして隣通しのパスを得る必要がある。\\n一度リストに投入してから前へと次へを処理した後で、再度リストの中身を一個ずつ後ろに渡せばいいじゃない。\\nということでやってみたらあっさりできた。\\n野良プラグインの作り方が分かるとgulp面白いな。\\nmake-toc.js\\nvar through = require('through2');\\nvar gutil = require('gulp-util');\\nvar path = require('path');\\n\\nmodule.exports = function (outputFileName, options) {\\n\\n    options = options || {};\\n    var dest = options.dest;\\n    var filelist = [];\\n\\n    function transform(file, encoding, callback) {\\n\\n        // ファイルを集める\\n        filelist.push(file);\\n\\n        // callback()は必ず実行\\n        callback();\\n    }\\n\\n    function flush(callback) {\\n\\n        if (filelist.length > 0) {\\n\\n            // sortすることで日付順に並ぶ\\n            filelist.sort(function compareNumbers(a, b) {\\n                if (a.path < b.path) {\\n                    return 1;\\n                } else {\\n                    return -1;\\n                }\\n            });\\n            var file = filelist[0];\\n\\n            // 目次\\n            var output_map = {\\n                cwd: file.cwd,\\n                base: file.base,\\n                path: file.base + outputFileName,\\n            };\\n           // console.log(output_map);\\n            var output = new gutil.File(output_map);\\n\\n            var html = '<ul>\\\\n';\\n            //console.log(filelist.length);\\n            for (var i = 0; i < filelist.length; ++i) {\\n                var f = filelist[i];\\n                var rel = dest + \\\"/\\\" + f.path.substr(f.base.length).replace(/\\\\\\\\/g, '/');\\n                //console.log(rel);\\n                html += '<li><a href=\\\"' + rel + '\\\">' + f.frontMatter.title + '</a></li>\\\\n';\\n\\n                // 各アイテムのfrontMatterにnextとprevを付ける\\n                // 降順に並んでいる\\n                if (i === 0) {\\n                    // 先頭\\n                    f.frontMatter.next = \\\"\\\";\\n                    f.frontMatter.prev = path.relative(path.dirname(f.path), filelist[i + 1].path).replace(/\\\\\\\\/g, '/');\\n                }\\n                else if (i === filelist.length-1) {\\n                    // 終端\\n                    f.frontMatter.next = path.relative(path.dirname(f.path), filelist[i - 1].path).replace(/\\\\\\\\/g, '/');\\n                    f.frontMatter.prev = \\\"\\\";\\n                }\\n                else {\\n                    f.frontMatter.next = path.relative(path.dirname(f.path), filelist[i - 1].path).replace(/\\\\\\\\/g, '/');\\n                    f.frontMatter.prev = path.relative(path.dirname(f.path), filelist[i + 1].path).replace(/\\\\\\\\/g, '/');\\n                }\\n            }\\n            html += '</ul>\\\\n';\\n            output.contents = new Buffer(html);\\n\\n            // filelistをoutputにくっつける\\n            output.filelist = filelist;\\n\\n            this.push(output);\\n        }\\n\\n        // callback()は必ず実行\\n        callback();\\n    }\\n\\n    return through.obj(transform, flush);\\n};\\n\\n\\nresplit.js\\nvar through = require('through2');\\nvar gutil = require('gulp-util');\\nvar path = require('path');\\n\\nmodule.exports = function () {\\n\\n    function transform(file, encoding, callback) {\\n\\n        // ファイルがnullの場合\\n        if (file.isNull()) {\\n            // 次のプラグインに処理を渡すためにthis.push(file)しておく\\n            this.push(file);\\n            // callback()は必ず実行\\n            return callback();\\n        }\\n\\n        // ファイルがstreamの場合（このサンプルプラグインはstreamに対応しない）\\n        if (file.isStream()) {\\n            // emit('error')を使って、プラグイン呼び出し側に'error'イベントを発生させる\\n            this.emit('error', new gutil.PluginError('gulp-diff', 'Streaming not supported'));\\n            // callback()は必ず実行\\n            return callback();\\n        }\\n\\n        // do something\\n        for(var key in file.filelist){\\n            var output=file.filelist[key];\\n            this.push(output);\\n        }\\n\\n        // callback()は必ず実行\\n        callback();\\n    }\\n\\n    return through.obj(transform);\\n};\\n\\n\\ngulfile.js\\ngulp.task('posts', function () {\\n    gulp.src(config.posts)\\n    // frontMatter処理してhtml化する\\n        .pipe($.frontMatter({ remove: true }))\\n        .pipe(myFrontmatter())\\n        .pipe($.markdown())\\n    // まとめてsortしてメタ情報を付与して目次を出力する\\n        .pipe(makeToc('index.html', { dest: 'posts' }))\\n        .pipe(gulp.dest('build'))\\n    // 再び分解する\\n        .pipe(resplit())\\n    // 以降通常\\n        .pipe($.debug({ title: 'files:' }))\\n    // テンプレートを適用して\\n        .pipe(ejsApplyer({ filename: 'templates/page.ejs' }, { root_path: '../../../../' }))\\n    // 出力\\n        .pipe(gulp.dest('build/posts'))\\n    ;\\n});\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2015/11/14/gulp_static_site.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
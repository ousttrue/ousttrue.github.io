{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2023-0315-nvim-md-fafd2d176dfc9088cb5c.js","mappings":"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","sources":["webpack:///./content/posts/2023/0315-nvim.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    span: \"span\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"nvim 整備を再開。\\n\", React.createElement(_components.code, null, \"v0.9.0-dev\"), \" \", React.createElement(_components.code, null, \"Windows10\"), \", \", React.createElement(_components.code, null, \"WSL\"), \" 共用設定で運用。\"), \"\\n\", React.createElement(_components.p, null, \"LSP も含めて整ってきたので、久しぶりに \", React.createElement(_components.code, null, \"vscode\"), \" から出られそうな予感。\"), \"\\n\", React.createElement(_components.p, null, \"ある程度の環境ができあがるまで、無限に寄り道を強いられるので\\nなかなか本筋に集中できなくなるが、できあがると快適に。\\n現状の環境に付いてメモをしておく。\"), \"\\n\", React.createElement(_components.h1, null, \"term + font\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"WslTty + HackGenNerd + tmux\"), \"\\n\", React.createElement(_components.li, null, \"WezTerm + HackGenNerd(tmux なし。wezterm を使う)\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"init.lua\"), \"\\n\", React.createElement(_components.h2, null, \"lua ファイルの配置\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"~/.config/nvim/lua\"), \" が \", React.createElement(_components.code, null, \"LUA_PATH\"), \" になるので\\nのフォルダに普通の lua モジュール の流儀で配置して、\\n\", React.createElement(_components.code, null, \"reqiure\"), \" できるようにする。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token comment\\\">-- ~/.config/nvim/lua/dot.lua</span>\\n<span class=\\\"token comment\\\">-- module</span>\\n<span class=\\\"token keyword\\\">local</span> M<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\nM<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n\\n<span class=\\\"token keyword\\\">function</span> M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token keyword\\\">return</span> M</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token comment\\\">-- use</span>\\n<span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'dot'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"keymap\"), \"\\n\", React.createElement(_components.p, null, \"nvim の場合いくつか指定方法があるのだが、 lua の \", React.createElement(_components.code, null, \"vim.keymap.set\"), \" 関数がよい。 lua の関数を直接指定できるので快適。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\">vim<span class=\\\"token punctuation\\\">.</span>keymap<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'n'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'&lt;Space>a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'&lt;cmd>LspInfo&lt;CR>'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">-- lua の関数も書ける</span>\\nvim<span class=\\\"token punctuation\\\">.</span>keymap<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'n'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'&lt;Space>a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello lua'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"Windows での border 手動設定\"), \"\\n\", React.createElement(_components.p, null, \"Windows では telescope とかの罫線が文字化けしてしまうのだが、\\n文字列で指定すると問題が無いことがわかった。\\nどうも、エスケープシーケンスで罫線出力したときに Windows の conpty で変換されて\\n壊れるような気がしている。\\nなので、設定で unicode などの文字で罫線を指定してやると綺麗に描画される様子。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token comment\\\">-- border 指定。</span>\\ndot<span class=\\\"token punctuation\\\">.</span>border <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">\\\"╭\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"FloatBorder\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">\\\"─\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"FloatBorder\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">\\\"╮\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"FloatBorder\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">\\\"│\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"FloatBorder\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">\\\"╯\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"FloatBorder\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">\\\"─\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"FloatBorder\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">\\\"╰\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"FloatBorder\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">\\\"│\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"FloatBorder\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">-- plugin ごとにこまめに設定してやる</span>\\n\\n<span class=\\\"token comment\\\">-- LspInfo など</span>\\n<span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"lspconfig.ui.windows\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>default_options<span class=\\\"token punctuation\\\">.</span>border <span class=\\\"token operator\\\">=</span> dot<span class=\\\"token punctuation\\\">.</span>border\\n\\n<span class=\\\"token comment\\\">-- nvim-cmp</span>\\n  cmp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setup</span> <span class=\\\"token punctuation\\\">{</span>\\n    window <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      completion <span class=\\\"token operator\\\">=</span> cmp<span class=\\\"token punctuation\\\">.</span>config<span class=\\\"token punctuation\\\">.</span>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bordered</span> <span class=\\\"token punctuation\\\">{</span>\\n        border <span class=\\\"token operator\\\">=</span> dot<span class=\\\"token punctuation\\\">.</span>border<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      documentation <span class=\\\"token operator\\\">=</span> cmp<span class=\\\"token punctuation\\\">.</span>config<span class=\\\"token punctuation\\\">.</span>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bordered</span> <span class=\\\"token punctuation\\\">{</span>\\n        border <span class=\\\"token operator\\\">=</span> dot<span class=\\\"token punctuation\\\">.</span>border<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"で、罫線があると completion とか floating window の見栄えがよろしいのですな。\"), \"\\n\", React.createElement(_components.p, null, \"Windows はまだ描画が乱れる場合はあるのだけど、\\n左サイドに NvimTree を出しっぱなしにするなどで、ある程度防御できる、ぽい。\"), \"\\n\", React.createElement(_components.h1, null, \"package manager\"), \"\\n\", React.createElement(_components.p, null, \"lazy\"), \"\\n\", React.createElement(_components.h1, null, \"comment\"), \"\\n\", React.createElement(_components.h1, null, \"telescope\"), \"\\n\", React.createElement(_components.p, null, \"packer から乗り換え。\"), \"\\n\", React.createElement(_components.h1, null, \"nvimtree\"), \"\\n\", React.createElement(_components.p, null, \"NerdTree から乗り換え。\"), \"\\n\", React.createElement(_components.h1, null, \"treesitter\"), \"\\n\", React.createElement(_components.h1, null, \"lspconfig\"), \"\\n\", React.createElement(_components.p, null, \"いろいろ設定項目があるので、少しずつやる。\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"lua_ls + neodev\"), \"\\n\", React.createElement(_components.li, null, \"formatter\"), \"\\n\", React.createElement(_components.li, null, \"diagnostics / hover\"), \"\\n\", React.createElement(_components.li, null, \"semantic symbol => aerial, syntax highlight\"), \"\\n\", React.createElement(_components.li, null, \"goto defintion => tjump\"), \"\\n\", React.createElement(_components.li, null, \"completion\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"languages\"), \"\\n\", React.createElement(_components.p, null, \"lua_ls, clangd, pyright, tsserver(gatsby 作業), omnisharp(Unity 作業), gopls, jsonls\\nあたり快適に使えている。\\n一部、 \", React.createElement(_components.code, null, \"~/.vscode-server/extensions\"), \" のバイナリ使ってます。すいません。\"), \"\\n\", React.createElement(_components.h2, null, \"lua_ls\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"neodev\"), \" で nvim の builtin 関数の情報を表示する。\"), \"\\n\", React.createElement(_components.h2, null, \"clangd\"), \"\\n\", React.createElement(_components.p, null, \"header / source 切りかえ。\", React.createElement(_components.code, null, \"A.vim\"), \" みたいなやつ。\\n\", React.createElement(_components.code, null, \"ClangdSwitchSourceHeader\")), \"\\n\", React.createElement(_components.h1, null, \"lualine\"), \"\\n\", React.createElement(_components.h1, null, \"aerial\"), \"\\n\", React.createElement(_components.h1, null, \"completion\"), \"\\n\", React.createElement(_components.p, null, \"cmp\"), \"\\n\", React.createElement(_components.h1, null, \"lsp 経由の formatter\"), \"\\n\", React.createElement(_components.p, null, \"だいたい、 LanguageServer に任せてしまえる。\\nlua_ls と stylua を組みあわせたい場合など、別のフォーマッターを使いたい場合は\\nlua_ls のフォーマッターを停止させつつ、 null-ls の stylua を使うことができた。\"), \"\\n\", React.createElement(_components.h1, null, \"git\"), \"\\n\", React.createElement(_components.h1, null, \"quickfix\"), \"\\n\", React.createElement(_components.p, null, \"タスクランナーを使うのをやめて、下記のサイトを参考にした\\n\", React.createElement(_components.code, null, \"async_make\"), \" 的な lua 関数で運用中。\\n必要に応じて \", React.createElement(_components.code, null, \"set makeprg=cmake\\\\ --build\\\\ build\"), \" などする。\"), \"\\n\", React.createElement(_components.p, null, \"https://phelipetls.github.io/posts/async-make-in-nvim-with-lua/\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Cfilter\"), \" で件数を絞って\\n\", React.createElement(_components.code, null, \"<Tab>\"), \", \", React.createElement(_components.code, null, \"<S-Tab>\"), \" で quickfix を巡回するように設定した。\\nquickfix の新旧リスト切り替えを \", React.createElement(_components.code, null, \"<C-n>, <C-p>\"), \" にわりあてて、\\n使い捨ての quickfix を量産する感じに(c++)。\"), \"\\n\", React.createElement(_components.h1, null, \"floating term\"), \"\\n\", React.createElement(_components.h1, null, \"skk\"), \"\\n\", React.createElement(_components.h1, null, \"LuaSnip\"), \"\\n\", React.createElement(_components.h1, null, \"TODO:\"), \"\\n\", React.createElement(_components.p, null, \"LanguageServer は完全に実用になった。\\nDebugAdapter は動くけど、快適でない感じがする。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2023/0315-nvim.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","h1","ul","li","h2","span","ol","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2017-08-mediasink-use-dxva-md-86c2c3618a4e29e1b964.js","mappings":"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","sources":["webpack:///./content/posts/2017/08/mediasink_use_dxva.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"MediaSink で DXVA を使うには。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/Microsoft/Windows-classic-samples/tree/master/Samples/DX11VideoRenderer\"), \"\\n\", React.createElement(_components.p, null, \"解読の後半。\\nDXVA が何かということについてはぼんやりとしているのだけれど、VideoSample のバッファーに D3D のテクスチャを使うということぽい。\"), \"\\n\", React.createElement(_components.p, null, \"DirectX Surface Buffer\"), \"\\n\", React.createElement(_components.p, null, \"ということは Pipeline のどこかのタイミングで CPU 上の bitmap を CreateTexture して GPU に移動するのだけど、Decoder なり Renderer なりのなるべく上流で GPU に上げた方がうれしいという話。\\nID3D11Device を MediaSession に供給する\\nPipeline でテクスチャをやりとりするのだからデバイスを共有しましょうと。MediaSession の場合は、レンダラがデバイスを作成して IMFDXGIDeviceManager を公開する。\\n公開するのは IMFGetService を通してぽい。\\nこの辺。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">HRESULT DX11VideoRenderer::CMediaSink::GetService(__RPC__in REFGUID guidService, __RPC__in REFIID riid, __RPC__deref_out_opt LPVOID* ppvObject)\\n{\\n    HRESULT hr = S_OK;\\n\\n    if (guidService == MF_RATE_CONTROL_SERVICE)\\n    {\\n        hr = QueryInterface(riid, ppvObject);\\n    }\\n    else if (guidService == MR_VIDEO_RENDER_SERVICE)\\n    {\\n        hr = m_pPresenter-&gt;QueryInterface(riid, ppvObject);\\n    }\\n    else if (guidService == MR_VIDEO_ACCELERATION_SERVICE)\\n    {\\n        // ここからIMFDXGIDeviceManagerを得る\\n        hr = m_pPresenter-&gt;GetService(guidService, riid, ppvObject);\\n    }\\n    else\\n    {\\n        hr = MF_E_UNSUPPORTED_SERVICE;\\n    }\\n\\n    return hr;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"実験\\nまだ IMFGetService を実装していない VideoRenderer で、\\nProcessSample に入ってくる IMFSample から IMFDXGIBuffer が取得できるか試してみよう。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">DWORD cBuffers = 0;\\nauto hr = pSample-&gt;GetBufferCount(&amp;cBuffers);\\nif (FAILED(hr))\\n{\\n    return hr;\\n}\\n\\nMicrosoft::WRL::ComPtr&lt;IMFMediaBuffer&gt; pBuffer;\\nif (1 == cBuffers)\\n{\\n    hr = pSample-&gt;GetBufferByIndex(0, &amp;pBuffer);\\n}\\nelse\\n{\\n    hr = pSample-&gt;ConvertToContiguousBuffer(&amp;pBuffer);\\n}\\nif (FAILED(hr))\\n{\\n    return hr;\\n}\\n\\nMicrosoft::WRL::ComPtr&lt;IMFDXGIBuffer&gt; pDXGIBuffer;\\nhr = pBuffer.As(&amp;pDXGIBuffer);\\nif (FAILED(hr))\\n{\\n    // ここに来た\\n    return hr;\\n}\\n\\nMicrosoft::WRL::ComPtr&lt;ID3D11Texture2D&gt; pTexture2D;\\nhr = pDXGIBuffer-&gt;GetResource(IID_PPV_ARGS(&amp;pTexture2D));\\nif (FAILED(hr))\\n{\\n    return hr;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"実験２\\nStreamSink に IMFGetService を実装した。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">// IMFGetService\\nSTDMETHODIMP GetService(__RPC__in REFGUID guidService, __RPC__in REFIID riid, __RPC__deref_out_opt LPVOID* ppvObject)override\\n{\\n    HRESULT hr = S_OK;\\n\\n    if (guidService == MR_VIDEO_ACCELERATION_SERVICE)\\n    {\\n        if (riid == __uuidof(IMFDXGIDeviceManager))\\n        {\\n            if (NULL != m_pDXGIManager)\\n            {\\n                *ppvObject = (void*) static_cast&lt;IUnknown*&gt;(m_pDXGIManager);\\n                ((IUnknown*)*ppvObject)-&gt;AddRef();\\n            }\\n            else\\n            {\\n                hr = E_NOINTERFACE;\\n            }\\n        }\\n        else\\n        {\\n            hr = E_NOINTERFACE;\\n        }\\n    }\\n    else\\n    {\\n        hr = MF_E_UNSUPPORTED_SERVICE;\\n    }\\n\\n    return hr;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"IMFSample から ID3D11Texture2D を取得できた。\\n上流が、DXVA 化されて Sample のバッファがテクスチャになった。\\nどんなテクスチャなのか\\nArraySize = 13\\nFormat = DXGI_FORMAT_NV12\"), \"\\n\", React.createElement(_components.p, null, \"中身がよくわからぬ。\\nDecode された yuv フレームを Swapchain にコピーする\"), \"\\n\", React.createElement(_components.p, null, \"deinterlace\\nYUV To RGB\\nサイズ調整\"), \"\\n\", React.createElement(_components.p, null, \"等をしてデコード済みのフレームを RGB 画像にする工程。\\n２種類の実装がある。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/Microsoft/Windows-classic-samples/blob/master/Samples/DX11VideoRenderer/cpp/Presenter.cpp\"), \"\\n\", React.createElement(_components.p, null, \"の以下の部分。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">if (m_useXVP)\\n{\\n    BOOL bInputFrameUsed = FALSE;\\n\\n    hr = ProcessFrameUsingXVP( pCurrentType, pSample, pTexture2D, rcDest, ppOutputSample, &amp;bInputFrameUsed );\\n\\n    if (SUCCEEDED(hr) &amp;&amp; !bInputFrameUsed)\\n    {\\n        *pbProcessAgain = TRUE;\\n    }\\n}\\nelse\\n{\\n    hr = ProcessFrameUsingD3D11( pTexture2D, pEVTexture2D, dwViewIndex, dwEVViewIndex, rcDest, *punInterlaceMode, ppOutputSample );\\n\\n    // 省略\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"どちらでもだいたい同じ動きになると思う。\\nProcessFrameUsingXVP\"), \"\\n\", React.createElement(_components.p, null, \"Video Processor MFT\"), \"\\n\", React.createElement(_components.p, null, \"初期化時に IDXGIDeviceManager を直接渡して DXVA を有効にしている。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">hr = CoCreateInstance(CLSID_VideoProcessorMFT, nullptr, CLSCTX_INPROC_SERVER, IID_IMFTransform, (void**)&amp;m_pXVP);\\nif (FAILED(hr))\\n{\\n    break;\\n}\\n\\n// MFTにDirectXを渡す\\nhr = m_pXVP-&gt;ProcessMessage(MFT_MESSAGE_SET_D3D_MANAGER, ULONG_PTR(m_pDXGIManager));\\nif (FAILED(hr))\\n{\\n    break;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Texture の入ったサンプルを処理して、Texture の入ったサンプルに出力できる。\\nProcessFrameUsingD3D11\\nD3D11VideoDevice を使う。\\nこっちの方が手順が長くて大変。\\nおそらく、VideoProcessorMFT は D3D11VideoDevice を使って実装していてこちらの方がローレベルなのであろう。\\nDecode\\nAPI の説明としてはこれ。\"), \"\\n\", React.createElement(_components.p, null, \"Supporting Direct3D 11 Video Decoding in Media Foundation\"), \"\\n\", React.createElement(_components.p, null, \"DX11VideoRenderer サンプルでは、直接使っていない。\\nVideo Processing\\nDX11VideoRenderer サンプルでは、D3D11VideoDevice を最後の色変換等で使っている。\"), \"\\n\", React.createElement(_components.p, null, \"DXVA Video Processing\"), \"\\n\", React.createElement(_components.p, null, \"Video Process Blit\"), \"\\n\", React.createElement(_components.p, null, \"DXVA2.0+D3D9 のドキュメントぽい。\\nD3D11 ではこの関数。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"D3D11VideoContext::VideoProcessorBlt\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/08/mediasink_use_dxva.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","code","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3275],{449:function(e,l,n){n.r(l),n.d(l,{default:function(){return s}});var t=n(1151),c=n(7294);function r(e){const l=Object.assign({p:"p",code:"code",h2:"h2",ul:"ul",li:"li",h3:"h3"},(0,t.ah)(),e.components);return c.createElement(c.Fragment,null,c.createElement(l.p,null,"lua による imgui 計画の準備として、 ",c.createElement(l.code,null,"libclang")," によるバインディング生成器を ",c.createElement(l.code,null,"luajit")," に移植してみた。"),"\n",c.createElement(l.p,null,"https://github.com/ousttrue/luajitffi"),"\n",c.createElement(l.p,null,c.createElement(l.code,null,"libclang")," に対してはだいだい動くようになって、自身で生成した ",c.createElement(l.code,null,"FFI")," で動作するところまでできた。\nまた、 ",c.createElement(l.code,null,"EmmyLua Annotation")," もある程度付与できた。"),"\n",c.createElement(l.p,null,"https://github.com/ousttrue/luajitffi/blob/master/clang/mod.lua"),"\n",c.createElement(l.p,null,"こいつで、 ",c.createElement(l.code,null,"imgui.h")," から luajit FFI を生成する。"),"\n",c.createElement(l.h2,null,"libclang"),"\n",c.createElement(l.p,null,"c(c++)ヘッダーを ",c.createElement(l.code,null,"clang_visitChildren")," により、カーソルのTree としてパースする。\n今回は、 ",c.createElement(l.code,null,"CXChildVisit_Recurse")," で全部のカーソルをパースすることにした。"),"\n",c.createElement(l.ul,null,"\n",c.createElement(l.li,null,"同じカーソルが複数個所に現れうる"),"\n",c.createElement(l.li,null,"循環しうる(Link List ？)"),"\n"),"\n",c.createElement(l.p,null,"がありうることを考慮しておく。\n",c.createElement(l.code,null,"clang-c/Index.h")," は 6000 カーソルくらいなので問題ないが、 ",c.createElement(l.code,null,"Windows.h")," とかは 150000 カーソルとか爆発する。"),"\n",c.createElement(l.h2,null,"わりと色んなところで型がネストしていてつらい"),"\n",c.createElement(l.ul,null,"\n",c.createElement(l.li,null,"struct の中は namespace なので何でもあり"),"\n",c.createElement(l.li,null,"anonymous な union や struct のその場定義"),"\n",c.createElement(l.li,null,"typedef struct などのその場定義"),"\n",c.createElement(l.li,null,"関数ポインタのその場定義"),"\n"),"\n",c.createElement(l.p,null,"要するに、Cのコードの書き方によってどのようなカーソル構造になるかのパターンを知っている必要があって、\nパターン毎に分岐して情報を収集する必要がある。\nある型のメンバーの情報を集めていると、ネストした別の型情報が現れる場合があるので切り分ける。"),"\n",c.createElement(l.h2,null,"基本的なパターン"),"\n",c.createElement(l.p,null,"FFI では、対象となる関数を起点にその関数が使用するすべての型の定義を取り込む。\nカーソルはCのTranslationUnitの木構造をあらわしていて、型をあらわしていない。\nカーソルから頑張って型を得る。\n型を得られるカーソルは決まっていて、",c.createElement(l.code,null,"CXCursorType")," が宣言Declの系列となる。"),"\n",c.createElement(l.p,null,"TODO"),"\n",c.createElement(l.h3,null,"カーソル FunctionDecl"),"\n",c.createElement(l.h3,null,"カーソル EnumDecl"),"\n",c.createElement(l.h3,null,"カーソル TypedefDecl"),"\n",c.createElement(l.h3,null,"カーソル StructDecl"),"\n",c.createElement(l.h3,null,"Type Pointer"),"\n",c.createElement(l.h3,null,"Type Array"),"\n",c.createElement(l.h3,null,"Type Elaborated"),"\n",c.createElement(l.h3,null,"Type Record"),"\n",c.createElement(l.h3,null,"Type FunctionProto 関数ポインタ pointer => functionproto"),"\n",c.createElement(l.h3,null,"union"),"\n",c.createElement(l.h3,null,"typedef struct"),"\n",c.createElement(l.h3,null,"c++ name mangling"),"\n",c.createElement(l.h3,null,"マクロとの戦い"),"\n",c.createElement(l.h2,null,"luajit ffi"),"\n",c.createElement(l.p,null,c.createElement(l.code,null,"ffi.cdef")," に素直に定義すればいいので、他の言語の FFI に比べて簡単。"),"\n",c.createElement(l.p,null,"はまり。"),"\n",c.createElement(l.ul,null,"\n",c.createElement(l.li,null,c.createElement(l.code,null,"ffi.load")," の返り値が GC されると関数ポインタが死ぬ"),"\n",c.createElement(l.li,null,"pointer は ",c.createElement(l.code,null,"ffi.new('TYPE[1]')")," のようにサイズ１の array で運用する"),"\n",c.createElement(l.li,null,"tostring と ffi.string は違う"),"\n",c.createElement(l.li,null,"nullptr は nil ?"),"\n"),"\n",c.createElement(l.p,null,"だいたいよきに計らってくれるので、 ",c.createElement(l.code,null,"rust")," の FFI に比べて簡単なのであった。"),"\n",c.createElement(l.p,null,"ひとつだけはまりがあって、 ",c.createElement(l.code,null,"struct")," の値渡しができない場合がある。"),"\n",c.createElement(l.p,null,"http://wiki.luajit.org/FFI-Callbacks-with-pass-by-value-structs"),"\n",c.createElement(l.p,null,"そういえば、 ",c.createElement(l.code,null,"rust")," でも ",c.createElement(l.code,null,"struct")," の値渡しではまった記憶が。"),"\n",c.createElement(l.p,null,"https://forum.dlang.org/thread/dkamxcamwttszxwwxttv@forum.dlang.org"),"\n",c.createElement(l.p,null,"rust の場合は、 ",c.createElement(l.code,null,"struct")," の値返しが動かなかった。\nこれ、C の方で pointer 経由で値を返すラッパーを定義する必要があって回避方法はなかった。"),"\n",c.createElement(l.p,null,c.createElement(l.code,null,"ImVec2 ImGui::GetContentRegionAvail()")),"\n",c.createElement(l.p,null,"luajit ffi でもできるか注意が必要だな。"),"\n",c.createElement(l.h2,null,"lfs への依存を FFI した Windows API で置き換える"),"\n",c.createElement(l.p,null,"現状、ファイル操作 ",c.createElement(l.code,null,"isExists"),", ",c.createElement(l.code,null,"mkDir")," のために lfs を使っているのだけど、\nFFI で Windows API にアクセスできるようにしたら lfs 無しにできそう。\nとなれば luarocks も無しにできるので、 必要なのは luajit.exe だけになる。"))}var a=function(e){void 0===e&&(e={});const{wrapper:l}=Object.assign({},(0,t.ah)(),e.components);return l?c.createElement(l,e,c.createElement(r,e)):r(e)},u=n(8678),m=n(4160),E=n(8736);const i={code:e=>{let{children:l,className:n}=e;return n?c.createElement(E.Z,{className:n},l):c.createElement("code",null,l)}};function o(e){let{data:l,children:n}=e;const r=l.mdx.frontmatter;return c.createElement(u.Z,null,c.createElement("h1",null,r.title),c.createElement("div",{className:"tags-index"},r.tags&&r.tags.length>0&&r.tags.map((e=>c.createElement(m.rU,{to:"/tags/"+e+"/",itemProp:"url"},c.createElement("button",null,e))))),c.createElement(t.Zo,{components:i},n))}function s(e){return c.createElement(o,e,c.createElement(a,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2021-luajitffi-md-ce025f601a4b613ba444.js.map
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7030],{4734:function(n,s,a){a.r(s),a.d(s,{default:function(){return u}});var e=a(1151),t=a(7294);function p(n){const s=Object.assign({p:"p",h2:"h2",ul:"ul",li:"li",h3:"h3",span:"span",h4:"h4",a:"a"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(s.p,null,"独自のバッファを持つpluginを作りたい"),"\n",t.createElement(s.h2,null,"BufferList読んでみる"),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,"https://github.com/vim-scripts/bufferlist.vim/blob/master/plugin/bufferlist.vim"),"\n"),"\n",t.createElement(s.p,null,"273行"),"\n",t.createElement(s.p,null,"この量なら読める。"),"\n",t.createElement(s.h3,null,"インクルードガード"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim"><span class="token keyword">if</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">\'g:BufferListLoaded\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">finish</span>\n<span class="token keyword">endif</span>\n<span class="token keyword">let</span> g<span class="token punctuation">:</span>BufferListLoaded <span class="token operator">=</span> <span class="token number">1</span></code></pre></div>'}}),"\n",t.createElement(s.h3,null,"初期値決め"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim"><span class="token comment">" vimrcで先に値を決められるようにしている？</span>\n<span class="token comment">" vimrc より plugin の方が後に実行されるからか？</span>\n<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">\'g:BufferListWidth\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> g<span class="token punctuation">:</span>BufferListWidth <span class="token operator">=</span> <span class="token number">20</span>\n<span class="token keyword">endif</span>\n\n<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">\'g:BufferListMaxWidth\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> g<span class="token punctuation">:</span>BufferListMaxWidth <span class="token operator">=</span> <span class="token number">40</span>\n<span class="token keyword">endif</span></code></pre></div>'}}),"\n",t.createElement(s.h3,null,"BufferList関数"),"\n",t.createElement(s.p,null,t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__BUFFERLIST__</code>'}})," という Buffer を専用のバッファとして扱う。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim"><span class="token comment">" toggled the buffer list on/off</span>\n<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">BufferList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">" if we get called and the list is open --\x3e close it</span>\n  <span class="token keyword">if</span> <span class="token function">bufexists</span><span class="token punctuation">(</span><span class="token function">bufnr</span><span class="token punctuation">(</span><span class="token string">"__BUFFERLIST__"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">" 既に開いていたら閉じる</span>\n    exec <span class="token string">\':\'</span> <span class="token operator">.</span> <span class="token function">bufnr</span><span class="token punctuation">(</span><span class="token string">"__BUFFERLIST__"</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string">\'bwipeout\'</span>\n    <span class="token keyword">return</span>\n  <span class="token keyword">endif</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">bufnr</code>'}})," でバッファ名からバッファ番号を得て、",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">bufexists</code>'}})," で存在を確認する。\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">bufnr</code>'}})," には特別な名前を指定出来て以下のような効果があるようだ。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim">  <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>bufcount <span class="token operator">=</span> <span class="token function">bufnr</span><span class="token punctuation">(</span><span class="token string">\'$\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>activebuf <span class="token operator">=</span> <span class="token function">bufnr</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(s.h4,null,"バッファを作る"),"\n",t.createElement(s.p,null,"作ったバッファがアクティブになり、以降の操作対象になる。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim">  <span class="token comment">" now, create the buffer &amp; set it up</span>\n  exec <span class="token string">\'silent! \'</span> <span class="token operator">.</span> <span class="token keyword">l</span><span class="token punctuation">:</span>width <span class="token operator">.</span> <span class="token string">\'vne __BUFFERLIST__\'</span></code></pre></div>'}}),"\n",t.createElement(s.h4,null,"色決め"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim">  <span class="token comment">" set up syntax highlighting</span>\n  <span class="token keyword">if</span> <span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"syntax"</span><span class="token punctuation">)</span>\n    <span class="token builtin">syn</span> clear\n    <span class="token builtin">syn</span> <span class="token keyword">match</span> BufferNormal <span class="token operator">/</span>  <span class="token operator">.</span><span class="token operator">*</span><span class="token operator">/</span>\n    <span class="token builtin">syn</span> <span class="token keyword">match</span> BufferSelected <span class="token operator">/</span><span class="token operator">></span> <span class="token operator">.</span><span class="token operator">*</span><span class="token operator">/</span>hs<span class="token operator">=</span>s<span class="token operator">+</span><span class="token number">1</span>\n    <span class="token builtin">hi</span> <span class="token builtin">def</span> BufferNormal ctermfg<span class="token operator">=</span>black ctermbg<span class="token operator">=</span>white\n    <span class="token builtin">hi</span> <span class="token builtin">def</span> BufferSelected ctermfg<span class="token operator">=</span>white ctermbg<span class="token operator">=</span>black\n  <span class="token keyword">endif</span></code></pre></div>'}}),"\n",t.createElement(s.h4,null,"Buffer構築"),"\n",t.createElement(s.p,null,t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">setlocal nomodifiable</code>'}})," で編集不可に"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim">  <span class="token keyword">setlocal</span> <span class="token builtin">modifiable</span>\n  <span class="token keyword">if</span> <span class="token keyword">l</span><span class="token punctuation">:</span>displayedbufs <span class="token operator">></span> <span class="token number">0</span>\n    <span class="token comment">" input the buffer list, delete the trailing newline, &amp; fill with blank lines</span>\n    <span class="token keyword">put</span><span class="token operator">!</span> <span class="token operator">=</span><span class="token keyword">l</span><span class="token punctuation">:</span>buflist\n    <span class="token comment">" is there any way to NOT delete into a register? bummer...</span>\n    <span class="token comment">"norm Gdd$</span>\n    norm GkJ\n    <span class="token keyword">while</span> <span class="token function">winheight</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>\n      <span class="token keyword">put</span> <span class="token operator">=</span><span class="token keyword">l</span><span class="token punctuation">:</span>fill\n    <span class="token keyword">endwhile</span>\n  <span class="token keyword">else</span>\n    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>i <span class="token operator">=</span> <span class="token number">0</span> | <span class="token keyword">while</span> <span class="token keyword">l</span><span class="token punctuation">:</span>i <span class="token operator">&lt;</span> <span class="token function">winheight</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> | <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>i <span class="token operator">=</span> <span class="token keyword">l</span><span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">1</span>\n      <span class="token keyword">put</span><span class="token operator">!</span> <span class="token operator">=</span><span class="token keyword">l</span><span class="token punctuation">:</span>fill\n    <span class="token keyword">endwhile</span>\n    norm <span class="token number">0</span>\n  <span class="token keyword">endif</span>\n  <span class="token keyword">setlocal</span> <span class="token builtin">nomodifiable</span></code></pre></div>'}}),"\n",t.createElement(s.h4,null,"操作を設定"),"\n",t.createElement(s.p,null,"バッファローカルに ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">map</code>'}})," を設定する。\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">map</code>'}})," がキーボード・マウス入力へのコールバック設定になっているのか。なるほど。"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim">  <span class="token comment">" set up the keymap</span>\n  <span class="token builtin">noremap</span> <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token operator">&lt;</span>CR<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token function">LoadBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token keyword">q</span> <span class="token punctuation">:</span><span class="token keyword">bwipeout</span><span class="token operator">&lt;</span>CR<span class="token operator">></span> \n  map <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token keyword">j</span> <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token function">BufferListMove</span><span class="token punctuation">(</span><span class="token string">"down"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token keyword">k</span> <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token function">BufferListMove</span><span class="token punctuation">(</span><span class="token string">"up"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token keyword">d</span> <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token function">BufferListDeleteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token operator">&lt;</span>MouseDown<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token function">BufferListMove</span><span class="token punctuation">(</span><span class="token string">"up"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token operator">&lt;</span>MouseUp<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token function">BufferListMove</span><span class="token punctuation">(</span><span class="token string">"down"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token operator">&lt;</span>LeftDrag<span class="token operator">></span> <span class="token operator">&lt;</span>Nop<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token operator">&lt;</span>LeftRelease<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token function">BufferListMove</span><span class="token punctuation">(</span><span class="token string">"mouse"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">-</span>LeftMouse<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token function">BufferListMove</span><span class="token punctuation">(</span><span class="token string">"mouse"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>\n    \\<span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token function">LoadBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token operator">&lt;</span>Down<span class="token operator">></span> <span class="token keyword">j</span>\n  map <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token operator">&lt;</span>Up<span class="token operator">></span> <span class="token keyword">k</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"左右への動きを封じてある"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim">  map <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token keyword">h</span> <span class="token operator">&lt;</span>Nop<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token keyword">l</span> <span class="token operator">&lt;</span>Nop<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token operator">&lt;</span>Left<span class="token operator">></span> <span class="token operator">&lt;</span>Nop<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token operator">&lt;</span>Right<span class="token operator">></span> <span class="token operator">&lt;</span>Nop<span class="token operator">></span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"その他編集系の機能を封じる"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim">  map <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> i <span class="token operator">&lt;</span>Nop<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> a <span class="token operator">&lt;</span>Nop<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> I <span class="token operator">&lt;</span>Nop<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> A <span class="token operator">&lt;</span>Nop<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token keyword">o</span> <span class="token operator">&lt;</span>Nop<span class="token operator">></span>\n  map <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> O <span class="token operator">&lt;</span>Nop<span class="token operator">></span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"移動"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">  map &lt;silent> &lt;buffer> &lt;Home> :call BufferListMove(1)&lt;CR>\n  map &lt;silent> &lt;buffer> &lt;End> :call BufferListMove(line("$"))&lt;CR></code></pre></div>'}}),"\n",t.createElement(s.h2,null,"情報収集"),"\n",t.createElement(s.p,null,t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">:set nomodifiable</code>'}})," で調べてみた"),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,"http://tyru.hatenablog.com/entry/20101107/modifiable_and_readonly"),"\n",t.createElement(s.li,null,"https://vimconf.org/2018/slides/Effective_Modern_Vim_scripting_at_vimconf2018_for_PDF.pdf"),"\n",t.createElement(s.li,null,"https://vi.stackexchange.com/questions/17140/how-to-create-a-buffer-like-a-fugitive-temporary-buffer"),"\n"),"\n",t.createElement(s.p,null,t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">:set buftype=nofile</code>'}})," が出てきた"),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,t.createElement(s.a,{href:"http://leafcage.hateblo.jp/entry/2013/11/21/083830"},"'nobuflisted' なバッファの作り方")),"\n",t.createElement(s.li,null,"https://vi.stackexchange.com/questions/14832/how-to-create-a-buffer-with-customized-behavior-how-to-create-a-buffer-that-a"),"\n",t.createElement(s.li,null,"http://learnvimscriptthehardway.stevelosh.com/"),"\n"),"\n",t.createElement(s.h2,null,"NERDTree解読"),"\n",t.createElement(s.h3,null,"左側にどうやって ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">split</code>'}})," して開くのか"),"\n",t.createElement(s.h3,null,"ファイルを選択して開くとき開き先をどうやって決めるのか"),"\n",t.createElement(s.h2,null,"pythonに移植できんやろか"),"\n",t.createElement(s.p,null,"つまり、Pythonでvimから見える関数を定義できれば勝つるのでは。"),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,"http://candidtim.github.io/vim/2017/08/11/write-vim-plugin-in-python.html"),"\n"),"\n",t.createElement(s.p,null,t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim.eval</code>'}})," とかあるな・・・。いけるのでは？"),"\n",t.createElement(s.p,null,"慣れたら全部 ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim script</code>'}})," で書くようになりそうだけど、練習に移植してみよか。"),"\n",t.createElement(s.p,null,"nvimで、"),"\n",t.createElement(s.p,null,t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">:py3 import sys; print(sys.version)</code>'}})),"\n",t.createElement(s.p,null,"としたら"),"\n",t.createElement(s.p,null,t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">3.6.8 (tags/v3.6.8:3c6b436a57, Dec 23 2018, 23:31:17) [MSC v.1916 32 bit (Intel)]</code>'}})),"\n",t.createElement(s.p,null,"と返ってきた。なるほど。"),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,"[Pythonでvim pluginを書く https://qiita.com/zakuro9715/items/98449dd4c6b9e1d61ef5]"),"\n"))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,e.ah)(),n.components);return s?t.createElement(s,n,t.createElement(p,n)):p(n)},l=a(8678),c=a(8838);const r={code:n=>{let{children:s,className:a}=n;return a?t.createElement(c.Z,{className:a},s):t.createElement("code",null,s)}};function k(n){let{data:s,children:a}=n;return t.createElement(l.Z,null,t.createElement("h1",null,s.mdx.frontmatter.title),t.createElement(e.Zo,{components:r},a))}function u(n){return t.createElement(k,n,t.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2019-vim-create-plugin-has-buffer-md-02788191a20fd6d81972.js.map
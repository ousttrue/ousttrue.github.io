{"version":3,"file":"component---content-posts-2015-12-06-threejs-02-md-414633dbaed18273059e.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBP,EAAYG,IAAK,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,KAAM,qgKAChG,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECoBO,MAAMW,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2015/12/06/threejs_02.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\nsource\\n今回は、TrackballControlsを導入します。\\nTrackballControlsはThree.jsのライブラリ内に含まれるのではなくexamples扱いなので、\\n直接コードを入手。\\n使い方は、TrackballControlsのソースを見ると\\n以下のようにするらしい。\\ncontrols = new THREE.TrackballControls( camera );\\n\\ncontrols.rotateSpeed = 1.0;\\ncontrols.zoomSpeed = 1.2;\\ncontrols.panSpeed = 0.8;\\n\\ncontrols.noZoom = false;\\ncontrols.noPan = false;\\n\\ncontrols.staticMoving = true;\\ncontrols.dynamicDampingFactor = 0.3;\\n\\ncontrols.keys = [ 65, 83, 68 ];\\n\\ncontrols.addEventListener( 'change', render );\\n\\nもうひとつ更新用に以下のコードも必要。\\nfunction animate() {\\n    requestAnimationFrame( animate );\\n    controls.update();\\n}\\n\\nやってみよう。\\nベースのレンダリングシーン\\nシーンに適当にキューブを描画するコード。\\n前回の記事をほぼ流用だけどいくつか変更点がある。\\n\\nnamespaceでかこって名前衝突から防衛\\nCreateCameraを独立\\nキューブがアニメーションする部分をオミット\\n\\nthreejs_02.ts\\n/// <reference path='../../../../typings/tsd.d.ts' />\\n\\n\\nnamespace Renderer02 {\\n\\n    class Renderer {\\n        $container: JQuery;\\n        renderer: THREE.Renderer;\\n\\n        scene: THREE.Scene;\\n        camera: THREE.Camera;\\n        mesh: THREE.Mesh;\\n\\n        CreateRenderer($container: JQuery) {\\n            this.$container = $container;\\n\\n            this.renderer = new THREE.WebGLRenderer();\\n            this.renderer.setSize($container.width(), $container.height());\\n            $container.append(this.renderer.domElement);\\n        }\\n\\n        CreateCamera() {\\n            this.camera = new THREE.PerspectiveCamera(75\\n                , this.$container.width() / this.$container.height()\\n                , 0.1, 1000);\\n            this.camera.position.z = 5;\\n        }\\n\\n        CreateScene() {\\n            this.scene = new THREE.Scene();\\n\\n            var geometry = new THREE.BoxGeometry(1, 1, 1);\\n            var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\\n            this.mesh = new THREE.Mesh(geometry, material);\\n            this.scene.add(this.mesh);\\n        }\\n\\n        Render() {\\n            // render\\n            this.renderer.render(this.scene, this.camera);\\n        }\\n    }\\n\\n    var renderer = new Renderer();\\n    export function initialize($container: JQuery) {\\n\\n        renderer.CreateRenderer($container);\\n        renderer.CreateCamera();\\n        renderer.CreateScene();\\n\\n        renderer.Render();\\n    }\\n}\\n\\n$(() => {\\n    var $container = $('div#renderer');\\n    Renderer02.initialize($container);\\n});\\n\\n\\nTypeScript定義を追加する\\nまず、TrackballControlsの型定義を追加する。\\ndeclare module THREE {\\n    export class TrackballControls\\n    {\\n        constructor(camera: THREE.Camera);\\n        rotateSpeed: number;\\n        zoomSpeed: number;\\n        panSpeed: number;\\n        noZoom: boolean;\\n        noPan: boolean;\\n        staticMoving: boolean;\\n        dynamicDampingFactor: number;\\n        keys: number[];\\n        addEventListener(event: string, callback: Function):void;\\n        update():void;\\n    }\\n}\\n\\nTrackballControlsを初期化\\n// Rendererのメソッドを修正\\n    CreateCamera() {\\n        this.camera = new THREE.PerspectiveCamera(75\\n            , this.$container.width() / this.$container.height()\\n            , 0.1, 1000);\\n        this.camera.position.z = 5;\\n\\n        // 以下を追加\\n        this.controls = new THREE.TrackballControls(this.camera);\\n\\n        this.controls.rotateSpeed = 1.0;\\n        this.controls.zoomSpeed = 1.2;\\n        this.controls.panSpeed = 0.8;\\n\\n        this.controls.noZoom = false;\\n        this.controls.noPan = false;\\n\\n        this.controls.staticMoving = true;\\n        this.controls.dynamicDampingFactor = 0.3;\\n\\n        this.controls.keys = [65, 83, 68];\\n\\n        // trackballに変化があった時だけ描画を呼ぶ\\n        this.controls.addEventListener('change', this.Render.bind(this));\\n    }\\n\\n// Rendererのメソッドを追加\\n    Animate() {\\n        requestAnimationFrame(this.Animate.bind(this));\\n        this.controls.update();\\n    }\\n\\n// Animate呼び出しを追加\\n    export function initialize($container: JQuery) {\\n\\n        renderer.CreateRenderer($container);\\n        renderer.CreateCamera();\\n        renderer.CreateScene();\\n\\n        renderer.Render();\\n        renderer.Animate(); // 追加\\n    }\\n\\n動いたがWindow全体のマウスイベントが取られていてこれじゃない。\\ncanvasの親になったdivをマウスイベントの対象にしたい。\\ndiv#rendererを操作対象にする\\nTrackballControls.jsを見てたら\\nTHREE.TrackballControls = function ( object, domElement ) {\\n}\\n\\nという記述を発見。第２引数にhtmlエレメントを渡せるらしい。\\n定義を修正。\\n// 定義\\n    constructor(camera: THREE.Camera, element?: Element);\\n\\n// 呼び出し\\n   this.controls = new THREE.TrackballControls(this.camera, this.$container[0]);\\n\\n想定した動きになった。\\nマウスカーソルを変えてみる\\ncssの話だけれど。\\n<div id=\\\"renderer\\\" style=\\\"width:300px;height:200px;cursor:pointer;\\\"></div>\\n\\n    $container\\n        .mousedown(function(event) {\\n            switch (event.button) {\\n                case 0:\\n                    $(this).css({ cursor: 'pointer' });\\n                    break;\\n\\n                case 1:\\n                    $(this).css({ cursor: 'n-resize' });\\n                    break;\\n\\n                case 2:\\n                    $(this).css({ cursor: 'move' });\\n                    break;\\n            }\\n        })\\n        .mouseup(function(event){\\n            $(this).css({cursor: 'pointer'});\\n        })\\n    ;\\n\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","pre","code","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
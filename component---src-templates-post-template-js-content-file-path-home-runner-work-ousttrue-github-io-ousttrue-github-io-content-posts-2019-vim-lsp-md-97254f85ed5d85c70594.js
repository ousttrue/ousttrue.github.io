"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5071],{2866:function(n,s,a){a.r(s),a.d(s,{default:function(){return k}});var t=a(1151),e=a(7294);function p(n){const s=Object.assign({h2:"h2",p:"p",h3:"h3",ul:"ul",li:"li",a:"a",h4:"h4",span:"span"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(s.h2,null,"vim lsp client"),"\n",e.createElement(s.p,null,"vimのlspクライアント。"),"\n",e.createElement(s.h3,null,"vim-lsp"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://github.com/prabirshrestha/vim-lsp"},"https://github.com/prabirshrestha/vim-lsp")),"\n"),"\n",e.createElement(s.h4,null,"vim-lsp解読"),"\n",e.createElement(s.p,null,"plugin/lsp.vim"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim"><span class="token keyword">if</span> g<span class="token punctuation">:</span>lsp_auto_enable\n    augroup lsp_auto_enable\n        <span class="token builtin">autocmd</span><span class="token operator">!</span>\n        <span class="token builtin">autocmd</span> VimEnter <span class="token operator">*</span> <span class="token keyword">call</span> <span class="token builtin">lsp</span>#<span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    augroup END\n<span class="token keyword">endif</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"autoload/lsp.vim"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim"><span class="token keyword">function</span><span class="token operator">!</span> <span class="token builtin">lsp</span>#<span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort\n    <span class="token keyword">call</span> s<span class="token punctuation">:</span><span class="token function">register_events</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">endfunction</span>\n\n<span class="token keyword">function</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">register_events</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort\n    <span class="token keyword">call</span> s<span class="token punctuation">:</span><span class="token function">on_text_document_did_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">endfunction</span>\n\n<span class="token keyword">function</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">on_text_document_did_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort\n<span class="token keyword">endfunction</span>\n\n<span class="token comment">" lspサーバの初期化をするぽい</span>\n<span class="token comment">" server_nameは </span><span class="token string">\'pyls\'</span>など\n<span class="token keyword">function</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">ensure_flush</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> server_name<span class="token punctuation">,</span> <span class="token keyword">cb</span><span class="token punctuation">)</span> abort\n<span class="token keyword">endfunction</span>\n\n<span class="token comment">" lspサーバープロセスを起動して、stdin, stdout, stderrを接続する</span>\n<span class="token keyword">function</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">lsp_start</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> abort\n\n    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>lsp_id <span class="token operator">=</span> <span class="token builtin">lsp</span>#client#<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        \\ <span class="token string">\'cmd\'</span><span class="token punctuation">:</span> <span class="token keyword">l</span><span class="token punctuation">:</span>cmd<span class="token punctuation">,</span>\n        \\ <span class="token string">\'on_stderr\'</span><span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token string">\'s:on_stderr\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">:</span>server_name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        \\ <span class="token string">\'on_exit\'</span><span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token string">\'s:on_exit\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">:</span>server_name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        \\ <span class="token string">\'on_notification\'</span><span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token string">\'s:on_notification\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">:</span>server_name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        \\ <span class="token string">\'on_request\'</span><span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token string">\'s:on_request\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">:</span>server_name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        \\ <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">endfunction</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">autoload/lsp/client.vim</code>'}})),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim"><span class="token keyword">function</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">lsp_start</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> abort\n    <span class="token comment">" async.vim ライブラリに移る</span>\n    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>client_id <span class="token operator">=</span> async#job#<span class="token function">start</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span>opts<span class="token operator">.</span>cmd<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        \\ <span class="token string">\'on_stdout\'</span><span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token string">\'s:on_stdout\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        \\ <span class="token string">\'on_stderr\'</span><span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token string">\'s:on_stderr\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        \\ <span class="token string">\'on_exit\'</span><span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token string">\'s:on_exit\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        \\ <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">endfunction</span>\n\n<span class="token comment">" stdout を on_notification と on_request に切り出す</span>\n<span class="token keyword">function</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">on_stdout</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> data<span class="token punctuation">,</span> event<span class="token punctuation">)</span> abort\n<span class="token keyword">endfunction</span></code></pre></div>'}}),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://github.com/prabirshrestha/async.vim"},"https://github.com/prabirshrestha/async.vim")),"\n"),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">autoload/async/job.vim</code>'}})," ファイル一個だけだった。"),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim</code>'}})," と ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nvim</code>'}})," の違いをラップしているぽい。"),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim</code>'}})," の ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">job_start</code>'}})," と ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nvim</code>'}})," の ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jobstart</code>'}}),"。\nなるほど。"),"\n",e.createElement(s.h4,null,"vim-lspの動きを追う(dls)"),"\n",e.createElement(s.p,null,e.createElement(s.a,{href:"https://github.com/d-language-server/dls"},"dls")," だと"),"\n",e.createElement(s.p,null,"ServerCapabilities"),"\n",e.createElement(s.p,null,"に"),"\n",e.createElement(s.p,null,"definitionProvider"),"\n",e.createElement(s.p,null,"が入ってないな・・・"),"\n",e.createElement(s.p,null,"Requestにそもそも入っていないのでは"),"\n",e.createElement(s.p,null,"入れてみた。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim">        <span class="token builtin">autocmd</span> User lsp_setup <span class="token keyword">call</span> <span class="token builtin">lsp</span>#<span class="token function">register_server</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                    \\ <span class="token string">\'name\'</span><span class="token punctuation">:</span> <span class="token string">\'d\'</span><span class="token punctuation">,</span>\n                    \\ <span class="token string">\'cmd\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>server_info<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">\'root_dls\'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token comment">"\\ </span><span class="token string">\'cmd\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>server_info<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">\'dub\'</span><span class="token punctuation">,</span> <span class="token string">\'run\'</span><span class="token punctuation">,</span> <span class="token string">\'-q\'</span><span class="token punctuation">,</span> <span class="token string">\'serve-d\'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    \\ <span class="token string">\'root_uri\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>server_info<span class="token operator">-</span><span class="token operator">></span><span class="token builtin">lsp</span>#utils#<span class="token function">path_to_uri</span><span class="token punctuation">(</span><span class="token builtin">lsp</span>#utils#<span class="token function">find_nearest_parent_file_directory</span><span class="token punctuation">(</span><span class="token builtin">lsp</span>#utils#<span class="token function">get_buffer_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'dub.json\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    \\ <span class="token string">\'whitelist\'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'d\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                    \\ <span class="token string">\'capabilities\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    \\   <span class="token string">\'workspace\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    \\       <span class="token string">\'applyEdit\'</span><span class="token punctuation">:</span> v<span class="token punctuation">:</span>true\n                    \\   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    \\   <span class="token string">\'textDocument\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment">" これ</span>\n                    \\       <span class="token string">\'definition\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    \\         <span class="token string">\'dynamicRegistration\'</span><span class="token punctuation">:</span> v<span class="token punctuation">:</span>true\n                    \\     <span class="token punctuation">}</span>\n                    \\   <span class="token punctuation">}</span>\n                    \\ <span class="token punctuation">}</span>\n                    \\ <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"実際に通信するようになた。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token string">"---\x3e"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">"method"</span><span class="token operator">:</span> <span class="token string">"textDocument/definition"</span><span class="token punctuation">,</span> <span class="token property">"on_notification"</span><span class="token operator">:</span> <span class="token string">"---funcref---"</span><span class="token punctuation">,</span> <span class="token property">"params"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"textDocument"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"uri"</span><span class="token operator">:</span> <span class="token string">"file:///home/ousttrue/work/d_hello/source/app.d"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token property">"position"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"character"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token property">"line"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre></div>'}}),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token string">"&lt;---"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">"response"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token property">"jsonrpc"</span><span class="token operator">:</span> <span class="token string">"2.0"</span><span class="token punctuation">,</span> <span class="token property">"result"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token property">"request"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token property">"jsonrpc"</span><span class="token operator">:</span> <span class="token string">"2.0"</span><span class="token punctuation">,</span> <span class="token property">"method"</span><span class="token operator">:</span> <span class="token string">"textDocument/definition"</span><span class="token punctuation">,</span> <span class="token property">"params"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"textDocument"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"uri"</span><span class="token operator">:</span> <span class="token string">"file:///home/ousttrue/work/d_hello/source/app.d"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token property">"position"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"character"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token property">"line"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"エラーが ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Definition not found</code>'}})," に変わって\n確かに、 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">result</code>'}})," の中身が空っぽなので ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">not found</code>'}})," とサーバーが応答している。"),"\n",e.createElement(s.p,null,"問題が ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim-lsp</code>'}})," から ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">dls</code>'}})," に移った。"),"\n",e.createElement(s.h3,null,"ale"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://github.com/w0rp/ale"},"https://github.com/w0rp/ale")),"\n"),"\n",e.createElement(s.h3,null,"LanguageClient"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://github.com/autozimu/LanguageClient-neovim"},"https://github.com/autozimu/LanguageClient-neovim")),"\n"),"\n",e.createElement(s.p,null,"一部が ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rust</code>'}})," で実装されているぽい。"),"\n",e.createElement(s.h3,null,"vim-lsp"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://www.kieranbamforth.me/blog/vim-lsp.html"},"https://www.kieranbamforth.me/blog/vim-lsp.html")),"\n"),"\n",e.createElement(s.h3,null,"built-in"),"\n",e.createElement(s.p,null,"まだ、実装中？"),"\n",e.createElement(s.h2,null,"Language Server Protocol"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://microsoft.github.io/language-server-protocol/specification"},"https://microsoft.github.io/language-server-protocol/specification")),"\n"),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">version 3.x</code>'}})),"\n",e.createElement(s.p,null,e.createElement(s.a,{href:"https://github.com/Microsoft/language-server-protocol/blob/master/versions/protocol-2-x.md"},"https://github.com/Microsoft/language-server-protocol/blob/master/versions/protocol-2-x.md")),"\n",e.createElement(s.h3,null,"通信シーケンス"),"\n",e.createElement(s.h4,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&lt;-- request1 initialize</code>'}})),"\n",e.createElement(s.h4,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">--\x3e response1</code>'}})),"\n",e.createElement(s.h4,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&lt;-- notify initialized</code>'}})),"\n",e.createElement(s.h4,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&lt;-- notify textDocument/didOpen</code>'}})),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="vim"><pre class="language-vim"><code class="language-vim"><span class="token builtin">autocmd</span> FileType <span class="token operator">*</span> <span class="token keyword">call</span> wf#<span class="token builtin">lsp</span>#<span class="token function">setFileType</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.h4,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&lt;-- notify textDocument/didChange</code>'}})),"\n",e.createElement(s.h4,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">--\x3e notify textDocument/publishDiagnostics</code>'}})),"\n",e.createElement(s.h4,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&lt;-- request2 textDocument/documentHighlight</code>'}})),"\n",e.createElement(s.h4,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">--\x3e response2</code>'}})),"\n",e.createElement(s.h2,null,"log viewer"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,"\n",e.createElement(s.p,null,e.createElement(s.a,{href:"https://github.com/Microsoft/language-server-protocol-inspector"},"https://github.com/Microsoft/language-server-protocol-inspector")),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://microsoft.github.io/language-server-protocol/inspector/"},"https://microsoft.github.io/language-server-protocol/inspector/")),"\n"),"\n"),"\n",e.createElement(s.li,null,"\n",e.createElement(s.p,null,e.createElement(s.a,{href:"https://qiita.com/Rockdoor/items/f5dca558bbc843d8f334"},"VSCode 用 SystemVerilogの拡張を作る（#7）")),"\n"),"\n",e.createElement(s.li,null,"\n",e.createElement(s.p,null,"VSCodeでlsp を実行させて通信ログを出力"),"\n"),"\n",e.createElement(s.li,null,"\n",e.createElement(s.p,null,"通信ログを見やすく表示"),"\n"),"\n"),"\n",e.createElement(s.p,null,"しかし、どうやってログを作るかよくわからん。\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">vim-lsp</code>'}})," のログを改造して作ってみる。"),"\n",e.createElement(s.h2,null,"各言語のサーバー"),"\n",e.createElement(s.p,null,"試してみたやつ。"),"\n",e.createElement(s.h3,null,"python"),"\n",e.createElement(s.h4,null,"pyls"),"\n",e.createElement(s.p,null,"Linux, Windows 共に動いた。"),"\n",e.createElement(s.h3,null,"dlang"),"\n",e.createElement(s.h4,null,"serve-d"),"\n",e.createElement(s.p,null,"うまくいかなかったので、調べている・・・"),"\n",e.createElement(s.h4,null,"dls"),"\n",e.createElement(s.p,null,"うまくいかなかったので、調べている・・・"),"\n",e.createElement(s.h3,null,"c++"),"\n",e.createElement(s.p,null,"Linuxで動いた。"),"\n",e.createElement(s.h4,null,"cquery"))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?e.createElement(s,n,e.createElement(p,n)):p(n)},l=a(8678),c=a(1883),u=a(8838);const r={code:n=>{let{children:s,className:a}=n;return a?e.createElement(u.Z,{className:a},s):e.createElement("code",null,s)}};function i(n){let{data:s,children:a}=n;const p=s.mdx.frontmatter;return e.createElement(l.Z,null,e.createElement("h1",null,p.title),e.createElement("div",{className:"tags-index"},p.tags&&p.tags.length>0&&p.tags.map((n=>e.createElement(c.rU,{to:"/tags/"+n+"/",itemProp:"url"},e.createElement("button",null,n))))),e.createElement(t.Zo,{components:r},a))}function k(n){return e.createElement(i,n,e.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2019-vim-lsp-md-97254f85ed5d85c70594.js.map
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-10-29-waf-md-631ff34dbf40accc7023.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,sIAAuI,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAC3QI,wBAAyB,CACvBC,OAAQ,wjKAGd,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCXA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMY,EAAKC,IAAIC,YAAYC,OAAQf,EAAAA,cAAoBgB,EAAAA,GAAa,CAC7IjB,WAAYA,GACXQ,GACL,CACe,SAASU,EAAiBzB,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoBkB,EAAqB1B,GAC3F,C","sources":["webpack:///./content/posts/2013/10/29/waf.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"python によるビルドスクリプト waf を使い始めた\\npython によるビルドシステム waf を使ってみた。\\n使ってみた感触では vc と gcc 両方でビルドするとかそういうのに向いていそうなので、要するにわしのニーズに合っているように思える。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">https://code.google.com/p/waf/\\n前から気にはなっていたのだけれどどうにも取っ付きが悪くて使えるところまでたどりつけていなかったのだが、やっと最初の一歩を踏み出すことができたのでメモを残す。\\n早速実践から行く。\\n+hello/\\n  +hello.cpp\\n\\nhello.cpp\\n#include &lt;iostream>\\n\\nint main(int argc, char **argv)\\n{\\n    std::cout &lt;&lt; \\\"hello waf !\\\" &lt;&lt; std::endl;\\n    return 0;\\n}\\n\\nというプロジェクトを作ったとする。\\nhttps://code.google.com/p/waf/downloads/detail?name=waf-1.7.13\\nからwaf(python\\nscriptの圧縮されたもの)をダウンロードしてwscriptを記述する。\\n+hello/\\n  +hello.cpp\\n  +waf\\n  +wscript\\n\\nwscriptは以下のようにする。\\nAPPNAME='hello'\\nVERSION='1.0.0'\\n\\n\\ndef configure(conf):\\n    conf.env['MSVC_TARGETS'] = ['x86']\\n    conf.load('msvc')\\n    conf.env.CXXFLAGS = ['/nologo', '/EHsc']\\n\\ndef build(bld):\\n    bld.program(\\n            source='hello.cpp',\\n            target=APPNAME\\n            )\\n\\n初回とwscriptのconfigureを修正する度にconfigureする。\\n> python waf configure\\nSetting top to                           : C:\\\\work\\\\_waf\\\\hello\\nSetting out to                           : C:\\\\work\\\\_waf\\\\hello\\\\build\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 9.0\\\\VC\\\\Bin\\\\amd64\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 9.0\\\\VC\\\\Bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 9.0\\\\VC\\\\Bin\\\\x86_IA64\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : c:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\Bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 9.0\\\\VC\\\\BIN\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : c:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\BIN\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : c:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\BIN\\\\CL.exe\\nChecking for program CL                  : C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\bin\\\\CL.exe\\nChecking for program CL                  : c:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\BIN\\\\CL.exe\\nChecking for program LINK                : c:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\BIN\\\\LINK.exe\\nChecking for program LIB                 : c:\\\\Program Files (x86)\\\\Microsoft Visual Studio 10.0\\\\VC\\\\BIN\\\\LIB.exe\\nChecking for program MT                  : C:\\\\Program Files (x86)\\\\Microsoft SDKs\\\\Windows\\\\v7.0A\\\\bin\\\\MT.exe\\nChecking for program RC                  : C:\\\\Program Files (x86)\\\\Microsoft SDKs\\\\Windows\\\\v7.0A\\\\bin\\\\RC.exe\\n'configure' finished successfully (6.219s)\\n\\nビルドする。\\n> python waf build\\nWaf: Entering directory `C:\\\\work\\\\_waf\\\\hello\\\\build'\\n[1/2] cxx: hello.cpp -> build\\\\hello.cpp.1.o\\nhello.cpp\\n[2/2] cxxprogram: build\\\\hello.cpp.1.o -> build\\\\hello.exe build\\\\hello.exe.manifest\\nWaf: Leaving directory `C:\\\\work\\\\_waf\\\\hello\\\\build'\\n'build' finished successfully (1.138s)\\n\\n実行してみる。\\n> .\\\\build\\\\hello.exe\\nhello waf !\\n\\nということでvcでexeをビルドするスクリプトができた。\\n何もパスの設定をしなくてもvcのコンパイラを勝手に探してビルドできるのは意外だった。\\nとはいえ、これだけではwafの嬉しさは発揮されないのでこれからwscriptを拡張していく。\\n次回、debugとrelease, 32bitビルドと64bitビルドの管理について書く予定。</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/10/29/waf.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
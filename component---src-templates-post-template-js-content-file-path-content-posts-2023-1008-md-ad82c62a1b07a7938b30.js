"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6809],{9763:function(n,a,s){s.r(a),s.d(a,{default:function(){return k}});var e=s(1151),t=s(7294);function p(n){const a=Object.assign({p:"p",code:"code",span:"span"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"script 用途には python を愛用していたのだけど、\npython-3.10 で入った match 文が気に入りすぎて、\nlinux とか mac のデフォルトの python が 3.9 であったりすることが悲しかったので、 lua 使いになった。\n(dotfiles の script を match から if に書きなおしたw)"),"\n",t.createElement(a.p,null,"というわけでもなく、nvim に常用して lua の使用頻度が上がったので、\nついでに主力のスクリプト言語が変わった。\n",t.createElement(a.code,null,"nvim")," 以外に、 ",t.createElement(a.code,null,"wezterm"),", ",t.createElement(a.code,null,"nyagos")," という lua で設定するツールを採用した。"),"\n",t.createElement(a.p,null,"nvim は luajit(lua-5.1互換) で、wezterm は lua-5.4 で、 nyagos は gopherlua(lua-5.1互換) ということから, lua-5.1 向けの lua を使う。\nlua は、5.1 で完成形ということでこれで良いのだ。"),"\n",t.createElement(a.p,null,"OpenGL は ",t.createElement(a.code,null,"love2D"),"(luajit), OpenXR は ",t.createElement(a.code,null,"lovr"),"(luajit) である。\nWebRTC は ",t.createElement(a.code,null,"janus"),"(lua-5.3)。"),"\n",t.createElement(a.p,null,"luajit が人気なわけだが jit で速いだけでなく、\nffi の使い勝手が最高に良いというのもある。\nluabinding の無い c のライブラリがあったとしても、\nc の ヘッダーのコピーをベースにしてわりと簡単に ffi で使ってしまうことができるし、\nlua に無い型付きの数値配列とかはこれで作れるので便利。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua"><span class="token keyword">local</span> array <span class="token operator">=</span> ffi<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">\'float[5000]\'</span><span class="token punctuation">)</span>\narray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.5</span> <span class="token comment">-- 0 origin なのだ w</span>\n\n<span class="token comment">--- pointer は配列を使うことが多い</span>\n<span class="token keyword">local</span> p_open <span class="token operator">=</span> ffi<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">\'bool[1]\'</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> imgui<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token string">\'hello\'</span><span class="token punctuation">,</span> p_open<span class="token punctuation">)</span> <span class="token keyword">then</span>\n<span class="token keyword">end</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"要するに、",t.createElement(a.code,null,"OpenGL")," とか ",t.createElement(a.code,null,"cimgui")," を使える。\n(python の ctypes とだいたい同じ能力)"),"\n",t.createElement(a.p,null,"nvim の影響なのか lua の開発環境は近年良くなってきていて、\nLuaLanguageServer と stylua の組みあわせが気に入っている。\nLuaLanguageServer により型情報を追加してある程度Editorの支援を良くすることができる。"),"\n",t.createElement(a.p,null,"https://luals.github.io/wiki/annotations/"),"\n",t.createElement(a.p,null,"によるとついに ",t.createElement(a.code,null,"EmmyLua annotations ")," と袂を分って独自路線のようである。"),"\n",t.createElement(a.p,null,"人間の方が LanguageServer に積極的に型情報を提供する。\nLuaLanguageServer に合わせてこんなスタイルになった。\nLanguageServer でオブジェクトの field と method がちゃんと出るために継承の記述を使う。\n先頭から ",t.createElement(a.code,null,"new")," 関数まで定型コード。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua"><span class="token comment">---@class Point: PointInstance</span>\n<span class="token keyword">local</span> Point <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nPoint<span class="token punctuation">.</span>__index <span class="token operator">=</span> Point\n\n<span class="token comment">---@param x integer</span>\n<span class="token comment">---@param y integer</span>\n<span class="token comment">---@return Point</span>\n<span class="token keyword">function</span> Point<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>\n  <span class="token comment">---@class PointInstance</span>\n  <span class="token keyword">local</span> instance<span class="token operator">=</span><span class="token punctuation">{</span>\n    x <span class="token operator">=</span> x<span class="token punctuation">,</span>\n    y <span class="token operator">=</span> y<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">---@type Point</span>\n  <span class="token keyword">return</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> Point<span class="token punctuation">)</span>\n<span class="token keyword">end</span>\n\n<span class="token comment">---@param rhs Point</span>\n<span class="token comment">---@return Point</span>\n<span class="token keyword">function</span> Point<span class="token punctuation">:</span><span class="token function">__add</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> Point<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token operator">+</span>rhs<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token operator">+</span>rhs<span class="token punctuation">.</span>y<span class="token punctuation">)</span>\n<span class="token keyword">end</span>\n\n<span class="token comment">---@return number</span>\n<span class="token keyword">function</span> Point<span class="token punctuation">:</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token operator">*</span>self<span class="token punctuation">.</span>x <span class="token operator">+</span> self<span class="token punctuation">.</span>y<span class="token operator">*</span>self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>\n<span class="token keyword">end</span>\n\n<span class="token keyword">return</span> Point</code></pre></div>'}}),"\n",t.createElement(a.p,null,t.createElement(a.code,null,"：")," による self シンタックスシュガーを避けていたのだけど、\nLanguageServer のおかげで間違えて ",t.createElement(a.code,null,".")," を使う間違いは気付きやすくなった。\nそれと呼びだしだけでなく定義するときにも使えることがわかったので、\n使ってもいいかという気になった。\n",t.createElement(a.code,null,".")," が static method で、",t.createElement(a.code,null,":")," が instance method と使い分ける慣習。"),"\n",t.createElement(a.p,null,"あと、LuaLanguageServer に Project 毎のライブラリの情報を伝えることができる。\nproject root に ",t.createElement(a.code,null,".luarc.json")," を配置する。\nわりと設定できるので、ちゃんとやると良くなる。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"runtime.version"</span><span class="token operator">:</span> <span class="token string">"LuaJIT"</span><span class="token punctuation">,</span>\n  <span class="token property">"runtime.special"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"love.filesystem.load"</span><span class="token operator">:</span> <span class="token string">"loadfile"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"runtime.path"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"libs/?.lua"</span><span class="token punctuation">,</span> <span class="token string">"libs/?/init.lua"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"workspace.library"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">"${3rd}/busted/library"</span><span class="token punctuation">,</span>\n    <span class="token string">"${3rd}/luassert/library"</span><span class="token punctuation">,</span>\n    <span class="token string">"${3rd}/love2d/library"</span><span class="token punctuation">,</span>\n    <span class="token string">"${3rd}/lfs/library"</span><span class="token punctuation">,</span>\n    <span class="token string">"meta/gltf/library"</span><span class="token punctuation">,</span>\n    <span class="token string">"meta/cimgui/library"</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"format.enable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token property">"diagnostics.disable"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"empty-block"</span><span class="token punctuation">,</span> <span class="token string">"unused-local"</span><span class="token punctuation">,</span> <span class="token string">"unused-vararg"</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"特に c モジュールは型情報を追加しないと、どんなメンバーがあるかわからなくて、\n直接 c を使っているよりもコードが書きにくいということになりがちなので、 型情報は重要である。\n(luaのモジュールは LuaLanguageServer が解析できるのだが LUA_PATH は教える必要がある)"),"\n",t.createElement(a.p,null,"LuaLanguageServer が組込みで型情報をもっているがそれ以外はここにあるぽい。\nhttps://github.com/orgs/LuaCATS/repositories"),"\n",t.createElement(a.p,null,t.createElement(a.code,null,"require")," したものや組み込み変数の型はコメントで指定することができる。\nいや、指定しないと判らないのではないか。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua"><span class="token comment">--- luarocks の場合</span>\n<span class="token comment">---@class uv</span>\n<span class="token keyword">local</span> uv <span class="token operator">=</span> require <span class="token string">"luv"</span>\n\n<span class="token comment">--- nvim の場合</span>\n<span class="token comment">---@class uv</span>\n<span class="token keyword">local</span> uv <span class="token operator">=</span> vim<span class="token punctuation">.</span>loop</code></pre></div>'}}),"\n",t.createElement(a.p,null,"それでも警告がいっぱいでてうまくいかないときは諦めて、",t.createElement(a.code,null,"any")," の型を付ける。"),"\n",t.createElement(a.p,null,"避けていた ",t.createElement(a.code,null,"luarocks")," も慣れた。\n特に Windows 環境では導入ではまりやすいのだけど慣れた。\npython の venv のような使いかたもできる。\n",t.createElement(a.code,null,"vc")," or ",t.createElement(a.code,null,"mingw"),", ",t.createElement(a.code,null,"system")," or ",t.createElement(a.code,null,"user")," or ",t.createElement(a.code,null,"project"),", ",t.createElement(a.code,null,"standlone")," or ",t.createElement(a.code,null,"embedded"),",\n",t.createElement(a.code,null,"lua")," or ",t.createElement(a.code,null,"luajit")," という選択肢の多さが ",t.createElement(a.code,null,"luarocks")," の難しさにつながる。\nどの ",t.createElement(a.code,null,"lua")," 向けのモジュールなのかを明確にして制御していく。\n",t.createElement(a.code,null,"Windows")," では project local で ",t.createElement(a.code,null,"hererocks")," するのも手かもしれない。"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},l=s(8678),c=s(4160),u=s(8736);const r={code:n=>{let{children:a,className:s}=n;return s?t.createElement(u.Z,{className:s},a):t.createElement("code",null,a)}};function i(n){let{data:a,children:s}=n;const p=a.mdx.frontmatter;return t.createElement(l.Z,null,t.createElement("h1",null,p.title),t.createElement("div",{className:"tags-index"},p.tags&&p.tags.length>0&&p.tags.map((n=>t.createElement(c.rU,{to:"/tags/"+n+"/",itemProp:"url"},t.createElement("button",null,n))))),t.createElement(e.Zo,{components:r},s))}function k(n){return t.createElement(i,n,t.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2023-1008-md-ad82c62a1b07a7938b30.js.map
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-05-blender-secondary-md-535385c784a78e1829e4.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wEAAyE,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,irBAAkrB,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,KAAMI,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,gDAAiD,KAAMG,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,0CAA2C,MAClnC,CAKA,MAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCRA,MAAMQ,EAAa,CACjBI,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYN,EAAAA,cAAoBO,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYL,EAAAA,cAAoB,OAAQ,KAAMK,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOT,EAAAA,cAAoBW,EAAAA,EAAQ,KAAMX,EAAAA,cAAoB,KAAM,KAAMU,EAAKE,IAAIC,YAAYC,OAAQd,EAAAA,cAAoBe,EAAAA,GAAa,CACrIhB,WAAYA,GACXM,GACL,CACe,SAASW,EAAiBzB,GACvC,OAAOS,EAAAA,cAAoBQ,EAAcjB,EAAOS,EAAAA,cAAoBiB,EAAqB1B,GAC3F,C","sources":["webpack:///./content/posts/2017/05/blender_secondary.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"MmdUtilityでmmdモデルをインポートして物理を取り入れるべく、Blenderの物理で揺れ物をセットアップする方法を調べている。\"), \"\\n\", React.createElement(_components.p, null, \"剛体を入れる\\n素直にmeshオブジェクトを作って剛体を設定していく。\\n剛体とボーンを連動させる\\nボーンの動きを剛体に反映する(ゆれない。ゆれものの接続先)\\nKinematic、BlenderではPassiveかつAnimatedになる設定。\\nボーンの動きを剛体に伝えなければならないので剛体オブジェクトにコンストレイントを追加する。copy transformかchild ofが候補になる。どっちも問題がある。copy transformにするとボーンのヘッドのtransformを剛体の中心にコピーするのでずれる。child ofにすると剛体の親とボーンの両方の影響を受けるようになってしまうので原点から移動できなくなる。前者の方が致命的なので後者を選択して、剛体の親オブジェクトが原点に留まるように工夫することにする。\\n剛体の動きを骨に反映する(ゆれもの)\\nDynamic,  BlenderではActive。\\n剛体の動きをボーンに伝えるべく、ポーズボーンにコンストレイントを追加する。child ofで剛体を指定する。この場合、親ボーンと剛体の両方の影響を受けてしまうので親ボーンの影響を切らねばならない。parentにNoneをセットするか、use_inherit_rotation, use_inherit_scale, use_inherit_locationをFalseにするのだけど、そうすると今度はポーズを変えたときについてこなくなる。一筋縄でいかないな・・・。ポーズ変えたときに追随させるスクリプトを用意すべしということか。\\n参考\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://github.com/12funkeys/rigid_bodys_gen\"), \"\\n\", React.createElement(_components.li, null, \"http://mrsoramame.jpn.org/archives/138\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/05/blender_secondary.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","ul","li","_provideComponents","components","React","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5093],{9298:function(e,n,t){t.r(n),t.d(n,{default:function(){return u}});var a=t(1151),l=t(7294);function c(e){const n=Object.assign({h1:"h1",p:"p",span:"span",h2:"h2"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h1,null,"名付けて cydeer"),"\n",l.createElement(n.p,null,"https://github.com/ousttrue/cydeer"),"\n",l.createElement(n.p,null,l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">python</code>'}}),", ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cython</code>'}}),", ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">dear imgui</code>'}})," の組み合わせで名前を付けようと思ったのだが、既に先人がいっぱいいて名前が被るので適当に決めた。🦌"),"\n",l.createElement(n.p,null,"https://github.com/HankiDesign/awesome-dear-imgui#languages"),"\n",l.createElement(n.p,null,"最初、",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DearPyGui</code>'}})," のサイトが強そうだったので試そうと思ったのだけど用途が違いそうだった。\n次に、しばらく ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pyimgui</code>'}})," を使っていい感じだったので、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docking</code>'}})," ブランチ対応を見たら開発ブランチならば動いたので、自前ビルドを改造して使っていた。\nPR も送ってみたのだが、\nどうせなら自分で作ろうという機運が高まったので、作った。\ncydeer は pyOpenGL とともに使う ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">薄い</code>'}})," ImGui ラッパーという路線である。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ctypes</code>'}})," を併用することでポインタを直接扱う。 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">camel case</code>'}})," と ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">snake case</code>'}})," の変換を含めて何も変えない。"),"\n",l.createElement(n.p,null,"| lib               | binder                                           | imgui                | window & graphincs                       | コメント                                                              |\n|-------------------|--------------------------------------------------|----------------------|------------------------------------------|-----------------------------------------------------------------------|\n| (python)cydeer    | cython + ctypes(generate using libclang.cindex ) | imgui docking branch | glfw など + pyOpenGL でがんばる          | 可能な限りAPIの改変をしない。ポインタは ctypes で作る                 |\n| (python)pyimgui   | cython                                           | imgui                | glfw など + pyOpenGL でがんばる          | ポインタ引数(p_openなど)による返り値を、tuple による複値で表現        |\n| (python)DearPyGui | 未確認                                           | 未確認               | DirectX11。python からアクセスできない？ | imgui をラップして独自 API。python で OpenGL するという目的には使えぬ |\n| (c)cimgui         | 未確認                                           | 未確認               |                                          | imgui を ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">extern C</code>'}})," にラップしたもの。他言語バインド向け              |\n| (rust)imgui-rs    | 未確認                                           | 未確認               |                                          | builder パターンで Default 引数を代替                                 |"),"\n",l.createElement(n.p,null,"imgui ラップには、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">関数オーバーロード</code>'}})," , ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">デフォルト引数</code>'}})," , ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">メンバー関数</code>'}})," という難所がある。\n要するに ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++</code>'}})," 要素なのだけど、",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++</code>'}})," 要素含めての imgui の使い勝手なので。各言語バインディングで悩ましいところです。\nたとえば、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rust</code>'}})," は関数オーバーロードやデフォルト引数が無いので API を変えてます。"),"\n",l.createElement(n.p,null,"C# とかでも、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">const ImVec2 pos&amp; = ImVec2(0, 0)</code>'}})," のような引数を解決するのは手間がかかったりする。\nDLLImport 定義に対するデフォルト引数では解決できないので、 C# 側で一時変数を作ってポインターを取得する必要がある。"),"\n",l.createElement(n.p,null,l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">デフォルト引数</code>'}})," は cython で普通に解決した。\nclang.cindex から値を取れれば難しくない。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">メンバー関数</code>'}})," は ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ctypes</code>'}})," に ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cython</code>'}})," のメソッドを定義して、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">self</code>'}})," を ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this pointer</code>'}})," に cast して呼び出すコードを作った(ImGuiFontAtlas)。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">関数オーバーロード</code>'}})," は ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cython</code>'}})," でディスパッチするのはつらいので、",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MenuItem_2</code>'}})," のような suffix をつけて人間が選ぶようにした。"),"\n",l.createElement(n.p,null,"忘れていたが、もっとも問題になるのが ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">構造体の値渡し・返し</code>'}})," だった(C++に限らない？)。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">D言語</code>'}})," , ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rust</code>'}})," ともにこれができない(vcのコンパイラと互換性がない？)ので注意が必要だった。コンパイルは通るが動作がおかしかったような。\nImGui の ImVec2 を値返しする関数でヒットする。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cydeer</code>'}})," は、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cython</code>'}})," を採用したので、",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cython</code>'}})," 関数の出口で python 型に入れ替えるだけである。"),"\n",l.createElement(n.p,null,"あと、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cydeer</code>'}})," は ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pyi</code>'}})," 標準装備でいい感じである(一部実際のpython型と齟齬があるが・・・)。"),"\n",l.createElement(n.h2,null,"実装上の課題"),"\n",l.createElement(n.p,null,"cython の cimport の扱いがやっかいで、",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">imgui</code>'}}),", ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">imgui.internal</code>'}})," に分割しようとするとうまくいかなかった。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cydeer</code>'}})," に関しては巨大な単一のモジュールで行くのが無難かもしれない。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">internal</code>'}})," やノードエディターとか追加するときに分けたいのだけど。"),"\n",l.createElement(n.p,null,"現状、Windows + python-3.10 しか試していない。\nWindows11 の wslg + wayland で動くようにしたい。"))}var s=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?l.createElement(n,e,l.createElement(c,e)):c(e)},r=(t(8678),t(8838));const o={code:e=>{let{children:n,className:t}=e;return t?l.createElement(r.Z,{className:t},n):l.createElement("code",null,n)}};function g(e){let{data:n,children:t}=e;return l.createElement(l.Fragment,null,l.createElement("h1",null,n.mdx.frontmatter.title),l.createElement(a.Zo,{components:o},t))}function u(e){return l.createElement(g,e,l.createElement(s,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-winter-python-imgui-md-47588730c7c3c65031f5.js.map
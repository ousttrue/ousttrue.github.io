{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-example-glfw-openg-md-80e71f5eace56a528a88.js","mappings":"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","sources":["webpack:///./content/posts/2021/example_glfw_openg.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"https://github.com/ousttrue/limgui/blob/master/imgui_ffi/cdef/imgui.lua\"), \"\\n\", React.createElement(_components.p, null, \"Window System は \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">GLFW</code>\"\n    }\n  }), \"、3D API は \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">OpenGL3</code>\"\n    }\n  }), \" を選択。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"SDL2 は、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">HWND</code>\"\n    }\n  }), \" を取得周りが FFI では面倒なことが分かっていたのと、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SDL-Image</code>\"\n    }\n  }), \" などの関連ライブラリ無しで行くつもりだった\"), \"\\n\", React.createElement(_components.li, null, \"D3D11 のバインディングを作っているとまた時間がかかる。\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">COM</code>\"\n    }\n  }), \" は C の範囲で実装できるので後でやりたい\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"ということから、楽そうなものを選択したらそうなった。\"), \"\\n\", React.createElement(_components.h1, null, \"メンバー関数呼び出し\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ImFont</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ImFontAtlas</code>\"\n    }\n  }), \" のみ何故か \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">c++</code>\"\n    }\n  }), \" 色が強く、メンバ関数呼び出しがあったりするのでなんとかしたい。\\ncdecl で FFI 記述できるんだっけ？\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">//io.Fonts-&gt;AddFontDefault();\\n//io.Fonts-&gt;AddFontFromFileTTF(&quot;../../misc/fonts/Roboto-Medium.ttf&quot;, 16.0f);\\n//io.Fonts-&gt;AddFontFromFileTTF(&quot;../../misc/fonts/Cousine-Regular.ttf&quot;, 15.0f);\\n//io.Fonts-&gt;AddFontFromFileTTF(&quot;../../misc/fonts/DroidSans.ttf&quot;, 16.0f);\\n//io.Fonts-&gt;AddFontFromFileTTF(&quot;../../misc/fonts/ProggyTiny.ttf&quot;, 10.0f);\\n//ImFont* font = io.Fonts-&gt;AddFontFromFileTTF(&quot;c:\\\\\\\\Windows\\\\\\\\Fonts\\\\\\\\ArialUni.ttf&quot;, 18.0f, NULL, io.Fonts-&gt;GetGlyphRangesJapanese());</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"第1引数に this に相当する引数を追加してやればいけた。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\">ffi<span class=\\\"token punctuation\\\">.</span>cdef<span class=\\\"token string\\\">[[\\n// 適当に名前を付け替える\\nstruct ImFont* ImFontAtlas_AddFontFromFileTTF(\\n    struct ImFontAtlas* this,\\n    const char* filename,\\n    float size_pixels,\\n    const struct ImFontConfig* font_cfg,\\n    ImWchar* glyph_ranges\\n) asm(\\\"?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z\\\");\\n]]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h1, null, \"C++ デフォルト引数\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ImGui</code>\"\n    }\n  }), \" の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">API</code>\"\n    }\n  }), \" は基本的にほぼ C になるように配慮されていて、C++ の機能は限定的にしか使っていない。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"関数オーバーロード\"), \"\\n\", React.createElement(_components.li, null, \"デフォルト引数\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"である。\\nで、このデフォルト引数がないと \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">imgui</code>\"\n    }\n  }), \" の使い勝手が著しく下がる。\\nリファレンスを確認して、デフォルト値を当ててやる必要が出るので。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">// 例\\nIMGUI_API bool Begin(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0);</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">NULL</code>\"\n    }\n  }), \" は \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nil</code>\"\n    }\n  }), \" だし、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">0</code>\"\n    }\n  }), \" はそのまま \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">0</code>\"\n    }\n  }), \" なので、簡単なところだけでも対応する。\\n最悪、インテリセンスに出るようにすることで調べる手間は回避できるのだけど\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">const &amp;ImVec2 v = ImVec2(0, 0)</code>\"\n    }\n  }), \" とかはめんどくさいです。\\nFFI 境界の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">struct の value 渡し</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">デフォルト引数</code>\"\n    }\n  }), \" は解決できない場合が多いが、コード生成側で努力する価値はある。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">rust</code>\"\n    }\n  }), \" はここができなくて、故にラッパー側で API を builder パターンに変更していたりするのだけど、\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">rust</code>\"\n    }\n  }), \" の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">imgui</code>\"\n    }\n  }), \" ラッパーの API を使いたいのではなくて、生の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">imgui</code>\"\n    }\n  }), \" が使いたいのだ。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">luajit</code>\"\n    }\n  }), \" の FFI はちょっとラップすることで簡単に解決できる(遅くなるかもしれないが)。\"), \"\\n\", React.createElement(_components.p, null, \"ラッパーを自動で生成するようにできた。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\">    <span class=\\\"token comment\\\">-- lua では nil と false のみが 偽 である</span>\\n\\n    <span class=\\\"token comment\\\">-- wrapper</span>\\n    Begin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> p_open<span class=\\\"token punctuation\\\">,</span> flags<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token comment\\\">-- p_open が供給されない場合、デフォルト nil になり、NULL として解釈される</span>\\n        flags <span class=\\\"token operator\\\">=</span> flags <span class=\\\"token keyword\\\">or</span> <span class=\\\"token number\\\">0</span>\\n        <span class=\\\"token comment\\\">-- ffi 呼び出し</span>\\n        <span class=\\\"token keyword\\\">return</span> imgui<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Begin</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> p_open<span class=\\\"token punctuation\\\">,</span> flags<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    <span class=\\\"token comment\\\">-- wrapper</span>\\n    Button <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>label<span class=\\\"token punctuation\\\">,</span> size<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token comment\\\">-- 引数なしの `ffi.new` は zero 詰めする。 `ImVec2(0, 0)` になる。</span>\\n        size <span class=\\\"token operator\\\">=</span> size <span class=\\\"token keyword\\\">or</span> ffi<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">new</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'struct ImVec2'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token comment\\\">-- ffi 呼び出し</span>\\n        <span class=\\\"token keyword\\\">return</span> imgui<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Button</span><span class=\\\"token punctuation\\\">(</span>label<span class=\\\"token punctuation\\\">,</span> size<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">,</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h1, null, \"可変長引数\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">IMGUI_API void Text(const char* fmt, ...)</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"luajit ffi ではそのまま \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">...</code>\"\n    }\n  }), \" を扱うことができた。\"), \"\\n\", React.createElement(_components.p, null, \"ただし、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">%d</code>\"\n    }\n  }), \" のときは、\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">LL</code>\"\n    }\n  }), \" をつけて \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">integer</code>\"\n    }\n  }), \" を渡す。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">number</code>\"\n    }\n  }), \" だとうまくいかない。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token keyword\\\">local</span> count <span class=\\\"token operator\\\">=</span> 1LL <span class=\\\"token comment\\\">-- 64bit int. UL もある</span>\\nimgui<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Text</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"counter = %d\\\"</span><span class=\\\"token punctuation\\\">,</span> counter<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">LL</code>\"\n    }\n  }), \" と \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">UL</code>\"\n    }\n  }), \" は luajit の拡張らしい。\\nhttps://luajit.org/ext_ffi_api.html\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Extensions to the Lua Parser\"), \"\\n\", React.createElement(_components.p, null, \"numeric literals with the suffixes LL or ULL as signed or unsigned 64 bit integers\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"だがしかし、この記法使うと \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stylua</code>\"\n    }\n  }), \" がエラーになる。そりゃ、そうだ。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token keyword\\\">local</span> count <span class=\\\"token operator\\\">=</span> ffi<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">new</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'long long[1]'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">-- 32bit だとうまくいかない</span>\\nimgui<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Text</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"counter = %d\\\"</span><span class=\\\"token punctuation\\\">,</span> counter<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"を使うのがよさそう。\"), \"\\n\", React.createElement(_components.h1, null, \"template class のごまかし\"), \"\\n\", React.createElement(_components.p, null, \"T を pointer としてしか使わない場合は、\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">T*</code>\"\n    }\n  }), \" を除去して \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">void*</code>\"\n    }\n  }), \" にすれば動く。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">template&lt;typename T&gt;\\nstruct ImVector{\\n    int Size;\\n    int Capacity;\\n    T* Data;\\n};    \\n</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\">ffi<span class=\\\"token punctuation\\\">.</span>cdef<span class=\\\"token string\\\">[[\\nstruct ImVector{\\n    int Size;\\n    int Capacity;\\n    void* Data;\\n};    \\n]]</span></code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/example_glfw_openg.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","ul","li","h1","blockquote","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
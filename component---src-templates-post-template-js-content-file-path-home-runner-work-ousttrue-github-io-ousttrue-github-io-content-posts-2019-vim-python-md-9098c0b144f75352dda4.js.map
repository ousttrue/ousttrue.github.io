{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2019-vim-python-md-9098c0b144f75352dda4.js","mappings":"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","sources":["webpack:///./content/posts/2019/vim_python.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    span: \"span\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"phthon2は使わないのでスルーで。\"), \"\\n\", React.createElement(_components.h2, null, \"vim組み込み\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> vim</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PLUGIN_ROOT/python3</code>\"\n    }\n  }), \" パス\"), \"\\n\", React.createElement(_components.p, null, \"モジュールとして自動で \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">import</code>\"\n    }\n  }), \" されるぽい。\\nリロードは？\\n開発不便なのでは。\"), \"\\n\", React.createElement(_components.h3, null, \"py3file コマンド\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">so%</code>\"\n    }\n  }), \" などを経由してリロードできる。\"), \"\\n\", React.createElement(_components.h3, null, \"py3 コマンド\"), \"\\n\", React.createElement(_components.p, null, \"インポート済みの関数呼び出しなど短い処理にとどめた方がよいと思う。\"), \"\\n\", React.createElement(_components.h2, null, \"リモートプラグイン\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nvim</code>\"\n    }\n  }), \" の機能で \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">msgpack-rpc</code>\"\n    }\n  }), \" を通した別プロセスでの実行。\"), \"\\n\", React.createElement(_components.p, null, \"vim8 への移植版。 https://github.com/roxma/nvim-yarp\"), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PLUGIN_ROOT/rplugin/python3</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> neovim <span class=\\\"token comment\\\"># msgpack-rpc で vim と通信する</span>\\n\\n\\n<span class=\\\"token decorator annotation punctuation\\\">@neovim<span class=\\\"token punctuation\\\">.</span>plugin</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">RemotePlugin</span><span class=\\\"token punctuation\\\">:</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> nvim<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        self<span class=\\\"token punctuation\\\">.</span>nvim <span class=\\\"token operator\\\">=</span> nvim\\n\\n    <span class=\\\"token decorator annotation punctuation\\\">@neovim<span class=\\\"token punctuation\\\">.</span>command</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'HogeCommand'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># vimのコマンドとして実行可能になる</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">hogee</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">pass</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"比べてみると\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">vim</code>\"\n    }\n  }), \" もしくは \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">neovim</code>\"\n    }\n  }), \" とやり取りする部分は、単体実行ができないような。\\nなるほど。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">GUIやVIM\\n+--------+     これを単体で開発する\\n|vim     |     +--------------+\\n|もしくは|---->|使うモジュール|\\n|neovim  |     +--------------+\\n|をimport|\\n+--------+</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"リモートプラグイン(GUI)\"), \"\\n\", React.createElement(_components.p, null, \"これは、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">msgpack-rpc</code>\"\n    }\n  }), \" を使うのだけど \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">GUI</code>\"\n    }\n  }), \" から \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nvim</code>\"\n    }\n  }), \" を特定の作法で起動して \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">GUIイベントを受け取る</code>\"\n    }\n  }), \" というものでちょっと違う。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2019/vim_python.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","span","h3","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-rust-ffi-md-5f765a9e4debfac86da1.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,IACHC,KAAM,OACNC,GAAI,OACHC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,gEAAiE,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,8EAA+EM,EAAAA,cAAoBT,EAAYI,EAAG,CAC1TM,KAAM,iCACL,OAAQ,MAAOD,EAAAA,cAAoBT,EAAYK,KAAM,CACtDM,wBAAyB,CACvBC,OAAQ,6CAER,oBAAqBH,EAAAA,cAAoBT,EAAYK,KAAM,CAC7DM,wBAAyB,CACvBC,OAAQ,kDAER,MAAOH,EAAAA,cAAoBT,EAAYK,KAAM,CAC/CM,wBAAyB,CACvBC,OAAQ,8CAER,oBAAqBH,EAAAA,cAAoBT,EAAYI,EAAG,CAC1DM,KAAM,kCACL,SAAU,UAAWD,EAAAA,cAAoBT,EAAYK,KAAM,CAC5DM,wBAAyB,CACvBC,OAAQ,gDAER,iBAAkB,KAAMH,EAAAA,cAAoBT,EAAYG,EAAG,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,CACtGM,KAAM,sCACL,aAAc,8BAA+BD,EAAAA,cAAoBT,EAAYI,EAAG,CACjFM,KAAM,+BACL,MAAO,SAAUD,EAAAA,cAAoBT,EAAYK,KAAM,CACxDM,wBAAyB,CACvBC,OAAQ,iDAER,wBAAyBH,EAAAA,cAAoBT,EAAYK,KAAM,CACjEM,wBAAyB,CACvBC,OAAQ,0CAER,IAAKH,EAAAA,cAAoBT,EAAYK,KAAM,CAC7CM,wBAAyB,CACvBC,OAAQ,4CAER,+BAAgCH,EAAAA,cAAoBT,EAAYK,KAAM,CACxEM,wBAAyB,CACvBC,OAAQ,4CAER,gBAAiB,KAAMH,EAAAA,cAAoBT,EAAYG,EAAG,KAAMM,EAAAA,cAAoBT,EAAYK,KAAM,CACxGM,wBAAyB,CACvBC,OAAQ,8CAER,oBAAqBH,EAAAA,cAAoBT,EAAYK,KAAM,CAC7DM,wBAAyB,CACvBC,OAAQ,4CAER,sDAAuD,KAAMH,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,uCAAwC,KAAMM,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,UAAW,KAAMG,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,4CAA6C,KAAMM,EAAAA,cAAoBT,EAAYK,KAAM,CACnVM,wBAAyB,CACvBC,OAAQ,sKAER,KAAMH,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,UAAW,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,uEAAwE,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,sBAAuB,KAAMM,EAAAA,cAAoBT,EAAYK,KAAM,CACrSM,wBAAyB,CACvBC,OAAQ,wOAER,KAAMH,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,uBAAwB,KAAMG,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,gKAAiKM,EAAAA,cAAoBT,EAAYK,KAAM,CAChUM,wBAAyB,CACvBC,OAAQ,2CAER,eAAgBH,EAAAA,cAAoBT,EAAYK,KAAM,CACxDM,wBAAyB,CACvBC,OAAQ,8CAER,kCACN,CAKA,MAJA,SAAoBb,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOc,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOM,EAAYL,EAAAA,cAAoBK,EAAWf,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCzEA,MAAMS,EAAa,CACjBO,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYT,EAAAA,cAAoBU,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYR,EAAAA,cAAoB,OAAQ,KAAMQ,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOZ,EAAAA,cAAoBc,EAAAA,EAAQ,KAAMd,EAAAA,cAAoB,KAAM,KAAMa,EAAKE,IAAIC,YAAYC,OAAQjB,EAAAA,cAAoBkB,EAAAA,GAAa,CACrInB,WAAYA,GACXS,GACL,CACe,SAASW,EAAiB7B,GACvC,OAAOU,EAAAA,cAAoBW,EAAcrB,EAAOU,EAAAA,cAAoBoB,EAAqB9B,GAC3F,C","sources":["webpack:///./content/posts/2021/rust_ffi.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    span: \"span\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"rust の FFI に取り組んでいた。\\n結局、 sdl binding と imgui binding を自作した。\"), \"\\n\", React.createElement(_components.p, null, \"両方とも、既存の crate があるのに何故わざわざ自作するのかと言えば、\\nラップされて使い方が変わったところを学ぶのが面倒くさかったからじゃ。\\n\", React.createElement(_components.a, {\n    href: \"https://crates.io/crates/sdl2\"\n  }, \"SDL\"), \" は　\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">HWND</code>\"\n    }\n  }), \" を取得する方法がわかりにくくて \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SDL_Event</code>\"\n    }\n  }), \" を \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">imgui</code>\"\n    }\n  }), \" に渡す方法はわからなかった。\\n\", React.createElement(_components.a, {\n    href: \"https://crates.io/crates/imgui\"\n  }, \"imgui\"), \" は最新版の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">docking</code>\"\n    }\n  }), \" ブランチが使いたかった。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://crates.io/crates/clang-sys\"\n  }, \"clang-sys\"), \" を使って rust の FFI コードを生成し、\\n\", React.createElement(_components.a, {\n    href: \"https://crates.io/crates/cc\"\n  }, \"cc\"), \" を使って \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">build.rs</code>\"\n    }\n  }), \" でライブラリをビルドした。\\nこれで、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">c</code>\"\n    }\n  }), \" \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">c++</code>\"\n    }\n  }), \" のライブラリをソースビルドしてスタティックリンクし、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">FFI</code>\"\n    }\n  }), \" で関数を呼び出し放題。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">imgui</code>\"\n    }\n  }), \" の FFI 生成の方が簡単で、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SDL</code>\"\n    }\n  }), \" の方は C のマクロに苦しんだ(雑に対応)。\\nとはいえ、わりと素直に記述できるので快適であった。\"), \"\\n\", React.createElement(_components.p, null, \"おかげで、 rust の FFI 周りに対する習熟度がだいぶ上がった。\"), \"\\n\", React.createElement(_components.h2, null, \"できないこと\"), \"\\n\", React.createElement(_components.p, null, \"POD の struct を return する関数を呼び出すとクラッシュした。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">ImVec2 ImGui::GetContentRegionAvail();</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"D言語だけど\"), \"\\n\", React.createElement(_components.p, null, \"https://forum.dlang.org/thread/dkamxcamwttszxwwxttv@forum.dlang.org\"), \"\\n\", React.createElement(_components.p, null, \"の件らしく、C++ 側でラップした。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">void pGetContentRegionAvail(ImVec2 *pOut) {\\n  if (pOut) {\\n    *pOut = GetContentRegionAvail();\\n  }\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"自由に static link できる\"), \"\\n\", React.createElement(_components.p, null, \"build.rs を駆使して自由にリンクできるので、スタティックリンクとダイナミックリンクを制御できるので便利。\\n特に Windows の場合、システムに共通のライブラリがインストールされていることが期待できないので、\\nDLLを作ってコピーした入りパスを通すよりは、スタティックリンクする方が気楽。\\n今回は \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cc</code>\"\n    }\n  }), \" でコンパイルしたけど、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">c++/c</code>\"\n    }\n  }), \" は CMake でビルドする方が管理しやすいかもしれない。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/rust_ffi.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","span","h2","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
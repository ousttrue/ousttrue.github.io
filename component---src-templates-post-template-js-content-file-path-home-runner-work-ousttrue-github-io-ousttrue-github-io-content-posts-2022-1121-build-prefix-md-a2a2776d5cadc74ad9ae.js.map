{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-1121-build-prefix-md-a2a2776d5cadc74ad9ae.js","mappings":"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","sources":["webpack:///./content/posts/2022/1121-build-prefix.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"GStreamer をビルドする過程で \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">meson</code>\"\n    }\n  }), \" を調べたら、存外に良かった。\\npython なので、CMake と比べてデバッガをアタッチできるのが圧倒的に楽。\\nCMake はステップ実行とかできないからね。\"), \"\\n\", React.createElement(_components.p, null, \"成り行きで GStreamer に続いて、 Gtk4, PyGObject とかをビルドしていたら、\\nGtk4 もわりと面白そうなことがわかった。\\n昔、Windows では扱いが面倒だった GLArea がさくっと動いた。\\nさらに Gtk4 で新しくできた Gsk 層が 2D の SceneGraph ぽくて、\\nPyOpenGL と連携して遊べるかもしれない。\\nNodeEditor とか Timeline(KeyFrame) Editor 作れないかなぁ。\\nPyGObject まわりは、gir(xml) から Python の型ヒント(pyi stub) を生成することで、\\nLanguageServer のインテリセンスをそれなりに効かせることができた。\\n最近の python では、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Qt</code>\"\n    }\n  }), \" とか \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">bpy</code>\"\n    }\n  }), \" といった \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">native extension</code>\"\n    }\n  }), \" の方が、\\n素の python モジュールより型情報が無くなるという逆転現象が起きているのだが、\\nPyGObject はほぼ gir(xml) そのままなので、わりといい感じになる。\"), \"\\n\", React.createElement(_components.p, null, \"Gtk のビルドが短時間でできることがわかったので、\\nGUI 層は自前ビルドでいけそうな気がしてきた。\\nつまり、Linux と Windows 両方を gtk4 でなるべく同じツールを使ってみる。\\nGentoo をクリーンインストールして下の層だけ \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">emerge</code>\"\n    }\n  }), \" で入れた。\\nGentoo は USE フラグで \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-gtk -glib -qt</code>\"\n    }\n  }), \" などとすることで、依存が連鎖することを止めることができる。\"), \"\\n\", React.createElement(_components.p, null, \"ついでに \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">wayland</code>\"\n    }\n  }), \" に手を出したところ、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">wayland</code>\"\n    }\n  }), \" 界隈もビルドツールに\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">meson</code>\"\n    }\n  }), \" が導入されているのを発見。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">download/clone</code>\"\n    }\n  }), \" => \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">meson</code>\"\n    }\n  }), \" を自動化する python スクリプトの作成に着手した。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/toprefix\"), \"\\n\", React.createElement(_components.p, null, \"プロトタイプとしてはまぁまぁの使い勝手。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gentoo</code>\"\n    }\n  }), \" と \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Windows</code>\"\n    }\n  }), \" 共用で \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gtk4</code>\"\n    }\n  }), \" などをさくっと展開できるようになる。予定。\"), \"\\n\", React.createElement(_components.p, null, \"さらに \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">dotfiles</code>\"\n    }\n  }), \" の管理でやっている \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">neovim</code>\"\n    }\n  }), \" のビルドも合流。\\ngo 系の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ghq</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fzf</code>\"\n    }\n  }), \" などの展開や、\\nrust 系の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">wezterm</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stylua</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ripgrep</code>\"\n    }\n  }), \" の展開もこっちに移そうかなと。\\nわりと処理のパターンは決まっていて次のうちのどれかになる事が多い。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">download => extract => build => install: tar ball\\ndownload => extract          => install: ビルド済み tar ball\\n              clone => build => install: repository</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"これにパッチ当てが追加になることがある。\"), \"\\n\", React.createElement(_components.p, null, \"ついでに、\\n以前作った \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">blender</code>\"\n    }\n  }), \" の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">bpy</code>\"\n    }\n  }), \" モジュール生成スクリプトなんかも合流することを画策。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">svn</code>\"\n    }\n  }), \" なしで \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">blender</code>\"\n    }\n  }), \" ビルドできんかね。\\nとなると \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pixar usd</code>\"\n    }\n  }), \" も \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">llvm</code>\"\n    }\n  }), \" もビルドしたいわね。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pyxar usd</code>\"\n    }\n  }), \" は \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">boost</code>\"\n    }\n  }), \" の除去したいけどね。\\nTUI と Desktop のツール系は自前ビルドで遊べるようにしていく。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2022/1121-build-prefix.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
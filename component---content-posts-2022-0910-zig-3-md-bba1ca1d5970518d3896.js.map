{"version":3,"file":"component---content-posts-2022-0910-zig-3-md-bba1ca1d5970518d3896.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,WAAY,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,UAAWQ,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,OAAQ,wBAAyB,KAAMO,EAAAA,cAAoBZ,EAAYI,EAAG,KAAMQ,EAAAA,cAAoBZ,EAAYM,EAAG,CAC9TO,KAAM,qCACL,WAAY,OAAQD,EAAAA,cAAoBZ,EAAYM,EAAG,CACxDO,KAAM,+CACL,YAAa,KAAMD,EAAAA,cAAoBZ,EAAYM,EAAG,CACvDO,KAAM,uCACL,eAAgB,uBAAwB,KAAMD,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,qEAAsE,KAAMQ,EAAAA,cAAoBZ,EAAYI,EAAG,KAAMQ,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,YAAa,8IAA+I,KAAMO,EAAAA,cAAoBZ,EAAYI,EAAG,KAAMQ,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,OAAQ,QAASO,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,SAAU,OAAQO,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,aAAc,6BAA8BO,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,SAAU,qBAAsB,KAAMO,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,sBAAuBQ,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,UAAW,MAAOO,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,OAAQ,gDAAiDO,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,QAAS,oBAAqB,KAAMO,EAAAA,cAAoBZ,EAAYI,EAAG,KAAMQ,EAAAA,cAAoBZ,EAAYM,EAAG,CACxmCO,KAAM,yDACL,0BAA2B,KAAMD,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,OAAQQ,EAAAA,cAAoBZ,EAAYM,EAAG,CACtHO,KAAM,uBACL,UAAW,YAAaD,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,OAAQ,qBAAsB,KAAMO,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,SAAU,KAAMK,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,KAAMI,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,yBAA0BG,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,cAAe,kBAAmB,KAAMO,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,mBAAoBG,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,eAAgB,cAAe,MACxf,CAKA,UAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWhB,EAAOa,EAAAA,cAAoBd,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECKO,MAAMiB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,C","sources":["webpack:///./content/posts/2022/0910-zig3.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"zig その3\"), \"\\n\", React.createElement(_components.p, null, \"ここのところ \", React.createElement(_components.code, null, \"zig\"), \" の練習を進めているのだが、だいぶ良い。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/ousttrue/yazls\"\n  }, \"zls の改造\"), \" や, \", React.createElement(_components.a, {\n    href: \"https://github.com/ousttrue/zig-opengl-wasm\"\n  }, \"wasm の実験\"), \", \", React.createElement(_components.a, {\n    href: \"https://github.com/ousttrue/microui\"\n  }, \"microui の移植\"), \" あたりをこなして、\\nだいぶ慣れた。\"), \"\\n\", React.createElement(_components.p, null, \"C/C++ と連携させる、zig から C を呼ぶ、C から zig を呼ぶ、の双方ともに\\nかなり高いレベルの使いやすさがある。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"zig-0.10\"), \" の開発状況が SelfHosting コンパイラに注力しているところ。\\nこれは重要なのだが、外見えの機能が良くなったりするところではない。\\nむしろ、一時的にバグが出たり、機能が後退したり(async が未実装だったり)する。\\nその次くらいから、また良くなるんでないか。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"std\"), \" にある \", React.createElement(_components.code, null, \"async\"), \" とか \", React.createElement(_components.code, null, \"eventloop\"), \" の痕跡を見ると、\\nそのうちに標準にライブラリに \", React.createElement(_components.code, null, \"libuv\"), \" 的なものが入りそうな感じがする。\"), \"\\n\", React.createElement(_components.p, null, \"zig は、型アノテーションを付けた \", React.createElement(_components.code, null, \"python\"), \" と \", React.createElement(_components.code, null, \"c++\"), \" の間くらいの記述量でコードを書けるので\\n記述する速度と、実行速度のバランスがよい。\\n\", React.createElement(_components.code, null, \"wasm\"), \" に関しては使えると判断できた。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://qiita.com/ousttrue/items/4802b61ba340dd7d89f3\"\n  }, \"zig で OpenGL、そして wasm\")), \"\\n\", React.createElement(_components.p, null, \"敢えて \", React.createElement(_components.a, {\n    href: \"https://zellij.dev/\"\n  }, \"zellij\"), \" のプラグインを \", React.createElement(_components.code, null, \"zig\"), \" で書くスタイルが良いかもしれぬ。\"), \"\\n\", React.createElement(_components.h2, null, \"TODO:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"zig 自前ビルド。llvm の準備から。 \", React.createElement(_components.code, null, \"glibc-2.34\"), \" 縛りを回避できるか知りたい\"), \"\\n\", React.createElement(_components.li, null, \"arm へのクロスコンパイル。 \", React.createElement(_components.code, null, \"Android NDK\"), \" を zig でやる\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","code","a","h2","ul","li","_provideComponents","components","React","href","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
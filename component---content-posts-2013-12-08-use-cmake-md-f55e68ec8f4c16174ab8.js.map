{"version":3,"file":"component---content-posts-2013-12-08-use-cmake-md-f55e68ec8f4c16174ab8.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBP,EAAYG,IAAK,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,KAAM,8vMAChG,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECoBO,MAAMW,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2013/12/08/use_cmake.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.pre, null, React.createElement(_components.code, null, \"ArUcoを使おうとしたら、msvcpdのvc10版を要求されてvc12でデバッグビルドが動かなかった。\\n\\n最新版のOpenCV-2.4.7をゲットしてきたところvc10とvc11は含まれて居るのだが、vc12ビルドは含まれていなかった(vc2013は早すぎたかw)。\\n仕方ないので自前ビルドすることにした。\\nということでcmakeの使い方を調べてみる。\\nついでに、cmakeでビルドしたライブラリを特定のディレクトリを基準にインストールする方法を調べてみる。\\n練習にzlibをビルドしてインストールしてみる\\n以下のようなディレクトリ構成で運用してみることを目標に作業開始。\\nlocal_vc12\\n + bin # dll置き場\\n + include # dllを使うのに必要なheader置き場\\n + lib # dllのimportライブラリ置き場\\n\\n外部依存の無い適当なライブラリで練習してみようということでzlibを選定。\\nさっそくcmakeを使ってみようと思ったら、zlib-1.2.8にはCmakeLists.txtが含まれとるで。\\nC:\\\\src> cd zlib-1.2.8\\nC:\\\\src\\\\zlib-1.2.8> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\nC:\\\\src\\\\zlib-1.2.8> msbuild INSTALL.vcxproj\\nC:\\\\src\\\\zlib-1.2.8> msbuild INSTALL.vcxproj /p:Configuration=Release\\n\\n以上で下記のようになった。\\nC:/local_vc12\\nC:/local_vc12/bin\\nC:/local_vc12/bin/zlib.dll\\nC:/local_vc12/bin/zlibd.dll\\nC:/local_vc12/include\\nC:/local_vc12/include/zconf.h\\nC:/local_vc12/include/zlib.h\\nC:/local_vc12/lib\\nC:/local_vc12/lib/zlib.lib\\nC:/local_vc12/lib/zlibd.lib\\nC:/local_vc12/lib/zlibstatic.lib\\nC:/local_vc12/lib/zlibstaticd.lib\\nC:/local_vc12/share\\nC:/local_vc12/share/man\\nC:/local_vc12/share/man/man3\\nC:/local_vc12/share/man/man3/zlib.3\\nC:/local_vc12/share/pkgconfig\\nC:/local_vc12/share/pkgconfig/zlib.pc\\n\\n素晴らしい。\\nOpenCV-2.4.7でやってみる\\nC:\\\\src> cd opencv-2.4.7\\nC:\\\\src\\\\opencv-2.4.7> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\nC:\\\\src\\\\opencv-2.4.7> msbuild ALL_BUILD.vcxproj\\n\\n失敗する。\\n\\nhttps://github.com/SpecLad/opencv/commit/7973594a01228107dcb9d2d1f10eb64498b91aac\\nhttp://stackoverflow.com/questions/17409956/cannot-compile-opencv-2-4-5-with-vs-2013-rtm\\n\\nあとIlmxxxでmin, maxのエラーが出るので”#include\\n<algorithm>“する。std::min,\\nmaxはalgorithmに入っとる。ALL_BUILDが成功したらINSTALLする。\\nC:\\\\src\\\\opencv-2.4.7> msbuild INSTALL.vcxproj\\n\\nこれで”local_vc12”にopencvも入った。\\ncmakeはいままで敬遠していたのだがライブラリのinstallまで面倒見てくれるのはいいですな。\\n同じく敬遠していた自前dllを使う開発が捗りそうな感じだ。\\nArUcoをビルド\\ncmakeを使ったアプリ(ライブラリを使う方)のビルド。\\nC:\\\\src> cd aruco-1.2.4\\nC:\\\\src\\\\aruco-1.2.4> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\n\\nここでエラーが出る。\\nOpenCVが正式ビルドと違うディレクトリにインストールされたために検知に失敗する。\\n“C:/local_vc12/OpenCVConfig.cmake”を直接修正した。\\nget_filename_component(OpenCV_CONFIG_PATH \\\"${CMAKE_CURRENT_LIST_FILE}\\\" PATH CACHE)\\n#if(OpenCV_RUNTIME AND OpenCV_ARCH)\\n#  if(OpenCV_STATIC AND EXISTS \\\"${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib/OpenCVConfig.cmake\\\")\\n#    if(OpenCV_CUDA AND EXISTS \\\"${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib/OpenCVConfig.cmake\\\")\\n#      set(OpenCV_LIB_PATH \\\"${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib\\\")\\n#    else()\\n#      set(OpenCV_LIB_PATH \\\"${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib\\\")\\n#    endif()\\n#  elseif(EXISTS \\\"${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib/OpenCVConfig.cmake\\\")\\n#    if(OpenCV_CUDA AND EXISTS \\\"${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib/OpenCVConfig.cmake\\\")\\n#      set(OpenCV_LIB_PATH \\\"${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib\\\")\\n#    else()\\n#      set(OpenCV_LIB_PATH \\\"${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib\\\")\\n#    endif()\\n#  endif()\\n#endif()\\nset(OpenCV_LIB_PATH \\\"${OpenCV_CONFIG_PATH}/lib\\\")\\n\\nこれでビルドできた。\\nC:\\\\src\\\\aruco-1.2.4> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\nC:\\\\src\\\\opencv-2.4.7> msbuild ALL_BUILD.vcxproj\\n\\nしかし、OpenGLを使ったサンプルがビルドされぬ。\\nどうやらglutが見つからないらいしい。せっかくなのでFreeGlutを入れてみますか。\\nFreeGlut\\nhttp://freeglut.sourceforge.net/\\nC:\\\\src\\\\freeglut-2.8.1> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\nCMake Error: The source directory \\\"C:/src/freeglut-2.8.1\\\" does not appear to contain CMakeLists.txt.\\nSpecify --help for usage, or press the help button on the CMake GUI.\\n\\nCMakeLists.txtが無い。作ってみる。\\nproject (freeglut)\\n\\nfile(GLOB SOURCES \\\"src/*.c\\\")\\nADD_LIBRARY(freeglut SHARED ${SOURCES})\\n\\ninclude_directories(include)\\n\\nADD_DEFINITIONS(-DFREEGLUT_EXPORTS)\\nADD_DEFINITIONS(-D_USRDLL)\\nADD_DEFINITIONS(-D_WINDOWS)\\nADD_DEFINITIONS(-DWIN32)\\n\\nC:\\\\src\\\\freeglut-2.8.1> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\nC:\\\\src\\\\opencv-2.4.7> msbuild ALL_BUILD.vcxproj\\n\\nビルドできた。INSTALL.vcxprojが見当たらないのでCMakeLists.txtに追記する必要がありそう。\\nインストールに関する追記。\\n# dll\\nINSTALL(TARGETS freeglut RUNTIME\\n    DESTINATION bin)\\n# lib\\nINSTALL(TARGETS freeglut ARCHIVE\\n    DESTINATION lib)\\n# headers\\nINSTALL(DIRECTORY include/\\n    DESTINATION include\\n    PATTERN \\\"Makefile.*\\\" EXCLUDE\\n)\\n\\nインストールしてみる。\\nC:\\\\src\\\\freeglut-2.8.1> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\nC:\\\\src\\\\opencv-2.4.7> msbuild INSTALL.vcxproj\\n\\n -- Install configuration: \\\"Debug\\\"\\n -- Installing: C:/local_vc12/bin/freeglut.dll\\n -- Installing: C:/local_vc12/lib/freeglut.lib\\n -- Installing: C:/local_vc12/include\\n -- Installing: C:/local_vc12/include/GL\\n -- Up-to-date: C:/local_vc12/include/GL/freeglut.h\\n -- Up-to-date: C:/local_vc12/include/GL/freeglut_ext.h\\n -- Up-to-date: C:/local_vc12/include/GL/freeglut_std.h\\n -- Up-to-date: C:/local_vc12/include/GL/glut.h\\n\\nインストール成功。\\n再度ArUco\\nC:\\\\src\\\\freeglut-2.8.1> cmake -D CMAKE_INSTALL_PREFIX=C:/local_vc12 .\\n -- FOUND OPENGL=YES    LIBS=opengl32;glu32;C:/local_vc12/lib/freeglut.lib\\n\\nglutが発見されたようだ。\\nどうやらcmakeはCMAKE_INSTALL_PREFIXにライブラリを探しに行くようですな。\\nC:\\\\src\\\\opencv-2.4.7> msbuild ALL_BUILD.vcxproj\\n\\ngl.hの前に”#include <windows.h>“してやってビルドできた。\\nDebug版の後ろに”d”をつける\\nFreeGlutのCmakeLists.txtにzlibの”CmakeLists.txt”から頂いてきた。\\nset(CMAKE_DEBUG_POSTFIX \\\"d\\\")\\n\\n記述順の影響があるようで前の方(ADD_LIBRARYより前？)に書く必要があるっぽい。\\nDebug版の後ろに”d”がついたライブラリを使う\\n\\nhttp://stackoverflow.com/questions/2209929/linking-different-libraries-for-debug-and-release-builds-in-cmake-on-windows\\nhttp://stackoverflow.com/questions/5497348/debug-and-release-library-linking-with-cmake-visual-studio\\n\\nこういう書き方でできた。\\nset (OPENGL_LIBS  general ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY} optimized ${GLUT_glut_LIBRARY} debug ${GLUT_glut_DEBUG_LIBRARY})\\n\\nCMAKE_DEBUG_POSTFIXに関連は使われる方と使う方の双方で合わせる必要があるので変更する場合は自分で両方の面倒を見なければならない。\\n一応、cmakeのひととおりの使い方が分かってきた。\\nvcがmsbuildを使うようになってビルドが制御可能になっている感じ。\\nmakeの各ターゲットに対するmsbuildの実行方法は以下の通り。\\n\\\"target\\\", \\\"make\\\", \\\"msbuild\\\"\\n\\\"build\\\", \\\"make all\\\", \\\"msbuild ALL_BUILD.vcxproj /t:Build\\\"\\n\\\"release build\\\", \\\"?\\\", \\\"msbuild ALL_BUILD.vcxproj /t:Build /p:Configuration=Release\\\"\\n\\\"debug build\\\", \\\"?\\\", \\\"msbuild ALL_BUILD.vcxproj /t:Build /p:Configuration=Debug\\\"\\n\\\"clean\\\", \\\"make clean\\\", \\\"msbuild ALL_BUILD.vcxproj /t:Clean\\\"\\n\\\"install\\\", \\\"make install\\\", \\\"msbuild INSTALL.vcxproj\\\"\\n\\nちょっといろいろビルドしてみる。\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","pre","code","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
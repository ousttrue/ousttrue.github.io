{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2019-workspacefolder-md-6f3a8bbfa34b3be13177.js","mappings":"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","sources":["webpack:///./content/posts/2019/workspacefolder.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"https://github.com/ousttrue/WorkspaceFolder\"), \"\\n\", React.createElement(_components.p, null, \"要件は、\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"WindowsとLinuxで共用にできる\"), \"\\n\", React.createElement(_components.li, null, \"実行時に、親フォルダを遡って設定(プロジェクトルートに \", React.createElement(_components.code, null, \"Duck.toml\"), \" を配置する約束`)を探しに行く能力がある\"), \"\\n\", React.createElement(_components.li, null, \"Task間の依存関係が記述できる\"), \"\\n\", React.createElement(_components.li, null, \"コマンド呼び出し時のパスを調整できる\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"こんなもん。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-vim\"\n  }, \"augroup MyAutoCmd\\n    autocmd BufWritePost *.md :!duck build\\naugroup END\\n\")), \"\\n\", React.createElement(_components.p, null, \"としておいて保存時に呼ぶようにしてみた。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-toml\"\n  }, \"# Duck.toml\\n[generate]\\ncwd = 'build'\\ncommand = ['cmake', '..', '-G', 'Unix Makefiles']\\n\\n[build]\\ndepends = ['generate']\\ncwd = 'build'\\ncommand = ['make']\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"duck build\")), \"\\n\", React.createElement(_components.p, null, \"のように呼ぶ。\"), \"\\n\", React.createElement(_components.h2, null, \"vimのカレントフォルダ問題\"), \"\\n\", React.createElement(_components.p, null, \"親フォルダを遡って設定を探しに行くというのが重要です。例えば \", React.createElement(_components.code, null, \"vim\"), \" でサブフォルダのファイルを編集しているときに、親フォルダの \", React.createElement(_components.code, null, \"Makefile\"), \" でビルドしたい場合がある。このときに、\", React.createElement(_components.code, null, \"vim\"), \" のカレントフォルダを考慮するのが無理なのです。\\nそういうわけで \", React.createElement(_components.code, null, \"vim\"), \" では単純に \", React.createElement(_components.code, null, \"autocd\"), \" して、カレントフォルダを意識しないことにしました。\\n代わりにツール側で親フォルダに遡れるようにして、そのツールがプロジェクトのルートから指定のコマンドを呼び出すのです。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"make を呼ぶ\"), \"\\n\", React.createElement(_components.li, null, \"cmake を呼ぶ\"), \"\\n\", React.createElement(_components.li, null, \"dub を呼ぶ\"), \"\\n\", React.createElement(_components.li, null, \"setup.py を呼ぶ\"), \"\\n\", React.createElement(_components.li, null, \"MSBuild を呼ぶ\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"などのように、言語毎に専門のツールを呼ぶ補助的なツールです。\"), \"\\n\", React.createElement(_components.p, null, \"特定の \", React.createElement(_components.code, null, \"LSP\"), \" (D言語向けの \", React.createElement(_components.code, null, \"dls\"), \" ) がカレントフォルダをプロジェクトルートに移動してから起動しないといけないなどの癖があるようなので、その辺を吸収させるのも狙っている。\"), \"\\n\", React.createElement(_components.h2, null, \"WindowsでCMakeをどうやって見つけるのか\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"unix\"), \" 的なシステムでは、\", React.createElement(_components.code, null, \"/usr/bin/cmake\"), \" であろうことが期待できるのだけど、\\n\", React.createElement(_components.code, null, \"Windows\"), \" ではそうはいかない。でも最近の \", React.createElement(_components.code, null, \"VisualStudio\"), \" がインストールされていれば、その中に \", React.createElement(_components.code, null, \"cmake\"), \" が入っている。だから \", React.createElement(_components.code, null, \"Program Files\"), \" から決め打ちで探してくるという方法があるのだけど、もう一歩進めて \", React.createElement(_components.code, null, \"VisualStudio\"), \" のインストールパスを \", React.createElement(_components.code, null, \"registry\"), \" から取ってくるという手法がある。しかし、たくさんのバージョンとエディションで少しずつ違うのでやってられない。で、これに対応するツールとして \", React.createElement(_components.code, null, \"vswhere\"), \" というツールがある。たぶん、\", React.createElement(_components.a, {\n    href: \"https://github.com/Microsoft/vcpkg\"\n  }, \"vcpkg\"), \"のために作られたのだと思うのだけど、これでインストールされている \", React.createElement(_components.code, null, \"VisualStudio\"), \" の情報を得ることができる。まだ、 \", React.createElement(_components.code, null, \"vswhere\"), \" をどうやって得るのか問題があるのだが、小さいので自分のプロジェクトに入れておくとか、ダウンロードするとか、 \", React.createElement(_components.code, null, \"VisualStudio\"), \" に入っているので決め打ちでパスを探すといったことになろうと思う。\"), \"\\n\", React.createElement(_components.p, null, \"要するに \", React.createElement(_components.code, null, \"vc\"), \" が入っている環境では、9割くらいの確率で \", React.createElement(_components.code, null, \"cmake\"), \" を発見できます。\\n\", React.createElement(_components.code, null, \"duck\"), \" にもこの機能を入れようとしている。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ChaosinaCan/pyvswhere\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2019/workspacefolder.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","ul","li","code","pre","h2","a","_provideComponents","components","React","className","href","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4763],{7447:function(n,e,t){t.r(e);var o=t(1151),r=t(7294);function c(n){const e=Object.assign({pre:"pre",code:"code"},(0,o.ah)(),n.components);return r.createElement(e.pre,null,r.createElement(e.code,null,"前から写経しながら読んでいる\n「シングルページWebアプリケーション」がようやく終盤に差し掛かってきた。\nSocket.IOで接続するところがあるのだけど、独自にgulpからbrowserSyncを使っていてWebSocketがupgradeできずにはまる。\nFirefoxのconsoleにエラーが出て気になる気になる。\ngulpfile.js\ngulp.task('server', ['nodemon'], function () {\n    browser.init(null, {\n        proxy: 'http://localhost:7000',\n        port: 3000,\n        ws: true // <- これが無いとTransportがpollingからupgradeできない\n    });\n});\n\nなかなか気付けなかった。\nその前に、socket.ioのnamespaceの指定でもはまってたのだが・・・。\nしかし、この本は実にいい本だ。自分のWebの知識レベルにちょうどあっていて、昨今の技術をキャッチアップして行く足がかりに\nすごく役にたった。\nこの本が提唱する、\nmongodb -> node.js + express + socket.IO -> JQuery\nな構成をベースにgulpによる開発環境と、typescript、mithril、bootstrapなんかを盛って行く路線で\n寄り道しながら修行中。\n"))}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?r.createElement(e,n,r.createElement(c,n)):c(n)}},1151:function(n,e,t){t.d(e,{ah:function(){return c}});var o=t(7294);const r=o.createContext({});function c(n){const e=o.useContext(r);return o.useMemo((()=>"function"==typeof n?n(e):{...e,...n}),[e,n])}}}]);
//# sourceMappingURL=component---content-posts-2015-11-15-websocket-upgrade-md-46ae2276f58928b5b05c.js.map
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-04-boost-python-md-37318aaa350879909c60.js","mappings":"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","sources":["webpack:///./content/posts/2017/04/boost_python.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"mmdbridge のビルドで必要になった Boost.Python 周り。\\nどうやら、OpenEXR 界隈では結構使われている様子。\\nAlembic とか USD とか。\\nしかし Windows 版の Boost.Python はリンク周りにはまり要素が多いので、記録しといた。\"), \"\\n\", React.createElement(_components.p, null, \"Python へのリンク\\npython_d.lib にリンクする必要がない場合\\nPython 自体のデバッグをするのでなければ python_d にリンクする必要はない。\\npython_d へのリンクの必要性は、リンクするライブラリを Debug で統一する必要の有無なのだけど、\\npyd を作っているときは必要ない。python.exe ではなく python_d.exe から実行して何もかもが、Debug を参照するようにするのはつらい。そうではなくて自分のアプリが Python を内臓する場合は、python_d にリンクした方がよい。Debug と Release の混在によるエラーが出る可能性があるので。で、mmdbridge は後者なので python_d をリンクすることに妥当性がある。\\npython_d.lib へのリンクを防止する\"), \"\\n\", React.createElement(_components.p, null, \"https://stackoverflow.com/questions/16200997/why-doesnt-include-python-h-work\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"#ifdef _DEBUG\\n  #undef _DEBUG\\n  #include <Python.h>\\n  #define _DEBUG\\n#else\\n  #include <Python.h>\\n#endif\\n\")), \"\\n\", React.createElement(_components.p, null, \"これが、常套手段になるようで pyd の開発時には入れておくとよい。\\nBoost.Python が python_d にリンクする\"), \"\\n\", React.createElement(_components.p, null, \"boost-1.64.0\\npython-3.5.3\"), \"\\n\", React.createElement(_components.p, null, \"debug 版の boost をビルドしたのだが、よく見ると Release 版の python35.dll の方がリンクされていた。がんばって、DEBUG マクロの定義等を調べたのだがなかなかわからなかった。どうやらどこかで undef _DEBUG されているらしいと当たりがついた。\"), \"\\n\", React.createElement(_components.p, null, \"boost/python/detail/wrap_python.hpp\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-cpp\"\n  }, \"#ifdef _DEBUG\\n# ifndef BOOST_DEBUG_PYTHON\\n#  ifdef _MSC_VER\\n    // VC8.0 will complain if system headers are #included both with\\n    // and without _DEBUG defined, so we have to #include all the\\n    // system headers used by pyconfig.h right here.\\n#   include <stddef.h>\\n#   include <stdarg.h>\\n#   include <stdio.h>\\n#   include <stdlib.h>\\n#   include <assert.h>\\n#   include <errno.h>\\n#   include <ctype.h>\\n#   include <wchar.h>\\n#   include <basetsd.h>\\n#   include <io.h>\\n#   include <limits.h>\\n#   include <float.h>\\n#   include <string.h>\\n#   include <math.h>\\n#   include <time.h>\\n#  endif\\n#  undef _DEBUG // Don't let Python force the debug library just because we're debugging.\\n#  define DEBUG_UNDEFINED_FROM_WRAP_PYTHON_H\\n# endif\\n#endif\\n\")), \"\\n\", React.createElement(_components.p, null, \"python_d.lib にリンクするには\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"b2 --with-python --debug-configuration python-debugging=on\\n\")), \"\\n\", React.createElement(_components.p, null, \"として\\nlibboost_python3-vc140-mt-gyd-1_64\\nを作成する。gyd の y が python debug らしい。\\nBoost.Python へのリンク\\nboost はどうやってリンクするライブラリの名前を決めているのか\\n#pragma comment(lib,\\\"wsock32.lib\\\")\"), \"\\n\", React.createElement(_components.p, null, \"どこかに#pragma が記述されているはずだが。\"), \"\\n\", React.createElement(_components.p, null, \"https://stackoverflow.com/questions/16200997/why-doesnt-include-python-h-work\\nhttp://d.hatena.ne.jp/torutk/20121004/p1\"), \"\\n\", React.createElement(_components.p, null, \"autolink らしい。自動的に有効になる。\"), \"\\n\", React.createElement(_components.p, null, \"http://www.boost.org/doc/libs/1_48_0/boost/config/auto_link.hpp\"), \"\\n\", React.createElement(_components.p, null, \"pragma リンクの名前が一致しないんだけど\"), \"\\n\", React.createElement(_components.p, null, \"libboost_python3-vc140-mt-gd-1_64 にリンクしたいのだが libboost_python-vc140-mt-gd-1_64 にリンクしようとする\\nboost_python3_vc140-mt-gd-1_64 にリンクしたいのいだが libboost_python-vc140-mt-gd-1_64 にリンクしようとする\"), \"\\n\", React.createElement(_components.p, null, \"BOOST_ALL_NO_LIB\"), \"\\n\", React.createElement(_components.p, null, \"を定義して autolink を阻止して自分でリンクする。\\npython3 はどうやって決まるのか\\nむしろ boost_python3 が BOOST_LIB_NAME から決まる。\\nBOOST_LIB_NAME は、boost/python/detail/config.hpp で下記の記述がある。\\nboost-1.61.0\\n#define BOOST_LIB_NAME boost_python\"), \"\\n\", React.createElement(_components.p, null, \"boost_python3.dll と boost_python.dll は両方 Python3 にリンクされとった\\nなんだってー。つまり、boost は複数の Python に対するビルド結果を共存させることは考慮されていないということだった。なるほど\\nRelease ビルドと Debug ビルドは同じ Release の dll にリンクするべき\\nDebug 版であっても、boost_python.dll も同じ Release 版にリンクされる。\\nAutoLink に逆らわない方がよい。\\nCMake の FIND_PACKAGE(BOOST)による Boost_LIBRARIES は使わない方がよいかもしれない。デバッグの方にリンクされてはまりうる。ていうか、はまった。\\n結論として、AutoLink 邪魔だーから AutoLink に従えとなった。\\npybind を使おう\\nヘッダオンリーなので。リンク無いし。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/pybind/pybind11\"), \"\\n\", React.createElement(_components.p, null, \"既存の Boost.Python を使ったコードでも、pybind は Boost.Python と似た API になっているので簡単に置き換えられる。\"), \"\\n\", React.createElement(_components.p, null, \"pybind11 で C++の関数を python から使う\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/04/boost_python.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
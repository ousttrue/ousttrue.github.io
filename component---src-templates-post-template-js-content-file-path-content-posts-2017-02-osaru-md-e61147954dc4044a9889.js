"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8067],{9414:function(n,e,t){t.r(e),t.d(e,{default:function(){return g}});var a=t(1151),r=t(7294);function o(n){const e=Object.assign({p:"p",span:"span"},(0,a.ah)(),n.components);return r.createElement(r.Fragment,null,r.createElement(e.p,null,"いつも JSONUtil や MiniJson+JsonNode を使うのだけど数値周りの cast で苦しんだので自前でつくることにした。"),"\n",r.createElement(e.p,null,"https://github.com/ousttrue/JsonSan~\nhttps://github.com/ousttrue/Osaru"),"\n",r.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">UnityのJSON\nUnityのJsonUtilityみたいなシリアライザ・デシリアライザと不可分のものは使いづらい。例えば、以下のようなjsonでpositionだけをデシリアライズしたい場合。\n{\n    "action": "hoge",\n    "params": {\n        "power": 9.8,\n        "position": [0, 1, 2]\n    }\n}\n\n下記のように使いたい。\nstring json;\n\nvar parsed=Json.Parse(json);\nvar x=(float)parsed["params"]["position"][0];\n\nMiniJson\n\nMiniJson\nMiniJsonをちょっと楽にするスクリプト\n\nMiniJsonはパースした時にObjectの入れ物としてDictionary[string, object]、Arrayの入れ物としてList[object]を使っている。ここから値を取り出すにはキャストを使うのだがこれがわりとはまる。\nint64 n=1234;\nvar no=(object)n;\nvar i=(int)no; // boxingされたint64型の値はobjectから直接intにキャストできない\n\n上記のような、ある数をobject型に代入してそれを違う型として取りだすようなときに面倒すぎだった。\n// こうすればできる\nvar i=(int)(int64)no;\n\nということで自作してみた。\nJsonSan Osaru\nJSON, Util, Parse, Reader, Deserializer|Serializerあたりの組み合わせが使い尽くされていたのでリポジトリ名がすごい適当になった。JSONさん。さらにMessagePackと統合してObjectStructure改めOsaruにした\n\nhttps://github.com/ousttrue/Osaru\n\nJSONの仕様を見ながらごりごりテストドリブンで実装した。\n\nhttp://www.json.org/json-ja.html\n\nJSONは、ObjectのキーがString限定なのに初めて気づいたり。Stackoverflowで「JavascriptのObjectリテラルとJSONは違うのだよ」というのを見たが、まぁそうですね。コメントとかキーのクォート省略とか。\n実装\nJSON文字列をパーサーに入力したらパース済みのノードとして結果を得る。\nvar json="[ \\"json\\" ]";\nvar node=Node.Parse(json);\n\nノードはJSONの定義に沿った型をenumで知っていて、GetNumber(), GetString(), GetBoolean()等が実装してあるので適当に値を取り出せる。MiniJsonでのはまりを反省してNumber型はdouble決め打ちにした。\npublic enum ValueType\n{\n    Unknown,\n\n    String,\n    Number,\n    Object,\n    Array,\n    Boolean,\n}\n\nDebug.Log(node.ValueType); // ValueType.String\nnode.GetString();\n\nnodeがObjectかArrayの場合がミソでパースした時点では”{“または”[“までしか読まないことにした。IEnumerable[Node]の発動で子要素への要求が来て中に読み進む。使い方によっては軽量。Count()を使ったりすると遅くなるであろう。\nforeach(var child in node)\n{\n    Debug.Log(child.GetString());\n}</code></pre></div>'}}))}var s=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?r.createElement(e,n,r.createElement(o,n)):o(n)},i=t(8678),c=t(4160),l=t(8736);const u={code:n=>{let{children:e,className:t}=n;return t?r.createElement(l.Z,{className:t},e):r.createElement("code",null,e)}};function m(n){let{data:e,children:t}=n;const o=e.mdx.frontmatter;return r.createElement(i.Z,null,r.createElement("h1",null,o.title),r.createElement("div",{className:"tags-index"},o.tags&&o.tags.length>0&&o.tags.map((n=>r.createElement(c.rU,{to:"/tags/"+n+"/",itemProp:"url"},r.createElement("button",null,n))))),r.createElement(a.Zo,{components:u},t))}function g(n){return r.createElement(m,n,r.createElement(s,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2017-02-osaru-md-e61147954dc4044a9889.js.map
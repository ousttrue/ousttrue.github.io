"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8158],{1607:function(e,n,l){l.r(n),l.d(n,{default:function(){return i}});var t=l(1151),a=l(7294);function u(e){const n=Object.assign({h2:"h2",p:"p",code:"code",ul:"ul",li:"li",a:"a",span:"span",h3:"h3",h4:"h4"},(0,t.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h2,null,"rust で D3D11 レンダラを進めてきたが・・・"),"\n",a.createElement(n.p,null,"当初 ",a.createElement(n.code,null,"rust")," で ",a.createElement(n.code,null,"d3d11")," のレンダラーを作ろうとして作業を進めていた。\n",a.createElement(n.code,null,"imgui")," を組み込んで、 ",a.createElement(n.code,null,"glTF")," をロードして ",a.createElement(n.code,null,"unlit")," で描画するところまで作ったが、\n",a.createElement(n.code,null,"GUI")," の作りこみが大変そうな感じだった。\n",a.createElement(n.code,null,"rust")," は関数オーバーロードが無いので　",a.createElement(n.code,null,"imgui")," のラッパーの使い勝手が ",a.createElement(n.code,null,"c++")," より落ちるなど。\nポインターを渡せるのは素敵なのだが。"),"\n",a.createElement(n.h2,null,"nvim-0.5 はおもしろい"),"\n",a.createElement(n.p,null,"ここで寄り道して、 ",a.createElement(n.code,null,"nvim")," をいじり始めた。\nちょうどバージョン ",a.createElement(n.code,null,"0.5")," がリリースされるタイミングで、",a.createElement(n.code,null,"0.5")," になると lua サポートが強化されて、設定が lua で書けるとのこと。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"https://zenn.dev/hituzi_no_sippo/articles/871c06cdbc45b53181e3"},"NeovimとLua")),"\n"),"\n",a.createElement(n.p,null,"ということで Windows 向けのソースからのビルドシステムを作って ",a.createElement(n.code,null,"nvim")," 環境を整備してみた。\nlua で記述された plugin をなるべく採用。"),"\n",a.createElement(n.p,null,"https://github.com/ousttrue/my_nvim"),"\n",a.createElement(n.p,null,"最近常用していた、 ",a.createElement(n.code,null,"vscode")," の便利さにどこまで追いつけるか。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"Language Server Protocol。nvim-0.5 から nvim-lsp (luaで書いてある) がある。組み込み"),"\n",a.createElement(n.li,null,"Debug Adapter Protocol。nvim-0.5 から nvim-dap (lulで書いてある) がある。https://github.com/mfussenegger/nvim-dap"),"\n"),"\n",a.createElement(n.p,null,"vscode から ",a.createElement(n.code,null,"lsp")," と ",a.createElement(n.code,null,"dap")," という重要な資産を持ってこれるので慣れればいけそうである。\n調べたところ下記のようだった。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"codelldb(native debugger c++ や rust) は nvim-dap を改造すれば使えた https://github.com/ousttrue/nvim-dap"),"\n",a.createElement(n.li,null,"rust-analyzer 動いた"),"\n",a.createElement(n.li,null,"python: lsp, dap ともに動きそう"),"\n",a.createElement(n.li,null,"lua: lsp, dap ともに動きそう"),"\n",a.createElement(n.li,null,"csharp: lsp, dap ともに動きそう(Unityはうまくいかず)"),"\n"),"\n",a.createElement(n.p,null,"nvim-lsp も nvim-dap も lua で簡単に記述されているので、コードを読めば、たぶんわかる。\nあとは、タスクランナーを整備すれば開発環境に使えそう。"),"\n",a.createElement(n.h2,null,"luarocks の Windows 運用"),"\n",a.createElement(n.p,null,"lua で記述された nvim のパッケージマネージャー https://github.com/wbthomason/packer.nvim を採用したのだが、\nWindows で luarocks 機能が動かなかった。https://luarocks.org/ は ",a.createElement(n.code,null,"lua")," のパッケージマネージャー。\nちょっと、古め(vc2017より前)の vc でないとだめぽい。\n改造した。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/ousttrue/packer.nvim"),"\n",a.createElement(n.li,null,"https://github.com/ousttrue/hererocks"),"\n"),"\n",a.createElement(n.p,null,"hererocks は、luarocks のインストーラー。\n",a.createElement(n.code,null,"LUA_PATH")," ",a.createElement(n.code,null,"package.path")," を理解した。"),"\n",a.createElement(n.h2,null,"スタンドアロンの lua インタプリタによるプロジェクト"),"\n",a.createElement(n.p,null,"luarocks が無事に Windows で運用できるようになったので、プロジェクトローカルに必要なライブラリをインストールして、\nスタンドアロンの lua インタープリターを起点にしたアプリ開発ができないか探ってみた。\nlua インタプリタがアプリ組み込みだと dap の運用がしづらい(port 開けて attach とかになる)のでスタンドアロンの lua インタープリターを推す。"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text"># フォルダ構成\nproject_root\n  + lua(.gitignore) # hererocks でローカルビルドする\n  + main.lua</code></pre></div>'}}),"\n",a.createElement(n.p,null,"これで、 ",a.createElement(n.code,null,"lsp")," と ",a.createElement(n.code,null,"dap")," が利用できれば快適になるのではないか。"),"\n",a.createElement(n.h3,null,"lua の LanguageServer"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://marketplace.visualstudio.com/items?itemName=sumneko.lua","\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/sumneko/lua-language-server"),"\n"),"\n"),"\n"),"\n",a.createElement(n.p,null,"がしっかり動き、",a.createElement(n.code,null,"EmmyLua")," の型ヒントを活用できることが分かった。"),"\n",a.createElement(n.p,null,"https://github.com/neovim/nvim-lspconfig/blob/a21a509417aa530fb7b54020f590fa5ccc67de77/CONFIG.md#sumneko_lua に例があって、"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua">require<span class="token string">\'lspconfig\'</span><span class="token punctuation">.</span>sumneko_lua<span class="token punctuation">.</span><span class="token function">setup</span> <span class="token punctuation">{</span>\n  settings <span class="token operator">=</span> <span class="token punctuation">{</span>\n    Lua <span class="token operator">=</span> <span class="token punctuation">{</span>\n      workspace <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token comment">-- Make the server aware of Neovim runtime files</span>\n        library <span class="token operator">=</span> <span class="token punctuation">{</span>\n          <span class="token punctuation">[</span>vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">\'$VIMRUNTIME/lua\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token comment">-- lua標準の型定義がある</span>\n          <span class="token punctuation">[</span>vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">\'$VIMRUNTIME/lua/vim/lsp\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token comment">-- Vimの型定義がある</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",a.createElement(n.p,null,"インテリセンスが効くし、組み込み関数の型ヒントも追加できる。"),"\n",a.createElement(n.h3,null,"lua の DebugAdapter"),"\n",a.createElement(n.p,null,"DebugAdapter も問題なく動いた。\nluajit の場合は対応しているものを使うべし。"),"\n",a.createElement(n.h4,null,"Lua Debug"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://marketplace.visualstudio.com/items?itemName=actboy168.lua-debug","\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/actboy168/lua-debug"),"\n"),"\n"),"\n"),"\n",a.createElement(n.p,null,"https://github.com/actboy168/bee.lua の"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"Add error hook (for debugger)"),"\n",a.createElement(n.li,null,"Add resume/yield hook (for debugger)"),"\n"),"\n",a.createElement(n.p,null,"謎の機能で実装されているぽい。"),"\n",a.createElement(n.h4,null,"Local Lua Debugger"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"https://marketplace.visualstudio.com/items?itemName=tomblind.local-lua-debugger-vscode"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/tomblind/local-lua-debugger-vscode"),"\n"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"luajit でも動く"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"TypeScriptToLua で書かれている"),"\n"),"\n"),"\n",a.createElement(n.h2,null,"lua で 3D"),"\n",a.createElement(n.p,null,"ちょっと試したところ、 luajit の ",a.createElement(n.a,{href:"https://luajit.org/ext_ffi.html"},"FFI")," を使うのが有望そうという感触を得た。\nd3d は lua でやっている人があまりいなかった。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://github.com/sonoro1234/LuaJIT-GLFW"),"\n",a.createElement(n.li,null,"https://github.com/sonoro1234/LuaJIT-ImGui"),"\n"),"\n",a.createElement(n.p,null,"最新の luajit-2.1.0-beta3(lua-5.1仕様) でいく。"),"\n",a.createElement(n.h2,null,"imgui の ffi"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"cimgui")," ではなく 素の ",a.createElement(n.code,null,"imgui")," の luajit ffi できるか実験した。"),"\n",a.createElement(n.p,null,"https://stackoverflow.com/questions/6691651/is-it-possible-to-use-functions-from-c-namespaces-with-luajit-ffi"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lua"><pre class="language-lua"><code class="language-lua">ffi<span class="token punctuation">.</span>cdef<span class="token string">[[\nvoid Test1_Method1(void) asm("_ZN5Test17Method1Ev");\n]]</span></code></pre></div>'}}),"\n",a.createElement(n.p,null,"のように mangling に対応すればできそう。"),"\n",a.createElement(n.h2,null,"libclang による コード生成"),"\n",a.createElement(n.p,null,"ということで、 ",a.createElement(n.code,null,"luajit")," + ",a.createElement(n.code,null,"FFI")," を中心に ",a.createElement(n.code,null,"imgui")," ラッパーを作ってレンダラーというか 3D ツールのインフラとなる、\n簡単なレンダラーと ",a.createElement(n.code,null,"Gizmo")," に対応したツールキットを作るという方向になってきた。"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"imgui")," の ",a.createElement(n.code,null,"luajit")," ",a.createElement(n.code,null,"FFI")," の使い勝手が重要。"),"\n",a.createElement(n.p,null,"https://github.com/ousttrue/limgui"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"[ ] libclang で ",a.createElement(n.code,null,"imgui.h")," をパースして、luajit FFI 生成と ",a.createElement(n.code,null,"lsp")," への EmmyLua アノテーション生成を同時にやるツール。"),"\n"))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?a.createElement(n,e,a.createElement(u,e)):u(e)},s=l(8678),o=l(4160),r=l(8736);const p={code:e=>{let{children:n,className:l}=e;return l?a.createElement(r.Z,{className:l},n):a.createElement("code",null,n)}};function m(e){let{data:n,children:l}=e;const u=n.mdx.frontmatter;return a.createElement(s.Z,null,a.createElement("h1",null,u.title),a.createElement("div",{className:"tags-index"},u.tags&&u.tags.length>0&&u.tags.map((e=>a.createElement(o.rU,{to:"/tags/"+e+"/",itemProp:"url"},a.createElement("button",null,e))))),a.createElement(t.Zo,{components:p},l))}function i(e){return a.createElement(m,e,a.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2021-lua-imgui-plan-md-7e68825d7d987fa66173.js.map
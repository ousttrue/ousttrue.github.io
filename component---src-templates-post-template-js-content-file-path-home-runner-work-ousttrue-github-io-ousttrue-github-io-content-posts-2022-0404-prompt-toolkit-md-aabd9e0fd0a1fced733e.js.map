{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-0404-prompt-toolkit-md-aabd9e0fd0a1fced733e.js","mappings":"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","sources":["webpack:///./content/posts/2022/0404-prompt-toolkit.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"prompt-toolkit の fullscreen アプリケーション\"), \"\\n\", React.createElement(_components.h2, null, \"Buffer\"), \"\\n\", React.createElement(_components.p, null, \"しばらく試行錯誤していたのだがやっと使い方が分かってきた。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Window</code>\"\n    }\n  }), \" + \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">BufferControl</code>\"\n    }\n  }), \" が基本形で edit する場合向け。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Window</code>\"\n    }\n  }), \" + \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">FormatedTextControl</code>\"\n    }\n  }), \" が readonly の装飾済みのテキストに向いていそう。\"), \"\\n\", React.createElement(_components.p, null, \"Lexer で基本的な装飾を施して、Preprocess でフォーカスやホバーのUI的な装飾をするという使い分けがよさそう。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">FormattedTextControl</code>\"\n    }\n  }), \" の場合は初期化時にスタイル適用済みのテキストを渡してしまう。\"), \"\\n\", React.createElement(_components.h2, null, \"example\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/prompt-toolkit の、\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://github.com/prompt-toolkit/pyvim\"), \"\\n\", React.createElement(_components.li, null, \"https://github.com/prompt-toolkit/pymux\"), \"\\n\", React.createElement(_components.li, null, \"https://github.com/prompt-toolkit/pyterm\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"が \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">prompt-toolkit2</code>\"\n    }\n  }), \" のままになっているのだが、\\nちょっと手直しすることで、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">prompt-toolkit3</code>\"\n    }\n  }), \" で動作させることができた。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ptterm</code>\"\n    }\n  }), \" の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">prompt-toolkit3</code>\"\n    }\n  }), \" 化に PR を送ってみた。\\n主に \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pipe</code>\"\n    }\n  }), \" 周りの非同期入力を \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">asyncio</code>\"\n    }\n  }), \" に適合させてやることで動く。\\nhttps://github.com/prompt-toolkit/ptterm/pull/9\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pymux</code>\"\n    }\n  }), \" も \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fork</code>\"\n    }\n  }), \" しない \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">standalone</code>\"\n    }\n  }), \" 引き数付きならば \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Windows</code>\"\n    }\n  }), \" + \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">prompt-toolkit3</code>\"\n    }\n  }), \" でも動かすことができた。\"), \"\\n\", React.createElement(_components.p, null, \"prompt-toolkit3 では積極的に \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">asyncio</code>\"\n    }\n  }), \" を活用していくのがよさそう。\"), \"\\n\", React.createElement(_components.h2, null, \"prompt-toolkit で任意のエスケープシーケンスを入れる\"), \"\\n\", React.createElement(_components.p, null, \"prompt-toolkit で \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">sixel</code>\"\n    }\n  }), \" 画像を表示させたい。\\nUIControl が UIContent を生成していて、このとき styled text のデータ構造に対して特殊なスタイル \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[ZeroWidthEscape]</code>\"\n    }\n  }), \" を指定することでエスケープシーケンスを直接出力できることがわかった。諸々の調整が必要になるが、ここに \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">sixel</code>\"\n    }\n  }), \" のシーケンスを入れることで表示できる。\\n処理順の癖に対応するために、\\n画像の高さ分の改行を \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">sixel</code>\"\n    }\n  }), \" のエスケープシーケンスに先行させる必要があった。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">prompt-toolkit</code>\"\n    }\n  }), \" + \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">wezterm</code>\"\n    }\n  }), \" 固有の問題かもしれない。\"), \"\\n\", React.createElement(_components.h2, null, \"Windows/Linux 共用で console アプリを動かす\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">prompt-toolkit3</code>\"\n    }\n  }), \" でかなりできそう。\\nフレームワークの構成を理解するまでとっつきが悪いのだが、\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pypager</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pyvim</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ptterm</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pymux</code>\"\n    }\n  }), \" を研究してやっとわかってきた。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nerdfont</code>\"\n    }\n  }), \" で賑やかしを入れて、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">sixel</code>\"\n    }\n  }), \" で画像表示ができるおもちゃを企画している。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"vim ぽい lsp/dap の実験アプリ\"), \"\\n\", React.createElement(_components.li, null, \"w3m ぽい ブラウザ\"), \"\\n\", React.createElement(_components.li, null, \"tmux ぽいやつ\"), \"\\n\", React.createElement(_components.li, null, \"ranger ぽいやつ\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2022/0404-prompt-toolkit.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h2","p","span","ul","li","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
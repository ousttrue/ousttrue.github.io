{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2022-0507-bdist-wheel-md-9c2c3cee5b62e1aebc04.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,KAAM,OACNC,EAAG,MACFC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,GAAI,KAAM,6BAA8B,KAAMK,EAAAA,cAAoBR,EAAYI,KAAM,CACnKK,wBAAyB,CACvBC,OAAQ,uJAER,KAAMF,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,YAAa,KAAMG,EAAAA,cAAoBR,EAAYI,KAAM,CAC1GK,wBAAyB,CACvBC,OAAQ,8IAER,KAAMF,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,kEAAmE,KAAMG,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,QAASG,EAAAA,cAAoBR,EAAYI,KAAM,CAClNK,wBAAyB,CACvBC,OAAQ,iDAER,YAAa,KAAMF,EAAAA,cAAoBR,EAAYI,KAAM,CAC3DK,wBAAyB,CACvBC,OAAQ,yuFAER,KAAMF,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,QAAS,KAAMG,EAAAA,cAAoBR,EAAYI,KAAM,CACtGK,wBAAyB,CACvBC,OAAQ,8nBAER,KAAMF,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,QAASG,EAAAA,cAAoBR,EAAYI,KAAM,CAChGK,wBAAyB,CACvBC,OAAQ,yDAER,uBAAwBF,EAAAA,cAAoBR,EAAYI,KAAM,CAChEK,wBAAyB,CACvBC,OAAQ,4CAER,+CAAgD,KAAMF,EAAAA,cAAoBR,EAAYI,KAAM,CAC9FK,wBAAyB,CACvBC,OAAQ,iJAER,KAAMF,EAAAA,cAAoBR,EAAYK,EAAG,KAAM,8EACrD,CAKA,MAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWb,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCxCA,MAAMQ,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,OAAOX,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMY,EAAKC,IAAIC,YAAYC,OAAQf,EAAAA,cAAoBgB,EAAAA,GAAa,CAC7IjB,WAAYA,GACXQ,GACL,CACe,SAASU,EAAiB1B,GACvC,OAAOS,EAAAA,cAAoBU,EAAcnB,EAAOS,EAAAA,cAAoBkB,EAAqB3B,GAC3F,C","sources":["webpack:///./content/posts/2022/0507-bdist_wheel.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    span: \"span\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"bdist_wheel + pep517 ではまる\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">setup.py bdist_wheel</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"なら成功するが、\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">pip wheel .</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"だと失敗するという現象に悩まされる。\\ncmake でビルドしている extension の pyd が含まれないのである。\"), \"\\n\", React.createElement(_components.p, null, \"原因は、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setup.py</code>\"\n    }\n  }), \" の下記の記述。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">build_ext_cmake</span><span class=\\\"token punctuation\\\">(</span>build_ext<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">for</span> ext <span class=\\\"token keyword\\\">in</span> self<span class=\\\"token punctuation\\\">.</span>extensions<span class=\\\"token punctuation\\\">:</span>\\n            self<span class=\\\"token punctuation\\\">.</span>build_cmake<span class=\\\"token punctuation\\\">(</span>ext<span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">build_cmake</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> ext<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token comment\\\"># these dirs will be created in build_py, so if you don't have</span>\\n        <span class=\\\"token comment\\\"># any python sources to bundle, the dirs will be missing</span>\\n        build_temp <span class=\\\"token operator\\\">=</span> pathlib<span class=\\\"token punctuation\\\">.</span>Path<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>build_temp<span class=\\\"token punctuation\\\">)</span>\\n        build_temp<span class=\\\"token punctuation\\\">.</span>mkdir<span class=\\\"token punctuation\\\">(</span>parents<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">True</span><span class=\\\"token punctuation\\\">,</span> exist_ok<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">True</span><span class=\\\"token punctuation\\\">)</span>\\n        ext_path <span class=\\\"token operator\\\">=</span> pathlib<span class=\\\"token punctuation\\\">.</span>Path<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>get_ext_fullpath<span class=\\\"token punctuation\\\">(</span>ext<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># &lt;- これ</span>\\n        ext_path<span class=\\\"token punctuation\\\">.</span>parent<span class=\\\"token punctuation\\\">.</span>mkdir<span class=\\\"token punctuation\\\">(</span>parents<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">True</span><span class=\\\"token punctuation\\\">,</span> exist_ok<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">True</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"直した。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">        ext_path <span class=\\\"token operator\\\">=</span> pathlib<span class=\\\"token punctuation\\\">.</span>Path<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>get_ext_fullpath<span class=\\\"token punctuation\\\">(</span>ext<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>absolute<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"たぶん、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">get_ext_fullpath</code>\"\n    }\n  }), \" が相対パスを返していて、変なところに \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pyd</code>\"\n    }\n  }), \" が出力されていた。\\npip の時だけフォルダの構成や pwd が変わっている様子。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">pip wheel . -v</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"として、ログと睨めっこしていたら気付いた。\\npip が subprocess とか使うので、デバッガがアタッチできなくて、なかなかわからなかった。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2022/0507-bdist_wheel.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","span","p","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
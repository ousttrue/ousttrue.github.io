{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-12-21-node-self-build-md-83b1712a0b573046390c.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,6FAA8F,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAClOI,wBAAyB,CACvBC,OAAQ,goJAGd,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BCVA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,MAAME,EAAcD,EAAKE,IAAID,YAC7B,OAAOb,EAAAA,cAAoBe,EAAAA,EAAQ,KAAMf,EAAAA,cAAoB,KAAM,KAAMa,EAAYG,OAAQhB,EAAAA,cAAoB,MAAO,CACtHQ,UAAW,cACVK,EAAYI,MAAQJ,EAAYI,KAAKC,OAAS,GAAKL,EAAYI,KAAKE,KAAIC,GAClEpB,EAAAA,cAAoBqB,EAAAA,GAAM,CAC/BC,GAAI,SAASF,EAAG,IAChBG,SAAU,OACTvB,EAAAA,cAAoB,SAAU,KAAMoB,OACpCpB,EAAAA,cAAoBwB,EAAAA,GAAa,CACpCzB,WAAYA,GACXQ,GACL,CACe,SAASkB,EAAiBjC,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoB0B,EAAqBlC,GAC3F,C","sources":["webpack:///./content/posts/2015/12/21/node_self_build.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"謎のクラッシュ(FFI でネイティブプラグインがアクセス違反で死ぬ)を追跡するため、\\nVC のデバッガをアタッチするべく自前ビルドする。\\nnode-v5.3.0.tar.xz\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">7zipで解凍。\\npython2系にpathを通してvcbuild.batをたたく。\\n> vcbuild.bat\\n\\nv8もlibuvも全部入りらしくあっさりとほぼビルドできた。\\nSignTool Error: No certificates were found that met all the given criteria.\\nFailed to sign exe\\n\\ndocument\\nhttps://github.com/nodejs/node-v0.x-archive/wiki/Installation#building-on-windows\\ndebugビルドの作り方はこう。\\n> vcbuild.bat nosign debug\\n\\nnodeをデバッグ実行\\n\\nnode-v5.3.0にnode.slnができているのでこれをVisualStudio2015で開く。\\nnodeをスタートアッププロジェクトに指定\\nnodeの設定のdebugタブで、カレントディレクトリとコマンドライン引数を指定\\nf5\\n\\n例外が再現した\\nvoid CallbackInfo::DispatchToV8(callback_info *info, void *retval, void **parameters, bool dispatched) {\\n  Nan::HandleScope scope;\\n\\n  static const char* errorMessage = \\\"ffi fatal: callback has been garbage collected!\\\";\\n\\n  if (info->function == NULL) {\\n    // throw an error instead of segfaulting.\\n    // see: https://github.com/rbranson/node-ffi/issues/72\\n    if (dispatched) {\\n        Local&lt;Value> errorFunctionArgv[1];\\n        errorFunctionArgv[0] = Nan::New&lt;String>(errorMessage).ToLocalChecked();\\n        info->errorFunction->Call(1, errorFunctionArgv);\\n    }\\n    else {\\n      Nan::ThrowError(errorMessage);\\n    }\\n  } else {\\n    // invoke the registered callback function\\n    Local&lt;Value> functionArgv[2];\\n    functionArgv[0] = WrapPointer((char *)retval, info->resultSize);\\n    functionArgv[1] = WrapPointer((char *)parameters, sizeof(char *) * info->argc);\\n    Local&lt;Value> e = info->function->Call(2, functionArgv); // &lt;-- ここ。functionがnullptrになってるよ!\\n    if (!e->IsUndefined()) {\\n      if (dispatched) {\\n        Local&lt;Value> errorFunctionArgv[1];\\n        errorFunctionArgv[0] = e;\\n        info->errorFunction->Call(1, errorFunctionArgv);\\n      } else {\\n        Nan::ThrowError(e);\\n      }\\n    }\\n  }\\n}\\n\\nううむ。if文でnullチェックしてるのにelse側に落ちてるな。矢張りスレッドとかGCが絡んでいそうな気がするぞ。\\nちょうどnode-ffiでjavascriptのコールバックを呼び出しているところなのではないか。\\nコールスタック\\n>   ffi_bindings.node!CallbackInfo::DispatchToV8(_callback_info * info, void * retval, void * * parameters, bool dispatched) 行 73   C++\\n    ffi_bindings.node!CallbackInfo::WatcherCallback(uv_async_s * w, int revents) 行 94   C++\\n    node.exe!uv_process_async_wakeup_req(uv_loop_s * loop, uv_async_s * handle, uv_req_s * req) 行 97    C\\n\\nよく見るとまさにffi_bindings.node(node-ffiのネイティブプラグイン)内で問題が発生している。\\n呼び出しスレッドはメインスレッドか・・・。\\n何回も試してみると例外がむしろdllのスレッド側で起こることの方が多い。\\n他にWaitSingleObjectがstdcallの関数をスレッド実行しているものが４本。\\nひょっとして、コールバックの頻度が高すぎなんじゃないのか・・・。\\ncallback_infoはffiの構造体。こいつのデストラクタが呼ばれているのが確認できれば手がかりになるな。\\nで、callback_info->functionを解放する下記の部分がメインスレッドから呼ばれて、その後に\\nスレッドからのコールバック呼び出しがクラッシュしているらしいことを発見。\\nnode_modules/ffi/src/callback_info.cc\\n/*\\n * Called when the `ffi_closure *` pointer (actually the \\\"code\\\" pointer) get's\\n * GC'd on the JavaScript side. In this case we have to unwrap the\\n * `callback_info *` struct, dispose of the JS function Persistent reference,\\n * then finally free the struct.\\n */\\n\\nvoid closure_pointer_cb(char *data, void *hint) {\\n  callback_info *info = reinterpret_cast&lt;callback_info *>(hint);\\n  // dispose of the Persistent function reference\\n  delete info->function;\\n  info->function = NULL;\\n  // now we can free the closure data\\n  ffi_closure_free(info);\\n}\\n\\nコールスタック\\n>   ffi_bindings.node!closure_pointer_cb(char * data, void * hint) 行 42 C++\\n    node.exe!node::Buffer::CallbackInfo::WeakCallback(v8::Isolate * isolate, v8::Local&lt;v8::Object> object) 行 159    C++\\n\\n     省略\\n\\n    node.exe!v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace space, const char * gc_reason, const v8::GCCallbackFlags callbackFlags) 行 556 C++\\n\\n     省略\\n\\n    node.exe!node::Buffer::New(v8::Isolate * isolate, char * data, unsigned int length, void (char *, void *) * callback, void * hint) 行 347    C++\\n    binding.node!`anonymous namespace'::WrapPointer(char * ptr, unsigned int length) 行 147  C++\\n    binding.node!`anonymous namespace'::ReadPointer(const Nan::FunctionCallbackInfo&lt;v8::Value> &amp; info) 行 261    C++\\n    binding.node!Nan::imp::FunctionCallbackWrapper(const v8::FunctionCallbackInfo&lt;v8::Value> &amp; info) 行 174  C++\\n\\nなんか、GCが発動して回収されちゃっているぽい？\\n2015/09/20\\n* Nodejs GC is crashing when a C function is returning NULL\\nむしろこっちか\\n2015/11/05\\n* Node.js v5.0.0でnode-ffiやNodObjCが動かない\\nしかし、うちのnode.jsは\\n> node --version\\nv5.3.0\\n\\nうむ。\\nむしろこっちか\\n2015/09/15\\n* ffi.Function underlying Callback is garbage collected\\n死ななくなった。これっぽいな。\\n64bit版で試してみる\\nこれはこれで死ぬ。\\nまとめ\\n\\nnode-ffiのFunctionでGCに回収されてしまう書き方のところがある(FFI.Function内)\\n32bit版のnode-ffiではSTDCALLを指定できる(ABI=2)\\n64bit版のnode-ffiではIA64にされるのでSTDCALLは動かぬ\\n\\ngypでのIA64とX64の扱いの違いがわかったら修正できるかな。\\nX86_WIN32の時にFFI_STDCALLを定義する修正をプルリクしてみよう。</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2015/12/21/node_self_build.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
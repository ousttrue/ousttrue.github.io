"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9505],{6490:function(e,n,t){t.r(n);var l=t(1151),a=t(7294);function o(e){const n=Object.assign({p:"p",code:"code",h1:"h1",pre:"pre",blockquote:"blockquote",ul:"ul",li:"li"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"glTFViewerの実装がてら法線マップの実装をやってみる。\n",a.createElement(n.code,null,"OpenGL 4.0 Shading Language Cookbook")," を参考に進めた。"),"\n",a.createElement(n.h1,null,"法線mapとTangentを供給する"),"\n",a.createElement(n.p,null,"https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet をサンプルモデルとした。"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"glActiveTexture")," がうまくいかず難航する。\n以下のようにして、無理やり解決。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-glsl"},"#version 400\n#extension GL_ARB_shading_language_420pack : enable\nlayout(binding = 0) uniform sampler2D Tex0;\nlayout(binding = 1) uniform sampler2D Tex1;\n")),"\n",a.createElement(n.p,null,"すべての sampler2D が 0 にバインディングされる挙動だった。\n",a.createElement(n.code,null,"#version 420")," はうまくいかなかったので断念。\nエラーは出ないが、何もレンダリングされなくなった。"),"\n",a.createElement(n.h1,null,"Tangent が格納されていないので生成する"),"\n",a.createElement(n.p,null,"https://github.com/KhronosGroup/glTF/tree/master/specification/2.0 に以下のよう書いてある。"),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"Implementation note: When tangents are not specified, client implementations should calculate tangents using default MikkTSpace algorithms. For best results, the mesh triangles should also be processed using default MikkTSpace algorithms."),"\n"),"\n",a.createElement(n.h1,null,"MikkTSpace"),"\n",a.createElement(n.p,null,"https://github.com/mmikk/MikkTSpace"),"\n",a.createElement(n.p,null,"さくっと dll を作成して、 luajit から呼びだしてみた。\n",a.createElement(n.code,null,"indices")," ",a.createElement(n.code,null,"POSITION")," ",a.createElement(n.code,null,"NORMAL")," ",a.createElement(n.code,null,"TEXCOORD0")," を入力して ",a.createElement(n.code,null,"TANGENT")," を出力する。\nわりと適当で動く ",a.createElement(n.code,null,"luajit ffi")," 恐るべし。\nさすがに C の方に呼びだし回数を減らすラッパーを作ったほうが速そうだが、動かすだけなら問題なし。"),"\n",a.createElement(n.p,null,"memo"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"https://bgolus.medium.com/generating-perfect-normal-maps-for-unity-f929e673fc57#c473"),"\n"),"\n",a.createElement(n.h1,null,"Shader"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"OpenGL 4.0 Shading Language Cookbook")," の phong shading を省略して法線だけ確認。\n",a.createElement(n.code,null,"2倍して1引く")," を補った。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-glsl"},"#version 400\nuniform mat4 MVP;\nuniform mat4 ModelViewMatrix;\nuniform mat3 NormalMatrix;\nuniform vec3 LightDirection;\n\nlayout(location = 0) in vec3 VertexPosition;\nlayout(location = 1) in vec3 VertexNormal;\nlayout(location = 2) in vec2 VertexTexCoord;\nlayout(location = 3) in vec4 VertexTangent;\nout vec3 LightDir;\nout vec3 ViewDir;\nout vec2 TexCoord;\nout vec3 Debug;\n\nvoid main() {\n  vec3 normal = normalize(NormalMatrix * VertexNormal);\n  vec3 tangent = normalize(NormalMatrix * vec3(VertexTangent));\n  vec3 binormal = normalize(cross(normal, tangent)) * VertexTangent.w;\n  mat3 toObjectLocal =\n      mat3(tangent.x, binormal.x, normal.x, tangent.y, binormal.y, normal.y,\n           tangent.z, binormal.z, normal.z);\n  vec3 pos = vec3(ModelViewMatrix * vec4(VertexPosition, 1.0));\n  LightDir = normalize(toObjectLocal * LightDirection);\n  ViewDir = toObjectLocal * normalize(-pos);\n  TexCoord = VertexTexCoord;\n  Debug = vec3(VertexTangent);\n\n  gl_Position = MVP * vec4(VertexPosition, 1.0);\n};\n")),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-glsl"},"#version 400\n#extension GL_ARB_shading_language_420pack : enable\n\nlayout(binding = 0) uniform sampler2D Tex0;\nlayout(binding = 1) uniform sampler2D Tex1;\nin vec3 LightDir;\nin vec3 ViewDir;\nin vec2 TexCoord;\nin vec3 Debug;\nout vec4 FragColor;\n\nvoid main() {\n  vec4 texColor = texture2D(Tex0, TexCoord);\n  vec4 normal = texture2D(Tex1, TexCoord);\n\n  // FragColor = vec4(Debug, 1);\n\n  float intensity = max(dot(LightDir, (normal.xyz * 2 - 1)), 0);\n  vec3 color = vec3(intensity);\n  FragColor = vec4(color, 1);\n};\n")),"\n",a.createElement(n.p,null,"glTF の シェーダー では、 ",a.createElement(n.code,null,"mat3")," を fragment shader に送りこんでいた。"),"\n",a.createElement(n.p,null,"https://github.com/bwasty/gltf-viewer/tree/master/src/shaders"),"\n",a.createElement(n.p,null,"tangent space でライティングするという概念は同じらしい。"))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(o,e)):o(e)}},1151:function(e,n,t){t.d(n,{ah:function(){return o}});var l=t(7294);const a=l.createContext({});function o(e){const n=l.useContext(a);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---content-posts-2021-summer-normalmap-md-4070311236dd5ddc1640.js.map
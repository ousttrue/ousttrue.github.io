"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4858],{4064:function(e,t,n){n.r(t),n.d(t,{default:function(){return u}});var o=n(1151),c=n(7294);function a(e){const t=Object.assign({p:"p"},(0,o.ah)(),e.components);return c.createElement(c.Fragment,null,c.createElement(t.p,null,"vcpkgを眺めていたらnot boostなasioを発見した。"),"\n",c.createElement(t.p,null,"asioをBoostに含まれているオフィシャル感のあるクロスプラットフォームな通信ライブラリととらえていたのだけど、c++11でboostのよく使う部分がc++にかなり取り込まれて肥大化する一方のboostを避ける気持ちが生まれていた。"),"\n",c.createElement(t.p,null,"http://think-async.com/Asio/AsioAndBoostAsio"),"\n",c.createElement(t.p,null,"読んでみるとついにヘッダオンリー化を果たしたらしい。boostの外に出ないとヘッダオンリー化が難しそうではある。たしか、asioはsocket周りじゃなくてerror周りのクラスがコンパイル対象なのに引きずられてasioを使うにはコンパイルを強いられるということがあった。技術的にはだいぶ前からヘッダオンリー化は可能であったのだろうがついにやってくれたか。素晴らしい。解凍するとギガ単位になる最近のboostはいかがなものかと思ってた。\n稀に使われているぽい、拙作のmsgpack-asioもヘッダオンリーのasioを使って近代化したいなぁ。あと、msgpackの実装も\nhttps://github.com/nlohmann/json\nに切り替えたい。\nc++11以降、c++界隈が活性化しているような気がするな。"))}var l=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,o.ah)(),e.components);return t?c.createElement(t,e,c.createElement(a,e)):a(e)},r=(n(8678),n(8838));const s={code:e=>{let{children:t,className:n}=e;return n?c.createElement(r.Z,{className:n},t):c.createElement("code",null,t)}};function m(e){let{data:t,children:n}=e;return c.createElement(c.Fragment,null,c.createElement("h1",null,t.mdx.frontmatter.title),c.createElement(o.Zo,{components:s},n))}function u(e){return c.createElement(m,e,c.createElement(l,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-05-asio-md-24efa5068bdb11c084c0.js.map
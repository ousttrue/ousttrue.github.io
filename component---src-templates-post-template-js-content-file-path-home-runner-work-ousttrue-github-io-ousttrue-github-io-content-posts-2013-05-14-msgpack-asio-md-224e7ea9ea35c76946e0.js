"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9421],{2265:function(e,n,t){t.r(n),t.d(n,{default:function(){return m}});var a=t(1151),s=t(7294);function c(e){const n=Object.assign({p:"p",span:"span"},(0,a.ah)(),e.components);return s.createElement(s.Fragment,null,s.createElement(n.p,null,"msgpack-rpcのasio版を作成中\n連休から始めていたmsgpack-rpcのバックエンドをasioに置き換えてWindowsでも動くようにする試みがやっと目処が立った。"),"\n",s.createElement(n.p,null,"https://github.com/ousttrue/msgpack-asiorpc"),"\n",s.createElement(n.p,null,"改め"),"\n",s.createElement(n.p,null,"https://github.com/ousttrue/msgpack-rpc-asio"),"\n",s.createElement(n.p,null,"当初は ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">msgpack-rpc</code>'}})," のバックエンドの ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mpio</code>'}})," に ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asio</code>'}})," の ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">kernel</code>'}})," を追加することで乗り切ろうとしたのだが、わりとすぐに頓挫した。\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mpio</code>'}})," のファイルディスクリプタでIOを管理するAPIがasioと合わないのですな。\n次に、 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">msgpack-rpc</code>'}})," の ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mp::wavy::loop</code>'}})," をasioをラップしたクラスで置き換える作戦で\n進めていたのだがだいぶ改造して構造が見えてきたところで、 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asio</code>'}})," との設計の違いをラップするのがめんどくさく\nなってまた頓挫した。 http://dev.activebasic.com/egtra/2011/10/27/449/\nを見ると簡単そうに見えるのだが功夫が足らないようだ。\nで、上記の反省を踏まえて ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asio</code>'}})," で ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">msgpack-rpc</code>'}})," を自由に実装することにした。\nバイナリデータと ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">msgpack-rpc</code>'}})," の変換部分に ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">msgpack-rpc</code>'}})," のコードを借用して、\nネットワーク通信部分は ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">asio</code>'}})," で普通に作成した。\nだいたいこんな感じのAPIになる予定。"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">static int server_method(int a, int b) { return a+b; }\n\nint main(int argc, char **argv) { \n    int port=18080;\n    // server\n    boost::io_service server_io;\n    msgpack::asiorpc::server s(server_io);\n    s.add_handler(&amp;server_method, &quot;add&quot;);\n    s.start(boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port));\n    boost::thread server_thread([&amp;server_io](){ server_io.run(); }\n\n    // client\n    boost::io_service client_io;\n    msgpack::asiorpc::session c(server_io); \n    c.connect(boost::asio::ip::tcp::endpoint(boost::asio::ip::address::from_string(&quot;127.0.0.1&quot;), port);\n    boost::thread client_thread([&amp;client_io](){ client_io.run(); }\n\n    // request\n    auto request=c.call(&quot;add&quot;, 3, 4);\n\n    // blocking\n    int result;\n    request.convert(&amp;result);\n    std::cout &lt;&lt; resut &lt;&lt; std::endl;\n\n    // finalize\n    client_io.stop();\n    client_thread.join();\n\n    server_io.stop();\n    server_thread.join();\n\n    return 0;\n}</code></pre></div>'}}),"\n",s.createElement(n.p,null,"原型はだいたいできて ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Windows</code>'}})," でも動いたので続きを作りこんで行きたい。\n今のうちに ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">msgpack::asiorpc</code>'}})," のネームスペースを変えたいような気もするがどうしようかね。\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">msgpack::rpc::asio</code>'}})," とかか？うぅむ。\nあと、クラスを ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">UpperCamelCase</code>'}})," で、関数を ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">lowerCamelCase</code>'}})," に変えよう思っていたが\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">boost</code>'}})," 、 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">msgpack</code>'}})," と一緒に使うときの見栄えを考慮するとスケークケースも一理あるな。\nクラス名と同じ変数名(",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">request</code>'}}),"とか)を使いたいときに変数名をreq等に変えることを強いられることがあるのが\n気に入らないところではあるのだが。\nプロジェクト名を ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">msgpack-rpc-asio</code>'}}),"\nに変えてネームスペースも ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">msgpack::rpc::asio</code>'}})," に変えることに今決めた。"))}var l=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?s.createElement(n,e,s.createElement(c,e)):c(e)},r=t(8678),o=t(8838);const d={code:e=>{let{children:n,className:t}=e;return t?s.createElement(o.Z,{className:t},n):s.createElement("code",null,n)}};function g(e){let{data:n,children:t}=e;return s.createElement(r.Z,null,s.createElement("h1",null,n.mdx.frontmatter.title),s.createElement(a.Zo,{components:d},t))}function m(e){return s.createElement(g,e,s.createElement(l,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-05-14-msgpack-asio-md-224e7ea9ea35c76946e0.js.map
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2017-08-usd-md-8ae8648afb9a20a5e0ad.js","mappings":"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","sources":["webpack:///./content/posts/2017/08/usd.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    span: \"span\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"PixarのUniversal Scene Descriptionをビルドしてみる\"), \"\\n\", React.createElement(_components.p, null, \"20170902。実はビルドスクリプトがあって、簡単になっていた。\"), \"\\n\", React.createElement(_components.p, null, \"動画でCEDEC2017のセッションを聞いてよさげな気がしたので再度やってみた(ちょっと前に途中までやって放置していた)。\\nusdviewが使えるようにするとよいらしい。\"), \"\\n\", React.createElement(_components.h2, null, \"Pixar USD の Windows ビルド方法（2017/9 版）\"), \"\\n\", React.createElement(_components.p, null, \"自動ビルドスクリプトがついているので放っておくだけなのだけど、うまくいかなかったところを補足する。\\n環境は、\", React.createElement(_components.code, null, \"Windows10(64bit)\"), \" + \", React.createElement(_components.code, null, \"VisualStudio2017\"), \" + \", React.createElement(_components.code, null, \"VisualStudio2015 のコンパイラ追加インストール(VisualStudio2017のインストールメニューにある)\"), \"\\nvisualstudio補足\\nVisualStudioは、最近のバージョンに限ってもいろいろある。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"VisualStudio2017(MSVC14.1)のみ\"), \"\\n\", React.createElement(_components.li, null, \"VisualStudio2017(MSVC14.1)にVS2015(MSVC14.0)のコンパイラが追加インストールされている(うちはこれ)\"), \"\\n\", React.createElement(_components.li, null, \"VisualStudio2015(MSVC14.0)のみ\"), \"\\n\", React.createElement(_components.li, null, \"Visual C++ 2015 Build Tools(MSVC14.0)Python3ビルド向けにIDEの無いバージョン)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"ものによって \", React.createElement(_components.code, null, \"vcvars.bat\"), \" の場所が違って、\", React.createElement(_components.code, null, \"bjam\"), \" とか \", React.createElement(_components.code, null, \"distutils\"), \" がコンパイラの発見に失敗したりする場合があるようだ。\\n\", React.createElement(_components.code, null, \"cl.exe\"), \" が見つからないような場合、visualstudioの提供する設定済みのdosプロンプトから始めるのが手堅いかもしれない。\\n一応、\\n\", React.createElement(_components.code, null, \"VisualStudio2017 - x64 native tools command prompt\"), \" からはじめる。\\nCMakeはVisualStudioの検出にあまり失敗しないので、おもにBoostのビルド対策。\\n効果があったかは不明。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">D:\\\\work> cl\\nMicrosoft(R) C/C++ Optimizing Compiler Version 19.10.25019 for x64\\nCopyright (C) Microsoft Corporation.  All rights reserved.\\n\\n使い方: cl [ オプション... ] ファイル名... [ /link リンク オプション... ]</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"VS2017\"), \" しか入っていないとき\\nbuild_usd.py内Boost.Pythonに関してmsvc=14.0指定(VS2015)があるので、これをコメントアウトすればたぶんVS2017しかなくてもビルドできる。Windows版のPython2.7のビルドコンパイラは \", React.createElement(_components.code, null, \"VS2008(MSVC9.0)\"), \" らしい。\"), \"\\n\", React.createElement(_components.p, null, \"https://www.microsoft.com/en-us/download/details.aspx?id=44266\"), \"\\n\", React.createElement(_components.h2, null, \"python補足\"), \"\\n\", React.createElement(_components.p, null, \"Python27以外のPythonが入っているとはまる率が上がる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">D:\\\\work> python -V\\nPython 3.6.0 :: Anaconda 4.3.0 (64-bit)\\n\\n違うPythonだー。\\nD:\\\\work> set PATH=D:\\\\Python27;D:\\\\Python27\\\\Scripts;%PATH%\\nD:\\\\work> python -V\\nPython 2.7.14rc1\\nD:\\\\work> pip install pyside\\nCollecting pyside\\n  Downloading PySide-1.2.4-cp27-none-win_amd64.whl (45.0MB)\\n    100% |################################| 45.0MB 36kB/s\\nInstalling collected packages: pyside\\nSuccessfully installed pyside-1.2.4</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"python使いたるもの２系、３系両方入っていたりするものである。\\ncloneしてビルドスクリプトを実行\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">D:\\\\work> git clone https://github.com/PixarAnimationStudios/USD\\n\\nD:\\\\work> mkdir USD_build\\nD:\\\\work> cd USD_build\\nD:\\\\work\\\\USD_build>\\n\\nD:\\\\work\\\\USD_build> python ..\\\\USD\\\\build_scripts\\\\build_usd.py\\nusage: build_usd.py [-h] [-n] [-v | -q] [--build BUILD]\\n                    [--generator GENERATOR]\\n                    [--build-shared | --build-monolithic] [--src SRC]\\n                    [--inst INST] [--force FORCE_BUILD] [--force-all]\\n                    [--tests | --no-tests] [--docs | --no-docs]\\n                    [--imaging | --usd-imaging | --no-imaging]\\n                    [--ptex | --no-ptex] [--embree | --no-embree]\\n                    [--embree-location EMBREE_LOCATION]\\n                    [--alembic | --no-alembic] [--hdf5 | --no-hdf5]\\n                    [--maya | --no-maya] [--maya-location MAYA_LOCATION]\\n                    [--katana | --no-katana]\\n                    [--katana-api-location KATANA_API_LOCATION]\\n                    [--houdini | --no-houdini]\\n                    [--houdini-location HOUDINI_LOCATION]\\n                    install_dir\\nbuild_usd.py: error: too few arguments\\n\\nD:\\\\work\\\\USD_build> python ..\\\\USD\\\\build_scripts\\\\build_usd.py .\\nERROR: CMake not found -- please install it and adjust your PATH</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"こんな風に足りないツールのメッセージが出るのでせっせとインストールしてパスを設定する。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"set PATH=D:\\\\Program Files\\\\CMake\\\\bin;%PATH%\\nset PATH=D:\\\\Program Files\\\\NASM;%PATH%\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"build…\"), \"\\n\", React.createElement(_components.h2, null, \"Alembicとか無しの最小ビルド。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">D:\\\\work\\\\USD_build> python ..\\\\USD\\\\build_scripts\\\\build_usd.py .\\n\\nBuilding with settings:\\n  USD source directory          D:\\\\work\\\\USD\\n  USD install directory         D:\\\\work\\\\USD_build\\n  3rd-party source directory    D:\\\\work\\\\USD_build\\\\src\\n  3rd-party install directory   D:\\\\work\\\\USD_build\\n  Build directory               D:\\\\work\\\\USD_build\\\\build\\n\\n  Building                      Shared libraries\\n    Imaging                     On\\n      Ptex support:             Off\\n    UsdImaging                  On\\n    Documentation               Off\\n    Tests                       Off\\n    Alembic Plugin              Off\\n      HDF5 support:             Off\\n    Maya Plugin                 Off\\n    Katana Plugin               Off\\n    Houdini Plugin              Off\\n\\n    Dependencies                zlib, boost, TBB, JPEG, TIFF, PNG, OpenEXR, GLEW, OpenImageIO, OpenSubdiv, PyOpenGL\\n\\nSTATUS: Installing zlib...\\nSTATUS: Installing boost...\\nSTATUS: Installing TBB...\\nSTATUS: Installing JPEG...\\nSTATUS: Installing TIFF...\\nSTATUS: Installing PNG...</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"こんな感じに順番にビルドが進んでいく。\"), \"\\n\", React.createElement(_components.h2, null, \"pngのビルドでこけた\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">pngrutil.obj : error LNK2019: 未解決の外部シンボル inflateValidate が関数 png_inflate_claim で参照されました。</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"何故か、zlibへのリンクがうまくいっていない？\\nCMakeのGUIでsourceをUSD_build/src/libpng-1.6.29、buildをD:/dev/_alembic/USD_build/build/libpng-1.6.29にして確認するとZLIB_LIBRARY_RELEASEがC:/Program Files/Anaconda3/Library/lib/z.libになっていてお察し。\\npythonをフルパスで指定したらなんか治った。違うPythonが意図せず使われていたか。\\ndos窓は、whichコマンドが無いしよくわからん。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">work\\\\USD_build> D:\\\\python27\\\\python ..\\\\USD\\\\build_scripts\\\\build_usd.py . --force png\\n\\nSTATUS: Installing PNG...\\nSTATUS: Installing OpenEXR...\\nSTATUS: Installing GLEW...\\nSTATUS: Installing OpenImageIO...\\nSTATUS: Installing OpenSubdiv...\\nSTATUS: Installing PyOpenGL...\\nSTATUS: Installing PyOpenGL...\\nSTATUS: Installing USD...\\n\\nSuccess! To use USD, please ensure that you have:\\n  The following in your PYTHONPATH environment variable:\\n    D:\\\\dev\\\\_alembic\\\\USD_build\\\\lib\\\\python\\n\\n  The following in your PATH environment variable:\\n    D:\\\\dev\\\\_alembic\\\\USD_build\\\\bin\\n    D:\\\\dev\\\\_alembic\\\\USD_build\\\\lib</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"ビルドできた。\"), \"\\n\", React.createElement(_components.h2, null, \"Boost.Pythonメモ\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"boost_python-vc140-mt-1_61.dll\"), \" が \", React.createElement(_components.code, null, \"python36.dll\"), \" とか違うのにリンクしてしまう場合。\\n最悪PythonをすべてアンインストールしてPython27(64bit)だけをインストールすればいけるのだが、それでは負けた気がするのでBoost.Pythonに使うPythonを強制する方法。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">USD_BUILD/user-conifg.jam\\nusing python\\n    : 2.7                   # Version\\n    : C:\\\\\\\\Python27\\\\\\\\python.exe      # Python Path\\n    : C:\\\\\\\\Python27\\\\\\\\include         # include path\\n    : C:\\\\\\\\Python27\\\\\\\\libs            # lib path(s)\\n    ;</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"を作って環境変数 \", React.createElement(_components.code, null, \"BOOST_BUILD_PATH\"), \" を \", React.createElement(_components.code, null, \"user-config.jam\"), \" のあるディレクトリに指定する。\\n\", React.createElement(_components.code, null, \"%USERROFILE%\\\\user-config.jam\"), \" に作って \", React.createElement(_components.code, null, \"BOOST_BUILD_PATH\"), \" 無しでもよいが、消し忘れるとあとではまる可能性が増えると思う。\"), \"\\n\", React.createElement(_components.p, null, \"http://www.boost.org/build/doc/html/bbv2/overview/configuration.html\"), \"\\n\", React.createElement(_components.p, null, \"WindowsのBoost.Pythonは作るときも使うときもリンクではまる。\"), \"\\n\", React.createElement(_components.h2, null, \"usdviewを使ってみる\"), \"\\n\", React.createElement(_components.p, null, \"USD_BUILD/bin/usdviewがある。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">USD_BUILD\\\\bin> D:\\\\python27\\\\python usdview\\n\\nsys.path\\nTraceback (most recent call last):\\n  File \\\"usdview\\\", line 25, in &lt;module>\\n    import pxr.Usdviewq as Usdviewq\\nImportError: No module named pxr.Usdviewq\\n\\nenviron[‘PATH’]\\nTraceback (most recent call last):\\n  File \\\"usdview\\\", line 37, in &lt;module>\\n    Usdviewq.Launcher().Run()\\n  File \\\"D:\\\\dev\\\\_alembic\\\\USD_build\\\\lib\\\\python\\\\pxr\\\\Usdviewq\\\\__init__.py\\\", line 54, in Run\\n    valid = self.ValidateOptions(arg_parse_result)\\n  File \\\"D:\\\\dev\\\\_alembic\\\\USD_build\\\\lib\\\\python\\\\pxr\\\\Usdviewq\\\\__init__.py\\\", line 167, in ValidateOptions\\n    from pxr import Sdf\\n  File \\\"D:\\\\dev\\\\_alembic\\\\USD_build\\\\lib\\\\python\\\\pxr\\\\Sdf\\\\__init__.py\\\", line 24, in &lt;module>\\n    import _sdf\\nImportError: DLL load failed: 指定されたモジュールが見つかりません。</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"usdviewを改造してしまおう。\\n環境変数PATHとPYTHONPATHを追加。\\nusdview.cmd改造でもよいがpythonの方が書きやすいので。\\nusdviewの冒頭のimport前に下記を追加。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> os\\n<span class=\\\"token keyword\\\">import</span> sys\\n\\nbasepath<span class=\\\"token operator\\\">=</span>os<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">.</span>dirname<span class=\\\"token punctuation\\\">(</span>os<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">.</span>dirname<span class=\\\"token punctuation\\\">(</span>os<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">.</span>abspath<span class=\\\"token punctuation\\\">(</span>__file__<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\nbin_dir<span class=\\\"token operator\\\">=</span>os<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">.</span>join<span class=\\\"token punctuation\\\">(</span>basepath<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bin'</span><span class=\\\"token punctuation\\\">)</span>\\nlib_dir<span class=\\\"token operator\\\">=</span>os<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">.</span>join<span class=\\\"token punctuation\\\">(</span>basepath<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'lib'</span><span class=\\\"token punctuation\\\">)</span>\\nlibpython_dir<span class=\\\"token operator\\\">=</span>os<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">.</span>join<span class=\\\"token punctuation\\\">(</span>lib_dir<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'python'</span><span class=\\\"token punctuation\\\">)</span>\\n\\nsys<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">.</span>append<span class=\\\"token punctuation\\\">(</span>libpython_dir<span class=\\\"token punctuation\\\">)</span>\\nos<span class=\\\"token punctuation\\\">.</span>environ<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'PATH'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"%s;%s;\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token punctuation\\\">(</span>bin_dir<span class=\\\"token punctuation\\\">,</span> lib_dir<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> os<span class=\\\"token punctuation\\\">.</span>environ<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'PATH'</span><span class=\\\"token punctuation\\\">]</span>\\n\\n\\n<span class=\\\"token keyword\\\">import</span> pxr<span class=\\\"token punctuation\\\">.</span>Usdviewq <span class=\\\"token keyword\\\">as</span> Usdviewq</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"実行。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">USD_BUILD\\\\bin> D:\\\\python27\\\\python usdview\\nusage: usdview [-h] [--renderer {opt,simple}] [--select PRIMPATH]\\n               [--camera CAMERA] [--mask PRIMPATH[,PRIMPATH...]]\\n               [--clearsettings] [--norender] [--unloaded] [--timing]\\n               [--memstats {none,stage,stageAndImaging}]\\n               [--numThreads NUMTHREADS] [--ff FIRSTFRAME] [--lf LASTFRAME]\\n               [--complexity COMPLEXITY] [--quitAfterStartup]\\n               usdFile\\nusdview: error: too few arguments</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"引数が必要と。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">cube.usd\\n#usda 1.0\\n\\ndef Cube \\\"Cube\\\"\\n{\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"実行。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Warning: in Link at line 180 of D:\\\\dev\\\\_alembic\\\\USD\\\\pxr\\\\imaging\\\\lib\\\\hd\\\\glslProgram.cpp -- Failed to link shader:\\nGeometry shader(s) failed to link.\\nGeometry link error: HW_UNSUPPORTED.\\nERROR: Internal compile error, error code: E_SC_LITERAL_NOT_DEFINED\\nShader not supported by HW</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Windowは出た。しかしglslのエラーで3DViewの描画ができぬ。\\nRx480がだめなのだろうか。\\nGTX買わねば・・・\"), \"\\n\", React.createElement(_components.p, null, \"Alembic追加する\\nToDo\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/08/usd.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","h2","code","ul","li","span","blockquote","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
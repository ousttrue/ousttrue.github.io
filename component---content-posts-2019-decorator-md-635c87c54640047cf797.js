"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4071],{2398:function(e,n,r){r.r(n);var t=r(1151),a=r(7294);function c(e){const n=Object.assign({p:"p",pre:"pre",code:"code"},(0,t.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"引数付きのdecorator"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"def decorator(func):\n    def wrapper(name):\n        return func(name + 'さん')\n    return wrapper\n\n@decorator\ndef hello(name):\n    print(f'hello {name}')\n")),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"def witharg(suffix):\n    def decorator(func):\n        def wrapper(name):\n            return func(name + suffix)\n        return wrapper\n    return decorator\n\n@witharg('殿')\ndef hello(name):\n    print(f'hello {name}')\n")),"\n",a.createElement(n.p,null,"みたいなことができる。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"# デフォルト引数で兼用したいのだが・・・\ndef witharg(suffix = None):\n    def decorator(func):\n        def wrapper(name):\n            return func(name + suffix)\n        return wrapper\n    return decorator\n\n@witharg() # カッコが要るのに注意\ndef hello(name):\n    print(f'hello {name}')\n")),"\n",a.createElement(n.p,null,"デフォルト引数で省略すると嵌るので注意。\n外側を ",a.createElement(n.code,null,"func")," 引数で呼び出してしまう。\ndecorator に引数が定義されていると挙動が変わるのではなく、\n使う時 ",a.createElement(n.code,null,"@")," にカッコがあるときに挙動が変わる。"))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?a.createElement(n,e,a.createElement(c,e)):c(e)}},1151:function(e,n,r){r.d(n,{ah:function(){return c}});var t=r(7294);const a=t.createContext({});function c(e){const n=t.useContext(a);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---content-posts-2019-decorator-md-635c87c54640047cf797.js.map
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2013-05-31-msgpack-rpc-python-md-f335b977f9b881c4a25c.js","mappings":"6JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBP,EAAYG,IAAK,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,KAAM,64GAChG,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCRA,SAASW,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOJ,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMK,EAAKE,IAAIC,YAAYC,OAAQT,EAAAA,cAAoBU,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBnB,GACvC,OAAOQ,EAAAA,cAAoBG,EAAcX,EAAOQ,EAAAA,cAAoBY,EAAqBpB,GAC3F,C,4HCuBO,MAAMqB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBf,GAC/B,MAAMgB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfd,EACFA,EAAWgB,GAGb,IAAIA,KAAsBhB,IAChC,CAACgB,EAAmBhB,GACzB,CAGA,MAAMiB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACX,EAAU,SAAEO,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAflB,EACHA,EAAW,CAAC,GACZA,GAAciB,EAEJF,EAAiBf,GAG5B,gBACLc,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2013/05/31/msgpack-rpc-python.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.pre, null, React.createElement(_components.code, null, \"おれおれmsgpack-rpc-pythonを作る\\nMsgPackRPCのpythonバインディング(クライアント側)が必要になったのでmsgpack-rpc-pythonを使ってみたのだが、\\nGUI(pyqt)に載せて接続制御とエラーハンドリングを細やかに制御したいので俺俺で類似品を作ることにした。\\ntonado-msgpackと名付けて取り合えず作業開始。\\nhttps://github.com/ousttrue/tornado-msgpack\\nmsgpack-rpc-pythonのおかげでtornadoの存在を知ったのだがtornado.ioloopが見れば見るほどboost::asioっぽい。\\nということで、c++で作成中のmsgpack-rpc-asioのpython版のような感じのAPIにしてみた。\\n以下の点を考慮している。\\n\\ntornado.ioloopを隠さない\\ntornado.ioloopをスレッドに乗せて回しっぱなしにする\\ntornado.ioloopひとつで複数の接続を扱う\\ndispatcherを乗せ換え易くする。\\n接続ステータスの変化をコールバックで受け取る\\n非同期リクエストのコールバックを早期にセットする\\nTCP以外は考慮しない\\n\\nプロジェクト作成\\ntonado_msgpack/\\n    setup.py\\n    sample/\\n        sample.py\\n    tonado_msgpack\\n\\nsetup.py\\nfrom distutils.core import setup\\n\\nsetup(\\n    name='tonado_msgpack',\\n    version='0.1',\\n    py_modules=['tonado_msgpack'],\\n    )\\n\\n作業開始\\n$ python setup.py develop --user\\n\\nsample/sample.py\\n#!/usr/bin/env python\\n\\nimport tornado_msgpack\\nimport tornado\\n\\nif __name__==\\\"__main__\\\":\\n    port=18080\\n\\n    # dispatcher\\n    dispatcher=tornado_msgpack.Dispatcher()\\n    def add(a, b):\\n        return a+b\\n    dispatcher.add_handler(\\\"add\\\", add)\\n\\n    # server\\n    server_loop=tornado.ioloop.IOLoop()\\n    def on_receive(msg, session):\\n        result=dispatcher.dispatch(msg)\\n        session.send_async(result)\\n    server=tornado_msgpack.Server(server_loop)\\n    server.listen(\\\"localhost\\\", port)\\n    server_thread=threading.Thread(target=lambda : server_loop.start() )\\n\\n    # clinet\\n    client_loop=tornado.ioloop.IOLoop()\\n    client=tornado_msgpack.Client(client_loop)\\n    def on_status_changed(status):\\n        print(status)\\n    clinet.attach_status_callback(on_status_changed)\\n    client.connect(\\\"localhost\\\", port)\\n    clinet_thread=threading.Thread(target=lambda : client_loop.start() )\\n\\n    # request\\n    def on_receive(result):\\n        print(result)\\n\\n    future=clinet.call_async_with_callback(on_receive, \\\"add\\\", 1)\\n    future.join()\\n\\n    future=clinet.call_async_with_callback(on_receive, \\\"add\\\", 1, 2)\\n    future.join()\\n\\n    future=clinet.call_async_with_callback(on_receive, \\\"add\\\", 1, 2, 3)\\n    future.join()\\n\\n    print(\\\"stop client...\\\")\\n    client_loop.stop()\\n    clinet_thread.join()\\n\\n    print(\\\"stop server...\\\")\\n    server_loop.stop()\\n    server_thread.join()\\n\\n    print(\\\"done\\\")\\n\\nとりあえずこんな感じを予定。\\n./sample/sample.pyでシンタックスエラーが出なくなるところまで確認。\\ntornado_msgpackを順次実装していく。\\nTornado Reference - http://www.tornadoweb.org/en/stable/\\nだいたい動くようになった。\\n$ ./sample/sample\\nconnected\\n<_MainThread(MainThread, started 140102020679424)>:send 9 bytes\\n<Thread(Thread-1, started 140101931136768)>:on_read\\n<Thread(Thread-1, started 140101931136768)>:send 48 bytes\\n<Thread(Thread-2, started 140101918488320)>:on_read\\non_receive:[1, 1, True, 'add() takes exactly 2 arguments (1 given)']\\n<_MainThread(MainThread, started 140102020679424)>:send 10 bytes\\n<Thread(Thread-1, started 140101931136768)>:on_read\\n<Thread(Thread-1, started 140101931136768)>:send 5 bytes\\n<Thread(Thread-2, started 140101918488320)>:on_read\\non_receive:[1, 2, False, 3]\\n<_MainThread(MainThread, started 140102020679424)>:send 11 bytes\\n<Thread(Thread-1, started 140101931136768)>:on_read\\n<Thread(Thread-1, started 140101931136768)>:send 59 bytes\\n<Thread(Thread-2, started 140101918488320)>:on_read\\non_receive:[1, 3, True, 'add() takes exactly 2 positional arguments (3 given)']\\nstop client...\\nstop server...\\ndone\\n\\nサーバースレッドのioloopと、クライアントスレッドのioloopが相互にやり取りしている感じでちゃんと動いている。\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2013/05/31/msgpack-rpc-python.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","pre","code","_provideComponents","components","React","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3610],{4543:function(e,n,t){t.r(n),t.d(n,{default:function(){return E}});var l=t(1151),a=t(7294);function c(e){const n=Object.assign({p:"p",code:"code",span:"span"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"GStreamer をビルドする過程で ",a.createElement(n.code,null,"meson")," を調べたら、存外に良かった。\npython なので、CMake と比べてデバッガをアタッチできるのが圧倒的に楽。\nCMake はステップ実行とかできないからね。"),"\n",a.createElement(n.p,null,"成り行きで GStreamer に続いて、 Gtk4, PyGObject とかをビルドしていたら、\nGtk4 もわりと面白そうなことがわかった。\n昔、Windows では扱いが面倒だった GLArea がさくっと動いた。\nさらに Gtk4 で新しくできた Gsk 層が 2D の SceneGraph ぽくて、\nPyOpenGL と連携して遊べるかもしれない。\nNodeEditor とか Timeline(KeyFrame) Editor 作れないかなぁ。\nPyGObject まわりは、gir(xml) から Python の型ヒント(pyi stub) を生成することで、\nLanguageServer のインテリセンスをそれなりに効かせることができた。\n最近の python では、 ",a.createElement(n.code,null,"Qt")," とか ",a.createElement(n.code,null,"bpy")," といった ",a.createElement(n.code,null,"native extension")," の方が、\n素の python モジュールより型情報が無くなるという逆転現象が起きているのだが、\nPyGObject はほぼ gir(xml) そのままなので、わりといい感じになる。"),"\n",a.createElement(n.p,null,"Gtk のビルドが短時間でできることがわかったので、\nGUI 層は自前ビルドでいけそうな気がしてきた。\nつまり、Linux と Windows 両方を gtk4 でなるべく同じツールを使ってみる。\nGentoo をクリーンインストールして下の層だけ ",a.createElement(n.code,null,"emerge")," で入れた。\nGentoo は USE フラグで ",a.createElement(n.code,null,"-gtk -glib -qt")," などとすることで、依存が連鎖することを止めることができる。"),"\n",a.createElement(n.p,null,"ついでに ",a.createElement(n.code,null,"wayland")," に手を出したところ、",a.createElement(n.code,null,"wayland")," 界隈もビルドツールに\n",a.createElement(n.code,null,"meson")," が導入されているのを発見。\n",a.createElement(n.code,null,"download/clone")," => ",a.createElement(n.code,null,"meson")," を自動化する python スクリプトの作成に着手した。"),"\n",a.createElement(n.p,null,"https://github.com/ousttrue/toprefix"),"\n",a.createElement(n.p,null,"プロトタイプとしてはまぁまぁの使い勝手。\n",a.createElement(n.code,null,"gentoo")," と ",a.createElement(n.code,null,"Windows")," 共用で ",a.createElement(n.code,null,"gtk4")," などをさくっと展開できるようになる。予定。"),"\n",a.createElement(n.p,null,"さらに ",a.createElement(n.code,null,"dotfiles")," の管理でやっている ",a.createElement(n.code,null,"neovim")," のビルドも合流。\ngo 系の ",a.createElement(n.code,null,"ghq"),", ",a.createElement(n.code,null,"fzf")," などの展開や、\nrust 系の ",a.createElement(n.code,null,"wezterm"),", ",a.createElement(n.code,null,"stylua"),", ",a.createElement(n.code,null,"ripgrep")," の展開もこっちに移そうかなと。\nわりと処理のパターンは決まっていて次のうちのどれかになる事が多い。"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">download => extract => build => install: tar ball\ndownload => extract          => install: ビルド済み tar ball\n              clone => build => install: repository</code></pre></div>'}}),"\n",a.createElement(n.p,null,"これにパッチ当てが追加になることがある。"),"\n",a.createElement(n.p,null,"ついでに、\n以前作った ",a.createElement(n.code,null,"blender")," の ",a.createElement(n.code,null,"bpy")," モジュール生成スクリプトなんかも合流することを画策。\n",a.createElement(n.code,null,"svn")," なしで ",a.createElement(n.code,null,"blender")," ビルドできんかね。\nとなると ",a.createElement(n.code,null,"pixar usd")," も ",a.createElement(n.code,null,"llvm")," もビルドしたいわね。\n",a.createElement(n.code,null,"pyxar usd")," は ",a.createElement(n.code,null,"boost")," の除去したいけどね。\nTUI と Desktop のツール系は自前ビルドで遊べるようにしていく。"))}var r=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(c,e)):c(e)},o=t(8678),m=t(4160),u=t(8736);const d={code:e=>{let{children:n,className:t}=e;return t?a.createElement(u.Z,{className:t},n):a.createElement("code",null,n)}};function s(e){let{data:n,children:t}=e;const c=n.mdx.frontmatter;return a.createElement(o.Z,null,a.createElement("h1",null,c.title),a.createElement("div",{className:"tags-index"},c.tags&&c.tags.length>0&&c.tags.map((e=>a.createElement(m.rU,{to:"/tags/"+e+"/",itemProp:"url"},a.createElement("button",null,e))))),a.createElement(l.Zo,{components:d},t))}function E(e){return a.createElement(s,e,a.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2022-1121-build-prefix-md-6d6906d143941842b54c.js.map
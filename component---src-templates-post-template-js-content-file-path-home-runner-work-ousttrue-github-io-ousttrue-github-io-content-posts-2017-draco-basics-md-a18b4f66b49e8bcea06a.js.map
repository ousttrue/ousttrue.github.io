{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-draco-basics-md-a18b4f66b49e8bcea06a.js","mappings":"8JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,OACNC,IAAK,MACLC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,oCAAqC,KAAMO,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,mCAAoC,KAAMO,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,gBAAiBO,EAAAA,cAAoBV,EAAYI,KAAM,KAAM,OAAQ,MAAOM,EAAAA,cAAoBV,EAAYI,KAAM,KAAM,OAAQ,iDAAkDM,EAAAA,cAAoBV,EAAYI,KAAM,KAAM,qBAAsB,wBAAyBM,EAAAA,cAAoBV,EAAYI,KAAM,KAAM,eAAgB,qBAAsBM,EAAAA,cAAoBV,EAAYI,KAAM,KAAM,cAAe,WAAY,KAAMM,EAAAA,cAAoBV,EAAYK,IAAK,KAAMK,EAAAA,cAAoBV,EAAYI,KAAM,CAC5vBO,UAAW,gBACV,42FAAq3F,KAAMD,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,eAAgB,KAAMO,EAAAA,cAAoBV,EAAYM,GAAI,KAAM,KAAMI,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,kDAAmD,KAAMG,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,kCAAmC,KAAMG,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,kCAAmC,MAAO,KAAMG,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,+LAAgM,KAAMO,EAAAA,cAAoBV,EAAYG,EAAG,KAAM,SACvhH,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWd,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCbA,SAASe,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOL,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMM,EAAKE,IAAIC,YAAYC,OAAQV,EAAAA,cAAoBW,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBvB,GACvC,OAAOW,EAAAA,cAAoBI,EAAcf,EAAOW,EAAAA,cAAoBa,EAAqBxB,GAC3F,C,4HCuBO,MAAMyB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBhB,GAC/B,MAAMiB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAff,EACFA,EAAWiB,GAGb,IAAIA,KAAsBjB,IAChC,CAACiB,EAAmBjB,GACzB,CAGA,MAAMkB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACZ,EAAU,SAAEQ,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfnB,EACHA,EAAW,CAAC,GACZA,GAAckB,EAEJF,EAAiBhB,GAG5B,gBACLe,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2017/draco_basics.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Googleのメッシュ圧縮ライブラリDracoの使い方を調査中。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/google/draco\"), \"\\n\", React.createElement(_components.p, null, \"コマンドラインツールから \", React.createElement(_components.code, null, \"obj\"), \" と \", React.createElement(_components.code, null, \"ply\"), \" 形式の読み書きができるのでそこから解読する。\\nポイントクラウドの読み書き\\n点群を表す \", React.createElement(_components.code, null, \"draco::PointCloud\"), \" 型があって、それを継承して面を追加した \", React.createElement(_components.code, null, \"draco::Mesh\"), \" 型がある。\\nまずは、基本となる \", React.createElement(_components.code, null, \"PointCloud\"), \" の読み書き。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"#include \\\"draco/point_cloud/point_cloud.h\\\"\\n#include \\\"draco/point_cloud/point_cloud_builder.h\\\"\\n#include \\\"draco/compression/encode.h\\\"\\n#include \\\"draco/compression/decode.h\\\"\\n\\n\\nstruct Vector3\\n{\\n    float x;\\n    float y;\\n    float z;\\n};\\n\\n/*\\nstatic int AddPositionAttribute(draco::PointCloud *pc, int vertexCount)\\n{\\n    draco::GeometryAttribute va;\\n    va.Init(draco::GeometryAttribute::POSITION, nullptr, 3, draco::DT_FLOAT32, false, \\n        sizeof(float) * 3, 0);\\n    return pc->AddAttribute(va, false, vertexCount);\\n}\\nstatic int AddTexCoordAttribute(draco::PointCloud *pc, int vertexCount)\\n{\\n    draco::GeometryAttribute va;\\n    va.Init(draco::GeometryAttribute::TEX_COORD, nullptr, 2, draco::DT_FLOAT32, false,\\n        sizeof(float) * 2, 0);\\n    return pc->AddAttribute(va, false, vertexCount);\\n}\\nstatic int AddNormaldAttribute(draco::PointCloud *pc, int vertexCount)\\n{\\n    draco::GeometryAttribute va;\\n    va.Init(draco::GeometryAttribute::NORMAL, nullptr, 3, draco::DT_FLOAT32, false,\\n        sizeof(float) * 3, 0);\\n    return pc->AddAttribute(va, false, vertexCount);\\n}\\n*/\\n\\nint main(int argc, char **argv)\\n{\\n    Vector3 vertices[] =\\n    {\\n        {-1, -1, -1},\\n        { -1, 1, -1 },\\n        { 1, 1, -1 },\\n        { 1, -1, -1 },\\n    };\\n\\n    // setup point cloud\\n    /*\\n    draco::PointCloud pc;\\n    pc.set_num_points(_countof(vertices));\\n\\n    {\\n        auto pos_att_id = AddPositionAttribute(&pc, _countof(vertices));\\n        auto attr = pc.attribute(pos_att_id);\\n        auto size = attr->size();\\n        attr->SetAttributeValue(draco::AttributeValueIndex(0), vertices);\\n    }\\n    */\\n    draco::PointCloudBuilder builder;\\n    builder.Start(_countof(vertices));\\n    auto pos_att_id = builder.AddAttribute(draco::GeometryAttribute::POSITION, 3, draco::DT_FLOAT32);\\n    for (int i = 0; i < _countof(vertices); ++i) {\\n        builder.SetAttributeValueForPoint(pos_att_id, draco::PointIndex(i), &vertices[i]);\\n    }\\n    auto res = builder.Finalize(false);\\n\\n    draco::EncoderBuffer encodeBuffer;\\n    {\\n        // encode\\n        draco::Encoder encoder;\\n        auto  status = encoder.EncodePointCloudToBuffer(*res, &encodeBuffer);\\n    }\\n\\n    {\\n        // decode\\n        draco::DecoderBuffer decodeBuffer;\\n        decodeBuffer.Init(encodeBuffer.data(), encodeBuffer.size());\\n\\n        draco::Decoder decoder;\\n        auto statusor = decoder.DecodePointCloudFromBuffer(&decodeBuffer);\\n\\n        auto dpc = std::move(statusor).value();\\n        auto num = dpc->NumNamedAttributes(draco::GeometryAttribute::POSITION);\\n        auto attr = dpc->GetNamedAttribute(draco::GeometryAttribute::POSITION);\\n        std::vector<Vector3> positions(attr->size());\\n        for (int i = 0; i < positions.size(); ++i)\\n        {\\n            attr->ConvertValue<float, 3>(draco::AttributeValueIndex(i), &positions[i].x);\\n        }\\n    }\\n\\n    return 0;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"参考になるファイルは、\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"point_cloud_builder_test.cc(build point cloud)\"), \"\\n\", React.createElement(_components.li, null, \"draco_encoder.cc(obj to draco)\"), \"\\n\", React.createElement(_components.li, null, \"draco_decoder.cc(draco to obj)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"PointCloud -> dracoとdraco->PointCloud->get points は簡単でAPIを素直に呼び出せばいい。\\n問題は如何に PointCloud を構築するか。 draco_encoder から解読したローレベルのAPIでやってみたらうまくいかなかったのだが、draco::PointCloudBuilderを発見した。\\nMeshの読み書き\"), \"\\n\", React.createElement(_components.p, null, \"ToDo…\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/draco_basics.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","pre","ul","li","_provideComponents","components","React","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5382],{7043:function(e,t,n){n.r(t),n.d(t,{default:function(){return d}});var l=n(1151),a=n(7294);function c(e){const t=Object.assign({p:"p",a:"a",code:"code",h2:"h2",span:"span"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.p,null,"rust の FFI に取り組んでいた。\n結局、 sdl binding と imgui binding を自作した。"),"\n",a.createElement(t.p,null,"両方とも、既存の crate があるのに何故わざわざ自作するのかと言えば、\nラップされて使い方が変わったところを学ぶのが面倒くさかったからじゃ。\n",a.createElement(t.a,{href:"https://crates.io/crates/sdl2"},"SDL")," は　",a.createElement(t.code,null,"HWND")," を取得する方法がわかりにくくて ",a.createElement(t.code,null,"SDL_Event")," を ",a.createElement(t.code,null,"imgui")," に渡す方法はわからなかった。\n",a.createElement(t.a,{href:"https://crates.io/crates/imgui"},"imgui")," は最新版の ",a.createElement(t.code,null,"docking")," ブランチが使いたかった。"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://crates.io/crates/clang-sys"},"clang-sys")," を使って rust の FFI コードを生成し、\n",a.createElement(t.a,{href:"https://crates.io/crates/cc"},"cc")," を使って ",a.createElement(t.code,null,"build.rs")," でライブラリをビルドした。\nこれで、 ",a.createElement(t.code,null,"c")," ",a.createElement(t.code,null,"c++")," のライブラリをソースビルドしてスタティックリンクし、 ",a.createElement(t.code,null,"FFI")," で関数を呼び出し放題。"),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"imgui")," の FFI 生成の方が簡単で、 ",a.createElement(t.code,null,"SDL")," の方は C のマクロに苦しんだ(雑に対応)。\nとはいえ、わりと素直に記述できるので快適であった。"),"\n",a.createElement(t.p,null,"おかげで、 rust の FFI 周りに対する習熟度がだいぶ上がった。"),"\n",a.createElement(t.h2,null,"できないこと"),"\n",a.createElement(t.p,null,"POD の struct を return する関数を呼び出すとクラッシュした。"),"\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">ImVec2 ImGui::GetContentRegionAvail();</code></pre></div>'}}),"\n",a.createElement(t.p,null,"D言語だけど"),"\n",a.createElement(t.p,null,"https://forum.dlang.org/thread/dkamxcamwttszxwwxttv@forum.dlang.org"),"\n",a.createElement(t.p,null,"の件らしく、C++ 側でラップした。"),"\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">void pGetContentRegionAvail(ImVec2 *pOut) {\n  if (pOut) {\n    *pOut = GetContentRegionAvail();\n  }\n}</code></pre></div>'}}),"\n",a.createElement(t.h2,null,"自由に static link できる"),"\n",a.createElement(t.p,null,"build.rs を駆使して自由にリンクできるので、スタティックリンクとダイナミックリンクを制御できるので便利。\n特に Windows の場合、システムに共通のライブラリがインストールされていることが期待できないので、\nDLLを作ってコピーした入りパスを通すよりは、スタティックリンクする方が気楽。\n今回は ",a.createElement(t.code,null,"cc")," でコンパイルしたけど、",a.createElement(t.code,null,"c++/c")," は CMake でビルドする方が管理しやすいかもしれない。"))}var r=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.ah)(),e.components);return t?a.createElement(t,e,a.createElement(c,e)):c(e)},s=n(8678),u=n(4160),m=n(8736);const o={code:e=>{let{children:t,className:n}=e;return n?a.createElement(m.Z,{className:n},t):a.createElement("code",null,t)}};function i(e){let{data:t,children:n}=e;const c=t.mdx.frontmatter;return a.createElement(s.Z,null,a.createElement("h1",null,c.title),a.createElement("div",{className:"tags-index"},c.tags&&c.tags.length>0&&c.tags.map((e=>a.createElement(u.rU,{to:"/tags/"+e+"/",itemProp:"url"},a.createElement("button",null,e))))),a.createElement(l.Zo,{components:o},n))}function d(e){return a.createElement(i,e,a.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2021-rust-ffi-md-1803f8700fa0ad245cbf.js.map
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3634],{5910:function(e,t,n){n.r(t);var o=n(1151),c=n(7294);function i(e){const t=Object.assign({p:"p",pre:"pre",code:"code"},(0,o.ah)(),e.components);return c.createElement(c.Fragment,null,c.createElement(t.p,null,"Boost.GIL 再学習"),"\n",c.createElement(t.pre,null,c.createElement(t.code,null,"Boost.GILを再学習。\n{% include_code boost gil practice lang:cpp gil_practice.cpp %}\n前半はオレオレImageクラスの記述で画像の読み書きにboost/gil/extension/ioを使うのを避けるために用意した。boost.gilのioはlibpng,\nligjpegとのリンクが必要になるのでWindowsではめんどくさすぎる。実戦では、QImageとかcv::Matrixといった組み込むアプリの持つ画像クラスと組み合わせて使うことが想定されるので既存の画像からviewを作るやり方を使った。\n{% img /images/gil_practice.png “ImageA” %}\nこんな感じでbitblt的な処理などを簡単に記述できる。\nmemo\n\nhttps://sites.google.com/site/twinkleofsilence/japanese-translation-of-gil-tutorial\nhttp://stlab.adobe.com/gil/html/group___image_view_algorithm.html\n\noctopress\n\nhttp://octopress.org/docs/plugins/image-tag/\nhttp://octopress.org/docs/blogging/code/\n")))}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,o.ah)(),e.components);return t?c.createElement(t,e,c.createElement(i,e)):i(e)}},1151:function(e,t,n){n.d(t,{ah:function(){return i}});var o=n(7294);const c=o.createContext({});function i(e){const t=o.useContext(c);return o.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}}}]);
//# sourceMappingURL=component---content-posts-2013-03-02-gil-md-2669c6b3cbdec1d327f8.js.map
{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2017-blender-addon-vscode-md-b1d9bd6bcbedade76a5d.js","mappings":"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","sources":["webpack:///./content/posts/2017/blender_addon_vscode.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    span: \"span\",\n    strong: \"strong\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"VSCodeのリモートデバッグを利用してBlenderのPythonにデバッガをアタッチする。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://pypi.python.org/pypi/ptvsd\"\n  }, \"PTVSD\")), \"\\n\", React.createElement(_components.p, null, \"VisualStudioのPTVS向けのリモートデバッグモジュール。VSCodeも対応しているらしい。\\nリモート側でptvsdをimportして待ち受けて、VisualStudio側からtcp経由でアタッチする。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> ptvsd\\nptvsd<span class=\\\"token punctuation\\\">.</span>enable_attach<span class=\\\"token punctuation\\\">(</span>secret <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'secret'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'0.0.0.0'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">if</span> os <span class=\\\"token operator\\\">!=</span> <span class=\\\"token string\\\">'Windows'</span><span class=\\\"token punctuation\\\">:</span>\\n    ptvsd<span class=\\\"token punctuation\\\">.</span>wait_for_attach<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># スクリプトが終わらないようにブロックする</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">+--------------+\\n|remoteのpython|\\n|         ptvsd|tcp:3000 &lt;-- VisualStudio attach\\n+--------------+</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"dos窓\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">> netstat -an | find \\\"3000\\\"\\n  TCP         0.0.0.0:3000           0.0.0.0:0              LISTENING</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"確かに待っている。\\nTCP経由なのでptvsd側が、LinuxやRasPi、Blenderの組み込みPythonなどなんであってもアタッチできる。\\n素のPythonでやってみる\"), \"\\n\", React.createElement(_components.p, null, \"Windows10(64bit)\\nPython-3.6\\nPTVSD-3.0.0\"), \"\\n\", React.createElement(_components.p, null, \"PTVSDのバージョンが3.0.0でないと\\nデバッグアダプタープロセスが予期せず終了しました。\"), \"\\n\", React.createElement(_components.p, null, \"等のエラーが出てうまくいかぬ。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/DonJayamanne/pythonVSCode/issues/1039\"), \"\\n\", React.createElement(_components.p, null, \"ptvsdのインストール\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">> py -3.6 -m pip install ptvsd==3.0.0</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"testプロジェクト\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">> mkdir ptvsd_test</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"VSCodeでptvsd_testフォルダを開く。\\ntestスクリプト\\nptvsd_test/main.py\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> time\\n\\n<span class=\\\"token comment\\\"># PTVSDを準備する</span>\\n<span class=\\\"token keyword\\\">import</span> ptvsd\\nlisten <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'0.0.0.0'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">)</span>\\nptvsd<span class=\\\"token punctuation\\\">.</span>enable_attach<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'my_secret'</span><span class=\\\"token punctuation\\\">,</span> listen<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'wait_for_attach...'</span><span class=\\\"token punctuation\\\">,</span> listen<span class=\\\"token punctuation\\\">)</span>\\nptvsd<span class=\\\"token punctuation\\\">.</span>wait_for_attach<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># リモートデバッガの接続を待つ</span>\\n\\ntime<span class=\\\"token punctuation\\\">.</span>sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># 接続後少し待つ</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'connected'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># デバッグするコード</span>\\ni <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token boolean\\\">True</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n    i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1</span>\\n    time<span class=\\\"token punctuation\\\">.</span>sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">>py -3.6 main.py\\nwait_for_attach... ('0.0.0.0', 3000)</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"VSCodeから接続\\nptvsd_test/main.pyを開いてデバッグ開始。構成の追加でpythonを選択する。\"), \"\\n\", React.createElement(_components.p, null, \"ptvsd_test/.vscode/launch.json\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// IntelliSense を使用して利用可能な属性を学べます。</span>\\n    <span class=\\\"token comment\\\">// 既存の属性の説明をホバーして表示します。</span>\\n    <span class=\\\"token comment\\\">// 詳細情報は次を確認してください: https://go.microsoft.com/fwlink/?linkid=830387</span>\\n    <span class=\\\"token property\\\">\\\"version\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0.2.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"configurations\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"Python\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"python\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"request\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"launch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"stopOnEntry\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"pythonPath\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"${config:python.pythonPath}\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"program\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"${file}\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"cwd\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"${workspaceRoot}\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"env\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"envFile\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"${workspaceRoot}/.env\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"debugOptions\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token string\\\">\\\"WaitOnAbnormalExit\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token string\\\">\\\"WaitOnNormalExit\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token string\\\">\\\"RedirectOutput\\\"</span>\\n            <span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// これ</span>\\n            <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"Python: Attach\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"python\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"request\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"attach\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"localRoot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"${workspaceRoot}\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"remoteRoot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"${workspaceRoot}\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"port\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"secret\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"my_secret\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"host\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"localhost\\\"</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n        <span class=\\\"token comment\\\">// 以降省略</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"デバッグの選択メニューでPython:Attachを選択。改めて開始。\\nうまく接続できればデバッグコンソールにprintした内容が表示される。\\nbreakポイントもステップ実行も可能。素晴らしい。\\nBlenderのAddOnでやってみる\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/Barbarbarbarian/Blender-VScode-Debugger\"), \"\\n\", React.createElement(_components.p, null, \"これ。\\nBlenderのPythonにptvsdをインストールする\\nBlenderを起動して以下のスクリプトを実行する。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> sys\\n<span class=\\\"token keyword\\\">for</span> x <span class=\\\"token keyword\\\">in</span> sys<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"適当なパスを選んでそこにptvsd-3.0.0をコピーする。\\nptvsd-3.0.0.zipをダウンロード。\\n解凍してptvsdフォルダをBlenderのsys.pathに含まれていたC:/Program Files/Blender Foundation/Blenderにコピーした。\\nBlender-VScode-Debuggerをインストールする\"), \"\\n\", React.createElement(_components.p, null, \"File - UserPreferences - Add-ons と潜ってinstall Add-on from FileボタンからBlender_VScode_Debugger.pyを選択する。\\nAdd-onsからDevelopment: Debugger for Visual Codeを選択してチェックボックスをOnにする\\n三角を押してPreferencesを展開、Path of PTVSD module:にptvsdをインストールしたパスを設定する(うちではC:/Program Files/Blender Foundation/Blender)\\nSave - User Settings\"), \"\\n\", React.createElement(_components.p, null, \"実行してみる\\n3DViewでspaceを押してConnect to Visual Studio Code Debuggerを選択。\\ndos窓\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">> netstat -an | find \\\"3000\\\"\\n  TCP         0.0.0.0:3000           0.0.0.0:0              LISTENING</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"待っている。\\n試しにAddOnを作ってみる\\n例えばWindows版のBlenderのAddOnパスは\\nC:/Users/\", React.createElement(_components.strong, null, \"USER_NAME\"), \"/AppData/Roaming/Blender Foundation/Blender/2.79/scripts/addons\\nです。\\nHello AddOnを作る。\\nhello.pyとhello/\", React.createElement(_components.strong, null, \"init\"), \".pyという選択肢があるが、後者で作る。\\ngitやVSCodeを使うのだからフォルダが独立している方がよろしい。\\nhelloフォルダを作って、VSCodeでフォルダを開いた。\\nhello/\", React.createElement(_components.strong, null, \"init\"), \".pyを作成。\"), \"\\n\", React.createElement(_components.p, null, \"https://docs.blender.org/manual/en/dev/advanced/scripting/addon_tutorial.html\"), \"\\n\", React.createElement(_components.p, null, \"を参考に。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"python\\\"><pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">bl_info <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Move X Axis\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"category\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Object\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">import</span> bpy\\n\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ObjectMoveX</span><span class=\\\"token punctuation\\\">(</span>bpy<span class=\\\"token punctuation\\\">.</span>types<span class=\\\"token punctuation\\\">.</span>Operator<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"My Object Moving Script\\\"\\\"\\\"</span>      <span class=\\\"token comment\\\"># Use this as a tool-tip for menu items and buttons.</span>\\n    bl_idname <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"object.move_x\\\"</span>        <span class=\\\"token comment\\\"># Unique identifier for buttons and menu items to reference.</span>\\n    bl_label <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Move X by One\\\"</span>         <span class=\\\"token comment\\\"># Display name in the interface.</span>\\n    bl_options <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'REGISTER'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'UNDO'</span><span class=\\\"token punctuation\\\">}</span>  <span class=\\\"token comment\\\"># Enable undo for the operator.</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">execute</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> context<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>        <span class=\\\"token comment\\\"># execute() is called when running the operator.</span>\\n\\n        <span class=\\\"token comment\\\"># The original script</span>\\n        scene <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span>scene\\n        <span class=\\\"token keyword\\\">for</span> obj <span class=\\\"token keyword\\\">in</span> scene<span class=\\\"token punctuation\\\">.</span>objects<span class=\\\"token punctuation\\\">:</span>\\n            obj<span class=\\\"token punctuation\\\">.</span>location<span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1.0</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'FINISHED'</span><span class=\\\"token punctuation\\\">}</span>            <span class=\\\"token comment\\\"># Lets Blender know the operator finished successfully.</span>\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">register</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    bpy<span class=\\\"token punctuation\\\">.</span>utils<span class=\\\"token punctuation\\\">.</span>register_class<span class=\\\"token punctuation\\\">(</span>ObjectMoveX<span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">unregister</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    bpy<span class=\\\"token punctuation\\\">.</span>utils<span class=\\\"token punctuation\\\">.</span>unregister_class<span class=\\\"token punctuation\\\">(</span>ObjectMoveX<span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token comment\\\"># This allows you to run the script directly from Blenders Text editor</span>\\n<span class=\\\"token comment\\\"># to test the add-on without having to install it.</span>\\n<span class=\\\"token keyword\\\">if</span> __name__ <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">\\\"__main__\\\"</span><span class=\\\"token punctuation\\\">:</span>\\n    register<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Blenderを再起動して、AddOnのチェックボックスを有効にする。\\n3DViewでスペースを押してMove X by oneを実行してみる。\\n動けば準備完了。\\nAddOnをステップ実行してみる\"), \"\\n\", React.createElement(_components.p, null, \"3DViewでConnect to Visual Studio Code Debugger\\nVSCodeで構成を追加してRemoteDebuggerでアタッチ\"), \"\\n\", React.createElement(_components.p, null, \"hello/.vscode/launch.json\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\">        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"Python: Attach\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"python\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"request\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"attach\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"localRoot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"${workspaceRoot}\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"remoteRoot\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"${workspaceRoot}\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"port\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"secret\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"my_secret\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token property\\\">\\\"host\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"localhost\\\"</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"VSCodeでexecute関数のscene=context.sceneにbreak pointをセットする\\n3DViewでMove X by one\"), \"\\n\", React.createElement(_components.p, null, \"うまくいった。\"), \"\\n\", React.createElement(_components.h2, null, \"Memo\"), \"\\n\", React.createElement(_components.p, null, \"Blenderプロセスが生きていればいいのでptvsd.wait_for_attach()する必要はない\\nPythonのターンになるまで接続が処理されないので、VSCodeからアタッチした後AddOnを実行するまでVSCodeは待ち状態になる\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2017/blender_addon_vscode.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","span","strong","h2","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","Layout","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
{"version":3,"file":"component---content-posts-2013-cpp-msgpack-rpc-function-template-md-9170282d0eb18c884841.js","mappings":"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","sources":["webpack:///./content/posts/2013/cpp_msgpack-rpc_function_template.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"(記事復旧のついでに少し修正)\"), \"\\n\", React.createElement(_components.p, null, \"msgpack-rpcのリクエストは、によると\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"[type, msgid, method, params]\")), \"\\n\", React.createElement(_components.p, null, \"という形式なのでmethod名をstd::stringとしてparamsをstd::tupleとして得られる。\\nこれをサーバ側で如何に呼び出すかについて。\"), \"\\n\", React.createElement(_components.p, null, \"単純な実装だと以下のようにメソッド名をキーにして分岐することになる。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"int and(int, int);\\n\\nclass dispatcher {\\n\\n    void dispatch(int msgid, const std::string &method, const msgpack::object &params)\\n    {\\n        if(method==“add”){ // 引数展開\\n            std::tuple t; params.convert(&t);\\n\\n            // 関数実行\\n            int result=add(std::get<0>(t), std::get<1>(t));\\n\\n            // 結果のパッキング\\n            // response [type, msgid, error, result]\\n            msgpack::sbuffer response;\\n            msgpack::packer<msgpack::sbuffer> pk(&response);\\n            pk.pack_array(4)\\n            pk.pack(1);\\n            pk.pack(msgid);\\n            pk.pack_nil();\\n            pk.pack(result);\\n\\n            // responseを送り返す\\n        }\\n        else{\\n            throw “unknown func”;\\n        }\\n    }\\n\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"引数展開、関数呼び出し、結果のパッキングと一連の操作を定型処理として括りだすと下記のように書ける。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"// ２引数展開用\\nclass dispatcher {\\n    // 実行\\n    void dispatch(int msgid, const std::string &method, const msgpack::object &params)\\n    {\\n        if(method==“add”)\\n        {\\n            msgpack::sbuffer response=unpack_exec_pack(msgid, add, params);\\n\\n            // responseを送り返す\\n        }\\n        else{\\n            throw “unknown func”;\\n        }\\n    }\\n};\\n\\n// ヘルパー\\ntemplate msgpack::sbuffer unpack_exec_pack(\\n    int msgid, R(*f)(A1, A2), const msgpack::object &params)\\n{\\n    // 引数展開\\n    std::tuple t; params.convert(&t);\\n\\n    // 関数実行\\n    R result=add(std::get<0>(t), std::get<1>(t));\\n\\n    // 結果のパッキング\\n    // response [type, msgid, error, result]\\n    msgpack::sbuffer response;\\n    msgpack::packer<msgpack::sbuffer> pk(&response);\\n    pk.pack_array(4)\\n    pk.pack(1);\\n    pk.pack(msgid);\\n    pk.pack_nil();\\n    pk.pack(result);\\n\\n    return response;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"１引数関数から９引数くらいまでと返り値void版を作ってやればだいたいの関数を登録することができる。\"), \"\\n\", React.createElement(_components.p, null, \"さらに 関数の登録と実行を分けるべく次のように拡張した。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"class dispatcher {\\n    std::map m_map;\\n\\n    // 実行\\n    void dispatch(int msgid, const std::string &method, const msgpack::object &params)\\n    {\\n        std::function f=m_map.find(method);\\n        if(f!=m_map.end()){\\n            // 関数実行\\n            msgpack::sbuffer resonse=f(msgid, params);\\n\\n            // responseを送り返す\\n        }\\n        else{\\n            throw “unknown func”;\\n        }\\n    }\\n\\n    // 登録\\n    template void add_handler(const std::string &method, R(*f)(A1, A2))\\n    {\\n        m_map[method]=f->msgpack::sbuffer{\\n\\n            // 引数展開\\n            std::tuple<A1, A2> t;\\n            params.convert(&t);\\n\\n            // 実行\\n            R result=f(std::get<0>(t), std::get<1>(t));\\n\\n            // 結果のパッキング\\n            // response [type, msgid, error, result]\\n            msgpack::sbuffer response;\\n            msgpack::packer<msgpack::sbuffer> pk(&response);\\n            pk.pack_array(4)\\n            pk.pack(1);\\n            pk.pack(msgid);\\n            pk.pack_nil();\\n            pk.pack(result);\\n\\n            return response;\\n        };\\n    }\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"msgpack->引数展開->c++関数呼び出し->msgpack\"), \" への一連の操作を 同一のシグネチャの\", React.createElement(_components.code, null, \"std::function\"), \" に 封じ込めることができる。\"), \"\\n\", React.createElement(_components.p, null, \"次にこれを関数ポインタ以外に関数オブジェクトを受け付けるように拡張したい。 まず、std::functionから実装。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"// std::function用\\ntemplate<typname R, typename A1, typename A2>\\nvoid add_handler(contt std::string &method, std::function<R(A1, A2)> f)\\n{\\n    // 中身同じ\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"呼び出し時に \", React.createElement(_components.code, null, \"std::function\"), \" を経由するようにすればあらゆる関数呼び出しを登録できる。 例えば、ラムダ関数も以下のように登録できる。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"// ラムダ登録\\ndispatcher d;\\nd.add_handler(\\\"add\\\", std::function<int(int, int)>(\\n    [](int a, int b)->int{ return a+b; }\\n));\\n\")), \"\\n\", React.createElement(_components.p, null, \"しかし、どうせなら\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"dispatcher d;\\nd.add_handler(\\\"add\\\", [](int a, int b)->int{ return a+b; });\\n\")), \"\\n\", React.createElement(_components.p, null, \"と書きたい。\"), \"\\n\", React.createElement(_components.p, null, \"となると下記のような登録関数を書かねばならぬが関数のシグネチャがわからないので中身を記述することができない。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"// ラムダの登録\\ntemplate<typname F>\\nvoid add_handler(const std::string &method, F f)\\n{\\n    // 型がわからぬ\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"ここで関数オブジェクトのoperator()へのポインタを型推論することでFのシグネチャを得ることができる。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"template\\nvoid add_handler(const std::string &method, F f, R(C::*)(A1, A2)const) {\\n    // 中身同じ\\n}\\n// ラムダの登録\\n// std::functionも受けられる\\n// std::bindは無理だった\\n// operator()がひとつしかない関数オブジェクトを受け付けられる？\\n\\ntemplate void add_handler(const std::string &method, F f)\\n{\\n   // 上の関数で型推論させる\\n   add_handler(method, f, &F::operator());\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"これでめでたくラムダも直接登録できるようになった。\\nただし、operator()のオーバーロードが解決できないらしくstd::bindが登録できない。 std::bindに関しては、ラムダで代用できるしstd::functionでラップできるのでおいておくことにした。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","pre","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1942],{6071:function(e,n,t){t.r(n);var l=t(1151),a=t(7294);function c(e){const n=Object.assign({p:"p",code:"code",h2:"h2",pre:"pre",h3:"h3",blockquote:"blockquote",ul:"ul",li:"li",h4:"h4"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,a.createElement(n.code,null,"omnicompletion")," とかいろいろあるけどどう違うねん。ということで調べる。\n",a.createElement(n.code,null,"help ins-completion"),"\n",a.createElement(n.code,null,"help complete-functions")),"\n",a.createElement(n.h2,null,"いろいろな補完"),"\n",a.createElement(n.h2,null,"補完関数を定義"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"<C-X><C-U>")," を ",a.createElement(n.code,null,"set completefunc")," で、\n",a.createElement(n.code,null,"<C-X><C-O>")," を ",a.createElement(n.code,null,"set omnifunc")," でユーザー定義できる。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-vim"},'function! s:my_omni_complete(findstart, base)\n    if a:findstart\n        " 補完の開始列を返す\n        return col(\'.\')\n    endif\n\n    " 補完候補を返す\n    let l:matches =  ["a", "b", "c"]\n    return {\'words\': matches, \'refresh\': \'always\'}\n\nendfunction\n\n"setlocal complefunc = \nsetlocal omnifunc = s:my_omni_complete\n" menuone\nsetlocal completeopt = menu,preview,longest\n" default\nsetlocal previewheight = 3\n"setlocal pumheight\nsetlocal pumwidth = 15\n')),"\n",a.createElement(n.p,null,"のように定義する。"),"\n",a.createElement(n.h3,null,"最初の実行時"),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"On the first invocation the arguments are:\na:findstart  1\na:base\tempty"),"\n"),"\n",a.createElement(n.h3,null,"候補の取得"),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"On the second invocation the arguments are:\na:findstart  0\na:base\tthe text with which matches should match; the text that was\nlocated in the first call (can be empty)"),"\n"),"\n",a.createElement(n.h3,null,"補完候補"),"\n",a.createElement(n.p,null,"単なる文字列か以下のdictionary"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,'{\n\tword\t\tthe text that will be inserted, mandatory\n\tabbr\t\tabbreviation of "word"; when not empty it is used in\n\t\t\tthe menu instead of "word"\n\tmenu\t\textra text for the popup menu, displayed after "word"\n\t\t\tor "abbr"\n\tinfo\t\tmore information about the item, can be displayed in a\n\t\t\tpreview window\n\tkind\t\tsingle letter indicating the type of completion\n\n        v\tvariable\n        f\tfunction or method\n        m\tmember of a struct or class\n        t\ttypedef\n        d\t#define or macro\n\n\ticase\t\twhen non-zero case is to be ignored when comparing\n\t\t\titems to be equal; when omitted zero is used, thus\n\t\t\titems that only differ in case are added\n\tdup\t\twhen non-zero this match will be added even when an\n\t\t\titem with the same word is already present.\n\tempty\t\twhen non-zero this match will be added even when it is\n\t\t\tan empty string\n\tuser_data \tcustom data which is associated with the item and\n\t\t\tavailable in |v:completed_item|\n}\n')),"\n",a.createElement(n.h3,null,"非同期で更新"),"\n",a.createElement(n.h3,null,"自動的にsuggest"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"deoplete"),"\n"),"\n",a.createElement(n.h3,null,"呼び出し例"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-vim"},"inoremap <expr> . MayComplete()\nfunc MayComplete()\n    if (can complete)\n        return \".\\<C-X>\\<C-O>\"\n    endif\n    return '.'\nendfunc\n")),"\n",a.createElement(n.h3,null,"実装例"),"\n",a.createElement(n.h4,null,"vim-lsp"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-vim"},"function! lsp#omni#complete(findstart, base) abort\n    if a:findstart\n        return col('.')\n    else\n        \" language serverに補完候補ををリクエスト\n        call s:send_completion_request(l:info)\n\n        \" 空で抜ける\n        redraw\n        return v:none\n    endif\nendfunc\n")),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-vim"},"\" call s:send_completion_request(l:info) のコールバック\ncall complete(col('.'), l:matches)\n")))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(c,e)):c(e)}},1151:function(e,n,t){t.d(n,{ah:function(){return c}});var l=t(7294);const a=l.createContext({});function c(e){const n=l.useContext(a);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---content-posts-2019-vim-completion-md-e392d7c1064bfb5eb39b.js.map
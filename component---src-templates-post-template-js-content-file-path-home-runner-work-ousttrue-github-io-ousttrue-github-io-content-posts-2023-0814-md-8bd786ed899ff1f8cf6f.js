"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3442],{3590:function(e,n,t){t.r(n),t.d(n,{default:function(){return u}});var a=t(1151),l=t(7294);function s(e){const n=Object.assign({p:"p",span:"span",a:"a"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.p,null,"Windows の ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">conpty</code>'}})," を使うことで、クロスプラットフォームな ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tui</code>'}})," 環境は整ってきた様子。\n要するに ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">curses</code>'}})," への依存を除去して、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">POSIX API</code>'}})," への依存を ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Win32 API</code>'}})," と付け変えできるようにすれば、\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Posix</code>'}})," と ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Windows</code>'}})," 共用のコードにできる。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">go</code>'}})," や ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rust</code>'}})," 界隈の ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tui</code>'}})," アプリ neovim、wezterm なんかで既に達成されている。"),"\n",l.createElement(n.p,null,l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">c++</code>'}})," でも今風の ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">TUI</code>'}})," を作りたいと思っていたのだが、",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">libvterm</code>'}})," と ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FTXUI</code>'}})," を併用することでできそうだ。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">libvterm</code>'}}),", ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FTXUI</code>'}})," 共に ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Windows</code>'}})," ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Unix</code>'}})," 両方で動くコンパクトなライブラリだ。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">libvterm</code>'}})," で vt100 escape sequence を ScreenGrid に翻訳して、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FTXUI</code>'}})," の Screen に描画する。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FTXUI</code>'}})," は ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ScreenGrid</code>'}})," の描画に加えて、",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Posix</code>'}})," と ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Windows</code>'}})," の 入力、resize, mouse をさばくこともできる。"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">          resize\nrawinput  stdin\n----+   +---+---\x3e+---+---\x3e+-------+\nTERM|--\x3e|APP|    |pty|    |process|\n    |   |   |    +---+&lt;---+-------+\n    |   |   |       ^|stdout\n    |   |   |       ||VT100 escape sequence\n    |   |   |       |v\n    |   |   |    +--------+\n    |&lt;--|   |&lt;---|libvterm|\n----+   +---+---\x3e+--------+\nvt100        resize\ndraw</code></pre></div>'}}),"\n",l.createElement(n.p,null,"上の図では、TERM が curses/terminfo で、process が posix であることが多い。\nresize 周りは、",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ioctrl.h</code>'}})," 。\nvt100 parser と TERM への出力が分離されていない難解な塊だったりする。"),"\n",l.createElement(n.p,null,l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">process</code>'}})," まわりは ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">conpty</code>'}})," を使って手作りできる。"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c++"><pre class="language-c++"><code class="language-c++">struct Pty\n{\n  HPC Console; // conpty\n  HANDLE ReadPipe; // child process stdout reader\n  HANDLE WritePipe; // child process stdin writer\n};</code></pre></div>'}}),"\n",l.createElement(n.p,null,l.createElement(n.a,{href:"https://github.com/microsoft/terminal/tree/main/samples/ConPTY/EchoCon"},"https://github.com/microsoft/terminal/tree/main/samples/ConPTY/EchoCon")),"\n",l.createElement(n.p,null,"ReadPipe を thread で ReadFile し、\n別の thread で、hThread を WaitForSingleObject して終了を監視するのがよさそうだ。"),"\n",l.createElement(n.p,null,"あとは、 sixel とか試してみたのだが conpty は sixel を通してくれないみたい。\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">chafa</code>'}})," が ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Windows</code>'}})," でも動いたので、こっちで遊んでみる予定。"),"\n",l.createElement(n.p,null,l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">uim-fep</code>'}})," から ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">posix</code>'}})," をはがして、 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Windows</code>'}})," でも動くようにできないか画策中..."))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?l.createElement(n,e,l.createElement(s,e)):s(e)},r=t(8678),o=t(1883),d=t(8838);const g={code:e=>{let{children:n,className:t}=e;return t?l.createElement(d.Z,{className:t},n):l.createElement("code",null,n)}};function m(e){let{data:n,children:t}=e;const s=n.mdx.frontmatter;return l.createElement(r.Z,null,l.createElement("h1",null,s.title),l.createElement("div",{className:"tags-index"},s.tags&&s.tags.length>0&&s.tags.map((e=>l.createElement(o.rU,{to:"/tags/"+e+"/",itemProp:"url"},l.createElement("button",null,e))))),l.createElement(a.Zo,{components:g},t))}function u(e){return l.createElement(m,e,l.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2023-0814-md-8bd786ed899ff1f8cf6f.js.map
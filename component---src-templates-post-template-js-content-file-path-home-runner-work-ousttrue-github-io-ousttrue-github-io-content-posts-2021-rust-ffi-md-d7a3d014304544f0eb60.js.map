{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-rust-ffi-md-d7a3d014304544f0eb60.js","mappings":"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","sources":["webpack:///./content/posts/2021/rust_ffi.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"rust の FFI に取り組んでいた。\\n結局、 sdl binding と imgui binding を自作した。\"), \"\\n\", React.createElement(_components.p, null, \"両方とも、既存の crate があるのに何故わざわざ自作するのかと言えば、\\nラップされて使い方が変わったところを学ぶのが面倒くさかったからじゃ。\\n\", React.createElement(_components.a, {\n    href: \"https://crates.io/crates/sdl2\"\n  }, \"SDL\"), \" は　\", React.createElement(_components.code, null, \"HWND\"), \" を取得する方法がわかりにくくて \", React.createElement(_components.code, null, \"SDL_Event\"), \" を \", React.createElement(_components.code, null, \"imgui\"), \" に渡す方法はわからなかった。\\n\", React.createElement(_components.a, {\n    href: \"https://crates.io/crates/imgui\"\n  }, \"imgui\"), \" は最新版の \", React.createElement(_components.code, null, \"docking\"), \" ブランチが使いたかった。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://crates.io/crates/clang-sys\"\n  }, \"clang-sys\"), \" を使って rust の FFI コードを生成し、\\n\", React.createElement(_components.a, {\n    href: \"https://crates.io/crates/cc\"\n  }, \"cc\"), \" を使って \", React.createElement(_components.code, null, \"build.rs\"), \" でライブラリをビルドした。\\nこれで、 \", React.createElement(_components.code, null, \"c\"), \" \", React.createElement(_components.code, null, \"c++\"), \" のライブラリをソースビルドしてスタティックリンクし、 \", React.createElement(_components.code, null, \"FFI\"), \" で関数を呼び出し放題。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"imgui\"), \" の FFI 生成の方が簡単で、 \", React.createElement(_components.code, null, \"SDL\"), \" の方は C のマクロに苦しんだ(雑に対応)。\\nとはいえ、わりと素直に記述できるので快適であった。\"), \"\\n\", React.createElement(_components.p, null, \"おかげで、 rust の FFI 周りに対する習熟度がだいぶ上がった。\"), \"\\n\", React.createElement(_components.h2, null, \"できないこと\"), \"\\n\", React.createElement(_components.p, null, \"POD の struct を return する関数を呼び出すとクラッシュした。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"ImVec2 ImGui::GetContentRegionAvail();\\n\")), \"\\n\", React.createElement(_components.p, null, \"D言語だけど\"), \"\\n\", React.createElement(_components.p, null, \"https://forum.dlang.org/thread/dkamxcamwttszxwwxttv@forum.dlang.org\"), \"\\n\", React.createElement(_components.p, null, \"の件らしく、C++ 側でラップした。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"void pGetContentRegionAvail(ImVec2 *pOut) {\\n  if (pOut) {\\n    *pOut = GetContentRegionAvail();\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"自由に static link できる\"), \"\\n\", React.createElement(_components.p, null, \"build.rs を駆使して自由にリンクできるので、スタティックリンクとダイナミックリンクを制御できるので便利。\\n特に Windows の場合、システムに共通のライブラリがインストールされていることが期待できないので、\\nDLLを作ってコピーした入りパスを通すよりは、スタティックリンクする方が気楽。\\n今回は \", React.createElement(_components.code, null, \"cc\"), \" でコンパイルしたけど、\", React.createElement(_components.code, null, \"c++/c\"), \" は CMake でビルドする方が管理しやすいかもしれない。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/rust_ffi.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","code","h2","pre","_provideComponents","components","React","href","className","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
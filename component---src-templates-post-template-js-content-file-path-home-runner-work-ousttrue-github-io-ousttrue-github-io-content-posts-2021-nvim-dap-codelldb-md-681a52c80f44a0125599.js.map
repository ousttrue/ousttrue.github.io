{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-nvim-dap-codelldb-md-681a52c80f44a0125599.js","mappings":"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","sources":["webpack:///./content/posts/2021/nvim_dap_codelldb.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/mfussenegger/nvim-dap\"\n  }, \"nvim-dap\"), \" で rust をデバッグするべく悪戦苦闘中。\\nnvim-dap というのは、来たる nvim-0.5 で動くようになる、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">vscode</code>\"\n    }\n  }), \" のデバッグアダプターを動作させる機能。\"), \"\\n\", React.createElement(_components.p, null, \"rust(Windows) は native debugger をアタッチすればいいので、いくつか選択肢があって\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools\"\n  }, \"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://marketplace.visualstudio.com/items?itemName=lanza.lldb-vscode\"\n  }, \"https://marketplace.visualstudio.com/items?itemName=lanza.lldb-vscode\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb\"\n  }, \"https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"最後の、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">vscode-lldb(codelldb)</code>\"\n    }\n  }), \" \", React.createElement(_components.a, {\n    href: \"https://github.com/vadimcn/vscode-lldb\"\n  }, \"https://github.com/vadimcn/vscode-lldb\"), \" が使いたい。\"), \"\\n\", React.createElement(_components.h2, null, \"codelldb の起動\"), \"\\n\", React.createElement(_components.p, null, \"nvim-dap から \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">codelldb.exe</code>\"\n    }\n  }), \" プロセスは起動している様子。通信がうまくいってないように見える。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">> .\\\\.cache\\\\dein\\\\repos\\\\github.com\\\\puremourning\\\\vimspector\\\\gadgets\\\\windows\\\\CodeLLDB\\\\adapter\\\\codelldb.exe\\nListening on port 55201</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"標準入出力を使うモードになっていないのでは？\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">adapter/src/lib.rs</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"rust\\\"><pre class=\\\"language-rust\\\"><code class=\\\"language-rust\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">fn</span> <span class=\\\"token function-definition function\\\">run_debug_server</span><span class=\\\"token punctuation\\\">(</span>\\n    addr<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token namespace\\\">net<span class=\\\"token punctuation\\\">::</span></span><span class=\\\"token class-name\\\">SocketAddr</span><span class=\\\"token punctuation\\\">,</span>\\n    adapter_settings<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token namespace\\\">debug_protocol<span class=\\\"token punctuation\\\">::</span></span><span class=\\\"token class-name\\\">AdapterSettings</span><span class=\\\"token punctuation\\\">,</span>\\n    multi_session<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">bool</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> listener <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">TcpListener</span><span class=\\\"token punctuation\\\">::</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>addr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">await</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unwrap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token macro property\\\">println!</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Listening on port {}\\\"</span><span class=\\\"token punctuation\\\">,</span> listener<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">local_addr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unwrap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">port</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"遡る。 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">main -> debug_server -> entry -> run_debug_server</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"rust\\\"><pre class=\\\"language-rust\\\"><code class=\\\"language-rust\\\"><span class=\\\"token keyword\\\">fn</span> <span class=\\\"token function-definition function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">-></span> <span class=\\\"token class-name\\\">Result</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token namespace\\\">env_logger<span class=\\\"token punctuation\\\">::</span></span><span class=\\\"token class-name\\\">Builder</span><span class=\\\"token punctuation\\\">::</span><span class=\\\"token function\\\">from_default_env</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">init</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">let</span> matches <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">App</span><span class=\\\"token punctuation\\\">::</span><span class=\\\"token function\\\">new</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"codelldb\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">arg</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Arg</span><span class=\\\"token punctuation\\\">::</span><span class=\\\"token function\\\">with_name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"port\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">long</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"port\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">takes_value</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">arg</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Arg</span><span class=\\\"token punctuation\\\">::</span><span class=\\\"token function\\\">with_name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"multi-session\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">long</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"multi-session\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">arg</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Arg</span><span class=\\\"token punctuation\\\">::</span><span class=\\\"token function\\\">with_name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"preload\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">long</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"preload\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">multiple</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">takes_value</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">arg</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Arg</span><span class=\\\"token punctuation\\\">::</span><span class=\\\"token function\\\">with_name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"liblldb\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">long</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"liblldb\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">takes_value</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">arg</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Arg</span><span class=\\\"token punctuation\\\">::</span><span class=\\\"token function\\\">with_name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"params\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">long</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"params\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">takes_value</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subcommand</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">SubCommand</span><span class=\\\"token punctuation\\\">::</span><span class=\\\"token function\\\">with_name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"terminal-agent\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">arg</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Arg</span><span class=\\\"token punctuation\\\">::</span><span class=\\\"token function\\\">with_name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"port\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">long</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"port\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">takes_value</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get_matches</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token keyword\\\">let</span> <span class=\\\"token class-name\\\">Some</span><span class=\\\"token punctuation\\\">(</span>matches<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> matches<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subcommand_matches</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"terminal-agent\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token namespace\\\">terminal_agent<span class=\\\"token punctuation\\\">::</span></span><span class=\\\"token function\\\">terminal_agent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>matches<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">debug_server</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>matches<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"どうやら、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">executable</code>\"\n    }\n  }), \" かつ \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stdio ではなく tcp</code>\"\n    }\n  }), \" 通信というタイプで nvim-dap では未対応ということでよさそう。？\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"起動\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Listening on port XXXXX</code>\"\n    }\n  }), \" メッセージから port を得る\"), \"\\n\", React.createElement(_components.li, null, \"そのポートに対して TCP 接続という手順が必要\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://code.visualstudio.com/api/extension-guides/debugger-extension#alternative-approach-to-develop-a-debugger-extension\"\n  }, \"https://code.visualstudio.com/api/extension-guides/debugger-extension#alternative-approach-to-develop-a-debugger-extension\")), \"\\n\", React.createElement(_components.p, null, \"の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">DebugAdapterServer</code>\"\n    }\n  }), \" タイプにあたる。\"), \"\\n\", React.createElement(_components.h2, null, \"nvim-dap の改造を試みる\"), \"\\n\", React.createElement(_components.p, null, \"adapter.type \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">executable</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">server</code>\"\n    }\n  }), \" に加えて、第3の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">executable_server</code>\"\n    }\n  }), \" を作れるか。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token keyword\\\">local</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">run_adapter</span><span class=\\\"token punctuation\\\">(</span>adapter<span class=\\\"token punctuation\\\">,</span> configuration<span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">local</span> name <span class=\\\"token operator\\\">=</span> configuration<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token keyword\\\">or</span> <span class=\\\"token string\\\">'[no name]'</span>\\n  <span class=\\\"token keyword\\\">local</span> options <span class=\\\"token operator\\\">=</span> adapter<span class=\\\"token punctuation\\\">.</span>options <span class=\\\"token keyword\\\">or</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n  opts <span class=\\\"token operator\\\">=</span> vim<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">tbl_extend</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'keep'</span><span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    cwd <span class=\\\"token operator\\\">=</span> options<span class=\\\"token punctuation\\\">.</span>cwd<span class=\\\"token punctuation\\\">,</span>\\n    env <span class=\\\"token operator\\\">=</span> options<span class=\\\"token punctuation\\\">.</span>env\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> adapter<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'executable'</span> <span class=\\\"token keyword\\\">then</span>\\n    lazy<span class=\\\"token punctuation\\\">.</span>progress<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">report</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Running: '</span> <span class=\\\"token operator\\\">..</span> name<span class=\\\"token punctuation\\\">)</span>\\n    M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">launch</span><span class=\\\"token punctuation\\\">(</span>adapter<span class=\\\"token punctuation\\\">,</span> configuration<span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">elseif</span> adapter<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'server'</span> <span class=\\\"token keyword\\\">then</span>\\n    lazy<span class=\\\"token punctuation\\\">.</span>progress<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">report</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Running: '</span> <span class=\\\"token operator\\\">..</span> name<span class=\\\"token punctuation\\\">)</span>\\n    M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attach</span><span class=\\\"token punctuation\\\">(</span>adapter<span class=\\\"token punctuation\\\">.</span>host<span class=\\\"token punctuation\\\">,</span> adapter<span class=\\\"token punctuation\\\">.</span>port<span class=\\\"token punctuation\\\">,</span> configuration<span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">elseif</span> adapter<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'executable_server'</span> <span class=\\\"token keyword\\\">then</span> <span class=\\\"token comment\\\">-- 👈これを追加した</span>\\n    lazy<span class=\\\"token punctuation\\\">.</span>progress<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">report</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Running: '</span> <span class=\\\"token operator\\\">..</span> name<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\">-- local session = M.launch(adapter, configuration, opts)</span>\\n    <span class=\\\"token keyword\\\">local</span> stdin<span class=\\\"token punctuation\\\">,</span> stdout<span class=\\\"token punctuation\\\">,</span> stderr <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">executable_server</span><span class=\\\"token punctuation\\\">(</span>adapter<span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\">-- `Error executing luv callback: vimL function must not be called in a lua loop callback`</span>\\n    vim<span class=\\\"token punctuation\\\">.</span>loop<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">read_start</span><span class=\\\"token punctuation\\\">(</span>stdout<span class=\\\"token punctuation\\\">,</span> vim<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">schedule_wrap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">-- codelldb の出力から port を得る</span>\\n      <span class=\\\"token comment\\\">-- Lisening on port xxxxx</span>\\n      <span class=\\\"token keyword\\\">local</span> port <span class=\\\"token operator\\\">=</span> string<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Listening on port (%d+)\\\"</span> <span class=\\\"token punctuation\\\">)</span>\\n      M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">nil</span><span class=\\\"token punctuation\\\">,</span> port<span class=\\\"token punctuation\\\">,</span> configuration<span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">else</span>\\n    <span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">format</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Invalid adapter type %s, expected `executable` or `server`'</span><span class=\\\"token punctuation\\\">,</span> adapter<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">executable_server</span><span class=\\\"token punctuation\\\">(</span>adapter<span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">local</span> uv <span class=\\\"token operator\\\">=</span> vim<span class=\\\"token punctuation\\\">.</span>loop\\n  <span class=\\\"token keyword\\\">local</span> stdin <span class=\\\"token operator\\\">=</span> uv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">new_pipe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">local</span> stdout <span class=\\\"token operator\\\">=</span> uv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">new_pipe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">local</span> stderr <span class=\\\"token operator\\\">=</span> uv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">new_pipe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">local</span> handle\\n  <span class=\\\"token keyword\\\">local</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">onexit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    stdin<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    stdout<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    stderr<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    handle<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n  <span class=\\\"token keyword\\\">local</span> options <span class=\\\"token operator\\\">=</span> adapter<span class=\\\"token punctuation\\\">.</span>options <span class=\\\"token keyword\\\">or</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">local</span> pid_or_err\\n  handle<span class=\\\"token punctuation\\\">,</span> pid_or_err <span class=\\\"token operator\\\">=</span> uv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">spawn</span><span class=\\\"token punctuation\\\">(</span>adapter<span class=\\\"token punctuation\\\">.</span>command<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    args <span class=\\\"token operator\\\">=</span> adapter<span class=\\\"token punctuation\\\">.</span>args<span class=\\\"token punctuation\\\">;</span>\\n    stdio <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>stdin<span class=\\\"token punctuation\\\">,</span> stdout<span class=\\\"token punctuation\\\">,</span> stderr<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    cwd <span class=\\\"token operator\\\">=</span> options<span class=\\\"token punctuation\\\">.</span>cwd<span class=\\\"token punctuation\\\">;</span>\\n    env <span class=\\\"token operator\\\">=</span> options<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">;</span>\\n    detached <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> onexit<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">assert</span><span class=\\\"token punctuation\\\">(</span>handle<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Error running '</span> <span class=\\\"token operator\\\">..</span> adapter<span class=\\\"token punctuation\\\">.</span>command <span class=\\\"token operator\\\">..</span> <span class=\\\"token string\\\">': '</span> <span class=\\\"token operator\\\">..</span> pid_or_err<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> stdin<span class=\\\"token punctuation\\\">,</span> stdout<span class=\\\"token punctuation\\\">,</span> stderr\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token keyword\\\">function</span> M<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attach</span><span class=\\\"token punctuation\\\">(</span>host<span class=\\\"token punctuation\\\">,</span> port<span class=\\\"token punctuation\\\">,</span> config<span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> session <span class=\\\"token keyword\\\">then</span>\\n    session<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token keyword\\\">not</span> config<span class=\\\"token punctuation\\\">.</span>request <span class=\\\"token keyword\\\">then</span>\\n    <span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'config needs the `request` property which must be one of `attach` or `launch`'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n  <span class=\\\"token comment\\\">-- initialize が早すぎるので config を connect 引数に</span>\\n  session <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'dap.session'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>host<span class=\\\"token punctuation\\\">,</span> port<span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">,</span> config<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> session\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token keyword\\\">function</span> Session<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>host<span class=\\\"token punctuation\\\">,</span> port<span class=\\\"token punctuation\\\">,</span> opts<span class=\\\"token punctuation\\\">,</span> config<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">local</span> session <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">session_defaults</span><span class=\\\"token punctuation\\\">(</span>opts <span class=\\\"token keyword\\\">or</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token function\\\">setmetatable</span><span class=\\\"token punctuation\\\">(</span>session<span class=\\\"token punctuation\\\">,</span> self<span class=\\\"token punctuation\\\">)</span>\\n  self<span class=\\\"token punctuation\\\">.</span>__index <span class=\\\"token operator\\\">=</span> self\\n\\n  <span class=\\\"token keyword\\\">local</span> client <span class=\\\"token operator\\\">=</span> uv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">new_tcp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  session<span class=\\\"token punctuation\\\">.</span>client <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    write <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>line<span class=\\\"token punctuation\\\">)</span> \\n        client<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span>line<span class=\\\"token punctuation\\\">)</span> \\n    <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">;</span>\\n    close <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      client<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">shutdown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      client<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  client<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>host <span class=\\\"token keyword\\\">or</span> <span class=\\\"token string\\\">'127.0.0.1'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">tonumber</span><span class=\\\"token punctuation\\\">(</span>port<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">then</span> <span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">end</span>\\n    client<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">read_start</span><span class=\\\"token punctuation\\\">(</span>rpc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create_read_loop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>body<span class=\\\"token punctuation\\\">)</span>\\n      session<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">handle_body</span><span class=\\\"token punctuation\\\">(</span>body<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token comment\\\">-- connect が成立してから initialize を送る</span>\\n    session<span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">initialize</span><span class=\\\"token punctuation\\\">(</span>config<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">end</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> session\\n<span class=\\\"token keyword\\\">end</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"動いた。 PR 作ろう。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/nvim_dap_codelldb.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","span","ul","li","h2","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
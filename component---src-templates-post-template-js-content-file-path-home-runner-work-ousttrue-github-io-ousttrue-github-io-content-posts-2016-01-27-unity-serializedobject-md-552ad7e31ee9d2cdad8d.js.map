{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2016-01-27-unity-serializedobject-md-552ad7e31ee9d2cdad8d.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,iCAAkC,KAAMK,EAAAA,cAAoBR,EAAYI,IAAK,KAAMI,EAAAA,cAAoBR,EAAYK,KAAM,KAAM,wzFAC3N,CAKA,MAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCTA,SAASY,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOJ,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMK,EAAKE,IAAIC,YAAYC,OAAQT,EAAAA,cAAoBU,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBpB,GACvC,OAAOS,EAAAA,cAAoBG,EAAcZ,EAAOS,EAAAA,cAAoBY,EAAqBrB,GAC3F,C,4HCuBO,MAAMsB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBf,GAC/B,MAAMgB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfd,EACFA,EAAWgB,GAGb,IAAIA,KAAsBhB,IAChC,CAACgB,EAAmBhB,GACzB,CAGA,MAAMiB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACX,EAAU,SAAEO,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAflB,EACHA,EAAW,CAAC,GACZA,GAAciB,EAEJF,EAAiBf,GAG5B,gBACLc,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2016/01/27/unity_serializedobject.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Unity の SerializedObject のメモ。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"PropertyDrawers have two uses:\\n- Customize the GUI of every instance of a Serializable class.\\n- Customize the GUI of script members with custom PropertyAttributes.\\n\\nできることは２つ。\\nSerializeable classのPropertyDrawerを定義する。\\nPropertyAttributeを定義して既存のSerializable classのPropertyDrawerを差し替える。\\nNot Serializableなclassに対してPropertyDrawerを定義することはできぬ(TimeSpanとかね)。\\nPropertyDrawerを定義してみる\\nusing UnityEngine;\\n#if UNITY_EDITOR\\nusing UnityEditor;\\n#endif\\n\\npublic class SampleAttribute : PropertyAttribute\\n{\\n}\\n\\n#if UNITY_EDITOR\\n[CustomPropertyDrawer(typeof(SampleAttribute))]\\npublic class SampleDrawer : PropertyDrawer\\n{\\n    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)\\n    {\\n        var sampleAttribute = (SampleAttribute)attribute;\\n        Debug.Log(property);\\n        EditorGUI.PropertyField(position, property, new GUIContent(\\\"Hoge\\\"));\\n    }\\n}\\n#endif\\n\\npublic class SampleBehaviour : MonoBehaviour\\n{\\n    [Sample]\\n    public int Value;\\n}\\n\\nproperty.Path\\n(x:14.00, y:154.00, width:266.00, height:16.00) path: Value\\n\\nOnGUIでデバッグプリント\\n        Debug.LogFormat(\\\"{0} path: {1}\\\", position, property.propertyPath);\\n\\nなるほど。次のプロパティではどうか。\\n    [Sample]\\n    public List<int> ValueArray;\\n\\n    [Sample]\\n    public List<int> ValueList;\\n\\nOnGUIが呼ばれぬ。プリミティブ型以外はだめなのか？\\nかと思いきや中身に対して呼ばれることが分かった。\\n配列、Listの中身に対してPropertyDrawerが呼ばれる。\\n(x:14.00, y:208.00, width:258.00, height:16.00) path: ValueArray.Array.data[0]\\n(x:14.00, y:262.00, width:258.00, height:16.00) path: ValueList.Array.data[0]\\n\\nSerializable class\\npublic enum IngredientUnit { Spoon, Cup, Bowl, Piece }\\n\\n// Custom serializable class\\n[Serializable]\\npublic class Ingredient\\n{\\n    [Sample]\\n    public string name;\\n\\n    [Sample]\\n    public int amount = 1;\\n\\n    [Sample]\\n    public IngredientUnit unit;\\n}\\n\\n    public Ingredient ingredient;\\n\\n    public List<Ingredient> ingredientList;\\n\\n(x:14.00, y:298.00, width:258.00, height:16.00) path: ingredient.name\\n(x:14.00, y:406.00, width:258.00, height:16.00) path: ingredientList.Array.data[0].name\\n\\nCustomEditor\\nデフォルトと同じ挙動。DrawDefaultInspector()の前後にボタンを追加したりできる。\\n[CustomEditor(typeof(SampleBehaviour))]\\npublic class ObjectGeneratorEditor : Editor\\n{\\n    public override void OnInspectorGUI()\\n    {\\n        DrawDefaultInspector();\\n    }\\n}\\n\\nSerializedObjectのPropertyを列挙してみる\\n    public override void OnInspectorGUI()\\n    {\\n        serializedObject.Update();\\n\\n        var it = serializedObject.GetIterator();\\n        bool hasNext = it.NextVisible(true);\\n        while(hasNext)\\n        {\\n            //Debug.Log(it.propertyPath);\\n            var expand = EditorGUILayout.PropertyField(it, false);\\n            hasNext=it.NextVisible(expand);\\n        }\\n\\n        serializedObject.ApplyModifiedProperties();\\n    }\\n\\n\\nEditorGUIの関数はpositionが必要\\nEditorGUILayoutはposition無用。\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2016/01/27/unity_serializedobject.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","React","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
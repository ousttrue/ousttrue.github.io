{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2021-fall-nikola-md-3292f0a3ac2d37bc6de5.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,mBAAoB,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,0BAA2B,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,CAClOI,wBAAyB,CACvBC,OAAQ,46JAGd,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWZ,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BCVA,MAAMO,EAAa,CACjBM,KAAMC,IAA2B,IAA1B,SAACC,EAAQ,UAAEC,GAAUF,EAC1B,OAAOE,EAAYR,EAAAA,cAAoBS,EAAAA,EAAsB,CAC3DD,UAAWA,GACVD,GAAYP,EAAAA,cAAoB,OAAQ,KAAMO,EAAS,GAG9D,SAASG,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEL,GAASI,EACpC,MAAME,EAAcD,EAAKE,IAAID,YAC7B,OAAOb,EAAAA,cAAoBe,EAAAA,EAAQ,KAAMf,EAAAA,cAAoB,KAAM,KAAMa,EAAYG,OAAQhB,EAAAA,cAAoB,MAAO,CACtHQ,UAAW,cACVK,EAAYI,MAAQJ,EAAYI,KAAKC,OAAS,GAAKL,EAAYI,KAAKE,KAAIC,GAClEpB,EAAAA,cAAoBqB,EAAAA,GAAM,CAC/BC,GAAI,SAASF,EAAG,IAChBG,SAAU,OACTvB,EAAAA,cAAoB,SAAU,KAAMoB,OACpCpB,EAAAA,cAAoBwB,EAAAA,GAAa,CACpCzB,WAAYA,GACXQ,GACL,CACe,SAASkB,EAAiBjC,GACvC,OAAOQ,EAAAA,cAAoBU,EAAclB,EAAOQ,EAAAA,cAAoB0B,EAAqBlC,GAC3F,C","sources":["webpack:///./content/posts/2021/fall/nikola.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"また生成システムを変えてみる。\"), \"\\n\", React.createElement(_components.p, null, \"https://getnikola.com/\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">\\n# init\\n\\n\\n> pip install \\\"Nikola[extras]\\\"\\n> nikola init .\\n\\n\\nhttps://github.com/github/gitignore/blob/master/community/Python/Nikola.gitignore\\n.gitignore\\n# nikola\\n.doit.db*\\n*.pyc\\n/cache/\\n/output/\\n\\n\\n`conf.py`\\npy\\n# とりあえず\\nPOSTS = (\\n    (\\\"content/*.rst\\\", \\\"posts\\\", \\\"post.tmpl\\\"),\\n    (\\\"content/*.md\\\", \\\"posts\\\", \\\"post.tmpl\\\"),\\n    (\\\"content/*.txt\\\", \\\"posts\\\", \\\"post.tmpl\\\"),\\n    (\\\"content/*.html\\\", \\\"posts\\\", \\\"post.tmpl\\\"),\\n)\\n\\n\\n\\n> nikola auto --browser\\n\\n\\nなんとなくプレビューできた。\\nええやん。\\n\\n# zola から記事移植\\n\\n`POSTS` のパス調整でもうできているのだけど、 `frontmatter` の非互換がある。\\nそれを調べる。\\n\\nhttps://getnikola.com/handbook.html#metadata-fields\\n\\n* `taxonomies.tags` を `tags` に書き換える\\n\\n小文字強制\\npy\\nMETADATA_VALUE_MAPPING = {\\n    \\\"toml\\\": {\\n        \\\"tags\\\": lambda ls: [x.lower() for x in ls]\\n     }\\n}\\n\\n# github action で gh-pages\\n\\n`.github/workflows/nikola.yml`\\n\\nこんなもんかな。\\n\\nyml\\nname: Nikola\\n\\non:\\n  push:\\n    branches:\\n      - nikola\\n\\njobs:\\n  build:\\n    runs-on: ubuntu-latest\\n    env:\\n      ACTIONS_ALLOW_UNSECURE_COMMANDS: true\\n    steps:\\n      - uses: actions/checkout@v1\\n      - run: pip install \\\"Nikola[extras]\\\"\\n      - name: build\\n        run: nikola build\\n      - name: Deploy\\n        uses: peaceiris/actions-gh-pages@v3\\n        with:\\n          github_token: ${{ secrets.GITHUB_TOKEN }}\\n          publish_dir: ./output\\n\\n\\n\\n## 動作\\n\\nhttps://getnikola.com/internals.html\\n\\n## yapsy\\n\\nhttps://getnikola.com/extending.html\\n\\n`nikola/plugin_categories.py`\\n\\nhttp://yapsy.sourceforge.net/\\n\\n## build\\n\\n[DoIt](https://pydoit.org/) で駆動されるらしい。\\n\\nnikola は DoIt の task を生成する。\\n\\n* https://schettino72.wordpress.com/2008/04/14/doit-a-build-tool-tale/\\n* [タスクランナー Doit を使ってみよう](https://qiita.com/iisaka51/items/052ffbd9ab3b12504228)\\n\\n## Theme\\n\\n* https://getnikola.com/creating-a-theme.html\\n* https://getnikola.com/theming.html\\n* [Nikola を windows でやるぞ 2](https://iuk.hateblo.jp/entry/2016/10/28/040908)\\n\\n\\n* `themes/custom` フォルダを作る\\n* `conf.py` の `THEME = \\\"custom\\\"`\\n\\n最低限\\n\\n| path                   | url | 必須   |                                                             |\\n|------------------------|-----|--------|-------------------------------------------------------------|\\n| bundles                |     | 必須   | 空ファイルでもOk。copy from nikola/data/themes/base/bundles |\\n| assets                 |     | option | copy from nikola/data/themes/base/assets                    |\\n| templates/index.tmpl   | /   | 必須   | top page                                                    |\\n| templates/post.tmpl    |     | 必須   | 各記事                                                      |\\n| templates/page.tmpl    |     | 必須   | 各記事                                                      |\\n| templates/list.tmpl    |     | 必須   | archive.html                                                |\\n| templates/archive.tmpl |     | 必須   | {YEARE}/ archive.html から 年別 リンクをたどったところ      |\\n| templates/tags.tmpl    |     | 必須   | categories/index.html                                       |\\n| templates/tag.tmpl     |     | 必須   | categories/{TAG_NAME}/index.html                            |\\n| templates/gallery.tmpl |     | 必須   |                                                             |\\n| templates/listing.tmpl |     | 必須   |                                                             |\\n| THEME_NAME.theme       |     | option | Theme meta files                                            |\\n| templates/base.tmpl    |     | option | すべての tmpl が継承することで一貫した見た目にする          |\\n\\n### bundles and assets\\n\\n`lib/python3.9/site-packages/nikola/data/themes/base` からコピーするとよさそう。\\n\\n### base.tmpl\\n\\nhtml\\n&lt;html>\\n\\n&lt;body>\\n    &lt;h1 id=\\\"brand\\\">\\n        &lt;a href=\\\"{{ _link('root', None, lang) }}\\\" title=\\\"{{ blog_title|e }}\\\" rel=\\\"home\\\">\\n            &lt;span id=\\\"blog-title\\\">{{ blog_title|e }}&lt;/span>\\n        &lt;/a>\\n    &lt;/h1>\\n    &lt;hr>\\n    &lt;main id=\\\"content\\\">\\n        {% block content %}{% endblock %}\\n    &lt;/main>\\n&lt;/body>\\n\\n&lt;/html>\\n\\n\\n### index.tmpl\\n\\nhtml\\n{% extends 'base.tmpl' %}\\n\\n{% block content %}\\n{% if prevlink %}\\n&lt;a href=\\\"{{ prevlink }}\\\" rel=\\\"prev\\\">prev&lt;/a>\\n{% endif %}\\n\\n{% for post in posts %}\\n&lt;h1 class=\\\"p-name entry-title\\\">\\n    &lt;a href=\\\"{{ post.permalink() }}\\\" class=\\\"u-url\\\">{{ post.title()|e }}&lt;/a>\\n&lt;/h1>\\n{% endfor %}\\n\\n{% if nextlink %}\\n&lt;a href=\\\"{{ nextlink }}\\\" rel=\\\"next\\\">next&lt;/a>\\n{% endif %}\\n{% endblock %}\\n\\n\\n### post.tmpl\\n\\nhtml\\n{% extends 'base.tmpl' %}\\n\\n{% block content %}\\n&lt;h1 class=\\\"p-name entry-title\\\" itemprop=\\\"headline name\\\">\\n    &lt;a href=\\\"{{ post.permalink() }}\\\" class=\\\"u-url\\\">{{ post.title()|e}}&lt;/a>\\n&lt;/h1>\\n{{ post.text() }}\\n{% endblock %}\\n\\n\\n### THEME_NAME.theme\\n\\n\\n[Theme]\\nengine = jinja\\n\\n\\n## vscode\\n\\n`settings.json`\\n\\njson\\n    \\\"files.associations\\\": {\\n        \\\"*.tmpl\\\": \\\"html\\\",\\n    },\\n\\n\\n## ToDo\\n\\n* Theme 調整\\n* TOC\\n* syntax highlight</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/fall/nikola.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
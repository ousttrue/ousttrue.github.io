{"version":3,"file":"component---content-posts-2017-07-cmake-2017-md-ac685e53bdcc2401ab12.js","mappings":"yHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBP,EAAYG,IAAK,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,KAAM,uiIAChG,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECoBO,MAAMW,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack:///./content/posts/2017/07/cmake_2017.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Windowsでcmakeを使う場合に外部ライブラリの解決がわりと困難。\\n\\ncmakeのfind_packageがうまくうごかないのである。Unix系であれば `CMAKE_INSTALL_PREFIX(/usr/local)` にインストールされた依存プロジェクトを発見できるし、足りなければインストールすることもできる。それに、`apt-get` とか `pacman` とかあるので、自分で全部ビルドするということはあまり必要なかったりする今日この頃です。Windowsにはそういうのがなかった(CMAKE_INSTALL_PREFIXはどこなのか)のだけど、最近出てきたvcpkgがそれをやってくれる。\\n\\nArUcoをvcpkgとcmakeでビルドする\\nということでvcpkgで外部ライブラリを構築し、一部をソースごとプロジェクトにコピーする方法でArUco(OpenCV)のビルドをやってみる。ArUcoのデバッグ版にアタッチしたり改造したりするつもりなので、opencvのモジュール版ArUcoではなく単体の方を使う。環境は、Windows10(64bit)にVisualStudio2017(C++)。\\nvcpkgを準備\\n\\n* https://github.com/Microsoft/vcpkg\\n\\nshell\\n> git clone https://github.com/Microsoft/vcpkg.git\\n> cd vcpkg\\nvcpkg> .\\\\bootstrap-vcpkg.bat\\n\\nvcpkgで64bit版のopencvをインストール\\nvcpkg> .\\\\vcpkg.exe install opencv:x64-windows\\n\\nvcpkg/installed/x64-windowsにinclude, lib, bin等がインストールされる。\\nvcpkgで64bit版のfreeglutをインストール\\nvcpkg> .\\\\vcpkg.exe install freeglut:x64-windows\\n\\n\\narucoのソースを入手\\nOpenCVのモジュール\\n\\nhttp://docs.opencv.org/trunk/d9/d6d/tutorial_table_of_content_aruco.html\\n\\nではなくてこっち。\\n\\nhttp://www.uco.es/investiga/grupos/ava/node/26\\nhttps://sourceforge.net/projects/aruco/files/\\n\\naruco-2.0.19.zipを手に入れた。\\nとりあえずビルドしてみる\\nvcpkgはd:/vcpkgにインストールされている。\\n\\nshell\\naruco-2.0.19> mkdir build\\naruco-2.0.19/build> cmake -D CMAKE_INSTALL_PREFIX=d:/vcpkg/installed/x64-windows -D OpenCVDir=d:/vcpkg/installed/x64-windows/share/opencv -D BUILD_GLSAMPLES=1 -G \\\"Visual Studio 15 2017 Win64\\\" ..\\n\\n\\naruco_test_glとaruco_test_markermap_glのビルドでエラーが出るのでちょっとコードを修正する。\\ngl.hより先にWindows.hをincludeしてあげる。\\n\\nc++\\n#ifdef __APPLE__\\n#include <GLUT/glut.h>\\n\\n#elif defined(_MSC_VER)\\n#include <Windows.h>\\n#include <GL/glut.h>\\n\\n#else\\n#include <GL/gl.h>\\n#include <GL/glut.h>\\n#endif\\n\\n\\nあとfreeglutのリンクををdebug, release振り分けのために、\\nCMakeLists.txtをちょっと改造。だいたいこういう感じ。\\n\\ncmake\\nIF (GLUT_FOUND)\\n\\tSTRING(REPLACE lib/freeglut.lib debug/lib/freeglutd.lib GLUT_glut_DEBUG_LIBRARY ${GLUT_glut_LIBRARY})\\n\\tMESSAGE(STATUS \\\"GLUT_glut_DEBUG_LIBRARY=${GLUT_glut_DEBUG_LIBRARY}\\\")\\n\\tset (OPENGL_LIBS  general\\n\\t\\t${OPENGL_gl_LIBRARY}\\n\\t\\t${OPENGL_glu_LIBRARY}\\n\\t\\toptimized ${GLUT_glut_LIBRARY}\\n\\t\\tdebug ${GLUT_glut_DEBUG_LIBRARY}\\n\\t\\t)\\nENDIF()\\n\\n\\nこの部分と連携する。\\nTARGET_LINK_LIBRARIES(aruco_test_gl ${OPENGL_LIBS})\\n\\nこれで、CMAKE_INSTALL_PREFIX/binにパスを通せばプログラムは動作する。\\narucoのテストデータを入手してwebcamで動作確認\\nテストデータを入手する。\\n\\nhttps://sourceforge.net/projects/aruco/files/\\n\\naruco-test-data-2.0.zipを手に入れた。\\nこの中のintrinsics.ymlを引数にして実行する(本来は、カメラキャリブレーションをしてintrinsics.ymlを自分のカメラ用に作成する必要がある)。\\naruco_test_gl.exe \\\"live\\\" \\\"path_to_intrinsics.yml\\\" 0.05\\naruco_test_glとarucoの入った小さいプロジェクト\\nArUcoを改造する予定。\\n\\nintrinsics.ymlを省略したり簡略化したい(fovyとaspectratioだけにするなど)\\n左手系(DirectXやUnity)に対応\\n\\nということで、arucoのソースを含めている。\\n\\nshell\\naruco_test\\n\\n  + CMakeLists.txt\\n\\n  + aruco_test_gl\\n    + CMakeLists.txt\\n    + aruco_test_gl.cpp(aruco-2.0.19/utils_gl/aruco_test_gl.cppをコピー)\\n\\n  + src(aruco-2.0.19/srcをコピー)\\n\\n\\nCMakeLists.txt\\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8)\\nPROJECT(aruco)\\n\\nFIND_PACKAGE(OpenCV REQUIRED )\\nSET (ARUCO_REQUIRED_LIBRARIES ${OpenCV_LIBS})\\nINCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})\\n\\nFIND_PACKAGE(OpenGL REQUIRED)\\n\\nFIND_PACKAGE(GLUT)\\nMESSAGE(STATUS \\\"GLUT_glut_LIBRARY=${GLUT_glut_LIBRARY}\\\")\\nSTRING(REPLACE lib/freeglut.lib debug/lib/freeglutd.lib GLUT_glut_DEBUG_LIBRARY ${GLUT_glut_LIBRARY})\\nMESSAGE(STATUS \\\"GLUT_glut_DEBUG_LIBRARY=${GLUT_glut_DEBUG_LIBRARY}\\\")\\nIF (GLUT_FOUND)\\n    set (OPENGL_LIBS  general\\n        ${OPENGL_gl_LIBRARY}\\n        ${OPENGL_glu_LIBRARY}\\n        optimized ${GLUT_glut_LIBRARY}\\n        debug ${GLUT_glut_DEBUG_LIBRARY}\\n        )\\nENDIF()\\n\\nADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)\\nSET(CMAKE_CXX_FLAGS \\\"/wd4819 /EHsc\\\")\\n\\nADD_SUBDIRECTORY(src)\\nADD_SUBDIRECTORY(utils_gl)\\n\\naruco_test_gl/CMakeLists.txt\\nINCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/src ${GNULIBS_INCLUDE_DIR})\\nLINK_LIBRARIES(${PROJECT_NAME} ${REQUIRED_LIBRARIES} )\\n\\nIF(OPENGL_LIBS)\\n    ADD_EXECUTABLE(aruco_test_gl\\n        aruco_test_gl.cpp\\n        )\\n    TARGET_LINK_LIBRARIES(aruco_test_gl ${OPENGL_LIBS})\\n\\n\\n以上で、arucoを例にvcpkgでopencvとfreeglutdを外部管理してcmakeでプロジェクトを取り廻す例を作った。\\n作業例。\\n\\nhttps://github.com/ousttrue/aruco_test\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","pre","code","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
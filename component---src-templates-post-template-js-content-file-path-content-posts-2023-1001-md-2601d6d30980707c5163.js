"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4148],{5224:function(e,n,t){t.r(n),t.d(n,{default:function(){return i}});var l=t(1151),a=t(7294);function s(e){const n=Object.assign({p:"p",h2:"h2",code:"code",a:"a",span:"span",h3:"h3",ul:"ul",li:"li"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"なんとなくtuiでskkを使いたくなった。\nできればソースを見て改造したりできるような小さい実装を探索。"),"\n",a.createElement(n.h2,null,"uim-fep"),"\n",a.createElement(n.p,null,"uim のソースに含まれている ",a.createElement(n.code,null,"uim-fep"),"。"),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://github.com/uim/uim/blob/master/fep/README.ja"},"https://github.com/uim/uim/blob/master/fep/README.ja")),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://github.com/uim/sigscheme"},"sigscheme")," という scheme 実装に依存して、\n更にこれが ",a.createElement(n.a,{href:"https://github.com/uim/libgcroots"},"libgcroots")," というガーベッジコレクターに依存している。\nビルド面で取りまわしが悪かった。\nすなおに ",a.createElement(n.code,null,"configure")," してもうまくいかなくて、",a.createElement(n.code,null,"make-wc.sh")," 経由ならばビルドできる。\n(どこかに書いてある。)"),"\n",a.createElement(n.p,null,"scheme できないのもあって uim-fep の採用は見送ったのだけど、\ntui frontend のソースは勉強になった。"),"\n",a.createElement(n.p,null,"上流の term に対しては、 escape sequence でスクロール領域を設定し、\n下流の pty に対しては1行小さく ",a.createElement(n.code,null,"struct winsize")," を指定するという技で\n一番下をステータスラインとして使用していた。"),"\n",a.createElement(n.p,null,"TERMINFO で以下のような感じ。"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c"><pre class="language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token function">tparm</span><span class="token punctuation">(</span>change_scroll_region<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",a.createElement(n.p,null,"これは、 ",a.createElement(n.code,null,"DECSTBM")," というエスケープシーケンスになるようだ。"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">ESC[&lt;t>;&lt;b>r</code></pre></div>'}}),"\n",a.createElement(n.p,null,"ただ、pty の出力のあいまにステータスライン描画とPreEdito描画を挿入する必要があるのだけど、\n変なタイミングで出力すると描画が乱れる。\n特にスクリーンエディタタイプのアプリでは不規則に画面全体が更新される可能性があるので、\n共存できないものがありそう。\nuim-fep はptyの出力内容をパースして状態を判定していそうだった。"),"\n",a.createElement(n.h2,null,"skkfep 発掘"),"\n",a.createElement(n.p,null,"検索すると Windows 版の別の skk がヒットするのだけど、 古の ",a.createElement(n.code,null,"skkfep")," がある。\nソースコードを探索していたのだが、 gentoo の ebuild から発見することができた。"),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"http://ftp.nara.wide.ad.jp/pub/Linux/gentoo-portage/app-i18n/skkfep/skkfep-0.87-r1.ebuild"},"http://ftp.nara.wide.ad.jp/pub/Linux/gentoo-portage/app-i18n/skkfep/skkfep-0.87-r1.ebuild")),"\n",a.createElement(n.p,null,"skkfep のホームページは無くなっているのだけど、ソースコードは元の url にひっそりと生きている。\nただ、ビルドしても ",a.createElement(n.code,null,"segmentation fault")," で動かなかった。\nこれは、拡張子を ",a.createElement(n.code,null,"c")," から ",a.createElement(n.code,null,"cpp")," に変えて、 ",a.createElement(n.code,null,"c")," がなんでも ",a.createElement(n.code,null,"int")," に解釈するのを\nやめることで、なんとなく動くようになった。\nどこかでメモリー破壊が起きていたのだろうけど、どこかはわからない。"),"\n",a.createElement(n.p,null,"ソース規模的に手に負えそうだったのでやってみることにした。"),"\n",a.createElement(n.h3,null,"skkfep のステータスラインの実装など"),"\n",a.createElement(n.p,null,"ステータスラインに関しては、 uim-fep と同じ手法ぽい(こっちの方が古い？)。\nTERMCAP で実装されていて、 ",a.createElement(n.code,null,"AIX"),", ",a.createElement(n.code,null,"SOLARIS")," 等のUNIXで動くようになっている。\nあと、ハードウェア的にステータスラインを持った機種向けと思われる分岐があった。"),"\n",a.createElement(n.p,null,"特徴的なのは ",a.createElement(n.code,null,"euc-jp|sjis|iso-2022-jp")," を前提としていて、\n入出力で文字コードの変換をしているところ。\nterm と pty で違う文字コードが使われることも想定しているぽい。"),"\n",a.createElement(n.h2,null,"yaskk"),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://github.com/uobikiemukot/yaskk"},"https://github.com/uobikiemukot/yaskk")),"\n",a.createElement(n.p,null,"もっと小さい実装としてこちらも参考になる。\nREADMEの状態遷移図も参考になる。"),"\n",a.createElement(n.p,null,"skkfep のキーマップがいっぱい(9つ？)あって変だなぁと思っていたのだが、\n入力モード(4つ)と変換モード(3つ)の2つがあることを途中で理解した。"),"\n",a.createElement(n.h2,null,"理想的には仮想画面"),"\n",a.createElement(n.p,null,"pty の出力を libvterm で受けて仮想画面に反映。\nステータスラインとPreEditの描画も仮想画面に合成。\n合成済みの仮想画面を term に描画というのがよさそう。\nこの方法なら変換候補のメニュー表示など、元画面の上書きができる。\n仮想画面を escape sequence 出力する機能については ftxui を使う構想。\n全体の実装量が増えるのだが、pty 出力の自前解析は不要になる。\nいちおう Windows でも動くを念頭に追いている。"),"\n",a.createElement(n.p,null,"しかし、良く考えると preedito の描画位置を決める情報が無さそうである。\nカーソル位置に暗黙的に出力するしか無い。\ncli ではうまくいく可能性が高いが、tui ではアプリによるんではないか。"),"\n",a.createElement(n.h2,null,"まだちゃんと動かず"),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://github.com/ousttrue/skkfep"},"https://github.com/ousttrue/skkfep")),"\n",a.createElement(n.p,null,"改造しすぎて動かなくなってしまった。\n(もともと utf-8 では一度もちゃんと動いていないので気にしていない w)\n再構成するべく改造を継続中。"),"\n",a.createElement(n.p,null,"なおこの記事は、nvim + skkeleton で書いております。\ntui で editor 以外で日本語を入力したいことはあまり無いので、全部 skkeleton でいいのでは？\nと思わなくもないが、 強いて言えばw3mを使うとき？"),"\n",a.createElement(n.h2,null,"参考"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"http://quruli.ivory.ne.jp/document/ddskk_14.2/skk_3.html"},"http://quruli.ivory.ne.jp/document/ddskk_14.2/skk_3.html")),"\n"))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(s,e)):s(e)},u=t(8678),p=t(4160),r=t(8736);const o={code:e=>{let{children:n,className:t}=e;return t?a.createElement(r.Z,{className:t},n):a.createElement("code",null,n)}};function m(e){let{data:n,children:t}=e;const s=n.mdx.frontmatter;return a.createElement(u.Z,null,a.createElement("h1",null,s.title),a.createElement("div",{className:"tags-index"},s.tags&&s.tags.length>0&&s.tags.map((e=>a.createElement(p.rU,{to:"/tags/"+e+"/",itemProp:"url"},a.createElement("button",null,e))))),a.createElement(l.Zo,{components:o},t))}function i(e){return a.createElement(m,e,a.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-post-template-js-content-file-path-content-posts-2023-1001-md-2601d6d30980707c5163.js.map
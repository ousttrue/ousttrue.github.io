{"version":3,"file":"component---src-templates-post-template-js-content-file-path-content-posts-2021-fall-sphinx-myst-md-46ca9f5101c8b253b8b9.js","mappings":"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","sources":["webpack:///./content/posts/2021/fall/sphinx_myst.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h1: \"h1\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Gizmo を作る過程で GeometryShader からやりなおしていたら、記憶が飛んでいたので\\n忘れてもいいように記録しておくことにした。\"), \"\\n\", React.createElement(_components.p, null, \"旧 \", React.createElement(_components.code, null, \"MinTriangle\"), \" リポジトリを作り直し。\"), \"\\n\", React.createElement(_components.p, null, \"http://ousttrue.github.io/d3d11_samples/\"), \"\\n\", React.createElement(_components.h1, null, \"MyST なかなかよい\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"reStructuredText\"), \" わりと苦手なので \", React.createElement(_components.code, null, \"sphinx\"), \" でも Markdown を使いたい派なのだが、\\n\", React.createElement(_components.a, {\n    href: \"https://myst-parser.readthedocs.io/en/latest/index.html\"\n  }, \"MyST\"), \" なる Sphinx 向け markdown 拡張ができていた。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://qiita.com/Tachy_Pochy/items/53866eea43d0ad93ea1d\"\n  }, \"Sphinx で使える Markdown 方言 'MyST'\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"sphinx directive の指定の仕方がシンプルで下のような感じ。markdown のシンタックスハイライトやフォーマッターに乗れるのでよい。\"), \"\\n\", React.createElement(\"pre\", null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">:width: 320px\\n:height: 320px</code></pre></div>\"\n    }\n  }), React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">basic/create_window\\nbasic/create_device\\nbasic/create_swapchain\\nbasic/render_target\\nbasic/compile_shader\\nbasic/basic_pipeline</code></pre></div>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"sphinx-autobuild\"), \" と github-actions による \", React.createElement(_components.code, null, \"gh-pages\"), \" デプロイを仕込んだらかなりよくなった。\"), \"\\n\", React.createElement(_components.h1, null, \"memo\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"https://github.com/wpilibsuite/sphinxext-remoteliteralinclude\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"git の revision と path 指定して include できないかしら。\\nサンプルコードにちょこちょこっと解説を書きたいのだが、サンプルコードが進化する場合に \", React.createElement(_components.code, null, \"literalinclude\"), \" だと場所がずれるのだ。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/fall/sphinx_myst.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","h1","a","ul","li","span","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
{"version":3,"file":"component---content-posts-2013-05-14-msgpack-asio-md-0fd4fa11682b4c8e76ae.js","mappings":"wHAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,OACNC,IAAK,QACJC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,8FAA+F,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,+CAAgD,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,MAAO,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gDAAiD,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,OAAQK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,eAAgB,aAAcI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,QAAS,MAAOI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,QAAS,MAAOI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,UAAW,qCAAsCI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,QAAS,gDAAiDI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,eAAgB,MAAOI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,kBAAmB,0DAA2DI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,QAAS,iIAAkII,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,QAAS,MAAOI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,eAAgB,6BAA8BI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,eAAgB,WAAYI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,eAAgB,4BAA6BI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,QAAS,mCAAoC,KAAMI,EAAAA,cAAoBR,EAAYK,IAAK,KAAMG,EAAAA,cAAoBR,EAAYI,KAAM,CACnsDK,UAAW,gBACV,i9BAAw9B,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,cAAeK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,WAAY,gCAAiCI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,oBAAqB,mCAAoCI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,sBAAuB,sBAAuBI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,kBAAmB,UAAWI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,kBAAmB,iBAAkBI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,SAAU,MAAOI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,WAAY,iDAAkDI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,WAAY,uEAAwEI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,oBAAqB,kBAAmBI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,sBAAuB,iBAC54D,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECiBO,MAAMa,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,C","sources":["webpack:///./content/posts/2013/05/14/msgpack-asio.md","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"msgpack-rpcのasio版を作成中\\n連休から始めていたmsgpack-rpcのバックエンドをasioに置き換えてWindowsでも動くようにする試みがやっと目処が立った。\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/msgpack-asiorpc\"), \"\\n\", React.createElement(_components.p, null, \"改め\"), \"\\n\", React.createElement(_components.p, null, \"https://github.com/ousttrue/msgpack-rpc-asio\"), \"\\n\", React.createElement(_components.p, null, \"当初は \", React.createElement(_components.code, null, \"msgpack-rpc\"), \" のバックエンドの \", React.createElement(_components.code, null, \"mpio\"), \" に \", React.createElement(_components.code, null, \"asio\"), \" の \", React.createElement(_components.code, null, \"kernel\"), \" を追加することで乗り切ろうとしたのだが、わりとすぐに頓挫した。\\n\", React.createElement(_components.code, null, \"mpio\"), \" のファイルディスクリプタでIOを管理するAPIがasioと合わないのですな。\\n次に、 \", React.createElement(_components.code, null, \"msgpack-rpc\"), \" の \", React.createElement(_components.code, null, \"mp::wavy::loop\"), \" をasioをラップしたクラスで置き換える作戦で\\n進めていたのだがだいぶ改造して構造が見えてきたところで、 \", React.createElement(_components.code, null, \"asio\"), \" との設計の違いをラップするのがめんどくさく\\nなってまた頓挫した。 http://dev.activebasic.com/egtra/2011/10/27/449/\\nを見ると簡単そうに見えるのだが功夫が足らないようだ。\\nで、上記の反省を踏まえて \", React.createElement(_components.code, null, \"asio\"), \" で \", React.createElement(_components.code, null, \"msgpack-rpc\"), \" を自由に実装することにした。\\nバイナリデータと \", React.createElement(_components.code, null, \"msgpack-rpc\"), \" の変換部分に \", React.createElement(_components.code, null, \"msgpack-rpc\"), \" のコードを借用して、\\nネットワーク通信部分は \", React.createElement(_components.code, null, \"asio\"), \" で普通に作成した。\\nだいたいこんな感じのAPIになる予定。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"static int server_method(int a, int b) { return a+b; }\\n\\nint main(int argc, char **argv) { \\n    int port=18080;\\n    // server\\n    boost::io_service server_io;\\n    msgpack::asiorpc::server s(server_io);\\n    s.add_handler(&server_method, \\\"add\\\");\\n    s.start(boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port));\\n    boost::thread server_thread([&server_io](){ server_io.run(); }\\n\\n    // client\\n    boost::io_service client_io;\\n    msgpack::asiorpc::session c(server_io); \\n    c.connect(boost::asio::ip::tcp::endpoint(boost::asio::ip::address::from_string(\\\"127.0.0.1\\\"), port);\\n    boost::thread client_thread([&client_io](){ client_io.run(); }\\n\\n    // request\\n    auto request=c.call(\\\"add\\\", 3, 4);\\n\\n    // blocking\\n    int result;\\n    request.convert(&result);\\n    std::cout << resut << std::endl;\\n\\n    // finalize\\n    client_io.stop();\\n    client_thread.join();\\n\\n    server_io.stop();\\n    server_thread.join();\\n\\n    return 0;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"原型はだいたいできて \", React.createElement(_components.code, null, \"Windows\"), \" でも動いたので続きを作りこんで行きたい。\\n今のうちに \", React.createElement(_components.code, null, \"msgpack::asiorpc\"), \" のネームスペースを変えたいような気もするがどうしようかね。\\n\", React.createElement(_components.code, null, \"msgpack::rpc::asio\"), \" とかか？うぅむ。\\nあと、クラスを \", React.createElement(_components.code, null, \"UpperCamelCase\"), \" で、関数を \", React.createElement(_components.code, null, \"lowerCamelCase\"), \" に変えよう思っていたが\\n\", React.createElement(_components.code, null, \"boost\"), \" 、 \", React.createElement(_components.code, null, \"msgpack\"), \" と一緒に使うときの見栄えを考慮するとスケークケースも一理あるな。\\nクラス名と同じ変数名(\", React.createElement(_components.code, null, \"request\"), \"とか)を使いたいときに変数名をreq等に変えることを強いられることがあるのが\\n気に入らないところではあるのだが。\\nプロジェクト名を \", React.createElement(_components.code, null, \"msgpack-rpc-asio\"), \"\\nに変えてネームスペースも \", React.createElement(_components.code, null, \"msgpack::rpc::asio\"), \" に変えることに今決めた。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","pre","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}
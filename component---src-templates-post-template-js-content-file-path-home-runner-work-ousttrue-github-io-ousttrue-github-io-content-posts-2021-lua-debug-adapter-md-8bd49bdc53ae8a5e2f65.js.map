{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2021-lua-debug-adapter-md-8bd49bdc53ae8a5e2f65.js","mappings":"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","sources":["webpack:///./content/posts/2021/lua_debug_adapter.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    span: \"span\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"nvim の nvim-dap で lua をデバッグするべく自分で書いてみた。\\n手頃なのが見つからなかったので。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/ousttrue/my_nvim/blob/master/luada.lua\"\n  }, \"https://github.com/ousttrue/my_nvim/blob/master/luada.lua\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://microsoft.github.io/debug-adapter-protocol/\"\n  }, \"https://microsoft.github.io/debug-adapter-protocol/\"), \" の自前実装。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">request</code>\"\n    }\n  }), \" のうち \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">initialize</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">launch</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setBreakpoints</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">configurationDone</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">threads</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stackTrace</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">scopes</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">variables</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">continue</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">next</code>\"\n    }\n  }), \" を実装した。\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">event</code>\"\n    }\n  }), \" のうち \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">initialized</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">exited</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stopped(breakpoint, step)</code>\"\n    }\n  }), \" を実装した。\"), \"\\n\", React.createElement(_components.p, null, \"これで最低限の breakpoint を設定して止める、ステップ実行、変数表示までできた。\"), \"\\n\", React.createElement(_components.p, null, \"ログレベルを設定して\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'dap'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">set_log_level</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'trace'</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"nvim の \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">:lua print(vim.fn.stdpath \\\"cache\\\")</code>\"\n    }\n  }), \" に配置される \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">dap.log</code>\"\n    }\n  }), \" を観察したらだいたいできた。\"), \"\\n\", React.createElement(_components.p, null, \"nvim-dap の設定は以下。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\"><span class=\\\"token keyword\\\">local</span> dap <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"dap\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">local</span> luada <span class=\\\"token operator\\\">=</span> vim<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nvim_get_var</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"my_nvim_root\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">..</span> <span class=\\\"token string\\\">\\\"/luada.lua\\\"</span>\\n\\n<span class=\\\"token comment\\\">-- luada adapter を登録</span>\\ndap<span class=\\\"token punctuation\\\">.</span>adapters<span class=\\\"token punctuation\\\">.</span>luada <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\">-- debug用のスクリプトを lua で実行し、標準入出力で DAP 通信(JSON-RPC)を開始する</span>\\n\\ttype <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"executable\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\tcommand <span class=\\\"token operator\\\">=</span> vim<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nvim_get_var</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"my_nvim_root\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">..</span> <span class=\\\"token string\\\">\\\"/neovim/.deps/usr/bin/luajit.exe\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\targs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> luada <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">-- filetype lua のときに luada を使用する。launch の引数</span>\\ndap<span class=\\\"token punctuation\\\">.</span>configurations<span class=\\\"token punctuation\\\">.</span>lua <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">{</span>\\n\\t\\tname <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"lua debug adapter\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\ttype <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"luada\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\trequest <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"launch\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\tprogram <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"${fileDirname}\\\\\\\\${file}\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\targs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">\\\"a\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"b\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"c\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">+---------+    DAP       +--------------------+\\n| nvim dap|------->stdin |luajit.exe luada.lua|\\n|         |&lt;-------stdout|                    |\\n+---------+              +--------------------+\\n                                              +==> loadscript(target_lua_script)</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"入出力を DAP で占有してしまうので、それでも大丈夫なスクリプトしかデバッグできない。\\n(print 関数は、stderr に出力するように退避したので、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">dap.log</code>\"\n    }\n  }), \" には出る)\"), \"\\n\", React.createElement(_components.p, null, \"素の standalone の lua interpreter で簡単にできる範囲で実装する方針。\"), \"\\n\", React.createElement(_components.h2, null, \"はまりポイント\"), \"\\n\", React.createElement(_components.h3, null, \"Windows 版 は、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">io.stdout</code>\"\n    }\n  }), \" で \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CR</code>\"\n    }\n  }), \" が \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CRLF</code>\"\n    }\n  }), \" に変換されるのを回避できない。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"c++\\\"><pre class=\\\"language-c++\\\"><code class=\\\"language-c++\\\">setmode(_fileno(stdout),_O_BINARY);</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"を lua で呼び出す手段が無い。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Content-Leght: 123\\\\n\\\\n</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"と出力して変換されるのに任せることにした。\"), \"\\n\", React.createElement(_components.h3, null, \"debug.sethook 内で coroutine.yield できない\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/54858455/lua-debug-hooks-seems-to-prevent-the-coroutine-from-working\"\n  }, \"https://stackoverflow.com/questions/54858455/lua-debug-hooks-seems-to-prevent-the-coroutine-from-working\")), \"\\n\", React.createElement(_components.p, null, \"breakpoint 等によるスクリプト中断を \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">coroutine.yield</code>\"\n    }\n  }), \" で実装しようとしたのだけど断念した。\\n(yield すると \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">suspend</code>\"\n    }\n  }), \" にならずに \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">dead</code>\"\n    }\n  }), \" になる)\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/tomblind/local-lua-debugger-vscode\"\n  }, \"https://github.com/tomblind/local-lua-debugger-vscode\"), \" は、coroutine で実装しているような気がするのだが・・・。\"), \"\\n\", React.createElement(_components.p, null, \"yield する代わりに main.loop をネストさせてそこで通信待機させることにした、\"), \"\\n\", React.createElement(_components.h3, null, \"launch で開始すると早すぎる\"), \"\\n\", React.createElement(_components.p, null, \"これは、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nvim-dap</code>\"\n    }\n  }), \" の実装の問題のような気がするが、\\ncapabilities に以下を設定して、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">configurationDone</code>\"\n    }\n  }), \" リクエストで自開始する。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"lua\\\"><pre class=\\\"language-lua\\\"><code class=\\\"language-lua\\\">supportsConfigurationDoneRequest <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">true</span><span class=\\\"token punctuation\\\">,</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"ToDo\"), \"\\n\", React.createElement(_components.p, null, \"luada リポジトリを作って vscode 拡張としてリリースする。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2021/lua_debug_adapter.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","span","h2","h3","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}
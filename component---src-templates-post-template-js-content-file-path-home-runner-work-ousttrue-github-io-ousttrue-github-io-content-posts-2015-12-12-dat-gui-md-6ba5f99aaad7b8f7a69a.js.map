{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2015-12-12-dat-gui-md-6ba5f99aaad7b8f7a69a.js","mappings":"+JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBP,EAAYG,IAAK,KAAMI,EAAAA,cAAoBP,EAAYI,KAAM,KAAM,m2DAChG,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,QCRA,SAASW,EAAYC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EACpC,OAAOJ,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAMK,EAAKE,IAAIC,YAAYC,OAAQT,EAAAA,cAAoBU,EAAAA,GAAa,KAAMJ,GACvJ,CACe,SAASK,EAAiBnB,GACvC,OAAOQ,EAAAA,cAAoBG,EAAcX,EAAOQ,EAAAA,cAAoBY,EAAqBpB,GAC3F,C,4HCuBO,MAAMqB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBf,GAC/B,MAAMgB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfd,EACFA,EAAWgB,GAGb,IAAIA,KAAsBhB,IAChC,CAACgB,EAAmBhB,GACzB,CAGA,MAAMiB,EAAc,CAAC,EAQd,SAASN,GAAY,WAACX,EAAU,SAAEO,EAAQ,qBAAEW,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAflB,EACHA,EAAW,CAAC,GACZA,GAAciB,EAEJF,EAAiBf,GAG5B,gBACLc,EAAWM,SACX,CAACC,MAAOF,GACRZ,EAEJ,C","sources":["webpack:///./content/posts/2015/12/12/dat_gui.md","webpack:///./src/templates/post-template.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.pre, null, React.createElement(_components.code, null, \"view typescript\\nview javascript\\n\\nたまにthree.jsのデモと連動して使われているGUIライブラリdat-guiを試してみる。\\n\\nhttps://code.google.com/p/dat-gui/\\nhttp://workshop.chromeexperiments.com/examples/gui/#1--Basic-Usage\\nhttps://stemkoski.github.io/Three.js/#gui\\n\\nライブラリを導入\\n> bower install dat.gui\\n> tsd query dat-gui -rosa install\\n\\ndat.GuiControllerのnameプロパティがtypings/dat-gui/dat-gui.d.tsで未定義だった。\\nbower_components/dat.gui/dat.gui.jsでは定義されていた。\\n    /**\\n    * The name of <code>GUI</code>. Used for folders. i.e\\n    * a folder's name\\n    * @type String\\n    */\\n    name: {\\n    get: function() {\\n        return params.name;\\n    },\\n    set: function(v) {\\n        // TODO Check for collisions among sibling folders\\n        params.name = v;\\n        if (title_row_name) {\\n        title_row_name.innerHTML = params.name;\\n        }\\n    }\\n    },\\n\\n既存のd.tsにプロパティを追加する(C# partial class的な)方法があるかどうかわからないので、\\ndat-gui.d.tsを改造することにした。\\ndat-gui.d.tsにnameプロパティを追加\\ndeclare module dat {\\n\\n    // 省略\\n\\n    export class Controller { // <- dat.gui.jsに合わせて名前変えてみた\\n        destroy(): void;\\n        fire(): Controller;\\n        getValue(): any;\\n        isModified(): boolean;\\n        listen(): Controller;\\n        min(n: number): Controller;\\n        remove(target: Controller): void;\\n        setValue(value: any): Controller;\\n        step(n: number): Controller;\\n        updateDisplay(): void;\\n        name(newName?: string): string; // <- これ追加した\\n        onChange: (value?: any) => void;\\n        onFinishChange: (value?: any) => void;\\n    }\\n}\\n\\nサンプルコードを元にtypescript化してみる\\nhttps://stemkoski.github.io/Three.js/GUI-Controller.html\\nをベースにした。\\njavscriptのコードをまるっとtsファイルにコピーして淡々と型を指定していく。\\ndat.guiの場所調整の件\\n\\nhttp://stackoverflow.com/questions/25653639/how-do-i-change-the-location-of-the-dat-gui-dropdown\\n\\nautoPlace: falseがポインツ。そのうえでdomにposition:abusolute\\nvar  gui = new dat.GUI( { autoPlace: false } );\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2015/12/12/dat_gui.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nfunction PostTempalte({data, children}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, data.mdx.frontmatter.title), React.createElement(MDXProvider, null, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","pre","code","_provideComponents","components","React","wrapper","MDXLayout","PostTempalte","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}
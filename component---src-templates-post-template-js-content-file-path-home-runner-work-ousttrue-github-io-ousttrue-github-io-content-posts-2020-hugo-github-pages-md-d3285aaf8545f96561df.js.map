{"version":3,"file":"component---src-templates-post-template-js-content-file-path-home-runner-work-ousttrue-github-io-ousttrue-github-io-content-posts-2020-hugo-github-pages-md-d3285aaf8545f96561df.js","mappings":"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","sources":["webpack:///./content/posts/2020/hugo-github-pages.md","webpack:///./src/templates/post-template.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://docs.github.com/ja/github/working-with-github-pages/about-github-pages\"\n  }, \"https://docs.github.com/ja/github/working-with-github-pages/about-github-pages\")), \"\\n\", React.createElement(_components.h2, null, \"プロジェクトサイト (gh-pages)\"), \"\\n\", React.createElement(_components.p, null, \"各プロジェクトに作れる。\"), \"\\n\", React.createElement(_components.p, null, \"URLは、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">http(s)://&lt;user>.github.io/&lt;repository></code>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, \"各リポジトリの、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gh-pages</code>\"\n    }\n  }), \" ブランチでサイトをホストする。\\nhugo で運用するなら、\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">master</code>\"\n    }\n  }), \" ブランチに hugo project を commit する。\\nhugo のビルド結果を \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gh-pages</code>\"\n    }\n  }), \" に commit する。\\n手間を省くために \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">master</code>\"\n    }\n  }), \" への push をトリガーに \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">travis-CI</code>\"\n    }\n  }), \" 等で自動でビルドして、結果を gh-pages に push する。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yml\\\"><pre class=\\\"language-yml\\\"><code class=\\\"language-yml\\\"><span class=\\\"token comment\\\"># .travis.yml</span>\\n<span class=\\\"token key atrule\\\">deploy</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">provider</span><span class=\\\"token punctuation\\\">:</span> pages\\n  <span class=\\\"token key atrule\\\">skip_cleanup</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n  <span class=\\\"token key atrule\\\">github_token</span><span class=\\\"token punctuation\\\">:</span> $GITHUB_TOKEN  <span class=\\\"token comment\\\"># Set in the settings page of your repository, as a secure variable</span>\\n  <span class=\\\"token key atrule\\\">keep_history</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n  <span class=\\\"token key atrule\\\">target_branch</span><span class=\\\"token punctuation\\\">:</span> gh<span class=\\\"token punctuation\\\">-</span>pages <span class=\\\"token comment\\\"># default</span>\\n  <span class=\\\"token key atrule\\\">local-dir</span><span class=\\\"token punctuation\\\">:</span> public\\n  <span class=\\\"token key atrule\\\">on</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">branch</span><span class=\\\"token punctuation\\\">:</span> master <span class=\\\"token comment\\\"># master branch が push されたのをトリガーに public フォルダを gh-pages ブランチに pushする</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"ユーザーサイト\"), \"\\n\", React.createElement(_components.p, null, \"ユーザー毎にひとつだけ作ることのできるリポジトリ。\"), \"\\n\", React.createElement(_components.p, null, \"URLは、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">http(s)://&lt;user>.github.io</code>\"\n    }\n  }), \" 。\"), \"\\n\", React.createElement(_components.p, null, \"これ、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gh-pages</code>\"\n    }\n  }), \" と URL が重複するときがありそうな。\"), \"\\n\", React.createElement(_components.p, null, \"repository \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">${user_name}.github.io</code>\"\n    }\n  }), \" の場合 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">master</code>\"\n    }\n  }), \" が \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gh-pages</code>\"\n    }\n  }), \" の役割を果たす。\\nこの名前にすると、サイトをホストする用の特殊なリポジトリになる様子。\"), \"\\n\", React.createElement(_components.p, null, \"hugo で運用するなら \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gh-pages</code>\"\n    }\n  }), \" ブランチ運用と逆になる。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yml\\\"><pre class=\\\"language-yml\\\"><code class=\\\"language-yml\\\"><span class=\\\"token key atrule\\\">deploy</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">provider</span><span class=\\\"token punctuation\\\">:</span> pages\\n  <span class=\\\"token key atrule\\\">skip_cleanup</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n  <span class=\\\"token key atrule\\\">github_token</span><span class=\\\"token punctuation\\\">:</span> $GITHUB_TOKEN  <span class=\\\"token comment\\\"># Set in the settings page of your repository, as a secure variable</span>\\n  <span class=\\\"token key atrule\\\">keep_history</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean important\\\">true</span>\\n  <span class=\\\"token key atrule\\\">target_branch</span><span class=\\\"token punctuation\\\">:</span> master\\n  <span class=\\\"token key atrule\\\">local_dir</span><span class=\\\"token punctuation\\\">:</span> public\\n  <span class=\\\"token key atrule\\\">on</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">branch</span><span class=\\\"token punctuation\\\">:</span> hugo <span class=\\\"token comment\\\"># hugo branch が push されたのをトリガーに public フォルダを master ブランチにpushする</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"default branch を hugo の方に変えてから、git clone すると作業しやすい。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/ousttrue.github.io/ousttrue.github.io/content/posts/2020/hugo-github-pages.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout.js\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport PrismSyntaxHighlight from \"../components/prism-syntax-highlight\";\nconst components = {\n  code: ({children, className}) => {\n    return className ? React.createElement(PrismSyntaxHighlight, {\n      className: className\n    }, children) : React.createElement(\"code\", null, children);\n  }\n};\nfunction PostTempalte({data, children}) {\n  const frontmatter = data.mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"h1\", null, frontmatter.title), React.createElement(\"div\", {\n    className: \"tags-index\"\n  }, frontmatter.tags && frontmatter.tags.length > 0 && frontmatter.tags.map(tag => {\n    return React.createElement(Link, {\n      to: `/tags/${tag}/`,\n      itemProp: \"url\"\n    }, React.createElement(\"button\", null, tag));\n  })), React.createElement(MDXProvider, {\n    components: components\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTempalte, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","h2","span","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","code","_ref","children","className","PrismSyntaxHighlight","PostTempalte","_ref2","data","frontmatter","mdx","Layout","title","tags","length","map","tag","Link","to","itemProp","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}